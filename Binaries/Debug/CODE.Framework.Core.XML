<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CODE.Framework.Core</name>
    </assembly>
    <members>
        <member name="T:CODE.Framework.Core.ComponentModel.IDataBindingRefresher">
            <summary>
            Interface to be implemented by data sources that may
            send update messages to bound controls.
            </summary>
        </member>
        <member name="E:CODE.Framework.Core.ComponentModel.IDataBindingRefresher.DataSourceChanged">
            <summary>
            Event that is to be raised when source updates
            </summary>
        </member>
        <member name="T:CODE.Framework.Core.ComponentModel.DataLoadController">
            <summary>
            Abstract data load controller class used to define data environments for forms.
            </summary>
        </member>
        <member name="T:CODE.Framework.Core.ComponentModel.IDataLoadController">
            <summary>
            Basic data controller interface
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.IDataLoadController.Configure">
            <summary>
            Configures this instance.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.IDataLoadController.NewContents">
            <summary>
            This method gets called whenever new content needs to be created (such as a new entity)
            </summary>
            <returns>Data object</returns>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.IDataLoadController.LoadContents">
            <summary>
            This method is invoked whenever data needs to be loaded (including reloading data)
            </summary>
            <returns>Data object</returns>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.IDataLoadController.LoadSecondaryData">
            <summary>
            Called whenever secondary data needs to be loaded
            </summary>
            <returns>Data object</returns>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.IDataLoadController.SetEntityType``1">
            <summary>
            Defines an entity type that is to be loaded
            </summary>
            <typeparam name="TType">The type of the type.</typeparam>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.IDataLoadController.SetDataLoader(CODE.Framework.Core.ComponentModel.IEditDataLoader)">
            <summary>
            Defines the data loader object this controller targets
            </summary>
            <param name="loader">The loader.</param>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.IDataLoadController.AutoLoad">
            <summary>
            Performs an automatic load operation, if possible
            </summary>
            <returns>Data object or data object list</returns>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.IDataLoadController.AutoNew">
            <summary>
            Performs an automatic new operation, if possible
            </summary>
            <returns>Data object or data object list</returns>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.IDataLoadController.AutoDelete">
            <summary>
            Performs an auto-delete on the current data entity
            </summary>
            <returns>True or false</returns>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.IDataLoadController.AutoSave">
            <summary>
            Performs an auto-save on the current data entity
            </summary>
            <returns>True or false</returns>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.IDataLoadController.AutoVerify">
            <summary>
            Performs an auto-verification on the current data entity
            </summary>
            <returns>True or false</returns>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.IDataLoadController.PerformAutoNew">
            <summary>
            Should the object perform auto news based on the entity type specified?
            </summary>
            <remarks>This property only has an impact after an entity type has been set by means of the SetEntityType() method</remarks>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.IDataLoadController.PerformAutoLoad">
            <summary>
            Should the object perform auto loads based on the entity type specified?
            </summary>
            <remarks>This property only has an impact after an entity type has been set by means of the SetEntityType() method</remarks>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.IDataLoadController.PerformAutoDelete">
            <summary>
            Should the object perform auto deletes based on the entity type specified?
            </summary>
            <remarks>This property only has an impact after an entity type has been set by means of the SetEntityType() method</remarks>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.IDataLoadController.PerformAutoSave">
            <summary>
            Should the object perform auto saves based on the entity type specified?
            </summary>
            <remarks>This property only has an impact after an entity type has been set by means of the SetEntityType() method</remarks>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.IDataLoadController.PerformAutoVerify">
            <summary>
            Should the object perform auto verifies based on the entity type specified?
            </summary>
            <remarks>This property only has an impact after an entity type has been set by means of the SetEntityType() method</remarks>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.DataLoadController.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.ComponentModel.DataLoadController"/> class.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.DataLoadController.Configure">
            <summary>
            Configures this instance.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.DataLoadController.NewContents">
            <summary>
            This method gets called whenever new content needs to be created (such as a new entity)
            </summary>
            <returns>Data object</returns>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.DataLoadController.LoadContents">
            <summary>
            This method is invoked whenever data needs to be loaded (including reloading data)
            </summary>
            <returns>Data object</returns>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.DataLoadController.LoadSecondaryData">
            <summary>
            Called whenever secondary data needs to be loaded
            </summary>
            <returns>Data object</returns>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.DataLoadController.SetEntityType``1">
            <summary>
            Defines an entity type that is to be loaded
            </summary>
            <typeparam name="TType">The type of the type.</typeparam>
        </member>
        <member name="F:CODE.Framework.Core.ComponentModel.DataLoadController._loader">
            <summary>
            Internal reference to the data loader
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.DataLoadController.GetInternalLoader">
            <summary>
            Returns an instance of an automatically created internal loader.
            </summary>
            <remarks>
            Internal loaders are generally used for unit testing only. It is often useful to override 
            this method to return a different loader. The loader is generally only used to return parameters
            that may be used during loading. To do so, subclass the default loader (TestEditDataLoader)
            or implement the IEditDataLoader interface and return it from this method. The controller will 
            then automatically use that loader.
            </remarks>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.DataLoadController.SetDataLoader(CODE.Framework.Core.ComponentModel.IEditDataLoader)">
            <summary>
            Defines the data loader object this controller targets
            </summary>
            <param name="loader">The loader.</param>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.DataLoadController.GetParameterValue``1(System.String)">
            <summary>
            Retrieves the value of a parameter by name
            </summary>
            <param name="parameterName">Parameter name</param>
            <returns>Parameter value</returns>
            <typeparam name="TType">Expected return type</typeparam>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.DataLoadController.GetParameterValue(System.String)">
            <summary>
            Retrieves the value of a parameter by name
            </summary>
            <param name="parameterName">Parameter name</param>
            <returns>Parameter value</returns>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.DataLoadController.SetParameterValue``1(System.String,``0)">
            <summary>
            Sets the parameter value (and adds the key to the collection if need be).
            </summary>
            <typeparam name="TType">The type of the type.</typeparam>
            <param name="parameterName">Name of the parameter.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.DataLoadController.ParameterExists(System.String)">
            <summary>
            Returns true if the specified parameter exists
            </summary>
            <param name="parameterName">Name of the parameter.</param>
            <returns>True or false</returns>
        </member>
        <member name="F:CODE.Framework.Core.ComponentModel.DataLoadController._loadDataMethod">
            <summary>
            For internal use only (cache)
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.ComponentModel.DataLoadController._newDataMethod">
            <summary>
            For internal use only (cache)
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.ComponentModel.DataLoadController._entityType">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.DataLoadController.AutoLoad">
            <summary>
            Performs an automatic load operation, if possible
            </summary>
            <returns>Data object or data object list</returns>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.DataLoadController.AutoNew">
            <summary>
            Performs an automatic new operation, if possible
            </summary>
            <returns>Data object or data object list</returns>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.DataLoadController.AutoDelete">
            <summary>
            Performs an auto-delete on the current data entity
            </summary>
            <returns>True or false</returns>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.DataLoadController.AutoSave">
            <summary>
            Performs an auto-save on the current data entity
            </summary>
            <returns>True or false</returns>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.DataLoadController.AutoVerify">
            <summary>
            Performs an auto-verification on the current data entity
            </summary>
            <returns>True or false</returns>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.DataLoadController.Loader">
            <summary>
            Internal reference to the data loader
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.DataLoadController.PerformAutoNew">
            <summary>
            Should the object perform auto news based on the entity type specified?
            </summary>
            <value></value>
            <remarks>This property only has an impact after an entity type has been set by means of the SetEntityType() method</remarks>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.DataLoadController.PerformAutoLoad">
            <summary>
            Should the object perform auto loads based on the entity type specified?
            </summary>
            <value></value>
            <remarks>This property only has an impact after an entity type has been set by means of the SetEntityType() method</remarks>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.DataLoadController.PerformAutoDelete">
            <summary>
            Should the object perform auto deletes based on the entity type specified?
            </summary>
            <value></value>
            <remarks>This property only has an impact after an entity type has been set by means of the SetEntityType() method</remarks>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.DataLoadController.PerformAutoSave">
            <summary>
            Should the object perform auto saves based on the entity type specified?
            </summary>
            <value></value>
            <remarks>This property only has an impact after an entity type has been set by means of the SetEntityType() method</remarks>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.DataLoadController.PerformAutoVerify">
            <summary>
            Should the object perform auto verifies based on the entity type specified?
            </summary>
            <value></value>
            <remarks>This property only has an impact after an entity type has been set by means of the SetEntityType() method</remarks>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.DataLoadController.Status">
            <summary>
            Gets the status.
            </summary>
            <value>The status.</value>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.DataLoadController.Parameters">
            <summary>
            Parameters collection (thread-safe)
            </summary>
            <remarks>
            The dictionary returned by this property is made thread-safe by means of cloning.
            This means that every time this collection is accessed, a copy of the original (internal)
            collection is created. If you then interact with the collection, it will not update the
            original parameters. Therefore, most interaction with this collection should
            not happen through this property, but by means of the SetParameterValue()/GetParameterValue() 
            methods instead.
            </remarks>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.DataLoadController.MainEntity">
            <summary>
            Main entity created by auto-load or auto-new
            </summary>
            <value>The main entity.</value>
        </member>
        <member name="T:CODE.Framework.Core.ComponentModel.DataLoadControllerCollection">
            <summary>
            Collection of data loader controllers
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.ComponentModel.DataLoadControllerCollection._loader">
            <summary>
            Internal reference to the controller
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.DataLoadControllerCollection.#ctor(CODE.Framework.Core.ComponentModel.IEditDataLoader)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.ComponentModel.DataLoadControllerCollection"/> class.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.DataLoadControllerCollection.Add(CODE.Framework.Core.ComponentModel.IDataLoadController)">
            <summary>
            Adds a data loader controller
            </summary>
            <param name="controller">The controller.</param>
        </member>
        <member name="T:CODE.Framework.Core.ComponentModel.TestEditDataLoader">
            <summary>
            Data loader class that is automatically invoked for stand-alone unit testing scenarios
            </summary>
        </member>
        <member name="T:CODE.Framework.Core.ComponentModel.IEditDataLoader">
            <summary>
            Interfaces used by secondary data loader objects
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.IEditDataLoader.SetHost(CODE.Framework.Core.ComponentModel.IDataEditHandler)">
            <summary>
            Sets the host object used to load data
            </summary>
            <param name="host">Host</param>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.IEditDataLoader.Save">
            <summary>
            Saves all the current data
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.IEditDataLoader.Save(System.EventHandler{CODE.Framework.Core.ComponentModel.SavedEventArgs},System.EventHandler{CODE.Framework.Core.ComponentModel.SavedEventArgs})">
            <summary>
            Saves all the current data
            </summary>
            <param name="successCallback">Callback for success</param>
            <param name="failureCallback">Callback for failure</param>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.IEditDataLoader.Verify">
            <summary>
            Verifies the current data
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.IEditDataLoader.Verify(System.EventHandler{CODE.Framework.Core.ComponentModel.VerifiedEventArgs},System.EventHandler{CODE.Framework.Core.ComponentModel.VerifiedEventArgs})">
            <summary>
            Verifies the current data
            </summary>
            <param name="successCallback">Callback for success</param>
            <param name="failureCallback">Callback for failure</param>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.IEditDataLoader.Load(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Loads data
            </summary>
            <param name="parameters">Parameters collection</param>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.IEditDataLoader.Load(System.Collections.Generic.Dictionary{System.String,System.Object},System.Boolean,System.Boolean)">
            <summary>
            Loads data
            </summary>
            <param name="parameters">Parameters collection</param>
            <param name="loadPrimaryData">if set to <c>true</c> [load primary data].</param>
            <param name="loadSecondaryData">if set to <c>true</c> [load secondary data].</param>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.IEditDataLoader.New(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Creates new data 
            </summary>
            <param name="parameters">Parameters collection</param>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.IEditDataLoader.New(System.Collections.Generic.Dictionary{System.String,System.Object},System.Boolean,System.Boolean)">
            <summary>
            Creates new data 
            </summary>
            <param name="parameters">Parameters collection</param>
            <param name="newPrimaryData">if set to <c>true</c> [new primary data].</param>
            <param name="loadSecondaryData">if set to <c>true</c> [load secondary data].</param>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.IEditDataLoader.Delete">
            <summary>
            Deletes data
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.IEditDataLoader.GetParameterValue``1(System.String)">
            <summary>
            Retrieves the value of a parameter by name
            </summary>
            <param name="parameterName">Parameter name</param>
            <returns>Parameter value</returns>
            <typeparam name="TType">Expected return type</typeparam>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.IEditDataLoader.GetParameterValue(System.String)">
            <summary>
            Retrieves the value of a parameter by name
            </summary>
            <param name="parameterName">Parameter name</param>
            <returns>Parameter value</returns>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.IEditDataLoader.SetParameterValue``1(System.String,``0)">
            <summary>
            Sets the parameter value (and adds the key to the collection if need be).
            </summary>
            <typeparam name="TType">The type of the type.</typeparam>
            <param name="parameterName">Name of the parameter.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.IEditDataLoader.ParameterExists(System.String)">
            <summary>
            Returns true if the specified parameter exists
            </summary>
            <param name="parameterName">Name of the parameter.</param>
            <returns>True or false</returns>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.IEditDataLoader.SetEntityType``1">
            <summary>
            Sets the main entity type used for auto-loading of content.
            </summary>
            <typeparam name="TType">Data entity type</typeparam>
            <remarks>
            Any object can be set as the main data entity type. However, 
            to perform auto-data-handling, the object must have certain characteristics.
            
            New data creation:
            The type must have a static NewEntity() method (no parameters).
            
            Data loading:
            The type must have a static LoadEntity(Guid) method, -- and/or --
            The type must have a static LoadEntity(int) method, -- and/or --
            The type must have a static LoadEntity(string) method.
            
            Data saving:
            The type must implement ISavable (and probably should implement IVerifyable)
            
            Data verification:
            The type must implement IVerifyable
            
            Data delition:
            The type must implement IDeletable
            </remarks>
        </member>
        <member name="E:CODE.Framework.Core.ComponentModel.IEditDataLoader.Saved">
            <summary>
            Saved event
            </summary>
        </member>
        <member name="E:CODE.Framework.Core.ComponentModel.IEditDataLoader.Verified">
            <summary>
            Verified event
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.IEditDataLoader.Status">
            <summary>
            Content status
            </summary>
        </member>
        <member name="E:CODE.Framework.Core.ComponentModel.IEditDataLoader.ContentStatusChanged">
            <summary>
            Content status changed event
            </summary>
        </member>
        <member name="E:CODE.Framework.Core.ComponentModel.IEditDataLoader.Loaded">
            <summary>
            Loaded event
            </summary>
        </member>
        <member name="E:CODE.Framework.Core.ComponentModel.IEditDataLoader.Newed">
            <summary>
            Newed event
            </summary>
        </member>
        <member name="E:CODE.Framework.Core.ComponentModel.IEditDataLoader.Deleted">
            <summary>
            Deleted event
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.IEditDataLoader.MultiThreaded">
            <summary>
            Should data operations be performed multi threaded?
            </summary>
            <remarks>
            This property shall always default to true.
            </remarks>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.IEditDataLoader.PrimaryData">
            <summary>
            Array list (collection) of primary data objects
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.IEditDataLoader.SecondaryData">
            <summary>
            Array list (collection) of secondary data objects
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.IEditDataLoader.Parameters">
            <summary>
            Parameters collection (thread-safe)
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.IEditDataLoader.MainDataEntity">
            <summary>
            Reference to the main data entity object
            </summary>
            <remarks>
            This object typically is the first object in the primary data collection
            </remarks>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.IEditDataLoader.PerformAutoNew">
            <summary>
            Should the object perform auto news based on the entity type specified?
            </summary>
            <remarks>This property only has an impact after an entity type has been set by means of the SetEntityType() method</remarks>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.IEditDataLoader.PerformAutoLoad">
            <summary>
            Should the object perform auto loads based on the entity type specified?
            </summary>
            <remarks>This property only has an impact after an entity type has been set by means of the SetEntityType() method</remarks>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.IEditDataLoader.PerformAutoSave">
            <summary>
            Should the object perform auto saves based on the entity type specified?
            </summary>
            <remarks>This property only has an impact after an entity type has been set by means of the SetEntityType() method</remarks>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.IEditDataLoader.PerformAutoVerify">
            <summary>
            Should the object perform auto verifies based on the entity type specified?
            </summary>
            <remarks>This property only has an impact after an entity type has been set by means of the SetEntityType() method</remarks>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.IEditDataLoader.PerformAutoDelete">
            <summary>
            Should the object perform auto deletes based on the entity type specified?
            </summary>
            <remarks>This property only has an impact after an entity type has been set by means of the SetEntityType() method</remarks>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.IEditDataLoader.DataLoadControllers">
            <summary>
            Gets the data load controllers.
            </summary>
            <value>The data load controllers.</value>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.TestEditDataLoader.SetHost(CODE.Framework.Core.ComponentModel.IDataEditHandler)">
            <summary>
            Sets the host object used to load data
            </summary>
            <param name="host">Host</param>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.TestEditDataLoader.Save">
            <summary>
            Saves all the current data
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.TestEditDataLoader.Save(System.EventHandler{CODE.Framework.Core.ComponentModel.SavedEventArgs},System.EventHandler{CODE.Framework.Core.ComponentModel.SavedEventArgs})">
            <summary>
            Saves all the current data
            </summary>
            <param name="successCallback">Callback for success</param>
            <param name="failureCallback">Callback for failure</param>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.TestEditDataLoader.Verify">
            <summary>
            Verifies the current data
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.TestEditDataLoader.Verify(System.EventHandler{CODE.Framework.Core.ComponentModel.VerifiedEventArgs},System.EventHandler{CODE.Framework.Core.ComponentModel.VerifiedEventArgs})">
            <summary>
            Verifies the current data
            </summary>
            <param name="successCallback">Callback for success</param>
            <param name="failureCallback">Callback for failure</param>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.TestEditDataLoader.Load(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Loads data
            </summary>
            <param name="parameters">Parameters collection</param>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.TestEditDataLoader.Load(System.Collections.Generic.Dictionary{System.String,System.Object},System.Boolean,System.Boolean)">
            <summary>
            Loads data
            </summary>
            <param name="parameters">Parameters collection</param>
            <param name="loadPrimaryData">if set to <c>true</c> [load primary data].</param>
            <param name="loadSecondaryData">if set to <c>true</c> [load secondary data].</param>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.TestEditDataLoader.New(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Creates new data
            </summary>
            <param name="parameters">Parameters collection</param>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.TestEditDataLoader.New(System.Collections.Generic.Dictionary{System.String,System.Object},System.Boolean,System.Boolean)">
            <summary>
            Creates new data
            </summary>
            <param name="parameters">Parameters collection</param>
            <param name="newPrimaryData">if set to <c>true</c> [new primary data].</param>
            <param name="loadSecondaryData">if set to <c>true</c> [load secondary data].</param>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.TestEditDataLoader.Delete">
            <summary>
            Deletes data
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.TestEditDataLoader.GetParameterValue``1(System.String)">
            <summary>
            Retrieves the value of a parameter by name
            </summary>
            <typeparam name="TType">Expected return type</typeparam>
            <param name="parameterName">Parameter name</param>
            <returns>Parameter value</returns>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.TestEditDataLoader.GetParameterValue(System.String)">
            <summary>
            Retrieves the value of a parameter by name
            </summary>
            <param name="parameterName">Parameter name</param>
            <returns>Parameter value</returns>
        </member>
        <member name="F:CODE.Framework.Core.ComponentModel.TestEditDataLoader._parameters">
            <summary>
            Internal dictionary
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.TestEditDataLoader.SetParameterValue``1(System.String,``0)">
            <summary>
            Sets the parameter value (and adds the key to the collection if need be).
            </summary>
            <typeparam name="TType">The type of the type.</typeparam>
            <param name="parameterName">Name of the parameter.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.TestEditDataLoader.ParameterExists(System.String)">
            <summary>
            Returns true if the specified parameter exists
            </summary>
            <param name="parameterName">Name of the parameter.</param>
            <returns>True or false</returns>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.TestEditDataLoader.SetEntityType``1">
            <summary>
            Sets the main entity type used for auto-loading of content.
            </summary>
            <typeparam name="TType">Data entity type</typeparam>
            <remarks>
            Any object can be set as the main data entity type. However,
            to perform auto-data-handling, the object must have certain characteristics.
            New data creation:
            The type must have a static NewEntity() method (no parameters).
            Data loading:
            The type must have a static LoadEntity(Guid) method, -- and/or --
            The type must have a static LoadEntity(int) method, -- and/or --
            The type must have a static LoadEntity(string) method.
            Data saving:
            The type must implement ISavable (and probably should implement IVerifyable)
            Data verification:
            The type must implement IVerifyable
            Data delition:
            The type must implement IDeletable
            </remarks>
        </member>
        <member name="F:CODE.Framework.Core.ComponentModel.TestEditDataLoader._dataLoadControllers">
            <summary>
            Internal reference for data controllers
            </summary>
        </member>
        <member name="E:CODE.Framework.Core.ComponentModel.TestEditDataLoader.Saved">
            <summary>
            Saved event
            </summary>
        </member>
        <member name="E:CODE.Framework.Core.ComponentModel.TestEditDataLoader.Verified">
            <summary>
            Verified event
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.TestEditDataLoader.Status">
            <summary>
            Content status
            </summary>
            <value></value>
        </member>
        <member name="E:CODE.Framework.Core.ComponentModel.TestEditDataLoader.ContentStatusChanged">
            <summary>
            Content status changed event
            </summary>
        </member>
        <member name="E:CODE.Framework.Core.ComponentModel.TestEditDataLoader.Loaded">
            <summary>
            Loaded event
            </summary>
        </member>
        <member name="E:CODE.Framework.Core.ComponentModel.TestEditDataLoader.Newed">
            <summary>
            Newed event
            </summary>
        </member>
        <member name="E:CODE.Framework.Core.ComponentModel.TestEditDataLoader.Deleted">
            <summary>
            Deleted event
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.TestEditDataLoader.MultiThreaded">
            <summary>
            Should data operations be performed multi threaded?
            </summary>
            <value></value>
            <remarks>
            This property shall always default to true.
            </remarks>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.TestEditDataLoader.PrimaryData">
            <summary>
            Array list (collection) of primary data objects
            </summary>
            <value></value>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.TestEditDataLoader.SecondaryData">
            <summary>
            Array list (collection) of secondary data objects
            </summary>
            <value></value>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.TestEditDataLoader.Parameters">
            <summary>
            Parameters collection (thread-safe)
            </summary>
            <value></value>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.TestEditDataLoader.MainDataEntity">
            <summary>
            Reference to the main data entity object
            </summary>
            <value></value>
            <remarks>
            This object typically is the first object in the primary data collection
            </remarks>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.TestEditDataLoader.PerformAutoNew">
            <summary>
            Should the object perform auto news based on the entity type specified?
            </summary>
            <value></value>
            <remarks>This property only has an impact after an entity type has been set by means of the SetEntityType() method</remarks>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.TestEditDataLoader.PerformAutoLoad">
            <summary>
            Should the object perform auto loads based on the entity type specified?
            </summary>
            <value></value>
            <remarks>This property only has an impact after an entity type has been set by means of the SetEntityType() method</remarks>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.TestEditDataLoader.PerformAutoSave">
            <summary>
            Should the object perform auto saves based on the entity type specified?
            </summary>
            <value></value>
            <remarks>This property only has an impact after an entity type has been set by means of the SetEntityType() method</remarks>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.TestEditDataLoader.PerformAutoVerify">
            <summary>
            Should the object perform auto verifies based on the entity type specified?
            </summary>
            <value></value>
            <remarks>This property only has an impact after an entity type has been set by means of the SetEntityType() method</remarks>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.TestEditDataLoader.PerformAutoDelete">
            <summary>
            Should the object perform auto deletes based on the entity type specified?
            </summary>
            <value></value>
            <remarks>This property only has an impact after an entity type has been set by means of the SetEntityType() method</remarks>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.TestEditDataLoader.DataLoadControllers">
            <summary>
            Gets the data load controllers.
            </summary>
            <value>The data load controllers.</value>
        </member>
        <member name="T:CODE.Framework.Core.ComponentModel.IDataHandler">
            <summary>
            Basic definition of an interface that can be applied to
            a UI container (such as a form) that is intended to load data.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.IDataHandler.InitialLoad(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            This method gets called when the pane first loads.
            Parameters will be passed to this method.
            </summary>
            <param name="queryString">Name value collection of parameters</param>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.IDataHandler.InitialLoad(System.Guid)">
            <summary>
            This method gets called when the pane first loads.
            Parameters will be passed to this method.
            </summary>
            <param name="mainEntityId">Primary Key of the entity that is to be loaded</param>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.IDataHandler.InitialLoad(System.Int32)">
            <summary>
            This method gets called when the pane first loads.
            Parameters will be passed to this method.
            </summary>
            <param name="mainEntityId">Primary Key of the entity that is to be loaded</param>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.IDataHandler.InitialLoad(System.String)">
            <summary>
            This method gets called when the pane first loads.
            Parameters will be passed to this method.
            </summary>
            <param name="mainEntityId">Primary Key of the entity that is to be loaded</param>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.IDataHandler.InitialNew">
            <summary>
            Loads the form and indicates that the user intends to create a new item.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.IDataHandler.InitialNew(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Loads the form and indicates that the user intends to create a new item.
            </summary>
            <param name="queryString">Name value collection of parameters</param>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.IDataHandler.LoadContents">
            <summary>
            This method is invoked whenever data needs to be loaded (including reloading data)
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.IDataHandler.LoadSecondaryData">
            <summary>
            Called whenever secondary data needs to be loaded
            </summary>
            <returns>Data object</returns>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.IDataHandler.ShowContentsAuto">
            <summary>
            This method is invoked whenever the pane contents need to be presented to the user,
            after the contents have been loaded.
            This method is designed to be used internally only.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.IDataHandler.ShowContents">
            <summary>
            This method is invoked whenever the pane contents need to be presented to the user,
            after the contents have been loaded.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.IDataHandler.NewContents">
            <summary>
            This method gets called whenever new content needs to be created (such as a new entity)
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.IDataHandler.BeforeLoadContents">
            <summary>
            This method gets called before any data loading starts. This provides the ability to
            change the UI before the data is loaded (such as showing a wait screen)
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.IDataHandler.HandleDataException(System.Exception)">
            <summary>
            This method is called whenever an exception is raised during data loading.
            </summary>
            <param name="ex">Exception</param>
            <remarks>
            It is important to override this method and add code that accepts the error information
            and funnels it to the foreground thread (since exceptions that occur on background threads
            will not be visible on the foreground thread and thus not be obvious at all).
            </remarks>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.IDataHandler.ShowDataException(System.Exception)">
            <summary>
            This method is used to present the data to the user by means of a dialog
            or something similar.
            </summary>
            <param name="ex">Exception</param>
            <remarks>
            Generally, this method is called by HandleDataException(ex).
            It is important to override this method, since otherwise, the exception
            information will not be displayed to the user.
            It is IS OK to override this method without calling the default behavior.
            </remarks>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.IDataHandler.ContentStatus">
            <summary>
            Content load status
            </summary>
        </member>
        <member name="E:CODE.Framework.Core.ComponentModel.IDataHandler.DataExceptionThrown">
            <summary>
            This event fires whenever a data exception (load, save, verify, new,...) is fired.
            </summary>
            <remarks>
            Generally, this event is fired by HandleDataException(ex).
            </remarks>
        </member>
        <member name="T:CODE.Framework.Core.ComponentModel.DataExceptionEventArgs">
            <summary>
            Event arguments class for data exception events
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.DataExceptionEventArgs.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.ComponentModel.DataExceptionEventArgs"/> class.
            </summary>
            <param name="ex">The ex.</param>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.DataExceptionEventArgs.Exception">
            <summary>
            Exception information
            </summary>
            <value>The exception.</value>
        </member>
        <member name="T:CODE.Framework.Core.ComponentModel.IDataEditHandler">
            <summary>
            Basic definition of an edit form interface
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.IDataEditHandler.Save">
            <summary>
            Basic save method
            </summary>
            <returns>True or False</returns>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.IDataEditHandler.Verify">
            <summary>
            Basic data verification method
            </summary>
            <returns>True or false</returns>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.IDataEditHandler.Delete">
            <summary>
            Basic data deletion method
            </summary>
            <returns>True or false</returns>
        </member>
        <member name="T:CODE.Framework.Core.ComponentModel.IDataListHandler">
            <summary>
            Basic definition for a data list handler, such as a content pane.
            </summary>
            <remarks>This interface is not finalized at this point and will change!!!</remarks>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.IDataListHandler.RefreshContents">
            <summary>
            Basic method to reload the current information and refresh the display
            </summary>
        </member>
        <member name="T:CODE.Framework.Core.ComponentModel.IDataEditInteractions">
            <summary>
            This interface defines data interactions
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.IDataEditInteractions.SaveData">
            <summary>
            Triggers a data save operation
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.IDataEditInteractions.VerifyData">
            <summary>
            Triggers data verification
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.IDataEditInteractions.DeleteData">
            <summary>
            Triggers data deletion
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.IDataEditInteractions.NewData">
            <summary>
            Triggers the creation of new data
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.IDataEditInteractions.UndoData">
            <summary>
            Triggers an undo for the changes on the current data.
            </summary>
        </member>
        <member name="T:CODE.Framework.Core.ComponentModel.IDataInterfaceEvents">
            <summary>
            This interface defines all the events fired by data interfaces.
            These events are used for data handling based on events rather than inheritance.
            </summary>
        </member>
        <member name="E:CODE.Framework.Core.ComponentModel.IDataInterfaceEvents.HandleDelete">
            <summary>
            Occurs when the system triggers a delete. This event can be used to handle the delete or cancel it.
            </summary>
        </member>
        <member name="E:CODE.Framework.Core.ComponentModel.IDataInterfaceEvents.HandleSave">
            <summary>
            Occurs when the system triggers a save. This event can be used to handle the save or cancel it.
            </summary>
        </member>
        <member name="E:CODE.Framework.Core.ComponentModel.IDataInterfaceEvents.HandleVerify">
            <summary>
            Occurs when the system triggers a verify. This event can be used to handle the verify or cancel it.
            </summary>
        </member>
        <member name="E:CODE.Framework.Core.ComponentModel.IDataInterfaceEvents.ContentStatusChanged">
            <summary>
            Content status changed event
            </summary>
        </member>
        <member name="E:CODE.Framework.Core.ComponentModel.IDataInterfaceEvents.HandleLoadContents">
            <summary>
            Occurs when content needs to be loaded
            </summary>
        </member>
        <member name="E:CODE.Framework.Core.ComponentModel.IDataInterfaceEvents.HandleNewContents">
            <summary>
            Occurs when content needs to be created
            </summary>
        </member>
        <member name="E:CODE.Framework.Core.ComponentModel.IDataInterfaceEvents.HandleLoadSecondaryData">
            <summary>
            Occurs when secondary data needs to be loaded
            </summary>
        </member>
        <member name="E:CODE.Framework.Core.ComponentModel.IDataInterfaceEvents.HandleShowContents">
            <summary>
            Occurs when on screen contents need to be refreshed.
            </summary>
        </member>
        <member name="E:CODE.Framework.Core.ComponentModel.IDataInterfaceEvents.SaveSucceeded">
            <summary>
            Occurs when a save operation succeeds.
            </summary>
        </member>
        <member name="E:CODE.Framework.Core.ComponentModel.IDataInterfaceEvents.SaveFailed">
            <summary>
            Occurs when a save operation fails.
            </summary>
        </member>
        <member name="T:CODE.Framework.Core.ComponentModel.DataLoaderEventArgs">
            <summary>
            Event arguments used by data loading events
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.DataLoaderEventArgs.#ctor(System.Collections.Generic.Dictionary{System.String,System.Object},CODE.Framework.Core.ComponentModel.IEditDataLoader)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.ComponentModel.DataLoaderEventArgs"/> class.
            </summary>
            <param name="queryString">The query string.</param>
            <param name="dataLoader">The data loader.</param>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.DataLoaderEventArgs.AddData(System.Object)">
            <summary>
            Adds loaded data to the list of loaded data objects
            </summary>
            <param name="data">The data object that is to be added.</param>
            <remarks>
            The data object could be a single object or an enumerable list of objects.
            Data that may have been previously assigned as a result, either by the current
            event handled or another, will be preserved and the provided data object will \
            be added to the list.
            </remarks>
            <returns>True is fuccessful</returns>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.DataLoaderEventArgs.GetDataAsArrayList">
            <summary>
            Checks the current data object and makes sure the object is an array list.
            If it isn't an array list, it turns it into an array list.
            </summary>
            <returns>Data source as an enumerable object</returns>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.DataLoaderEventArgs.QueryString">
            <summary>
            Provides access to query string parameters
            </summary>
            <value>The query string parameter collection.</value>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.DataLoaderEventArgs.DataLoader">
            <summary>
            Gets or sets the data loader.
            </summary>
            <value>The data loader.</value>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.DataLoaderEventArgs.Data">
            <summary>
            The data returned to the loading object
            </summary>
            <value>The data.</value>
            <remarks>
            Data could be a single data object (such as a DataSet) or an enumerable list of objects
            </remarks>
        </member>
        <member name="T:CODE.Framework.Core.ComponentModel.ShowContentsEventArgs">
            <summary>
            Show content event arguments
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.ShowContentsEventArgs.#ctor(System.Object,CODE.Framework.Core.ComponentModel.IEditDataLoader)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.ComponentModel.ShowContentsEventArgs"/> class.
            </summary>
            <param name="source">The event source.</param>
            <param name="dataLoader">The data loader.</param>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.ShowContentsEventArgs.Source">
            <summary>
            Gets or sets the event source.
            </summary>
            <value>The source.</value>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.ShowContentsEventArgs.DataLoader">
            <summary>
            Gets or sets the data loader.
            </summary>
            <value>The data loader.</value>
        </member>
        <member name="T:CODE.Framework.Core.ComponentModel.IDeletable">
            <summary>
            Standard deletable interface
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.IDeletable.Delete">
            <summary>
            Delete
            </summary>
            <returns>Success (true or false)</returns>
        </member>
        <member name="T:CODE.Framework.Core.ComponentModel.IVerifyable">
            <summary>
            Standard verifyable interface
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.IVerifyable.Verify">
            <summary>
            Verify
            </summary>
        </member>
        <member name="T:CODE.Framework.Core.ComponentModel.ISavable">
            <summary>
            Standard savable interface
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.ISavable.Save">
            <summary>
            Save
            </summary>
            <returns>Success (true or false)</returns>
        </member>
        <member name="T:CODE.Framework.Core.ComponentModel.IDirty">
            <summary>
            Standard is-dirty interface (can be used to indicate whether data is dirty)
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.IDirty.IsDirty">
            <summary>
            Gets a value indicating whether this instance is dirty (has modified data).
            </summary>
            <value><c>true</c> if this instance is dirty; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:CODE.Framework.Core.ComponentModel.DataEventArgs">
            <summary>
            Event arguments for data operation events
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.DataEventArgs.#ctor(System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="success">Was the operation successful?</param>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.DataEventArgs.Success">
            <summary>
            Was the operation successful?
            </summary>
        </member>
        <member name="T:CODE.Framework.Core.ComponentModel.SavedEventArgs">
            <summary>
            Saved event arguments
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.SavedEventArgs.#ctor(System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="success">Was the save successful?</param>
        </member>
        <member name="T:CODE.Framework.Core.ComponentModel.VerifiedEventArgs">
            <summary>
            Verified event arguments
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.VerifiedEventArgs.#ctor(System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="success">Was the verify successful?</param>
        </member>
        <member name="T:CODE.Framework.Core.ComponentModel.LoadedEventArgs">
            <summary>
            Loaded event arguments
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.LoadedEventArgs.#ctor(System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="success">Was the load successful?</param>
        </member>
        <member name="T:CODE.Framework.Core.ComponentModel.NewedEventArgs">
            <summary>
            Newed event arguments
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.NewedEventArgs.#ctor(System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="success">Was the new successful?</param>
        </member>
        <member name="T:CODE.Framework.Core.ComponentModel.DeletedEventArgs">
            <summary>
            Deleted event arguments
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.DeletedEventArgs.#ctor(System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="success">Was the delete successful?</param>
        </member>
        <member name="T:CODE.Framework.Core.ComponentModel.ContentStatusChangedEventArgs">
            <summary>
            Content status changed event arguments
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.ContentStatusChangedEventArgs.#ctor(CODE.Framework.Core.ComponentModel.ContentStatus)">
            <summary>
            Constructor
            </summary>
            <param name="status">New status</param>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.ContentStatusChangedEventArgs.NewStatus">
            <summary>
            New content status
            </summary>
        </member>
        <member name="T:CODE.Framework.Core.ComponentModel.ContentStatus">
            <summary>
            Content load status of any given data loader
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.ComponentModel.ContentStatus.Virgin">
            <summary>
            Virgin (empty)
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.ComponentModel.ContentStatus.Loading">
            <summary>
            Data is being loaded
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.ComponentModel.ContentStatus.LoadComplete">
            <summary>
            Data has been loaded completely
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.ComponentModel.ContentStatus.DisplayComplete">
            <summary>
            Data display has been completed
            </summary>
        </member>
        <member name="T:CODE.Framework.Core.ComponentModel.EditDataLoader">
            <summary>
            Data loader object used to load
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.EditDataLoader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.ComponentModel.EditDataLoader"/> class.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.ComponentModel.EditDataLoader._dataLoadControllers">
            <summary>
            Internal reference for the data load controllers
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.ComponentModel.EditDataLoader._primaryData">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.ComponentModel.EditDataLoader._secondaryData">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.EditDataLoader.SetHost(CODE.Framework.Core.ComponentModel.IDataEditHandler)">
            <summary>
            Sets the host that is used to load data
            </summary>
            <param name="host">Host</param>
        </member>
        <member name="F:CODE.Framework.Core.ComponentModel.EditDataLoader._status">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.ComponentModel.EditDataLoader._parameters">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.ComponentModel.EditDataLoader._parametersLock">
            <summary>
            Lock dummy
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.EditDataLoader.GetParameterValue``1(System.String)">
            <summary>
            Retrieves the value of a parameter by name
            </summary>
            <param name="parameterName">Parameter name</param>
            <returns>Parameter value</returns>
            <typeparam name="TType">Expected return type</typeparam>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.EditDataLoader.GetParameterValue(System.String)">
            <summary>
            Retrieves the value of a parameter by name
            </summary>
            <param name="parameterName">Parameter name</param>
            <returns>Parameter value</returns>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.EditDataLoader.SetParameterValue``1(System.String,``0)">
            <summary>
            Sets the parameter value (and adds the key to the collection if need be).
            </summary>
            <typeparam name="TType">The type of the type.</typeparam>
            <param name="parameterName">Name of the parameter.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.EditDataLoader.ParameterExists(System.String)">
            <summary>
            Returns true if the specified parameter exists
            </summary>
            <param name="parameterName">Name of the parameter.</param>
            <returns>True or false</returns>
        </member>
        <member name="F:CODE.Framework.Core.ComponentModel.EditDataLoader._saveWorker">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.EditDataLoader.Save">
            <summary>
            Save
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.EditDataLoader.Save(System.EventHandler{CODE.Framework.Core.ComponentModel.SavedEventArgs},System.EventHandler{CODE.Framework.Core.ComponentModel.SavedEventArgs})">
            <summary>
            Saves all the current data
            </summary>
            <param name="successCallback">Callback for success</param>
            <param name="failureCallback">Callback for failure</param>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.EditDataLoader.AutoSave">
            <summary>
            Performs an auto-save on the current data entity
            </summary>
            <returns>True or false</returns>
        </member>
        <member name="F:CODE.Framework.Core.ComponentModel.EditDataLoader._saveResultsLocker">
            <summary>
            Lock dummy
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.ComponentModel.EditDataLoader._saveResult">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.EditDataLoader.WorkSaveContents(System.Object,System.ComponentModel.DoWorkEventArgs)">
            <summary>
            Triggers the save contents processing
            </summary>
            <param name="sender">Sender</param>
            <param name="e">Event args</param>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.EditDataLoader.WorkSaveContentsCompleted(System.Object,System.ComponentModel.RunWorkerCompletedEventArgs)">
            <summary>
            Event handler for completion of save contents
            </summary>
            <param name="sender">Sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="F:CODE.Framework.Core.ComponentModel.EditDataLoader._verifyWorker">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.EditDataLoader.Verify(System.EventHandler{CODE.Framework.Core.ComponentModel.VerifiedEventArgs},System.EventHandler{CODE.Framework.Core.ComponentModel.VerifiedEventArgs})">
            <summary>
            Verifies the current data
            </summary>
            <param name="successCallback">Callback for success</param>
            <param name="failureCallback">Callback for failure</param>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.EditDataLoader.Verify">
            <summary>
            Verify
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.EditDataLoader.AutoVerify">
            <summary>
            Performs an auto-verification on the current data entity
            </summary>
            <returns>True or false</returns>
        </member>
        <member name="F:CODE.Framework.Core.ComponentModel.EditDataLoader._verifyResultsLocker">
            <summary>
            Lock dummy
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.ComponentModel.EditDataLoader._verifyResult">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.EditDataLoader.WorkVerifyContents(System.Object,System.ComponentModel.DoWorkEventArgs)">
            <summary>
            Triggers the verify contents processing
            </summary>
            <param name="sender">Sender</param>
            <param name="e">Event args</param>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.EditDataLoader.WorkVerifyContentsCompleted(System.Object,System.ComponentModel.RunWorkerCompletedEventArgs)">
            <summary>
            Event handler for completion of verify contents
            </summary>
            <param name="sender">Sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="F:CODE.Framework.Core.ComponentModel.EditDataLoader._loadWorker">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.EditDataLoader.Load(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Triggers the loading operation.
            </summary>
            <param name="parameters">Parameters collection</param>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.EditDataLoader.Load(System.Collections.Generic.Dictionary{System.String,System.Object},System.Boolean,System.Boolean)">
            <summary>
            Triggers the loading operation.
            </summary>
            <param name="parameters">Parameters collection</param>
            <param name="loadPrimaryData">if set to <c>true</c> [load primary data].</param>
            <param name="loadSecondaryData">if set to <c>true</c> [load secondary data].</param>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.EditDataLoader.HandleMultiThreadedLoad(System.Boolean,System.Boolean)">
            <summary>
            Handles the load operation in multi-threaded scenario.
            If loadSecondaryData is true, the secondary data gets triggered only after
            the primary data has been retrieved.
            The Loaded event is raised after all loading operations have been finished.
            </summary>
            <param name="loadPrimaryData">if set to <c>true</c> [load primary data].</param>
            <param name="loadSecondaryData">if set to <c>true</c> [load secondary data].</param>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.EditDataLoader.RegisterForRaisingLoadedEventAfterLoadSupportData(System.Boolean)">
            <summary>
            Registers for raising Loaded event after load support data.
            </summary>
            <param name="register">if set to <c>true</c> [register].</param>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.EditDataLoader.RegisterForRaisingLoadedEventAfterLoadPrimaryData(System.Boolean)">
            <summary>
            Registers for raising loaded event after load primary data.
            </summary>
            <param name="register">if set to <c>true</c> [register].</param>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.EditDataLoader.RegisterLoadSupportDataToRunAfterLoadPrimaryData(System.Boolean)">
            <summary>
            Registers the load support data to run after load primary data has finished.
            </summary>
            <param name="register">if set to <c>true</c> support data is loaded after primary data is done loading.
            If set to false, it unregisters the execution, in case it's been registered before.</param>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.EditDataLoader.HandleSingleThreadedLoad(System.Boolean,System.Boolean)">
            <summary>
            Handles the load operation in single-threaded scenario.
            If loadSecondaryData is true, the secondary data gets triggered only after
            the primary data has been retrieved.
            The Loaded event is raised after all loading operations have been finished.
            </summary>
            <param name="loadPrimaryData">if set to <c>true</c> [load primary data].</param>
            <param name="loadSecondaryData">if set to <c>true</c> [load secondary data].</param>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.EditDataLoader.TriggerLoaded">
            <summary>
            Triggers the loaded event
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.EditDataLoader.WorkLoadContents(System.Object,System.ComponentModel.DoWorkEventArgs)">
            <summary>
            Triggers the load contents processing
            </summary>
            <param name="sender">Sender</param>
            <param name="e">Event args</param>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.EditDataLoader.RunLoadContents">
            <summary>
            Performs the load-contents work
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.ComponentModel.EditDataLoader._loadDataMethod">
            <summary>
            For internal use only (cache)
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.EditDataLoader.AutoLoad">
            <summary>
            Performs an automatic load operation, if possible
            </summary>
            <returns>Data object or data object list</returns>
        </member>
        <member name="F:CODE.Framework.Core.ComponentModel.EditDataLoader._newWorker">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.EditDataLoader.New(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            New
            </summary>
            <param name="parameters">Parameters collection</param>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.EditDataLoader.New(System.Collections.Generic.Dictionary{System.String,System.Object},System.Boolean,System.Boolean)">
            <summary>
            New
            </summary>
            <param name="parameters">Parameters collection</param>
            <param name="newPrimaryData">if set to <c>true</c> [new primary data].</param>
            <param name="loadSecondaryData">if set to <c>true</c> [load secondary data].</param>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.EditDataLoader.TriggerNewed">
            <summary>
            Triggers the newed event
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.EditDataLoader.WorkNewContents(System.Object,System.ComponentModel.DoWorkEventArgs)">
            <summary>
            Triggers the new contents processing
            </summary>
            <param name="sender">Sender</param>
            <param name="e">Event args</param>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.EditDataLoader.RunNewContents">
            <summary>
            Performs the new-contents work
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.ComponentModel.EditDataLoader._newDataMethod">
            <summary>
            For internal use only (cache)
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.EditDataLoader.AutoNew">
            <summary>
            Performs an automatic new operation, if possible
            </summary>
            <returns>Data object or data object list</returns>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.EditDataLoader.WorkNewContentsCompleted(System.Object,System.ComponentModel.RunWorkerCompletedEventArgs)">
            <summary>
            Event handler for completion of new contents
            </summary>
            <param name="sender">Sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="F:CODE.Framework.Core.ComponentModel.EditDataLoader._loadSupportWorker">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.EditDataLoader.WorkLoadSupportData(System.Object,System.ComponentModel.DoWorkEventArgs)">
            <summary>
            Triggers the load of support data
            </summary>
            <param name="sender">Sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.EditDataLoader.RunLoadSupportData">
            <summary>
            Performs the load support data work
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.EditDataLoader.WorkLoadSupportDataCompleted(System.Object,System.ComponentModel.RunWorkerCompletedEventArgs)">
            <summary>
            Fires when the load of support data has been completed
            </summary>
            <param name="sender">Sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="F:CODE.Framework.Core.ComponentModel.EditDataLoader._deleteWorker">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.EditDataLoader.Delete">
            <summary>
            Deleted
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.EditDataLoader.AutoDelete">
            <summary>
            Performs an auto-delete on the current data entity
            </summary>
            <returns>True or false</returns>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.EditDataLoader.WorkDeleteData(System.Object,System.ComponentModel.DoWorkEventArgs)">
            <summary>
            Triggers the delete of data
            </summary>
            <param name="sender">Sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.EditDataLoader.WorkDeleteDataCompleted(System.Object,System.ComponentModel.RunWorkerCompletedEventArgs)">
            <summary>
            Fires when the delete of data has been completed
            </summary>
            <param name="sender">Sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.EditDataLoader.PopulatePrimaryDataList(System.Object)">
            <summary>
            This method takes a data object and uses it to populate the list of primary data objects
            </summary>
            <param name="data">Data object</param>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.EditDataLoader.PopulateSecondaryDataList(System.Object)">
            <summary>
            This method takes a data object and uses it to populate the list of secondary data objects
            </summary>
            <param name="data">Data object</param>
        </member>
        <member name="F:CODE.Framework.Core.ComponentModel.EditDataLoader._entityType">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.EditDataLoader.SetEntityType``1">
            <summary>
            Sets the main entity type used for auto-loading of content.
            </summary>
            <typeparam name="TType">Data entity type</typeparam>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.EditDataLoader.CloneDictionary(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Creates a clone of a dictionary, so it can safely be used on a background thread.
            </summary>
            <param name="originalCollection">Original collection</param>
            <returns>Copy of the collection</returns>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.EditDataLoader.MergeDataSources(System.Object,System.Object)">
            <summary>
            Merges two data entity sources
            </summary>
            <param name="dataAuto">Source 1 (often auto-generated)</param>
            <param name="dataManual">Source 2 (often manually retrieved)</param>
            <returns>Data object, or list of data objects</returns>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.EditDataLoader.CommunicateExceptionToForegroundThread(System.Exception)">
            <summary>
            This method is used to funnel an exception to a different thread.
            </summary>
            <param name="ex">Exception</param>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.EditDataLoader.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.EditDataLoader.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.EditDataLoader.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing">Are we disposing managed resources?</param>
        </member>
        <member name="F:CODE.Framework.Core.ComponentModel.EditDataLoader._disposed">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.EditDataLoader.DataLoadControllers">
            <summary>
            Collection of registered data load controllers
            </summary>
            <value>The data load controllers.</value>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.EditDataLoader.Host">
            <summary>
            Loader host
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.EditDataLoader.PrimaryData">
            <summary>
            Array list (collection) of primary data objects
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.EditDataLoader.MainDataEntity">
            <summary>
            Reference to the main data entity object
            </summary>
            <remarks>
            This object is the first object in the primary 
            data collection (if available)
            </remarks>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.EditDataLoader.SecondaryData">
            <summary>
            Array list (collection) of secondary data objects
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.EditDataLoader.MultiThreaded">
            <summary>
            Should data operations be performed multi threaded?
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.EditDataLoader.PerformAutoNew">
            <summary>
            Should the object perform auto news based on the entity type specified?
            </summary>
            <remarks>This property only has an impact after an entity type has been set by means of the SetEntityType() method</remarks>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.EditDataLoader.PerformAutoLoad">
            <summary>
            Should the object perform auto loads based on the entity type specified?
            </summary>
            <remarks>This property only has an impact after an entity type has been set by means of the SetEntityType() method</remarks>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.EditDataLoader.PerformAutoSave">
            <summary>
            Should the object perform auto saves based on the entity type specified?
            </summary>
            <remarks>This property only has an impact after an entity type has been set by means of the SetEntityType() method</remarks>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.EditDataLoader.PerformAutoVerify">
            <summary>
            Should the object perform auto verifies based on the entity type specified?
            </summary>
            <remarks>This property only has an impact after an entity type has been set by means of the SetEntityType() method</remarks>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.EditDataLoader.PerformAutoDelete">
            <summary>
            Should the object perform auto deletes based on the entity type specified?
            </summary>
            <remarks>This property only has an impact after an entity type has been set by means of the SetEntityType() method</remarks>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.EditDataLoader.Status">
            <summary>
            Status
            </summary>
        </member>
        <member name="E:CODE.Framework.Core.ComponentModel.EditDataLoader.ContentStatusChanged">
            <summary>
            Content status changed event
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.EditDataLoader.Parameters">
            <summary>
            Parameters collection (thread-safe)
            </summary>
            <remarks>
            The dictionary returned by this property is made thread-safe by means of cloning.
            This means that every time this collection is accessed, a copy of the original (internal)
            collection is created. If you then interact with the collection, it will not update the
            original parameters. Therefore, most interaction with this collection should
            not happen through this property, but by means of the SetParameterValue()/GetParameterValue() 
            methods instead.
            </remarks>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.EditDataLoader.SaveWorker">
            <summary>
            Background worker used to save data
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.EditDataLoader.AvailableSaveWorker">
            <summary>
            Returns an instance of an available (non-busy) save worker
            </summary>
        </member>
        <member name="E:CODE.Framework.Core.ComponentModel.EditDataLoader.Saved">
            <summary>
            Saved event
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.EditDataLoader.VerifyWorker">
            <summary>
            Background worker used to verify data
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.EditDataLoader.AvailableVerifyWorker">
            <summary>
            Returns an instance of an available (non-busy) verify worker
            </summary>
        </member>
        <member name="E:CODE.Framework.Core.ComponentModel.EditDataLoader.Verified">
            <summary>
            Verified event
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.EditDataLoader.LoadWorker">
            <summary>
            Background worker used to load existing contents
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.EditDataLoader.AvailableLoadWorker">
            <summary>
            Returns an instance of an available (non-busy) load worker
            </summary>
        </member>
        <member name="E:CODE.Framework.Core.ComponentModel.EditDataLoader.Loaded">
            <summary>
            Loaded event
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.EditDataLoader.NewWorker">
            <summary>
            Background worker used to load new contents
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.EditDataLoader.AvailableNewWorker">
            <summary>
            Returns an instance of an available (non-busy) new worker
            </summary>
        </member>
        <member name="E:CODE.Framework.Core.ComponentModel.EditDataLoader.Newed">
            <summary>
            Newed event
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.EditDataLoader.LoadSupportWorker">
            <summary>
            Background worker used to load support data
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.EditDataLoader.AvailableLoadSupportWorker">
            <summary>
            Returns an instance of an available (non-busy) load support worker
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.EditDataLoader.DeleteWorker">
            <summary>
            Background worker used to delete data
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.EditDataLoader.AvailableDeleteWorker">
            <summary>
            Returns an instance of an available (non-busy) delete worker
            </summary>
        </member>
        <member name="E:CODE.Framework.Core.ComponentModel.EditDataLoader.Deleted">
            <summary>
            Deleted event
            </summary>
        </member>
        <member name="T:CODE.Framework.Core.ComponentModel.EditDataLoader.VerifyCallbacks">
            <summary>
            This class is used to pass the callbacks to the worker thread.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.EditDataLoader.VerifyCallbacks.#ctor(System.EventHandler{CODE.Framework.Core.ComponentModel.VerifiedEventArgs},System.EventHandler{CODE.Framework.Core.ComponentModel.VerifiedEventArgs})">
            <summary>
            Constructor
            </summary>
            <param name="successCallback">Success callback</param>
            <param name="failureCallback">Failure callback</param>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.EditDataLoader.VerifyCallbacks.SuccessCallback">
            <summary>
            Success callback
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.EditDataLoader.VerifyCallbacks.FailureCallback">
            <summary>
            Failure callback
            </summary>
        </member>
        <member name="T:CODE.Framework.Core.ComponentModel.EditDataLoader.SaveCallbacks">
            <summary>
            This class is used to pass the callbacks to the worker thread.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.EditDataLoader.SaveCallbacks.#ctor(System.EventHandler{CODE.Framework.Core.ComponentModel.SavedEventArgs},System.EventHandler{CODE.Framework.Core.ComponentModel.SavedEventArgs})">
            <summary>
            Constructor
            </summary>
            <param name="successCallback">Success callback</param>
            <param name="failureCallback">Failure callback</param>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.EditDataLoader.SaveCallbacks.SuccessCallback">
            <summary>
            Success callback
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.EditDataLoader.SaveCallbacks.FailureCallback">
            <summary>
            Failure callback
            </summary>
        </member>
        <member name="T:CODE.Framework.Core.ComponentModel.IFilterable">
            <summary>
            Interface used tor filterable collections
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.IFilterable.ClearFilter">
            <summary>
            Clears out all filter expressions, except the master filter.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.IFilterable.Filter">
            <summary>
            Filter expression
            </summary>
            <example>FirstName = 'John'</example>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.IFilterable.FilterMaster">
            <summary>
            Filter expression
            </summary>
            <remarks>
            Filterable objects are always filtered by their master expression
            AND the individual filter expression.
            </remarks>
            <example>Status = 1</example>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.IFilterable.CompleteFilterExpression">
            <summary>
            Complete filter expression, including the master filter
            and the individual filter
            </summary>
            <example>(Status = 1) AND (FirstName = 'John')</example>
        </member>
        <member name="T:CODE.Framework.Core.ComponentModel.ISortable">
            <summary>
            Interface used for sortable collections
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.ISortable.SortBy">
            <summary>
            Sort expression
            </summary>
            <example>FirstName, LastName</example>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.ISortable.SortByMaster">
            <summary>
            Master sort expression
            </summary>
            <remarks>
            Sortable objects are first sorted by the master expression, 
            and then by the sort-by expression
            </remarks>
            <example>Company</example>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.ISortable.CompleteSortExpression">
            <summary>
            Complete sort expression
            </summary>
            <remarks>
            This is a combination of the master sort expression
            and the sort-by expression
            </remarks>
            <example>Company, FirstName, LastName</example>
        </member>
        <member name="T:CODE.Framework.Core.Configuration.ConfigurationSettings">
            <summary>
            The ConfigurationSettings class is the main point of access to an application settings
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Configuration.ConfigurationSettings.GetAllKeys">
            <summary>
            Returns a complete collection of all keys across all sources
            </summary>
            <returns>List&lt;System.String&gt;.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:CODE.Framework.Core.Configuration.ConfigurationSettings.Settings">
            <summary>
            Exposes access to the Settings.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Configuration.ConfigurationSettings.Sources">
            <summary>
            Exposes access to the ConfigurationSettingsSourcesCollection.
            </summary>
        </member>
        <member name="T:CODE.Framework.Core.Configuration.ConfigurationSettingsSourcesCollection">
            <summary>
            Exposes ConfigurationSettingsSourcesCollection inside the ConfigurationSettings class (which is the main class that uses 
            the ConfigurationSettingsSourcesCollection class). The ConfigurationSettingsSourcesCollection class doesn't actually store ConfigurationSettingsSourcesCollection. Instead, it just
            exposes an interface for getting to ConfigurationSettingsSourcesCollection in sources that were added to the 
            ConfigurationSettings class.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Configuration.ConfigurationSettingsSourcesCollection.Add(CODE.Framework.Core.Configuration.IConfigurationSource)">
            <summary>
            Add sources to the collection.
            </summary>
            <param name="configurationSource">The source.</param>
        </member>
        <member name="M:CODE.Framework.Core.Configuration.ConfigurationSettingsSourcesCollection.GetAllSources">
            <summary>
            Returns a copy of all sources in a thread-safe way
            </summary>
            <returns>Array of configuration sources.</returns>
        </member>
        <member name="P:CODE.Framework.Core.Configuration.ConfigurationSettingsSourcesCollection.Item(System.Int32)">
            <summary>
            Indexer that allows a source to be accessed by its index. 
            </summary>
        </member>
        <member name="T:CODE.Framework.Core.Configuration.ConfigurationSource">
            <summary>
            This class implements the IConfigurationSource interface and it serves as the baseclass
            for the concrete "config source" classes.
            </summary>
        </member>
        <member name="T:CODE.Framework.Core.Configuration.IConfigurationSource">
            <summary>
            Interface that determines everything a configuration source must expose. 
            There is a ConfigurationSource abstract class that implements this interface, giving 
            a starting point in case we need such class.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Configuration.IConfigurationSource.IsSettingSupported(System.String)">
            <summary>
            Checks whether a given setting is supported or not.
            </summary>
            <param name="settingName">The setting.</param>
            <returns>True/False for supported or not.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Configuration.IConfigurationSource.Read">
            <summary>
            Read settings from storage and put them in memory.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Configuration.IConfigurationSource.SupportsType(CODE.Framework.Core.Configuration.ConfigurationSourceTypes)">
            <summary>
            Checks whether a given source type is supported.
            </summary>
            <param name="sourceType">The source type, according to enum ConfigurationSourceTypes.</param>
            <returns>True/False for supported or not.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Configuration.IConfigurationSource.Write">
            <summary>
            Persists settings into storage.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Configuration.IConfigurationSource.FriendlyName">
            <summary>
            Determines a friendly name for the source (such as "UserConfiguration", or "MachineConfiguration").
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Configuration.IConfigurationSource.IsSecure">
            <summary>
            Indicates whether source is secure or not.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Configuration.IConfigurationSource.IsReadOnly">
            <summary>
            Indicates whether the source is ReadOnly, meaning that settings can be read, but cannot be written to.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Configuration.IConfigurationSource.IsActive">
            <summary>
            Indicates whether the source is active (enabled)
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Configuration.IConfigurationSource.Settings">
            <summary>
            Keeps list of settings and its values.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Configuration.IConfigurationSource.IsDirty">
            <summary>
            Gets a value indicating whether the source has changed since 
            the last time it's been populated.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Configuration.ConfigurationSource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Configuration.ConfigurationSource"/> class.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Configuration.ConfigurationSource.MarkDirty">
            <summary>
            Used to mark the source as dirty.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Configuration.ConfigurationSource.SetNotDirty(System.Boolean)">
            <summary>
            Reloads original settings for the configuration source and marks the source as not dirty.
            </summary>
            <param name="reloadSettings">Indicates whether the settings should be reloaded.</param>
        </member>
        <member name="M:CODE.Framework.Core.Configuration.ConfigurationSource.IsSettingSupported(System.String)">
            <summary>
            Determines whether a given setting is supported by the class. The default behavior
            is provided, but the method is marked as virtual so that subclasses can provide their own
            implementation.
            </summary>
            <param name="settingName">The name of the setting.</param>
            <returns>True if the setting is supported, False if it is not.</returns>
            <example>
            // Look for setting in any source.
            bool supported = ConfigurationSettings.IsSettingsSupported("MySetting")
            // Look for setting only in a specific source.
            bool supported = ConfigurationSettings["Registry"].IsSettingsSupported("MySetting")
            </example>
        </member>
        <member name="M:CODE.Framework.Core.Configuration.ConfigurationSource.Read">
            <summary>
            Read persisted settings and place them in memory.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Configuration.ConfigurationSource.SupportsType(CODE.Framework.Core.Configuration.ConfigurationSourceTypes)">
            <summary>
            Checks whether a given Source Type is supported.
            </summary>
            <param name="sourceType">The type of source being checked, according to enum EPS.Configuration.ConfigurationSourceTypes.</param>
            <returns>True or False, indicating whether or not the source type is supported.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Configuration.ConfigurationSource.Write">
            <summary>
            Persists settings, taking it from memory to the storage being used.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Configuration.ConfigurationSource.FriendlyName">
            <summary>
            Determines a friendly name for the source (such as "UserConfiguration", or "MachineConfiguration").
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Configuration.ConfigurationSource.IsSecure">
            <summary>
            Indicates whether the source is considered secure or not.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Configuration.ConfigurationSource.IsReadOnly">
            <summary>
            Indicates whether the source is considered ReadOnly.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Configuration.ConfigurationSource.Settings">
            <summary>Exposes the Settings member.</summary>
            <example>
            var setting = ConfigurationSettings.Settings["MySetting"]
            </example>
        </member>
        <member name="P:CODE.Framework.Core.Configuration.ConfigurationSource.IsActive">
            <summary>
            Indicates whether the source is active (enabled)
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Configuration.ConfigurationSource.IsDirty">
            <summary>
            Gets a value indicating whether the source has changed since
            the last time it's been populated.
            </summary>
        </member>
        <member name="T:CODE.Framework.Core.Configuration.ConfigurationSourceSettings">
            <summary>
            Hashtable that keeps a Name-Value list of settings. This class is mainly used by the ConfigurationSource class.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Configuration.ConfigurationSourceSettings.#ctor(CODE.Framework.Core.Configuration.IConfigurationSource,System.TimeSpan)">
            <summary>
            Constructor.
            </summary>
            <param name="parent">The parent configuration source that hosts this settings collection.</param>
            <param name="maxSettingsCacheDuration">Maximum duration of the settings cache.</param>
        </member>
        <member name="M:CODE.Framework.Core.Configuration.ConfigurationSourceSettings.#ctor(CODE.Framework.Core.Configuration.IConfigurationSource)">
            <summary>
            Constructor.
            </summary>
            <param name="parent">The parent configuration source that hosts this settings collection.</param>
        </member>
        <member name="M:CODE.Framework.Core.Configuration.ConfigurationSourceSettings.ApplyCurrentReadTimestamp">
            <summary>
            Applies the current date/time as the last read timestamp
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Configuration.ConfigurationSourceSettings.GetAllKeys">
            <summary>
            Returns a copied list of all keys in a thread-safe way.
            </summary>
            <returns>List of all keys</returns>
        </member>
        <member name="M:CODE.Framework.Core.Configuration.ConfigurationSourceSettings.GetAllKeysAndValues">
            <summary>
            Returns a copied list of all keys and values in a thread-safe way
            </summary>
            <returns>List of all keys and values</returns>
        </member>
        <member name="M:CODE.Framework.Core.Configuration.ConfigurationSourceSettings.ContainsKey(System.String)">
            <summary>
            Determines whether the specified key is contained in the settings collection.
            </summary>
            <param name="key">The key.</param>
            <returns><c>true</c> if the specified key is contained in the collection; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Configuration.ConfigurationSourceSettings.Add(System.String,System.String)">
            <summary>
            Adds the specified setting
            </summary>
            <param name="key">The key/setting name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:CODE.Framework.Core.Configuration.ConfigurationSourceSettings.Clear">
            <summary>
            Clears the settings.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Configuration.ConfigurationSourceSettings.RemoveSettingWhenSetToNull">
            <summary>
            Defines whether null values are automatically removed from the settings collection
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Configuration.ConfigurationSourceSettings.Item(System.String)">
            <summary>
            Indexer.
            </summary>
            <remarks>
            The main reason this indexer is being overridden is so that we can
            flag as "dirty" the config source that hosts the settings.
            </remarks>
        </member>
        <member name="T:CODE.Framework.Core.Configuration.DotNetConfigurationFile">
            <summary>
            This class wraps up the functionality available natively in .NET for reading 
            the default settings (AppSettings) available in the config files.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Configuration.DotNetConfigurationFile.Read">
            <summary>
            Read settings from native .NET object and feed settings into our own object.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Configuration.DotNetConfigurationFile.SupportsType(CODE.Framework.Core.Configuration.ConfigurationSourceTypes)">
            <summary>
            Checks whether a given source type is supported, according to Enum ConfigurationSourceTypes.
            </summary>
            <param name="sourceType">The source type.</param>
            <returns>True/False for supported or not.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Configuration.DotNetConfigurationFile.Write">
            <summary>
            Persists settings from memory into storage.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Configuration.DotNetConfigurationFile.FriendlyName">
            <summary>
            Indicates source's Friendly Name.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Configuration.DotNetConfigurationFile.IsReadOnly">
            <summary>
            Indicates whether the source is read-only. .NET's native AppSettings is read-only,
            therefore we mark this class as read-only too.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Configuration.DotNetConfigurationFile.IsSecure">
            <summary>
            Determines whether the source is secure or not.
            </summary>
        </member>
        <member name="T:CODE.Framework.Core.Configuration.MemorySettings">
            <summary>
            summary description for specialconfiguration.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Configuration.MemorySettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Configuration.MemorySettings"/> class.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Configuration.MemorySettings.Read">
            <summary>
            Read settings from file.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Configuration.MemorySettings.Write">
            <summary>
            Write settings to file.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Configuration.MemorySettings.SupportsType(CODE.Framework.Core.Configuration.ConfigurationSourceTypes)">
            <summary>
            Checks whether a given type is supported.
            </summary>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="P:CODE.Framework.Core.Configuration.MemorySettings.FriendlyName">
            <summary>
            Source's Friendly Name.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Configuration.MemorySettings.IsSecure">
            <summary>
            Determines whether source is secure.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Configuration.MemorySettings.IsReadOnly">
            <summary>
            Indicates if this source is read-only.
            </summary>
        </member>
        <member name="T:CODE.Framework.Core.Configuration.SecureConfigurationFile">
            <summary>
            This class wraps up the functionality available natively in .NET for reading 
            the default settings (AppSettings) available in the config files.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Configuration.SecureConfigurationFile.GetConfigurationFileName">
            <summary>
            Generates a standard file name to be used for the configuration file
            </summary>
            <returns></returns>
        </member>
        <member name="M:CODE.Framework.Core.Configuration.SecureConfigurationFile.Read">
            <summary>
            Read settings from native .NET object and feed settings into our own object.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Configuration.SecureConfigurationFile.SupportsType(CODE.Framework.Core.Configuration.ConfigurationSourceTypes)">
            <summary>
            Checks whether a given source type is supported, according to Enum ConfigurationSourceTypes.
            </summary>
            <param name="sourceType">The source type.</param>
            <returns>True/False for supported or not.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Configuration.SecureConfigurationFile.Write">
            <summary>
            Persists settings from memory into storage.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Configuration.SecureConfigurationFile.EncryptionKey">
            <summary>
            Key used to encrypt and decrypt configuration settings
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Configuration.SecureConfigurationFile.ConfigurationFileName">
            <summary>
            File name for the secure configuration file (if left empty, 'App.sconfig' will be used in the same directory as core.dll)
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Configuration.SecureConfigurationFile.FriendlyName">
            <summary>
            Indicates source's Friendly Name.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Configuration.SecureConfigurationFile.IsReadOnly">
            <summary>
            Indicates whether the source is read-only. .NET's native AppSettings is read-only,
            therefore we mark this class as read-only too.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Configuration.SecureConfigurationFile.IsSecure">
            <summary>
            Determines whether the source is secure or not.
            </summary>
        </member>
        <member name="T:CODE.Framework.Core.Configuration.SettingNotSupportedException">
            <summary>
            Exception thrown when some code is trying to write to a read-only setting.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Configuration.SettingNotSupportedException.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Configuration.SettingNotSupportedException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message</param>
        </member>
        <member name="M:CODE.Framework.Core.Configuration.SettingNotSupportedException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message.</param>
            <param name="innerException">Inner exception.</param>
        </member>
        <member name="M:CODE.Framework.Core.Configuration.SettingNotSupportedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor.
            </summary>
            <param name="info">Serialization information.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="T:CODE.Framework.Core.Configuration.SettingReadOnlyException">
            <summary>
            Exception thrown when some code is trying to write to a read-only setting.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Configuration.SettingReadOnlyException.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Configuration.SettingReadOnlyException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message</param>
        </member>
        <member name="M:CODE.Framework.Core.Configuration.SettingReadOnlyException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message.</param>
            <param name="innerException">Inner exception.</param>
        </member>
        <member name="M:CODE.Framework.Core.Configuration.SettingReadOnlyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor.
            </summary>
            <param name="info">Serialization information.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="T:CODE.Framework.Core.Configuration.Settings">
            <summary>
            Exposes settings inside the ConfigurationSettings class (which is the main class that uses 
            the Settings class). The Settings class doesn't actually store settings. Instead, it just
            exposes an interface for getting to settings in sources that were added to the 
            ConfigurationSettings class.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Configuration.Settings.IsSettingSupported(System.String)">
            <summary>
            Checks whether a given setting is supported by any source inside the ConfigurationSettings object.
            </summary>
            <param name="setting">Name of the setting.</param>
            <returns>True/False, indicating whether the setting is supported or not.</returns>
        </member>
        <member name="P:CODE.Framework.Core.Configuration.Settings.Item(System.String)">
            <summary>
            Indexer that allows a setting to be accessed by its name. 
            </summary>
        </member>
        <member name="T:CODE.Framework.Core.Configuration.ConfigurationSourceTypes">
            <summary>
            Enum with possible Configuration Source Types.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Configuration.ConfigurationSourceTypes.User">
            <summary>User</summary>
        </member>
        <member name="F:CODE.Framework.Core.Configuration.ConfigurationSourceTypes.Machine">
            <summary>Machine</summary>
        </member>
        <member name="F:CODE.Framework.Core.Configuration.ConfigurationSourceTypes.System">
            <summary>System</summary>
        </member>
        <member name="F:CODE.Framework.Core.Configuration.ConfigurationSourceTypes.Network">
            <summary>Network</summary>
        </member>
        <member name="F:CODE.Framework.Core.Configuration.ConfigurationSourceTypes.Security">
            <summary>Security</summary>
        </member>
        <member name="F:CODE.Framework.Core.Configuration.ConfigurationSourceTypes.Other">
            <summary>Other</summary>
        </member>
        <member name="T:CODE.Framework.Core.Configuration.SecurityType">
            <summary>
            Enum with possible Security Types.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Configuration.SecurityType.Secure">
            <summary>Secure</summary>
        </member>
        <member name="F:CODE.Framework.Core.Configuration.SecurityType.NonSecure">
            <summary>Non-Secure</summary>
        </member>
        <member name="T:CODE.Framework.Core.Exceptions.IndexOutOfBoundsException">
            <summary>
            Exception class used for enumeration errors.
            The error is raised when an enumeration finds its enumeration source in disarray
            and thus overshoots the sources bounds
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Exceptions.IndexOutOfBoundsException.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Exceptions.IndexOutOfBoundsException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message</param>
        </member>
        <member name="M:CODE.Framework.Core.Exceptions.IndexOutOfBoundsException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message.</param>
            <param name="innerException">Inner exception.</param>
        </member>
        <member name="M:CODE.Framework.Core.Exceptions.IndexOutOfBoundsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor.
            </summary>
            <param name="info">Serialization information.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="T:CODE.Framework.Core.Exceptions.MissingConfigurationSettingException">
            <summary>
            This exception is thrown whenever part of Milos requires a configuration setting that is not present.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Exceptions.MissingConfigurationSettingException.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Exceptions.MissingConfigurationSettingException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="setting">Name of the missing setting</param>
        </member>
        <member name="M:CODE.Framework.Core.Exceptions.MissingConfigurationSettingException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message.</param>
            <param name="innerException">Inner exception.</param>
        </member>
        <member name="M:CODE.Framework.Core.Exceptions.MissingConfigurationSettingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor.
            </summary>
            <param name="info">Serialization information.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="T:CODE.Framework.Core.Exceptions.NullReferenceException">
            <summary>
            Exception class used for null reference exceptions thrown by Milos.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Exceptions.NullReferenceException.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Exceptions.NullReferenceException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message</param>
        </member>
        <member name="M:CODE.Framework.Core.Exceptions.NullReferenceException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message.</param>
            <param name="innerException">Inner exception.</param>
        </member>
        <member name="M:CODE.Framework.Core.Exceptions.NullReferenceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor.
            </summary>
            <param name="info">Serialization information.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="T:CODE.Framework.Core.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Properties.Resources.Collections">
            <summary>
              Looks up a localized string similar to  Collections.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Properties.Resources.ConfigurationSourceCollectionInvalid">
            <summary>
              Looks up a localized string similar to The ConfigurationSourceSettings collection can only be instantiated when a valid instance of a ConfigurationSource is passed to it..
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Properties.Resources.ConfigurationSourceCollectionInvalidDetails">
            <summary>
              Looks up a localized string similar to The configuration source collection is a member of the configuration source object. However, it appears to be called stand-alone, which is not possible. Do not instantiate this class directly..
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Properties.Resources.DefinedOn">
            <summary>
              Looks up a localized string similar to  [defined on .
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Properties.Resources.Empty">
            <summary>
              Looks up a localized string similar to  [empty].
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Properties.Resources.Entity">
            <summary>
              Looks up a localized string similar to Entity.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Properties.Resources.EntityHasBrokenRules">
            <summary>
              Looks up a localized string similar to Entity has broken rules!.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Properties.Resources.EnumerationValueInvalid">
            <summary>
              Looks up a localized string similar to Enumeration value is invalid..
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Properties.Resources.EnumSourceChanged">
            <summary>
              Looks up a localized string similar to Collection has changed during enumeration..
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Properties.Resources.ExceptionAttributes">
            <summary>
              Looks up a localized string similar to Exception Attributes:.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Properties.Resources.ExceptionDetail">
            <summary>
              Looks up a localized string similar to Detail.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Properties.Resources.ExceptionInformation">
            <summary>
              Looks up a localized string similar to Information.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Properties.Resources.Exceptions">
            <summary>
              Looks up a localized string similar to Exceptions.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Properties.Resources.ExceptionSeparator">
            <summary>
              Looks up a localized string similar to  - Exception: .
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Properties.Resources.ExceptionStack">
            <summary>
              Looks up a localized string similar to Exception Stack:.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Properties.Resources.ExceptionType">
            <summary>
              Looks up a localized string similar to Exception type:.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Properties.Resources.Fields">
            <summary>
              Looks up a localized string similar to Fields.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Properties.Resources.FileAlreadyExists">
            <summary>
              Looks up a localized string similar to The specified file already exists..
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Properties.Resources.IndexNotInSources">
            <summary>
              Looks up a localized string similar to Index cannot be found in the sources collection..
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Properties.Resources.IndexOutOfBounds">
            <summary>
              Looks up a localized string similar to Index out of bounds..
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Properties.Resources.IsDirty">
            <summary>
              Looks up a localized string similar to Is Dirty: .
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Properties.Resources.IsDirtyFalse">
            <summary>
              Looks up a localized string similar to Is Dirty: false.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Properties.Resources.LineNumber">
            <summary>
              Looks up a localized string similar to Line #.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Properties.Resources.LoadImageHint">
            <summary>
              Looks up a localized string similar to Hint: Right-click on this to load a new image.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Properties.Resources.Message">
            <summary>
              Looks up a localized string similar to Message:.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Properties.Resources.MetaInformation">
            <summary>
              Looks up a localized string similar to Meta Information.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Properties.Resources.Method">
            <summary>
              Looks up a localized string similar to Method.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Properties.Resources.NoBrokenRules">
            <summary>
              Looks up a localized string similar to No broken rules.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Properties.Resources.NoImage">
            <summary>
              Looks up a localized string similar to No image.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Properties.Resources.NotApplicable">
            <summary>
              Looks up a localized string similar to n.a..
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Properties.Resources.ParameterCanNotBeNull">
            <summary>
              Looks up a localized string similar to Parameter cannot be null..
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Properties.Resources.Properties">
            <summary>
              Looks up a localized string similar to  Properties.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Properties.Resources.Setting">
            <summary>
              Looks up a localized string similar to Setting .
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Properties.Resources.SettingNotSupported">
            <summary>
              Looks up a localized string similar to  not supported..
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Properties.Resources.Source">
            <summary>
              Looks up a localized string similar to Source:.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Properties.Resources.SourceFile">
            <summary>
              Looks up a localized string similar to Source File.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Properties.Resources.StackTrace">
            <summary>
              Looks up a localized string similar to Stack Trace:.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Properties.Resources.ThrownByClass">
            <summary>
              Looks up a localized string similar to Thrown by code in class:.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Properties.Resources.ThrownByMethod">
            <summary>
              Looks up a localized string similar to Thrown by code in method:.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Properties.Resources.UnableToLoadImage">
            <summary>
              Looks up a localized string similar to Unable to load image: .
            </summary>
        </member>
        <member name="T:CODE.Framework.Core.Utilities.EnumHelper">
            <summary>
            This class provides various helper functions for dealing with enums
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.EnumHelper.GetEnumInformation``1">
            <summary>Returns a list (enumerable) of information items for each value in the enum</summary>
            <typeparam name="T">Enum type</typeparam>
            <returns>Enumerable list of enum information items (wich can be very useful for binding for instance)</returns>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.EnumHelper._knownEnumInformation">
            <summary>Internal cache to avoid having to re-discover enums all the time</summary>
        </member>
        <member name="T:CODE.Framework.Core.Utilities.EnumInformation">
            <summary>This class represents meta information about an enum</summary>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.EnumInformation.#ctor(System.Int32,System.Object,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="value">Integer value</param>
            <param name="enumValue">Original enum value</param>
            <param name="name">Enum value name</param>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.EnumInformation.Value">
            <summary>Value as an integer</summary>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.EnumInformation.EnumValue">
            <summary>The selected enum value as an object</summary>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.EnumInformation.DisplayText">
            <summary>The enum name spelled out as separate words</summary>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.EnumInformation.Name">
            <summary>Enum value name</summary>
        </member>
        <member name="T:CODE.Framework.Core.Utilities.ExceptionHelper">
            <summary>
            Various helper methods related to exceptions
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ExceptionHelper.GetExceptionHtml(System.Exception)">
            <summary>
            Analyzes exception information and returns HTML with details about the exception.
            </summary>
            <param name="exception">Exception object</param>
            <returns>Exception HTML</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ExceptionHelper.GetExceptionText(System.Exception)">
            <summary>
            Analyzes exception information and returns it as a plain text string
            </summary>
            <param name="exception">Exception object</param>
            <returns>string</returns>
        </member>
        <member name="T:CODE.Framework.Core.Utilities.Extensions.StringExtensions">
            <summary>
            Various extension methods for string manipulation.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Extensions.StringExtensions.Lower(System.String)">
            <summary>Returns a culture-neutral to-lower operation on the string.</summary>
            <param name="originalString">Original string</param>
            <returns>Lower-case string</returns>
            <example>"Hello".Lower()</example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Extensions.StringExtensions.Upper(System.String)">
            <summary>Returns a culture-neutral to-upper operation on the string.</summary>
            <param name="originalString">Original string</param>
            <returns>Upper-case string</returns>
            <example>"Hello".Upper()</example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Extensions.StringExtensions.Compare(System.String,System.String)">
            <summary>Returns true if the two strings match.</summary>
            <param name="firstString">First string</param>
            <param name="secondString">Second string</param>
            <returns>True or False</returns>
            <remarks>The strings are trimmed and compared in a case-insensitive, culture neutral fashion./// </remarks>
            <example>if ("Hello".Compare("World")) { }</example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Extensions.StringExtensions.Compare(System.String,System.String,System.Boolean)">
            <summary>Returns true if the two strings match.</summary>
            <param name="firstString">First string</param>
            <param name="secondString">Second string</param>
            <param name="ignoreCase">Should case (upper/lower) be ignored?</param>
            <returns>True or False</returns>
            <remarks>
            The strings are trimmed and compared in a case-insensitive, culture neutral fashion.
            </remarks>
            <example>if ("Hello".Compare("HELLO", true)) {}</example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Extensions.StringExtensions.Proper(System.String)">
            <summary>Receives a string as a parameter and returns the string in Proper format (makes each letter after a space capital)</summary>
            <param name="originalString">String</param>
            <returns>Proper string</returns>
            <example>"hello".Proper()</example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Extensions.StringExtensions.SmartProper(System.String)">
            <summary>
            This method returns strings in proper case.
            However, contrary to regular Proper() methods, 
            this method can be used to format names.
            For instance, "MacLeod" will remain "MacLeod",
            "macLeod" will be "MacLeod", "MACLEOD" will be turned into
            "Macleod". "macleod" will also be turned into "Macleod".
            </summary>
            <param name="originalString">String that is to be formatted</param>
            <returns>Properly formatted string</returns>
            <example>"macLeod".SmartProper()</example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Extensions.StringExtensions.SpaceCamelCase(System.String)">
            <summary>
            This method takes a camel-case string (such as one defined by an enum)
            and returns is with a space before every upper-case letter.
            </summary>
            <param name="originalString">String</param>
            <returns>String with spaces</returns>
            <example>"CamelCaseWord".SpaceCamelCase()</example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Extensions.StringExtensions.ToFile(System.String,System.String)">
            <summary>Receives a string and a file name as parameters and writes the contents of the string to that file </summary>
            <param name="expression">String to be written</param>
            <param name="fileName">File name the string is to be written to.</param>
            <example>"This is the line we want to insert in our file".ToFile(@"c:\My Folders\MyFile.txt");</example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Extensions.StringExtensions.ToStringSafe(System.Object)">
            <summary>Returns a string representation of the provided value. Returns an empty string if the value is null</summary>
            <param name="value">Value to be turned into a string</param>
            <returns>String</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Extensions.StringExtensions.ToFile(System.String,System.String,System.Text.Encoding)">
            <summary>Receives a string and a file name as parameters and writes the contents of the string to that file</summary>
            <param name="expression">String to be written</param>
            <param name="fileName">File name the string is to be written to.</param>
            <param name="encoding">File encoding</param>
            <example>"This is the line we want to insert in our file".ToFile(@"c:\My Folders\MyFile.txt", Encoding.ASCII);</example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Extensions.StringExtensions.FromFile(System.String)">
            <summary>Loads a file from disk and returns it as a string</summary>
            <param name="fileName">File to be loaded</param>
            <returns>String containing the file contents</returns>
            <example>string text = @"c:\folder\myfile.txt".FromFile();</example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Extensions.StringExtensions.Base64Encode(System.String)">
            <summary>This method takes any regular string, and returns its base64 encoded representation</summary>
            <param name="original">Original String</param>
            <returns>Base64 encoded string</returns>
            <example>string encoded = "Encode this".Base64Encode();</example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Extensions.StringExtensions.Base64Decode(System.String)">
            <summary>Takes a base64 encoded string and converts it into a regular string</summary>
            <param name="encodedString">Base64 encoded string</param>
            <returns>Decoded string</returns>
            <example>string decoded = "jumbledText==".Base64Decode();</example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Extensions.StringExtensions.At(System.String,System.String)">
            <summary>Receives two strings as parameters and searches for one string within another. If found, returns the beginning numeric position otherwise returns 0</summary>
            <param name="searchIn">String to search in</param>
            <param name="searchFor">String to search for</param>
            <returns>Position</returns>
            <example>"Joe Doe".At("D")</example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Extensions.StringExtensions.At(System.String,System.String,System.Int32)">
            <summary>
            Receives two strings and an occurrence position (1st, 2nd etc) as parameters and 
            searches for one string within another for that position. 
            If found, returns the beginning numeric position otherwise returns 0
            </summary>
            <param name="searchIn">String to search in</param>
            <param name="searchFor">String to search for</param>
            <param name="occurrence">The occurrence of the string</param>
            <returns>Position</returns>
            <example>
            "Joe Doe".At("o", 1); //returns 2
            "Joe Doe".At("o", 2); //returns 6
            </example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Extensions.StringExtensions.Asc(System.Char)">
            <summary>Receives a character as a parameter and returns its ANSI code</summary>
            <example>'#'.Asc(); //returns 35</example>
            <param name="character">Character</param>
            <returns>ASCII value</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Extensions.StringExtensions.Chr(System.Int32)">
            <summary>Receives an integer ANSI code and returns a character associated with it</summary>
            <example>35.Chr(); returns '#'</example>
            <param name="ansiCode">Character Code</param>
            <returns>Char that corresponds with the ascii code</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Extensions.StringExtensions.GetWordCount(System.String)">
            <summary>Receives a string as a parameter and counts the number of words in that string</summary>
            <example>
            string text = "John Doe is a good man";
            text.GetWordCount(); //returns 6
            </example>
            <param name="sourceString">String</param>
            <returns>Word Count</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Extensions.StringExtensions.GetWordNumber(System.String,System.Int32)">
            <summary>
            Based on the position specified, returns a word from a string 
            Receives a string as a parameter and counts the number of words in that string
            </summary>
            <example>
            string text = "John Doe is a good man";
            text.GetWordNumber(5); //returns "good"
            </example>
            <param name="sourceString">String</param>
            <param name="wordPosition">Word Position</param>
            <returns>Word number</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Extensions.StringExtensions.IsAlpha(System.String)">
            <summary>Returns a bool indicating if the first character in a string is an alphabet or not</summary>
            <example>"Joe Doe".IsAlpha(); //returns true</example>
            <param name="expression">Expression</param>
            <returns>True or False depending on whether the string only had alphanumeric chars</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Extensions.StringExtensions.Occurs(System.String,System.Char)">
            <summary>Returns the number of occurrences of a character within a string</summary>
            <example>"Joe Doe".Occurs('o'); //returns 2</example>
            <param name="expression">Expression</param>
            <param name="character">Search Character</param>
            <returns>Number of occurrences</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Extensions.StringExtensions.Occurs(System.String,System.String)">
            <summary>Returns the number of occurrences of one string within another string</summary>
            <example>
            "Joe Doe".Occurs("oe"); //returns 2
            "Joe Doe".Occurs("Joe"); //returns 1
            </example>
            <param name="stringSearched">Expression</param>
            <param name="searchString">Search String</param>
            <returns>Number of occurrences</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Extensions.StringExtensions.Replicate(System.String,System.Int32)">
            <summary>
            Receives a string expression and a numeric value indicating number of time
            and replicates that string for the specified number of times.
            </summary>
            <example>"Joe".Replicate(5); //returns JoeJoeJoeJoeJoe</example>
            <param name="expression">Expression</param>
            <param name="times">Number of times the string is to be replicated</param>
            <returns>New string</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Extensions.StringExtensions.SubstringSafe(System.String,System.Int32,System.Int32)">
            <summary>Overloaded method for SubstringSafe() that receives starting position and length</summary>
            <param name="expression">String expression</param>
            <param name="startIndex">Start Position</param>
            <param name="length">Length</param>
            <returns>Substring</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Extensions.StringExtensions.SubStr(System.String,System.Int32,System.Int32)">
            <summary>Overloaded method for SubStr() that receives starting position and length</summary>
            <param name="expression">Expression</param>
            <param name="startPosition">Start Position</param>
            <param name="length">Length</param>
            <returns>Substring</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Extensions.StringExtensions.AtLine(System.String,System.String)">
            <summary>Receives a string and converts it to an integer</summary>
            <example>"Is Life Beautiful? \r\n It sure is".AtLine("Is"); //returns 1</example>
            <param name="searchExpression">Search Expression</param>
            <param name="expressionSearched">Expression Searched</param>
            <returns>Line number</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Extensions.StringExtensions.IsDigit(System.String)">
            <summary>Receives a string as a parameter and returns a bool indicating if the left most character in the string is a valid digit.</summary>
            <example>if("1Test".IsDigit()){...} //returns true</example>
            <param name="sourceString">Expression</param>
            <returns>True or False</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Extensions.StringExtensions.JustPath(System.String)">
            <summary>Takes a fully qualified file name, and returns just the path</summary>
            <param name="path">File name with path</param>
            <returns>Just the path as a string</returns>
            <example>@"c:\folder\file.txt".JustPath(); // returns @"c:\folder\"</example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Extensions.StringExtensions.JustFileName(System.String)">
            <summary>Returns just the file name part of a full path</summary>
            <param name="path">The full path to the file</param>
            <returns>File name</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Extensions.StringExtensions.AddBS(System.String)">
            <summary>Makes sure the secified path ends with a back-slash</summary>
            <param name="path">Path</param>
            <returns>Path with BS</returns>
            <example>
            @"c:\folder".AddBS(); // returns @"c:\folder\"
            @"c:\folder\".AddBS(); // returns @"c:\folder\"
            </example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Extensions.StringExtensions.ArrayContainsString(System.String,System.String[])">
            <summary>Returns true if the array contains the string we are looking for</summary>
            <param name="hostArray">The host array.</param>
            <param name="searchText">The search string.</param>
            <returns>True or false</returns>
            <example>
            string[] testArray = new string[] { "One", "Two", "Three" };
            bool result1 = "one".ArrayContainsString(testArray, true); // returns true
            bool result2 = "one".ArrayContainsString(testArray); // returns false
            bool result3 = "One".ArrayContainsString(testArray); // returns true
            bool result4 = "Four".ArrayContainsString(testArray); // returns false
            </example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Extensions.StringExtensions.ArrayContainsString(System.String,System.String[],System.Boolean)">
            <summary>Returns true if the array contains the string we are looking for</summary>
            <param name="hostArray">The host array.</param>
            <param name="searchText">The search string.</param>
            <param name="ignoreCase">if set to <c>true</c> [ignore case].</param>
            <returns>True or false</returns>
            <example>
            string[] testArray = new string[] { "One", "Two", "Three" };
            bool result1 = "one".ArrayContainsString(testArray, true); // returns true
            bool result2 = "one".ArrayContainsString(testArray); // returns false
            bool result3 = "One".ArrayContainsString(testArray); // returns true
            bool result4 = "Four".ArrayContainsString(testArray); // returns false
            </example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Extensions.StringExtensions.TryIntParse(System.String,System.Int32)">
            <summary>Tries to parse a string value as an integer. If the parse fails, the provided default value will be inserted</summary>
            <param name="value">The value.</param>
            <param name="failedDefault">The failed default.</param>
            <returns></returns>
            <example>int valueInt = "1".TryIntParse(-1);</example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Extensions.StringExtensions.TryGuidParse(System.String,System.Guid)">
            <summary>Tries to parse a string value as an Guid. If the parse fails, the provided default value will be inserted</summary>
            <param name="value">The value.</param>
            <param name="failedDefault">The failed default.</param>
            <returns></returns>
            <example>Guid valueGuid = "xxx".TryGuidParse(Guid.Empty);</example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Extensions.StringExtensions.TryGuidParse(System.String)">
            <summary>Tries to parse a string value as an Guid. If the parse fails, Guid.Empty will be returned</summary>
            <param name="value">The value.</param>
            <returns></returns>
            <example>Guid valueGuid = "xxx".TryGuidParse();</example>
        </member>
        <member name="T:CODE.Framework.Core.Utilities.HttpHelper">
            <summary>
            This class provides useful methods for dealing with HTTP
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.HttpHelper.UrlDecode(System.String)">
            <summary>
            Decodes a URL string/value into clear text
            </summary>
            <param name="encodedValue">The encoded value.</param>
            <returns>Clear text version of the string</returns>
            <remarks>This implementation is identical to the one provided by the .NET Framework in the WebUtility class, but it is provided here without dependencies on any server components.</remarks>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.HttpHelper.UrlEncode(System.String)">
            <summary>
            Encodes the string for use in a URL
            </summary>
            <param name="value">The clear-text encodedValue</param>
            <returns>URL encoded string</returns>
            <remarks>This implementation is identical to the one provided by the .NET Framework in the WebUtility class, but it is provided here without dependencies on any server components.</remarks>
        </member>
        <member name="T:CODE.Framework.Core.Utilities.If">
            <summary>
            Static class providing convenience methods for common tasks
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.If.Real``1(System.Object,System.Action{``0})">
            <summary>Checks if the provided type is the correct type and not null, and if so, runs the provided action</summary>
            <typeparam name="T">Type to check for</typeparam>
            <param name="instance">The object instance that is to be checked.</param>
            <param name="action">The code/action that is to be executed if the instance is of the right type and not null</param>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.If.Real``2(System.Object,System.Object,System.Action{``0,``1})">
            <summary>Checks if the provided types are the correct types and not null, and if so, runs the provided action</summary>
            <typeparam name="T1">The type of the first instance to check</typeparam>
            <typeparam name="T2">The type of the second instance to check</typeparam>
            <param name="instance">The object instance that is to be checked.</param>
            <param name="instance2">The second object instance that is to be checked.</param>
            <param name="action">The code/action that is to be executed if the instance2 are of the right type and not null</param>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.If.NotNull(System.Object,System.Action)">
            <summary>Executes the provided action if the provided instance is not null</summary>
            <param name="instance">Object instance to check</param>
            <param name="action">The action to execute if the instance is not null</param>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.If.NotNull(System.Object,System.Object,System.Action)">
            <summary>Executes the provided action if the provided instances are not null</summary>
            <param name="instance">Object instance to check</param>
            <param name="instance2">Object instance to check</param>
            <param name="action">The action to execute if the instances are not null</param>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.If.NotNull(System.Object,System.Object,System.Object,System.Action)">
            <summary>Executes the provided action if the provided instances are not null</summary>
            <param name="instance">Object instance to check</param>
            <param name="instance2">Object instance to check</param>
            <param name="instance3">Object instance to check</param>
            <param name="action">The action to execute if the instances are not null</param>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.If.NotNull(System.Object,System.Object,System.Object,System.Object,System.Action)">
            <summary>Executes the provided action if the provided instances are not null</summary>
            <param name="instance">Object instance to check</param>
            <param name="instance2">Object instance to check</param>
            <param name="instance3">Object instance to check</param>
            <param name="instance4">Object instance to check</param>
            <param name="action">The action to execute if the instances are not null</param>
        </member>
        <member name="T:CODE.Framework.Core.Utilities.JsonHelper">
            <summary>
            This class provides useful helper functionality to deal with JSON strings
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.JsonHelper.Format(System.String)">
            <summary>
            Formats the provided JSON string (adds line feeds, indents, ...)
            </summary>
            <param name="json">The original JSON string.</param>
            <returns>Formatted JSON string</returns>
        </member>
        <member name="T:CODE.Framework.Core.Utilities.Logger">
            <summary>
            Abstract logger class.
            </summary>
            
            <example>
            public class MyLogger : Logger
            {
            public override void Log(string logEvent, LogEventType type)
            {
            MessageBox.Show(logEvent);
            }
            }
            </example>
            <remarks>This class provides the basic implementation of a logger class.
            The only part that must be overriden is the Log() method with the string overload.</remarks>
        </member>
        <member name="T:CODE.Framework.Core.Utilities.ILogger">
            <summary>
            Logger interface
            </summary>
            <remarks>
            Implement this interface for objects used for logging.
            </remarks>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ILogger.Log(System.String,CODE.Framework.Core.Utilities.LogEventType)">
            <summary>Logs the specified event (text).</summary>
            <param name="logEvent">The event (text).</param>
            <param name="type">The event type.</param>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ILogger.Log(System.Object,CODE.Framework.Core.Utilities.LogEventType)">
            <summary>Logs the specified event (object).</summary>
            <param name="logEvent">The event (object).</param>
            <param name="type">The event type.</param>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.ILogger.TypeFilter">
            <summary>
            Gets or sets the type filter.
            </summary>
            <value>The type filter.</value>
            <remarks>
            Only events that match the type filter will be considered by this logger.
            </remarks>
        </member>
        <member name="T:CODE.Framework.Core.Utilities.IExceptionLogger">
            <summary>
            Interface for loggers that are capable of logging exceptions directly
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.IExceptionLogger.Log(System.Exception,CODE.Framework.Core.Utilities.LogEventType)">
            <summary>
            Logs the specified event (text).
            </summary>
            <param name="exception">The exception that is to be logged.</param>
            <param name="type">The event type.</param>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.IExceptionLogger.Log(System.String,System.Exception,CODE.Framework.Core.Utilities.LogEventType)">
            <summary>
            Logs the specified event (text).
            </summary>
            <param name="leadingText">The leading text.</param>
            <param name="exception">The exception that is to be logged.</param>
            <param name="type">The event type.</param>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Logger.Log(System.String,CODE.Framework.Core.Utilities.LogEventType)">
            <summary>
            Logs the specified event (text).
            </summary>
            <param name="logEvent">The event (text).</param>
            <param name="type">The event type.</param>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Logger.Log(System.Object,CODE.Framework.Core.Utilities.LogEventType)">
            <summary>
            Logs the specified event (object).
            </summary>
            <param name="logEvent">The event (object).</param>
            <param name="type">The event type.</param>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.Logger._typeFilter">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Logger.Log(System.Exception,CODE.Framework.Core.Utilities.LogEventType)">
            <summary>
            Logs the specified event (text).
            </summary>
            <param name="exception">The exception that is to be logged.</param>
            <param name="type">The event type.</param>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Logger.Log(System.String,System.Exception,CODE.Framework.Core.Utilities.LogEventType)">
            <summary>
            Logs the specified event (text).
            </summary>
            <param name="leadingText">The leading text.</param>
            <param name="exception">The exception that is to be logged.</param>
            <param name="type">The event type.</param>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Logger.GetSerializedExceptionText(System.Exception,CODE.Framework.Core.Utilities.LogEventType)">
            <summary>
            Serializes the exception and returns the serialzied text
            </summary>
            <param name="exception">The exception.</param>
            <param name="type">The log info type.</param>
            <returns>Serialized exception information</returns>
            <remarks>This method is designed to be overridden in subclasses</remarks>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.Logger.TypeFilter">
            <summary>
            Gets or sets the type filter.
            </summary>
            <value>The type filter.</value>
            <remarks>
            Only events that match the type filter will be considered by this logger.
            </remarks>
        </member>
        <member name="T:CODE.Framework.Core.Utilities.ConsoleLogger">
            <summary>
            Console logger class
            </summary>
            <remarks>
            Performs the equivalent of a Console.WriteLine()
            </remarks>
            <example>
            EPS.Utilities.LoggingMediator.AddLogger(new EPS.Utilities.ConsoleLogger());
            
            EPS.Utilities.LoggingMediator.Log("Hello World!", EPS.Utilities.LogEventType.Information);
            EPS.Utilities.LoggingMediator.Log("A critical error occured!", EPS.Utilities.LogEventType.Critical | EPS.Utilities.LogEventType.Error);
            </example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ConsoleLogger.Log(System.String,CODE.Framework.Core.Utilities.LogEventType)">
            <summary>
            Logs the specified event (text).
            </summary>
            <param name="logEvent">The event (text).</param>
            <param name="type">The event type.</param>
        </member>
        <member name="T:CODE.Framework.Core.Utilities.OutputWindowLogger">
            <summary>
            Output Window logger class
            </summary>
            <remarks>
            Performs the equivalent of a System.Diagnostics.Debug.WriteLine()
            </remarks>
            <example>
            EPS.Utilities.LoggingMediator.AddLogger(new EPS.Utilities.OutputWindowLogger());
            
            EPS.Utilities.LoggingMediator.Log("Hello World!", EPS.Utilities.LogEventType.Information);
            EPS.Utilities.LoggingMediator.Log("A critical error occured!", EPS.Utilities.LogEventType.Critical | EPS.Utilities.LogEventType.Error);
            </example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.OutputWindowLogger.Log(System.String,CODE.Framework.Core.Utilities.LogEventType)">
            <summary>
            Logs the specified event (text).
            </summary>
            <param name="logEvent">The event (text).</param>
            <param name="type">The event type.</param>
        </member>
        <member name="T:CODE.Framework.Core.Utilities.MultiFileLogger">
            <summary>
            Multiple file logger class
            </summary>
            <remarks>
            Logs the provided information into multiple files.
            By default, the location of the files is the application data path.
            By default, the name of each file is a Guid. The extension is ".log".
            </remarks>
            <example>
            EPS.Utilities.MultiFileLogger logger = new EPS.Utilities.MultiFileLogger(@"c:\Logs\");
            logger.Extension = "event";  // Creates *.event files
            EPS.Utilities.LoggingMediator.AddLogger(logger);
            
            EPS.Utilities.LoggingMediator.Log("Hello World!", EPS.Utilities.LogEventType.Information);
            EPS.Utilities.LoggingMediator.Log("A critical error occured!", EPS.Utilities.LogEventType.Critical | EPS.Utilities.LogEventType.Error);
            </example>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.MultiFileLogger._extension">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.MultiFileLogger.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Utilities.MultiFileLogger"/> class.
            </summary>
            <param name="folder">The folder the files are to be put into.</param>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.MultiFileLogger.#ctor(System.Environment.SpecialFolder)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Utilities.MultiFileLogger"/> class.
            </summary>
            <param name="folder">The folder the files are to be put into.</param>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.MultiFileLogger.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Utilities.MultiFileLogger"/> class.
            </summary>
            <remarks>By default, the application data files folder is used for the log files.</remarks>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.MultiFileLogger.Log(System.String,CODE.Framework.Core.Utilities.LogEventType)">
            <summary>
            Logs the specified event (text).
            </summary>
            <param name="logEvent">The event (text).</param>
            <param name="type">The event type.</param>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.MultiFileLogger.GetNextFileName">
            <summary>
            Gets the name of the next file.
            </summary>
            <returns>Next file name.</returns>
            <remarks>Override this method to create a different file name schema.</remarks>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.MultiFileLogger.Extension">
            <summary>
            Log file extension
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.MultiFileLogger.Folder">
            <summary>
            Gets or sets the folder the files are to be put into.
            </summary>
            <value>The folder.</value>
        </member>
        <member name="T:CODE.Framework.Core.Utilities.MultiXmlFileLogger">
            <summary>
            Logs an event to an XML file.
            </summary>
            <remarks>
            Each event is stored into a separate XML file.
            
            Typically, the text passed to the logger is not in XML format. In that case, the
            logger automatically adds an XML declaration as well as a root tag and a tag for the event
            content. The name of the root tag is "log" by default, and the event tag is "event" by default.
            In addition, the event element has a "type" attribute that indicates the type of the logged event.
            There also is a "timeStamp" attribute that indicates the date and time of the event (GMT).
            However, all tag/attribute names can be modified by means of the XmlRootNode and XmlEventNode properties.
            
            If the provided text is well formed XML, no other tags are added and the value is used as is,
            except that the XML declaration may be added or modified. Also the format of the XML may be changed
            since this logger always creates line feeds and proper tag indentation. No type attribute will be added.
            </remarks>
            <example>
            EPS.Utilities.MultiXmlFileLogger logger = new EPS.Utilities.MultiXmlFileLogger(@"c:\Logs\");
            EPS.Utilities.LoggingMediator.AddLogger(logger); // Creates *.xml files
            
            EPS.Utilities.LoggingMediator.Log("Hello World!", EPS.Utilities.LogEventType.Information);
            EPS.Utilities.LoggingMediator.Log("A critical error occured!", EPS.Utilities.LogEventType.Critical | EPS.Utilities.LogEventType.Error);
            </example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.MultiXmlFileLogger.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Utilities.MultiFileLogger"/> class.
            </summary>
            <param name="folder">The folder the files are to be put into.</param>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.MultiXmlFileLogger.#ctor(System.Environment.SpecialFolder)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Utilities.MultiFileLogger"/> class.
            </summary>
            <param name="folder">The folder the files are to be put into.</param>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.MultiXmlFileLogger.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Utilities.MultiFileLogger"/> class.
            </summary>
            <remarks>By default, the application data files folder is used for the log files.</remarks>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.MultiXmlFileLogger.Log(System.String,CODE.Framework.Core.Utilities.LogEventType)">
            <summary>
            Logs the specified event (text) to an XML file in XML format.
            </summary>
            <param name="logEvent">The event (text).</param>
            <param name="type">The event type.</param>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.MultiXmlFileLogger.XmlRootNode">
            <summary>
            Gets or sets the XML root node name.
            </summary>
            <value>The XML root node name.</value>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.MultiXmlFileLogger.XmlEventNode">
            <summary>
            Gets or sets the XML event node name.
            </summary>
            <value>The XML event node name.</value>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.MultiXmlFileLogger.XmlEventTypeAttribute">
            <summary>
            Gets or sets the XML event type attribute name.
            </summary>
            <value>The XML event type attribute.</value>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.MultiXmlFileLogger.XmlEventTimeStampAttribute">
            <summary>
            Gets or sets the XML event time stamp attribute name.
            </summary>
            <value>The XML event type attribute.</value>
        </member>
        <member name="T:CODE.Framework.Core.Utilities.SingleFileLogger">
            <summary>
            Single file logger class
            </summary>
            <remarks>
            Logs the provided information into a single file.
            By default, the name of the log file is "Log.log". It is probably smart to change the name of that file.
            </remarks>
            <example>
            EPS.Utilities.SingleFileLogger logger = new EPS.Utilities.SingleFileLogger(@"c:\Logs\", "MyLogFile.log");
            EPS.Utilities.LoggingMediator.AddLogger(logger);
            
            EPS.Utilities.LoggingMediator.Log("Hello World!", EPS.Utilities.LogEventType.Information);
            EPS.Utilities.LoggingMediator.Log("A critical error occured!", EPS.Utilities.LogEventType.Critical | EPS.Utilities.LogEventType.Error);
            </example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.SingleFileLogger.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Utilities.SingleFileLogger"/> class.
            </summary>
            <param name="folder">The folder the files are to be put into.</param>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.SingleFileLogger.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Utilities.SingleFileLogger"/> class.
            </summary>
            <param name="folder">The folder the files are to be put into.</param>
            <param name="fileName">Name of the log file.</param>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.SingleFileLogger.#ctor(System.Environment.SpecialFolder)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Utilities.SingleFileLogger"/> class.
            </summary>
            <param name="folder">The folder the files are to be put into.</param>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.SingleFileLogger.#ctor(System.Environment.SpecialFolder,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Utilities.SingleFileLogger"/> class.
            </summary>
            <param name="folder">The folder the files are to be put into.</param>
            <param name="fileName">Name of the log file.</param>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.SingleFileLogger.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Utilities.SingleFileLogger"/> class.
            </summary>
            <remarks>By default, the application data files folder is used for the log files.</remarks>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.SingleFileLogger.Log(System.String,CODE.Framework.Core.Utilities.LogEventType)">
            <summary>
            Logs the specified event (text).
            </summary>
            <param name="logEvent">The event (text).</param>
            <param name="type">The event type.</param>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.SingleFileLogger.FileName">
            <summary>
            Log file name
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.SingleFileLogger.Folder">
            <summary>
            Gets or sets the folder the files are to be put into.
            </summary>
            <value>The folder.</value>
        </member>
        <member name="T:CODE.Framework.Core.Utilities.SingleXmlFileLogger">
            <summary>
            Single XML file logger class
            </summary>
            <remarks>
            All events are stored into a common XML file.
            
            Text passed to the logger is not XML formatted. Instead, the text gets logged into an XML file,
            using the XML file as a database. The text logged is made the content of each "record". If actual XML
            is passed to the logger, then that XML is simple treated as content that is stored in the log.
            
            The XML log file follows a specific format using a "log" tag as the root element, with "event" tags for
            each actual event that gets logged. That tag also has "type" and "timeStamp" attributes.
            All tag and attribute names can be modified through the properties on this object.
            
            The log can be limited to a maximum number of entries. If that number is exceeded, the oldest
            events get truncated from the log.
            
            The XML file structure has to be compatible with the one defined by this object's properties. If not,
            the existing XML file is overwritten with a brand new one. (Compatible in this sense means that the root
            element name has to match. Additional elements that aren't defined by this log object are allowed to
            exist. They are simply ignored by this logger).
            </remarks>
            <example>
            EPS.Utilities.SingleXmlFileLogger logger = new EPS.Utilities.SingleXmlFileLogger(@"c:\Logs\", "MyLog.xml");
            logger.MaximumEntries = 100;
            EPS.Utilities.LoggingMediator.AddLogger(logger); // Creates the MyLog.xml file
            
            EPS.Utilities.LoggingMediator.Log("Hello World!", EPS.Utilities.LogEventType.Information);
            EPS.Utilities.LoggingMediator.Log("A critical error occured!", EPS.Utilities.LogEventType.Critical | EPS.Utilities.LogEventType.Error);
            </example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.SingleXmlFileLogger.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Utilities.SingleXmlFileLogger"/> class.
            </summary>
            <param name="folder">The folder the files are to be put into.</param>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.SingleXmlFileLogger.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Utilities.SingleXmlFileLogger"/> class.
            </summary>
            <param name="folder">The folder the files are to be put into.</param>
            <param name="fileName">Name of the log file.</param>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.SingleXmlFileLogger.#ctor(System.Environment.SpecialFolder)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Utilities.SingleXmlFileLogger"/> class.
            </summary>
            <param name="folder">The folder the files are to be put into.</param>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.SingleXmlFileLogger.#ctor(System.Environment.SpecialFolder,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Utilities.SingleXmlFileLogger"/> class.
            </summary>
            <param name="folder">The folder the files are to be put into.</param>
            <param name="fileName">Name of the log file.</param>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.SingleXmlFileLogger.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Utilities.SingleXmlFileLogger"/> class.
            </summary>
            <remarks>By default, the application data files folder is used for the log files.</remarks>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.SingleXmlFileLogger.Log(System.String,CODE.Framework.Core.Utilities.LogEventType)">
            <summary>
            Logs the specified event (text).
            </summary>
            <param name="logEvent">The event (text).</param>
            <param name="type">The event type.</param>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.SingleXmlFileLogger.GetXmlDocument(System.String)">
            <summary>
            Loads or creates the specified XML document
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns>Event log XML document</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.SingleXmlFileLogger.CreateXmlDocument">
            <summary>
            Creates the XML document from scratch.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.SingleXmlFileLogger.TruncateLog(System.Xml.XmlDocument)">
            <summary>
            Truncates the log if need be.
            </summary>
            <param name="log">The log XML document.</param>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.SingleXmlFileLogger.XmlRootNode">
            <summary>
            Gets or sets the XML root node name.
            </summary>
            <value>The XML root node name.</value>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.SingleXmlFileLogger.XmlEventNode">
            <summary>
            Gets or sets the XML event node name.
            </summary>
            <value>The XML event node name.</value>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.SingleXmlFileLogger.XmlEventTypeAttribute">
            <summary>
            Gets or sets the XML event type attribute name.
            </summary>
            <value>The XML event type attribute.</value>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.SingleXmlFileLogger.XmlEventTimeStampAttribute">
            <summary>
            Gets or sets the XML event time stamp attribute name.
            </summary>
            <value>The XML event type attribute.</value>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.SingleXmlFileLogger.MaximumEntries">
            <summary>
            Defines the maximum number of entries in the log file.
            -1 = unlimited.
            </summary>
            <value>Maximum number of entries.</value>
        </member>
        <member name="T:CODE.Framework.Core.Utilities.EventLogLogger">
            <summary>
            Event log logger class
            </summary>
            <remarks>
            This class logs events to the windows event log.
            
            If a log of the specified name does not exist on the specified machine (typically
            the local machine), then it is automatically created.
            </remarks>
            <example>
            EPS.Utilities.EventLogLogger logger = new EPS.Utilities.EventLogLogger("My Application Log");
            logger.Source = "My Application";
            EPS.Utilities.LoggingMediator.AddLogger(logger);
            
            EPS.Utilities.LoggingMediator.Log("Hello World!", EPS.Utilities.LogEventType.Information);
            EPS.Utilities.LoggingMediator.Log("A critical error occured!", EPS.Utilities.LogEventType.Critical | EPS.Utilities.LogEventType.Error);
            </example>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.EventLogLogger._eventLog">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.EventLogLogger.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Utilities.EventLogLogger"/> class.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.EventLogLogger.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Utilities.EventLogLogger"/> class.
            </summary>
            <param name="logName">Name of the log as it appears in the windows system log.</param>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.EventLogLogger.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Utilities.EventLogLogger"/> class.
            </summary>
            <param name="logName">Name of the log as it appears in the windows system log.</param>
            <param name="machineName">Name of the machine the log resides on. (Current/local machine = ".")</param>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.EventLogLogger.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Utilities.EventLogLogger"/> class.
            </summary>
            <param name="logName">Name of the log as it appears in the windows system log.</param>
            <param name="machineName">Name of the machine the log resides on. (Current/local machine = ".")</param>
            <param name="sourceName">Name of the source (typically the name of the current application).</param>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.EventLogLogger.Log(System.String,CODE.Framework.Core.Utilities.LogEventType)">
            <summary>
            Logs the specified event (text).
            </summary>
            <param name="logEvent">The event (text).</param>
            <param name="type">The event type.</param>
            <remarks>
            Milos log types are mapped to the following system event types (in this order):
            LogEventType.Critical   = EventLogEntryType.Error
            LogEventType.Error      = EventLogEntryType.FailureAudit
            LogEventType.Exception  = EventLogEntryType.FailureAudit
            LogEventType.Warning    = EventLogEntryType.Warning
            LogEventType.Success    = EventLogEntryType.SuccessAudit
               other:               = EventLogEntryType.Information
            </remarks>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.EventLogLogger.InternalEventLog">
            <summary>
            Internal reference to the actual event log object
            </summary>
            <value>The event log.</value>
        </member>
        <member name="T:CODE.Framework.Core.Utilities.LoggingMediator">
            <summary>
            Logging mediator class
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.LoggingMediator.Log(System.String,CODE.Framework.Core.Utilities.LogEventType)">
            <summary>
            Logs the specified text.
            </summary>
            <param name="logEvent">The event (text) to log.</param>
            <param name="type">Event type</param>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.LoggingMediator.Log(System.Object,CODE.Framework.Core.Utilities.LogEventType)">
            <summary>
            Logs the specified event.
            </summary>
            <param name="logEvent">The event (object) to log.</param>
            <param name="type">Event type</param>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.LoggingMediator.Log(System.Exception,CODE.Framework.Core.Utilities.LogEventType)">
            <summary>
            Logs the specified exception.
            </summary>
            <param name="exception">The exception.</param>
            <param name="type">Event type</param>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.LoggingMediator.Log(System.String,System.Exception,CODE.Framework.Core.Utilities.LogEventType)">
            <summary>
            Logs the specified exception.
            </summary>
            <param name="leadingText">The leading text (inserted before the actual exception detail).</param>
            <param name="exception">The exception.</param>
            <param name="type">Event type</param>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.LoggingMediator.AddLogger(CODE.Framework.Core.Utilities.ILogger)">
            <summary>
            Adds a new logger which wishes to be notified whenever something needs to be logged.
            </summary>
            <param name="logger">The logger object.</param>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.LoggingMediator.ClearLoggers">
            <summary>
            Removes all current loggers.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.LoggingMediator.Loggers">
            <summary>
            Internal list of loggers
            </summary>
        </member>
        <member name="T:CODE.Framework.Core.Utilities.LogEventType">
            <summary>
            Log event type
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.LogEventType.Undefined">
            <summary>
            Undefined
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.LogEventType.Information">
            <summary>
            General information
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.LogEventType.Warning">
            <summary>
            Warning
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.LogEventType.Exception">
            <summary>
            Exception
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.LogEventType.Error">
            <summary>
            Error
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.LogEventType.Critical">
            <summary>
            Critical event
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.LogEventType.Success">
            <summary>
            Success
            </summary>
        </member>
        <member name="T:CODE.Framework.Core.Utilities.ObjectHelper">
            <summary>
            This object features a number of methods that are useful in dealing with objects
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ObjectHelper.CreateObject(System.String,System.String)">
            <summary>
            Loads a named object from an assembly
            </summary>
            <param name="className">Fully qualified name of the class</param>
            <param name="assemblyName">Assembly name (preferrably the fully or partially qualified name, or the file name)</param>
            <returns>Newly instantiated object</returns>
            <example>SqlDataService oService = (SqlDataService)ObjectHelper.CreateObject("EPS.Data.SqlClient","SqlDataService")</example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ObjectHelper.SerializeToBinaryStream(System.Object)">
            <summary>
            Serializes an object to its binary state
            </summary>
            <param name="objectToSerialize">The object to serialize.</param>
            <returns>Stream of binary information for the object</returns>
            <remarks>
            For this to work, the provided object must be serializable.
            
            This method can be used as an extension method.
            </remarks>
            <example>
            using EPS.Utilities;
            // More code...
            var stream = customer.SerializeToBinaryStream();
            
            // Or
            
            var stream = EPS.Utilities.ObjectHelper.SerializeToBinaryStream(customer);
            </example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ObjectHelper.DeserializeFromBinaryStream(System.IO.Stream)">
            <summary>
            Deserializes an object from its state stored in a binary stream.
            </summary>
            <param name="stateStream">The state stream.</param>
            <returns>Object instance.</returns>
            <remarks>For this to work, the stream must contain a serialized object</remarks>
            <example>
            Customer customer = (Customer)EPS.Utilities.ObjectHelper.DeserializeFromBinaryStream(stream);
            </example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ObjectHelper.DeserializeFromBinary(System.IO.Stream)">
            <summary>
            Deserializes the stream to an object
            </summary>
            <param name="stateStream">The state stream.</param>
            <returns>Object instance</returns>
            <remarks>
            For this to work, the stream must contain a serialized object
            This is an extension method.
            </remarks>
            <example>
            using EPS.Utilities;
            // more code
            Customer customer = (Customer)stream.DeserializeFromBinary();
            </example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ObjectHelper.SerializeToBinaryArray(System.Object)">
            <summary>
            Serializes an object to its binary state
            </summary>
            <param name="objectToSerialize">The object to serialize.</param>
            <returns>
            Byte array of binary information for the object
            </returns>
            <remarks>
            For this to work, the provided object must be serializable.
            This method can be used as an extension method.
            </remarks>
            <example>
            using EPS.Utilities;
            // more code...
            byte[] serialized = customer.SerializeToBinaryArray();
            // or
            byte[] serialized = EPS.Utilities.ObjectHelper.SerializeToBinaryArray(customer);
            </example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ObjectHelper.SerializeToXmlStream(System.Object)">
            <summary>
            Serializes an object to its XML state
            </summary>
            <param name="objectToSerialize">The object to serialize.</param>
            <returns>
            XML stream representing the object's state
            </returns>
            <remarks>
            For this to work, the provided object must be serializable.
            This method can be used as an extension method.
            </remarks>
            <example>
            using EPS.Utilities;
            // more code
            Stream xmlStream = customer.SerializeToXmlStream();
            // or
            Stream xmlStream = EPS.Utilities.ObjectHelper.SerializeToXmlStream(customer);
            </example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ObjectHelper.SerializeToXmlString(System.Object)">
            <summary>
            Serializes an object to its XML state
            </summary>
            <param name="objectToSerialize">The object to serialize.</param>
            <returns>
            XML string representing the object's state
            </returns>
            <remarks>
            For this to work, the provided object must be serializable.
            This method can be used as an extension method.
            </remarks>
            <example>
            using EPS.Utilities;
            // more code
            string xml = customer.SerializeToXmlString();
            // or
            string xml = EPS.Utilities.ObjectHelper.SerializeToXmlString(customer);
            </example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ObjectHelper.SerializeToXmlDocument(System.Object)">
            <summary>
            Serializes an object to its XML state
            </summary>
            <param name="objectToSerialize">The object to serialize.</param>
            <returns>
            XML document representing the object's state
            </returns>
            <remarks>
            For this to work, the provided object must be serializable.
            This method can be used as an extension method.
            </remarks>
            <example>
            using EPS.Utilities;
            // more code
            XmlDocument xml = customer.SerializeToXmlDocument();
            // or
            XmlDocument xml = EPS.Utilities.ObjectHelper.SerializeToXmlDocument(customer);
            </example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ObjectHelper.DeserializeFromXmlStream(System.IO.Stream,System.Type)">
            <summary>
            Deserializes an object from its state stored in an xml stream.
            </summary>
            <param name="stateStream">The state stream.</param>
            <param name="expectedType">The expected interfaceType (which will be the returned interfaceType).</param>
            <returns>Object instance.</returns>
            <remarks>
            For this to work, the XML Stream must contain a seralized object
            </remarks>
            <example>
            Customer customer = (Customer)EPS.Utilities.ObjectHelper.DeserializeFromXmlStream(stream, typeof(Customer));
            </example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ObjectHelper.DeserializeFromXml(System.IO.Stream,System.Type)">
            <summary>
            Deserializes an object from its state stored in an xml stream.
            </summary>
            <param name="stateStream">The state stream.</param>
            <param name="expectedType">The expected interfaceType.</param>
            <returns>Object instance</returns>
            <remarks>
            For this to work, the XML Stream must contain a seralized object
            </remarks>
            <example>
            using EPS.Utilities;
            // more code
            Customer customer = (Customer)stream.DeserializeFromXmlStream(typeof(Customer));
            </example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ObjectHelper.SerializeToSoapStream(System.Object)">
            <summary>
            Serializes an object to its SOAP representation
            </summary>
            <param name="objectToSerialize">The object to serialize.</param>
            <returns>
            XML stream representing the object's state
            </returns>
            <remarks>
            For this to work, the provided object must be serializable.
            This method can be used as an extension method.
            </remarks>
            <example>
            using EPS.Utilities;
            // more code
            Stream stream = customer.SerializeToSoapStream();
            // or
            Stream stream = EPS.Utilities.ObjectHelper.SerializeToSoapStream(customer);
            </example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ObjectHelper.SerializeToSoapString(System.Object)">
            <summary>
            Serializes an object to its SOAP state
            </summary>
            <param name="objectToSerialize">The object to serialize.</param>
            <returns>
            XML string representing the object's state
            </returns>
            <remarks>
            For this to work, the provided object must be serializable.
            This method can be used as an extension method.
            </remarks>
            <example>
            using EPS.Utilities;
            // more code
            string state = customer.SerializeToSoapString();
            // or
            string state = EPS.Utilities.ObjectHelper.SerializeToSoapString(customer);
            </example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ObjectHelper.SerializeToSoapDocument(System.Object)">
            <summary>
            Serializes an object to its SOAP state
            </summary>
            <param name="objectToSerialize">The object to serialize.</param>
            <returns>
            XML document representing the object's state
            </returns>
            <remarks>
            For this to work, the provided object must be serializable.
            This method can be used as an extension method.
            </remarks>
            <example>
            using EPS.Utilities;
            // more code
            XmlDocument xml = customer.SerializeToSoapDocument();
            // or
            XmlDocument xml = EPS.Utilities.ObjectHelper.SerializeToSoapDocument(customer);
            </example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ObjectHelper.ValuesDiffer(System.Object,System.Object)">
            <summary>
            Compares the values of two objects and returns true if the values are different
            </summary>
            <param name="value1">The first value.</param>
            <param name="value2">The second value.</param>
            <returns>True if values DIFFER</returns>
            <example>
            object o1 = "Hello";
            object o2 = "World";
            object o3 = 25;
            ObjectHelper.ValuesDiffer(o1, o2); // returns true;
            ObjectHelper.ValuesDiffer(o1, o3); // returns true;
            </example>
            <remarks>
            This method has been created to be easily able to compare objects of unknown types.
            In particular, this is useful when comparing two fields in a DataSet.
            This method can even handle byte arrays.
            </remarks>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ObjectHelper.GetPropertyValue``1(System.Object,System.String)">
            <summary>Dynamically retrieves a property value from the specified object</summary>
            <typeparam name="TResult">The interfaceType of the result.</typeparam>
            <param name="valueObject">The value object.</param>
            <param name="path">Name of the property.</param>
            <returns>Property value or default value</returns>
            <remarks>
            The property must be a readable instance property.
            This method can be called as an extension method.
            </remarks>
            <example>
            using EPS.Utilities;
            // more code
            var customer = this.GetCustomerObject();
            string name = customer.GetPropertyValue&lt;string&gt;("LastName");
            </example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ObjectHelper.GetPropertyByPath(System.Object,System.String,System.Object@)">
            <summary>
            Returns property information based on the provided path (path can be a simple property name or a more complex path)
            </summary>
            <param name="valueObject">The value object.</param>
            <param name="path">The path.</param>
            <param name="parentObject">The parent object.</param>
            <returns>PropertyInfo.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ObjectHelper.SetPropertyValue``1(System.Object,System.String,``0)">
            <summary>
            Dynamically retrieves a property value from the specified object
            </summary>
            <typeparam name="TValue">The interfaceType of the value that is to be set.</typeparam>
            <param name="valueObject">The value object.</param>
            <param name="path">Name of the property.</param>
            <param name="value">The value that is to be set.</param>
            <returns>True if the value was set successfully</returns>
            <remarks>
            The property must be a writable instance property.
            This method can be called as an extension method.
            </remarks>
            <example>
            using EPS.Utilities;
            // more code
            var customer = this.GetCustomerObject();
            customer.SetPropertyValue("LastName", "Smith");
            </example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ObjectHelper.InvokeMethod``1(System.Object,System.String,System.Object[])">
            <summary>
            Dynamically invokes the specified method on the defined object
            </summary>
            <typeparam name="TResult">The expected return interfaceType for the method</typeparam>
            <param name="valueObject">The value object (object that contains the method).</param>
            <param name="methodName">Name of the method.</param>
            <param name="parameters">The parameters.</param>
            <returns>The method's return value</returns>
            <remarks>
            The method must be an instance method
            This method can be called as an extension method.
            </remarks>
            <example>
            using EPS.Utilities;
            // more code
            var customer = this.GetCustomerObject();
            object[] parameters = { "John", "M.", "Smith" };
            string fullName = customer.InvokeMethod&lt;string&gt;("GetFullName", parameters);
            </example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ObjectHelper.GetAllMethodsForInterface(System.Type)">
            <summary>
            Returns all methods defined on an interface or interfaces it inherits from.
            </summary>
            <param name="interfaceType">The interface type.</param>
            <returns>IEnumerable&lt;MethodInfo&gt;.</returns>
        </member>
        <member name="T:CODE.Framework.Core.Utilities.ObjectInstantiationException">
            <summary>
            Exception thrown whenever object instantiation fails.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ObjectInstantiationException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ObjectInstantiationException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">Exception message</param>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ObjectInstantiationException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">Exception message</param>
            <param name="innerException">Inner exception</param>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ObjectInstantiationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Streaming context</param>
        </member>
        <member name="T:CODE.Framework.Core.Utilities.SecurityHelper">
            <summary>
            A simple encryption class that can be used to two-encode/decode strings and byte buffers
            with single method calls.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.SecurityHelper.EncryptBytes(System.Byte[],System.Byte[])">
            <summary>
            Encodes a stream of bytes using DES encryption with a pass key. 
            Lowest level method that handles all work.
            </summary>
            <param name="inputString">Byte array that represents the input string</param>
            <param name="encryptionKey">Encryption key used for the encryption</param>
            <returns>Encrypted bytes</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.SecurityHelper.EncryptBytes(System.String,System.Byte[])">
            <summary>
            Encrypts a string into bytes using DES encryption with a Passkey. 
            </summary>
            <param name="inputString">Input String</param>
            <param name="encryptionKey">Encryption Key</param>
            <returns>Encrypted bytes</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.SecurityHelper.EncryptString(System.String,System.Byte[])">
            <summary>
            Encrypts a string using Triple DES encryption with a two way encryption key.
            String is returned as Base64 encoded value rather than binary.
            </summary>
            <param name="inputString">Input string</param>
            <param name="encryptionKey">Encryption Key</param>
            <returns>Base64 encoded encrypted string</returns>
            <remarks>
            The key is expected to have a length of 24 bytes.
            This method can be used with an arbitrary key, but make sure
            you use the same key for encryption and decryption.
            </remarks>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.SecurityHelper.DecryptBytes(System.Byte[],System.Byte[])">
            <summary>
            Decrypts a Byte array from DES with an Encryption Key.
            </summary>
            <param name="decryptBuffer">Bytes to decrypt</param>
            <param name="encryptionKey">Encryption Key</param>
            <returns>Decrypted bytes</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.SecurityHelper.DecryptBytes(System.String,System.Byte[])">
            <summary>
            Decrypts a string
            </summary>
            <param name="decryptString">String to decrypt</param>
            <param name="encryptionKey">Encryption Key</param>
            <returns>Decrypted bytes</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.SecurityHelper.DecryptString(System.String,System.Byte[])">
            <summary>
            Decrypts a Base64 encoded string using DES encryption and a pass key that was used for 
            encryption.
            </summary>
            <param name="stringToDecrypt">String to decrypt</param>
            <param name="encryptionKey">Key</param>
            <returns>Decrypted string</returns>
            <remarks>
            The key is expected to have a length of 24 bytes.
            This method can be used with an arbitrary key, but make sure
            you use the same key for encryption and decryption.
            </remarks>
        </member>
        <member name="T:CODE.Framework.Core.Utilities.StreamHelper">
            <summary>
            This class can be used to perform common stream operations, such as converting a stream to a string
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.StreamHelper.ToString(System.IO.Stream)">
            <summary>
            Turns a stream into a string
            </summary>
            <param name="streamToConvert">Input stream</param>
            <returns>Output String</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.StreamHelper.ToArray(System.IO.Stream)">
            <summary>
            Turns a stream into a byte array
            </summary>
            <param name="streamToConvert">Input stream</param>
            <returns>Output array</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.StreamHelper.FromString(System.String)">
            <summary>
            Turns a string into a stream
            </summary>
            <param name="stringToConvert">Input string</param>
            <returns>Output stream</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.StreamHelper.FromArray(System.Byte[])">
            <summary>
            Turns a byte array into a stream
            </summary>
            <param name="arrayToConvert">The array to convert.</param>
            <returns>Output stream</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.StreamHelper.ToFile(System.IO.Stream,System.String)">
            <summary>
            Writes a stream to file
            </summary>
            <param name="stream">The stream.</param>
            <param name="fileName">Name of the file.</param>
            <returns>True if successful</returns>
            <remarks>Existing files will be overwritten.</remarks>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.StreamHelper.ToFile(System.IO.Stream,System.String,System.Boolean)">
            <summary>
            Writes a stream to file
            </summary>
            <param name="stream">The stream.</param>
            <param name="fileName">Name of the file.</param>
            <param name="overrideExisting">If set to <c>true</c> override existing file.</param>
            <returns>True if successful</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.StreamHelper.ToFile(System.IO.Stream,System.String,System.Boolean,System.Text.Encoding)">
            <summary>
            Writes a stream to file
            </summary>
            <param name="stream">The stream.</param>
            <param name="fileName">Name of the file.</param>
            <param name="overrideExisting">If set to <c>true</c> override existing file.</param>
            <param name="encoding">The file encoding.</param>
            <returns>True if successful</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.StreamHelper.FromFile(System.String)">
            <summary>
            Loads a stream from a file
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns>Stream</returns>
            <remarks>
            The returned stream is a memory stream that is not connected to the file.
            In other words: After this method completes, the file is closed and can be
            accessed by other means.
            </remarks>
        </member>
        <member name="T:CODE.Framework.Core.Utilities.StringHelper">
            <summary>
            This class provides a number of (static) methods that are useful when working with strings.
            Some of these methods have been migrated from the VFPToolkit class written by Kamal Patel.
            Special thanks go to Kamal. (www.KamalPatel.com)
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.StringHelper.Lower(System.String)">
            <summary>Returns a culture-neutral to-lower operation on the string.</summary>
            <param name="originalString">Original string</param>
            <returns>Lower-case string</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.StringHelper.Upper(System.String)">
            <summary>Returns a culture-neutral to-upper operation on the string.</summary>
            <param name="originalString">Original string</param>
            <returns>Upper-case string</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.StringHelper.ToString(System.Object)">
            <summary>Returns the string in a culture-neutral fashion</summary>
            <param name="value">Value to be turned into a string</param>
            <returns>String</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.StringHelper.ToStringSafe(System.Object)">
            <summary>Returns a string representation of the provided value. Returns an empty string if the value is null</summary>
            <param name="value">Value to be turned into a string</param>
            <returns>String</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.StringHelper.Compare(System.String,System.String)">
            <summary>Returns true if the two strings match.</summary>
            <param name="firstString">First string</param>
            <param name="secondString">Second string</param>
            <returns>True or False</returns>
            <remarks>The strings are trimmed and compared in a case-insensitive, culture neutral fashion.</remarks>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.StringHelper.Compare(System.String,System.String,System.Boolean)">
            <summary>Returns true if the two strings match.</summary>
            <param name="firstString">First string</param>
            <param name="secondString">Second string</param>
            <param name="ignoreCase">Should case (upper/lower) be ignored?</param>
            <returns>True or False</returns>
            <remarks>The strings are trimmed and compared in a case-insensitive, culture neutral fashion.</remarks>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.StringHelper.Proper(System.String)">
            <summary>Receives a string as a parameter and returns the string in Proper format (makes each letter after a space capital)</summary>
            <example>StringHelper.Proper("joe doe is a good man");	//returns "Joe Doe Is A Good Man"</example>
            <param name="originalString">String</param>
            <returns>Proper string</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.StringHelper.SmartProper(System.String)">
            <summary>
            This method returns strings in proper case.
            However, contrary to regular Proper() methods, 
            this method can be used to format names.
            For instance, "MacLeod" will remain "MacLeod",
            "macLeod" will be "MacLeod", "MACLEOD" will be turned into
            "Macleod". "macleod" will also be turned into "Macleod".
            </summary>
            <param name="originalString">String that is to be formatted</param>
            <returns>Properly formatted string</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.StringHelper.SpaceCamelCase(System.String)">
            <summary>This method takes a camel-case string (such as one defined by an enum) and returns is with a space before every upper-case letter.</summary>
            <example>StringHelper.SpaceCamelCase("CamelCaseWord"); // returns"Camel Case Word"</example>
            <param name="originalString">String</param>
            <returns>String with spaces</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.StringHelper.ToFile(System.String,System.String)">
            <summary>Receives a string and a file name as parameters and writes the contents of the string to that file</summary>
            <example>
            string text = "This is the line we want to insert in our file.";
            StringHelper.ToFile(text, @"c:\My Folders\MyFile.txt");
            </example>:
            <param name="expression">String to be written</param>
            <param name="fileName">File name the string is to be written to.</param>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.StringHelper.ToFile(System.String,System.String,System.Text.Encoding)">
            <summary>Receives a string and a file name as parameters and writes the contents of the string to that file</summary>
            <example>
            string text = "This is the line we want to insert in our file.";
            StringHelper.ToFile(text, "c:\\My Folders\\MyFile.txt");
            </example>
            <param name="expression">String to be written</param>
            <param name="fileName">File name the string is to be written to.</param>
            <param name="encoding">File encoding</param>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.StringHelper.FromFile(System.String)">
            <summary>Loads a file from disk and returns it as a string</summary>
            <param name="fileName">File to be loaded</param>
            <returns>String containing the file contents</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.StringHelper.Base64Encode(System.String)">
            <summary>This method takes any regular string, and returns its base64 encoded representation</summary>
            <param name="original">Original String</param>
            <returns>Base64 encoded string</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.StringHelper.Base64Decode(System.String)">
            <summary>Takes a base64 encoded string and converts it into a regular string</summary>
            <param name="encodedString">Base64 encoded string</param>
            <returns>Decoded string</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.StringHelper.At(System.String,System.String)">
            <summary>Receives two strings as parameters and searches for one string within another. If found, returns the beginning numeric position otherwise returns 0</summary>
            <example>StringHelper.At("D", "Joe Doe");	//returns 5</example>
            <param name="searchFor">String to search for</param>
            <param name="searchIn">String to search in</param>
            <returns>Position</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.StringHelper.At(System.String,System.String,System.Int32)">
            <summary>
            Receives two strings and an occurrence position (1st, 2nd etc) as parameters and 
            searches for one string within another for that position. 
            If found, returns the beginning numeric position otherwise returns 0
            </summary>
            <example>
            StringHelper.At("o", "Joe Doe", 1);	//returns 2
            StringHelper.At("o", "Joe Doe", 2);	//returns 6
            </example>
            <param name="searchFor">String to search for</param>
            <param name="searchIn">String to search in</param>
            <param name="occurrence">The occurrence of the string</param>
            <returns>Position</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.StringHelper.Asc(System.Char)">
            <summary>Receives a character as a parameter and returns its ANSI code</summary>
            <example>Asc('#'); //returns 35</example>
            <param name="character">Character</param>
            <returns>ASCII value</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.StringHelper.Chr(System.Int32)">
            <summary>Receives an integer ANSI code and returns a character associated with it</summary>
            <example>StringHelper.Chr(35); //returns '#'</example>
            <param name="ansiCode">Character Code</param>
            <returns>Char that corresponds with the ascii code</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.StringHelper.GetWordCount(System.String)">
            <summary>Receives a string as a parameter and counts the number of words in that string</summary>
            <example>
            string lcString = "Joe Doe is a good man";
            StringHelper.GetWordCount(lcString); // returns 6
            </example>
            <param name="sourceString">String</param>
            <returns>Word Count</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.StringHelper.GetWordNumb(System.String,System.Int32)">
            <summary>Based on the position specified, returns a word from a string. Receives a string as a parameter and counts the number of words in that string.</summary>
            <example>
            string lcString = "Joe Doe is a good man";
            StringHelper.GetWordNumber(lcString, 5); // returns "good"
            </example>
            <param name="sourceString">String</param>
            <param name="wordPosition">Word Position</param>
            <returns>Word number</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.StringHelper.GetWordNumber(System.String,System.Int32)">
            <summary>Based on the position specified, returns a word from a string. Receives a string as a parameter and counts the number of words in that string.</summary>
            <example>
            string lcString = "Joe Doe is a good man";
            StringHelper.GetWordNumber(lcString, 5); // returns "good"
            </example>
            <param name="sourceString">String</param>
            <param name="wordPosition">Word Position</param>
            <returns>Word number</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.StringHelper.IsAlpha(System.String)">
            <summary>Returns a bool indicating if the first character in a string is an alphabet or not</summary>
            <example>StringHelper.IsAlpha("Joe Doe"); // returns true</example>
            <param name="expression">Expression</param>
            <returns>True or False depending on whether the string only had alphanumeric chars</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.StringHelper.Occurs(System.Char,System.String)">
            <summary>Returns the number of occurrences of a character within a string</summary>
            <example>StringHelper.Occurs('o', "Joe Doe"); // returns 2</example>
            <param name="character">Search Character</param>
            <param name="expression">Expression</param>
            <returns>Number of occurrences</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.StringHelper.Occurs(System.String,System.String)">
            <summary>Returns the number of occurrences of one string within another string</summary>
            <example>
            StringHelper.Occurs("oe", "Joe Doe"); //returns 2
            StringHelper.Occurs("Joe", "Joe Doe"); //returns 1
            </example>
            <param name="searchString">Search String</param>
            <param name="stringSearched">Expression</param>
            <returns>Number of occurrences</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.StringHelper.Replicate(System.String,System.Int32)">
            <summary>Receives a string expression and a numeric value indicating number of time and replicates that string for the specified number of times.</summary>
            <example>StringHelper.Replicate("Joe", 5); // returns JoeJoeJoeJoeJoe</example>
            <param name="expression">Expression</param>
            <param name="times">Number of times the string is to be replicated</param>
            <returns>New string</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.StringHelper.SubstringSafe(System.String,System.Int32,System.Int32)">
            <summary>Overloaded method for SubStr() that receives starting position and length</summary>
            <param name="expression">String expression</param>
            <param name="startIndex">Start Index</param>
            <param name="length">Length</param>
            <returns>Substring</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.StringHelper.SubStr(System.String,System.Int32,System.Int32)">
            <summary>Overloaded method for SubStr() that receives starting position and length</summary>
            <param name="expression">Expression</param>
            <param name="startPosition">Start Position</param>
            <param name="length">Length</param>
            <returns>Substring</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.StringHelper.AtLine(System.String,System.String)">
            <summary>Receives a string and converts it to an integer</summary>
            <example>StringHelper.AtLine("Is", "Is Life Beautiful? \r\n It sure is"); // returns 1</example>
            <param name="searchExpression">Search Expression</param>
            <param name="expressionSearched">Expression Searched</param>
            <returns>Line number</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.StringHelper.IsDigit(System.String)">
            <summary>Receives a string as a parameter and returns a bool indicating if the left most character in the string is a valid digit.</summary>
            <example>if(StringHelper.IsDigit("1Kamal")){...}	//returns true</example>
            <param name="sourceString">Expression</param>
            <returns>True or False</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.StringHelper.JustPath(System.String)">
            <summary>Takes a fully qualified file name, and returns just the path</summary>
            <param name="path">File name with path</param>
            <returns>Just the path as a string</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.StringHelper.JustFileName(System.String)">
            <summary>Returns just the file name part of a full path</summary>
            <param name="path">The full path to the file</param>
            <returns>File name</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.StringHelper.AddBS(System.String)">
            <summary>Makes sure the secified path ends with a back-slash</summary>
            <param name="path">Path</param>
            <returns>Path with BS</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.StringHelper.ArrayContainsString(System.String[],System.String)">
            <summary>Returns true if the array contains the string we are looking for</summary>
            <param name="hostArray">The host array.</param>
            <param name="searchText">The search string.</param>
            <returns>True or false</returns>
            <example>
            string[] testArray = new string[] { "One", "Two", "Three" };
            bool result1 = StringHelper.ArrayContainsString(testArray, "one", true); // returns true
            bool result2 = StringHelper.ArrayContainsString(testArray, "one"); // returns false
            bool result3 = StringHelper.ArrayContainsString(testArray, "One"); // returns true
            bool result4 = StringHelper.ArrayContainsString(testArray, "Four"); // returns false
            </example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.StringHelper.ArrayContainsString(System.String[],System.String,System.Boolean)">
            <summary>Returns true if the array contains the string we are looking for</summary>
            <param name="hostArray">The host array.</param>
            <param name="searchText">The search string.</param>
            <param name="ignoreCase">if set to <c>true</c> [ignore case].</param>
            <returns>True or false</returns>
            <example>
            string[] testArray = new string[] { "One", "Two", "Three" };
            bool result1 = StringHelper.ArrayContainsString(testArray, "one", true); // returns true
            bool result2 = StringHelper.ArrayContainsString(testArray, "one"); // returns false
            bool result3 = StringHelper.ArrayContainsString(testArray, "One"); // returns true
            bool result4 = StringHelper.ArrayContainsString(testArray, "Four"); // returns false
            </example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.StringHelper.TryIntParse(System.String,System.Int32)">
            <summary>Tries to parse a string value as an integer. If the parse fails, the provided default value will be inserted</summary>
            <param name="value">The value.</param>
            <param name="failedDefault">The failed default.</param>
            <returns></returns>
            <example>
            string value = "1";
            int valueInt = StringHelper.TryIntParse(value, -1);
            </example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.StringHelper.TryGuidParse(System.String,System.Guid)">
            <summary>Tries to parse a string value as an Guid. If the parse fails, the provided default value will be inserted</summary>
            <param name="value">The value.</param>
            <param name="failedDefault">The failed default.</param>
            <returns></returns>
            <example>
            string value = "xxx";
            Guid valueGuid = StringHelper.TryGuidParse(value, Guid.Empty);
            </example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.StringHelper.TryGuidParse(System.String)">
            <summary>Tries to parse a string value as an Guid. If the parse fails, Guid.Empty will be returned</summary>
            <param name="value">The value.</param>
            <returns></returns>
            <example>
            string value = "xxx";
            Guid valueGuid = StringHelper.TryGuidParse(value);
            </example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.StringHelper.TryBoolParse(System.String,System.Boolean)">
            <summary>Tries to parse a string value as a boolean.</summary>
            <param name="value">The value.</param>
            <param name="failedDefault">Value returned if the string cannot be converted to a boolean.</param>
            <returns></returns>
            <example>
            string value = "xxx";
            bool valueBool = StringHelper.TryBoolParse(value);
            </example>
        </member>
        <member name="T:CODE.Framework.Core.Utilities.TransparentProxyGenerator">
            <summary>
            Class TransparentProxyGenerator.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.TransparentProxyGenerator.GetProxy``1(CODE.Framework.Core.Utilities.IProxyHandler)">
            <summary>
            Returns a proxy for the provided interface
            </summary>
            <typeparam name="TProxy">Type to be proxied</typeparam>
            <param name="handler">The actual handler object that handles all the calls to the proxy.</param>
            <returns>Proxy object</returns>
            <exception cref="T:System.ArgumentException">T needs to be an interface</exception>
        </member>
        <member name="T:CODE.Framework.Core.Utilities.IProxyHandler">
            <summary>
            Interface for handler objects that can be used to provide transparent proxy functionality
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.IProxyHandler.OnMethod(System.Reflection.MethodInfo,System.Object[])">
            <summary>
            This method is called when any method on a proxied object is invoked.
            </summary>
            <param name="method">Information about the method being called.</param>
            <param name="args">The arguments passed to the method.</param>
            <returns>Result value from the proxy call</returns>
        </member>
        <member name="T:CODE.Framework.Core.Utilities.XmlHelper">
            <summary>
            Provides useful XML helper functionality
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.XmlHelper.Format(System.String)">
            <summary>
            Returns a formatted version of the XML string (line breaks, indentations, ...)
            </summary>
            <param name="xml">The raw XML.</param>
            <returns>Formatted XML string</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.XmlHelper.Format(System.Xml.XmlDocument)">
            <summary>
            Returns a formatted version of the XML string (line breaks, indentations, ...)
            </summary>
            <param name="xml">The original XML Document.</param>
            <returns>Formatted XML string</returns>
        </member>
        <member name="T:CODE.Framework.Core.Utilities.ZipFile">
            <summary>
            ZIP File handling class
            </summary>
            <example>
            // Open existing ZIP file
            var zip = ZipFile.Read(@"c:\test.zip");
            zip.ExtractAll(@"c:\ExtractFolder");
            
            // Create new ZIP file
            var zip = new ZipFile("MyFile.zip");
            zip.AddFile(@"c:\Markus.jpg");
            zip.AddBytes("This is a test file".ToByteArraySafe(), "ReadMe.txt");
            zip.Save();
            </example>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.ZipFile._readStream">
            <summary>
            Internal field for the read stream
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.ZipFile._writeStream">
            <summary>
            Internal field for the write stream
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ZipFile.InitializeDefaultValues">
            <summary>
            Initializes the default values of properties inside this class
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ZipFile.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Utilities.ZipFile"/> class.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ZipFile.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Utilities.ZipFile"/> class.
            </summary>
            <param name="newZipFileName">Name of the new ZIP file.</param>
            <example>
            var newZip = new ZipFile("MyNewZipFile.zip");
            </example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ZipFile.AddItem(System.String)">
            <summary>
            Adds a file or folder to the ZIP archive
            </summary>
            <param name="fileOrDirectoryName">Name of the file or directory.</param>
            <example>
            var newZip = new ZipFile("MyNewZipFile.zip");
            newZip.AddItem("C:\DirectoryToZip");
            newZip.AddItem("C:\Folder\Test.exe");
            </example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ZipFile.AddBytes(System.Byte[],System.String,System.DateTime)">
            <summary>
            Adds raw data to the ZIP archive as a file.
            </summary>
            <param name="bytesToCompress">Data/ file bytes</param>
            <param name="fileName">Name of the file.</param>
            <param name="fileWriteTime">The file write time.</param>
            <returns>ZIP Entry</returns>
            <example>
            var newZip = new ZipFile("MyNewZipFile.zip");
            newZip.AddBytes("Hello World".ToByteArraySafe(), "Test.txt", DateTime.Now);
            </example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ZipFile.AddBytes(System.Byte[],System.String)">
            <summary>
            Adds raw data to the ZIP archive as a file.
            </summary>
            <param name="bytesToCompress">Data/ file bytes</param>
            <param name="fileName">Name of the file.</param>
            <returns>ZIP Entry</returns>
            <example>
            var newZip = new ZipFile("MyNewZipFile.zip");
            newZip.AddBytes("Hello World".ToByteArraySafe(), "Test.txt");
            </example>
            <remarks>Current date time is assumed as the file date.</remarks>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ZipFile.AddFile(System.String)">
            <summary>
            Adds the file to the ZIP archive.
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns></returns>
            <example>
            var newZip = new ZipFile("MyNewZipFile.zip");
            newZip.AddFile("C:\Folder\Test.exe");
            </example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ZipFile.AddDirectory(System.String)">
            <summary>
            Adds a whole Directory/Folder to the ZIP archive
            </summary>
            <param name="directory">The directory.</param>
            <example>
            var newZip = new ZipFile("MyNewZipFile.zip");
            newZip.AddDirectory("C:\Folder");
            </example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ZipFile.SaveToStream">
            <summary>
            Saves the ZIP archive to a stream
            </summary>
            <returns>Stream</returns>
            <example>
            var newZip = new ZipFile("MyNewZipFile.zip");
            newZip.AddDirectory("C:\Folder");
            Stream result = newZip.SaveToStream();
            </example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ZipFile.Save">
            <summary>
            Saves the ZIP file
            </summary>
            <example>
            var newZip = new ZipFile("MyNewZipFile.zip");
            newZip.AddDirectory("C:\Folder");
            newZip.Save();
            </example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ZipFile.WriteCentralDirectoryStructure">
            <summary>
            Writes the central directory structure.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ZipFile.WriteCentralDirectoryFooter(System.Int64,System.Int64)">
            <summary>
            Writes the central directory footer.
            </summary>
            <param name="startOfCentralDirectory">The start of central directory.</param>
            <param name="endOfCentralDirectory">The end of central directory.</param>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ZipFile.Read(System.String)">
            <summary>
            This will throw if the zipfile does not exist.
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns>ZIP File</returns>
            <example>
            var archive = ZipFile.Read("c:\Downloads\Test.zip");
            </example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ZipFile.Read(System.Byte[],System.String)">
            <summary>
            Reads a ZIP File from in-memory bytes
            </summary>
            <param name="zipBytes">The zip bytes.</param>
            <param name="fileName">Name of the file.</param>
            <returns></returns>
            <example>
            var zipFile = ZipFile.Read(data, "Test.zip");
            </example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ZipFile.Read(System.Byte[])">
            <summary>
            Reads a ZIP File from in-memory bytes
            </summary>
            <param name="zipBytes">The zip bytes.</param>
            <returns></returns>
            <example>
            var zipFile = ZipFile.Read(data);
            </example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ZipFile.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ZipFile.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ZipFile.ExtractAll(System.String)">
            <summary>
            Extracts all contents of the ZIP File to the specified path
            </summary>
            <param name="path">The path.</param>
            <example>
            var archive = ZipFile.Read("c:\Downloads\Test.zip");
            archive.ExtractAll("c:\Downloads\Extract");
            </example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ZipFile.Extract(System.String)">
            <summary>
            Extracts the specified file from the ZIP archive
            </summary>
            <param name="fileName">Name of the file within the archive.</param>
            <example>
            var zipFile = ZipFile.Read("Photos.zip");
            zipFile.Extract("Markus.jpg");
            </example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ZipFile.Extract(System.String,System.IO.Stream)">
            <summary>
            Extracts the specified file name into the extract stream.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="extractStream">The extract stream.</param>
            var zipFile = ZipFile.Read("Photos.zip");
            var stream = new MemoryStream();
            zipFile.Extract("Markus.jpg", stream);
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ZipFile.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:CODE.Framework.Core.Utilities.ZipFile"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ZipFile.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ZipFile.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposeManagedResources"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.ZipFile._disposed">
            <summary>
            Indicator whether or not the dispose ran (used internally)
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.ZipFile._entries">
            <summary>
            List of ZIP entries (used internally)
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.ZipFile._directoryEntries">
            <summary>
            List of Directory entries (used internally)
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.ZipFile.Name">
            <summary>
            Name of the ZIP File
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.ZipFile.TrimVolumeFromFullyQualifiedPaths">
            <summary>Indicates whether the volume should be trimmed from fully qualified paths</summary>
            <value><c>true</c> if [trim volume from fully qualified paths]; otherwise, <c>false</c>.</value>
            <remarks>
            when this is set, we trim the volume (eg C:) off any fully-qualified pathname, 
            before writing the ZipEntry into the ZipFile. 
            We default this to true.  This allows Windows Explorer to read the zip archives properly. 
            </remarks>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.ZipFile.ReadStream">
            <summary>
            Read stream used internally by this class
            </summary>
            <value>The read stream.</value>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.ZipFile.WriteStream">
            <summary>
            Write stream used internally by this class
            </summary>
            <value>The write stream.</value>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.ZipFile.Item(System.String)">
            <summary>
            Gets the ZIP file corresponding with the provided file name
            </summary>
            <value></value>
            <example>
            var zipFile = ZipFile.Read("Photos.zip");
            var photo = zipFile["Markus.jpg"];
            </example>
        </member>
        <member name="T:CODE.Framework.Core.Utilities.ZipEntry">
            <summary>
            Represents a single entry (file) within a ZIP archive
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.ZipEntry.ZipEntrySignature">
            <summary>
            ZIP Entry Signature
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.ZipEntry.ZipEntryDataDescriptorSignature">
            <summary>
            ZIP Entry Data Descriptor Signature
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ZipEntry.SignatureIsNotValid(System.Int32)">
            <summary>
            Returns false if the signature is not a valid ZIP entry signature
            </summary>
            <param name="signature">The signature.</param>
            <returns></returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ZipEntry.Read(System.IO.Stream)">
            <summary>
            Reads the entry from the stream
            </summary>
            <param name="stream">The stream.</param>
            <returns></returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ZipEntry.Create(System.String)">
            <summary>
            Creates a ZIP entry for the specified file name
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns></returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ZipEntry.Create(System.Byte[],System.String,System.DateTime)">
            <summary>
            Creates the specified bytes to compress.
            </summary>
            <param name="bytesToCompress">The bytes to compress.</param>
            <param name="fileName">Name of the file.</param>
            <param name="fileDate">The file date.</param>
            <returns></returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ZipEntry.Extract">
            <summary>
            Extracts the current ZIP file entry
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ZipEntry.Extract(System.IO.Stream)">
            <summary>
            Extracts the current ZIP file entry to the provided stream
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ZipEntry.Extract(System.String)">
            <summary>
            Extracts to the specified base directory.
            </summary>
            <param name="baseDirectory">The base directory.</param>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ZipEntry.Extract(System.String,System.IO.Stream)">
            <summary>
            Extracts to the specified base directory or stream.
            </summary>
            <param name="baseDirectory">The base directory.</param>
            <param name="stream">The stream.</param>
            <remarks>
            pass in either baseDirectory or stream, but not both. 
            In other words, you can extract to a stream or to a directory, but not both!
            </remarks>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ZipEntry.WriteCentralDirectoryEntry(System.IO.Stream)">
            <summary>
            Writes the central directory entry to the provided stream.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ZipEntry.WriteHeader(System.IO.Stream,System.Byte[])">
            <summary>
            Writes the header to the provided stream
            </summary>
            <param name="stream">The stream.</param>
            <param name="bytes">The bytes.</param>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ZipEntry.Write(System.IO.Stream)">
            <summary>
            Writes the specified out stream.
            </summary>
            <param name="outStream">The out stream.</param>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.ZipEntry.LastModified">
            <summary>
            Gets or sets the last modified date.
            </summary>
            <value>The last modified.</value>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.ZipEntry.FileName">
            <summary>
            Gets or sets the name of the file.
            </summary>
            <value>The name of the file.</value>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.ZipEntry.BytesToCompres">
            <summary>
            Gets or sets the bytes to compres.
            </summary>
            <value>The bytes to compres.</value>
            <remarks>
            If this is set, this array is used, rather than a file that needs to be opened
            </remarks>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.ZipEntry.DirectoryNameOverride">
            <summary>
            Gets or sets the directory name override.
            </summary>
            <value>The directory name override.</value>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.ZipEntry.CompressedFileName">
            <summary>
            Gets the name of the compressed file.
            </summary>
            <value>The name of the compressed file.</value>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.ZipEntry.VersionNeeded">
            <summary>
            Gets or sets the version needed.
            </summary>
            <value>The version needed.</value>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.ZipEntry.BitField">
            <summary>
            Gets or sets the bit field.
            </summary>
            <value>The bit field.</value>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.ZipEntry.CompressionMethod">
            <summary>
            Gets or sets the compression method.
            </summary>
            <value>The compression method.</value>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.ZipEntry.CompressedSize">
            <summary>
            Gets or sets the size of the compressed.
            </summary>
            <value>The size of the compressed.</value>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.ZipEntry.UncompressedSize">
            <summary>
            Gets or sets the size of the uncompressed.
            </summary>
            <value>The size of the uncompressed.</value>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.ZipEntry.CompressionRatio">
            <summary>
            Gets the compression ratio.
            </summary>
            <value>The compression ratio.</value>
        </member>
        <member name="T:CODE.Framework.Core.Utilities.ZipDirEntry">
            <summary>
            ZIP directory entry
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.ZipDirEntry.ZipDirectoryEntrySignature">
            <summary>
            ZIP directory entry signature
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ZipDirEntry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Utilities.ZipDirEntry"/> class.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ZipDirEntry.#ctor(CODE.Framework.Core.Utilities.ZipEntry)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Utilities.ZipDirEntry"/> class.
            </summary>
            <param name="zipEntry">The zip entry.</param>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ZipDirEntry.Read(System.IO.Stream)">
            <summary>
            Reads the specified entry stream.
            </summary>
            <param name="entryStream">The entry stream.</param>
            <returns></returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ZipDirEntry.SignatureIsNotValid(System.Int32)">
            <summary>
            Returns false if the directory signature is not a valid ZIP directory signature
            </summary>
            <param name="signature">The signature.</param>
            <returns></returns>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.ZipDirEntry.LastModified">
            <summary>
            Gets or sets the last modified date.
            </summary>
            <value>The last modified.</value>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.ZipDirEntry.FileName">
            <summary>
            Gets or sets the name of the file.
            </summary>
            <value>The name of the file.</value>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.ZipDirEntry.Comment">
            <summary>
            Gets or sets the comment.
            </summary>
            <value>The comment.</value>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.ZipDirEntry.VersionMadeBy">
            <summary>
            Gets or sets the version made by.
            </summary>
            <value>The version made by.</value>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.ZipDirEntry.VersionNeeded">
            <summary>
            Gets or sets the version needed.
            </summary>
            <value>The version needed.</value>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.ZipDirEntry.CompressionMethod">
            <summary>
            Gets or sets the compression method.
            </summary>
            <value>The compression method.</value>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.ZipDirEntry.CompressedSize">
            <summary>
            Gets or sets the size of the compressed.
            </summary>
            <value>The size of the compressed.</value>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.ZipDirEntry.UncompressedSize">
            <summary>
            Gets or sets the size of the uncompressed.
            </summary>
            <value>The size of the uncompressed.</value>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.ZipDirEntry.CompressionRatio">
            <summary>
            Gets the compression ratio.
            </summary>
            <value>The compression ratio.</value>
        </member>
        <member name="T:CODE.Framework.Core.Utilities.SharedZipFunctionality">
            <summary>
            Shared functionality
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.SharedZipFunctionality.StringFromBuffer(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Returns a string of specified location and length from the buffer.
            </summary>
            <param name="buf">The buf.</param>
            <param name="start">The start.</param>
            <param name="maxLength">Length of the max.</param>
            <returns></returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.SharedZipFunctionality.ReadSignature(System.IO.Stream)">
            <summary>
            Reads the signature from the provided stream.
            </summary>
            <param name="signatureStream">The signature stream.</param>
            <returns></returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.SharedZipFunctionality.FindSignature(System.IO.Stream,System.Int32)">
            <summary>
            Finds the signature in the provided stream.
            </summary>
            <param name="signatureStream">The signature stream.</param>
            <param name="signatureToFind">The signature to find.</param>
            <returns></returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.SharedZipFunctionality.PackedToDateTime(System.Int32)">
            <summary>
            Turns a packed date time into a .NET date time
            </summary>
            <param name="packedDateTime">The packed date time.</param>
            <returns></returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.SharedZipFunctionality.DateTimeToPacked(System.DateTime)">
            <summary>
            Turns a .NET date time into a packed date time
            </summary>
            <param name="time">The time.</param>
            <returns></returns>
        </member>
        <member name="T:CODE.Framework.Core.Utilities.CRC32">
            <summary>
            Calculates a 32bit Cyclic Redundancy Checksum (CRC) using the
            same polynomial used by Zip.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.CRC32.GetCrc32(System.IO.Stream)">
            <summary>
            Returns the CRC32 for the specified stream.
            </summary>
            <param name="input">The stream over which to calculate the CRC32</param>
            <returns>the CRC32 calculation</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.CRC32.GetCrc32AndCopy(System.IO.Stream,System.IO.Stream)">
            <summary>
            Returns the CRC32 for the specified stream, and writes the input into the output stream.
            </summary>
            <param name="input">The stream over which to calculate the CRC32</param>
            <param name="output">The stream into which to deflate the input</param>
            <returns>the CRC32 calculation</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.CRC32.#ctor">
            <summary>
            Construct an instance of the CRC32 class, pre-initialising the table
            for speed of lookup.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.CRC32.TotalBytesRead">
            <summary>
            Gets the total bytes read.
            </summary>
            <value>The total bytes read.</value>
        </member>
    </members>
</doc>
