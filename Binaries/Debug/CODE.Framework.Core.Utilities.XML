<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CODE.Framework.Core.Utilities</name>
    </assembly>
    <members>
        <member name="T:CODE.Framework.Core.Utilities.ColorHelper">
            <summary>
            This class provides various features useful for handling and manipulating colors
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ColorHelper.GetLitColor(System.Drawing.Color,System.Single)">
            <summary>
            This method applies lighting to a color.
            For instance, a color that has a lighting factor of 1 applies, appears at its original value.
            A color with a lighting factor of 0.5 appears only half as bright as it was before.
            A color with a lighting factor of 1.5 appears roughly twice as bright as before.
            A color with a lightning factor of 2 appears white.
            </summary>
            <param name="originalColor">Base color</param>
            <param name="lightFactor">Amount of light applied to the color</param>
            <returns>Lit color</returns>
            <remarks>This routine is very fast. Even when using it in tight loops, I (Markus) have not been able to 
            meassure a significant amount of time spent in this routine (always less than 1ms). I was originally
            concerened about the performance of this, so I added a caching mechanism, but that slowed things down
            by 2 orders of magnitude.</remarks>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.ColorHelper.ThemeColor">
            <summary>
            Current theme color
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.ColorHelper.ThemeColorLight">
            <summary>
            Current light theme color
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.ColorHelper.ThemeColorDark">
            <summary>
            Current dark theme color
            </summary>
        </member>
        <member name="T:CODE.Framework.Core.Utilities.Csv.CachedCsvReader">
            <summary>
            Represents a reader that provides fast, cached, dynamic access to CSV data.
            </summary>
            <remarks>The number of records is limited to <see cref="F:System.Int32.MaxValue"/> - 1.</remarks>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.Csv.CachedCsvReader._records">
            <summary>
            Contains the cached records.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.Csv.CachedCsvReader._currentRecordIndex">
            <summary>
            Contains the current record index (inside the cached records array).
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.Csv.CachedCsvReader._readingStream">
            <summary>
            Indicates if a new record is being read from the CSV stream.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.Csv.CachedCsvReader._bindingList">
            <summary>
            Contains the binding list linked to this reader.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Csv.CachedCsvReader.#ctor(System.IO.TextReader,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Utilities.Csv.CachedCsvReader"/> class.
            </summary>
            <param name="reader">A <see cref="T:TextReader"/> pointing to the CSV file.</param>
            <param name="hasHeaders"><see langword="true"/> if field names are located on the first non commented line, otherwise, <see langword="false"/>.</param>
            <exception cref="T:ArgumentNullException">
            	<paramref name="reader"/> is a <see langword="null"/>.
            </exception>
            <exception cref="T:ArgumentException">
            Cannot read from <paramref name="reader"/>.
            </exception>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Csv.CachedCsvReader.#ctor(System.IO.TextReader,System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the CsvReader class.
            </summary>
            <param name="reader">A <see cref="T:TextReader"/> pointing to the CSV file.</param>
            <param name="hasHeaders"><see langword="true"/> if field names are located on the first non commented line, otherwise, <see langword="false"/>.</param>
            <param name="bufferSize">The buffer size in bytes.</param>
            <exception cref="T:ArgumentNullException">
            	<paramref name="reader"/> is a <see langword="null"/>.
            </exception>
            <exception cref="T:ArgumentException">
            	Cannot read from <paramref name="reader"/>.
            </exception>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Csv.CachedCsvReader.#ctor(System.IO.TextReader,System.Boolean,System.Char)">
            <summary>
            Initializes a new instance of the CsvReader class.
            </summary>
            <param name="reader">A <see cref="T:TextReader"/> pointing to the CSV file.</param>
            <param name="hasHeaders"><see langword="true"/> if field names are located on the first non commented line, otherwise, <see langword="false"/>.</param>
            <param name="delimiter">The delimiter character separating each field (default is ',').</param>
            <exception cref="T:ArgumentNullException">
            	<paramref name="reader"/> is a <see langword="null"/>.
            </exception>
            <exception cref="T:ArgumentException">
            	Cannot read from <paramref name="reader"/>.
            </exception>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Csv.CachedCsvReader.#ctor(System.IO.TextReader,System.Boolean,System.Char,System.Int32)">
            <summary>
            Initializes a new instance of the CsvReader class.
            </summary>
            <param name="reader">A <see cref="T:TextReader"/> pointing to the CSV file.</param>
            <param name="hasHeaders"><see langword="true"/> if field names are located on the first non commented line, otherwise, <see langword="false"/>.</param>
            <param name="delimiter">The delimiter character separating each field (default is ',').</param>
            <param name="bufferSize">The buffer size in bytes.</param>
            <exception cref="T:ArgumentNullException">
            	<paramref name="reader"/> is a <see langword="null"/>.
            </exception>
            <exception cref="T:ArgumentException">
            	Cannot read from <paramref name="reader"/>.
            </exception>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Csv.CachedCsvReader.#ctor(System.IO.TextReader,System.Boolean,System.Char,System.Char,System.Char,System.Char,System.Boolean)">
            <summary>
            Initializes a new instance of the CsvReader class.
            </summary>
            <param name="reader">A <see cref="T:TextReader"/> pointing to the CSV file.</param>
            <param name="hasHeaders"><see langword="true"/> if field names are located on the first non commented line, otherwise, <see langword="false"/>.</param>
            <param name="delimiter">The delimiter character separating each field (default is ',').</param>
            <param name="quote">The quotation character wrapping every field (default is ''').</param>
            <param name="escape">
            The escape character letting insert quotation characters inside a quoted field (default is '\').
            If no escape character, set to '\0' to gain some performance.
            </param>
            <param name="comment">The comment character indicating that a line is commented out (default is '#').</param>
            <param name="trimSpaces"><see langword="true"/> if spaces at the start and end of a field are trimmed, otherwise, <see langword="false"/>. Default is <see langword="true"/>.</param>
            <exception cref="T:ArgumentNullException">
            	<paramref name="reader"/> is a <see langword="null"/>.
            </exception>
            <exception cref="T:ArgumentException">
            	Cannot read from <paramref name="reader"/>.
            </exception>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Csv.CachedCsvReader.#ctor(System.IO.TextReader,System.Boolean,System.Char,System.Char,System.Char,System.Char,System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the CsvReader class.
            </summary>
            <param name="reader">A <see cref="T:TextReader"/> pointing to the CSV file.</param>
            <param name="hasHeaders"><see langword="true"/> if field names are located on the first non commented line, otherwise, <see langword="false"/>.</param>
            <param name="delimiter">The delimiter character separating each field (default is ',').</param>
            <param name="quote">The quotation character wrapping every field (default is ''').</param>
            <param name="escape">
            The escape character letting insert quotation characters inside a quoted field (default is '\').
            If no escape character, set to '\0' to gain some performance.
            </param>
            <param name="comment">The comment character indicating that a line is commented out (default is '#').</param>
            <param name="trimSpaces"><see langword="true"/> if spaces at the start and end of a field are trimmed, otherwise, <see langword="false"/>. Default is <see langword="true"/>.</param>
            <param name="bufferSize">The buffer size in bytes.</param>
            <exception cref="T:ArgumentNullException">
            	<paramref name="reader"/> is a <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="bufferSize"/> must be 1 or more.
            </exception>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.Csv.CachedCsvReader.CurrentRecordIndex">
            <summary>
            Gets the current record index in the CSV file.
            </summary>
            <value>The current record index in the CSV file.</value>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.Csv.CachedCsvReader.EndOfStream">
            <summary>
            Gets a value that indicates whether the current stream position is at the end of the stream.
            </summary>
            <value><see langword="true"/> if the current stream position is at the end of the stream; otherwise <see langword="false"/>.</value>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.Csv.CachedCsvReader.Item(System.Int32)">
            <summary>
            Gets the field at the specified index.
            </summary>
            <value>The field at the specified index.</value>
            <exception cref="T:ArgumentOutOfRangeException">
            	<paramref name="field"/> must be included in [0, <see cref="M:FieldCount"/>[.
            </exception>
            <exception cref="T:InvalidOperationException">
            	No record read yet. Call ReadLine() first.
            </exception>
            <exception cref="T:CODE.Framework.Core.Utilities.Csv.MissingFieldCsvException">
            	The CSV data appears to be missing a field.
            </exception>
            <exception cref="T:MalformedCsvException">
            	The CSV appears to be corrupt at the current position.
            </exception>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            	The instance has been disposed of.
            </exception>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Csv.CachedCsvReader.ReadToEnd">
            <summary>
            Reads the CSV stream from the current position to the end of the stream.
            </summary>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Csv.CachedCsvReader.ReadNextRecord(System.Boolean,System.Boolean)">
            <summary>
            Reads the next record.
            </summary>
            <param name="onlyReadHeaders">
            Indicates if the reader will proceed to the next record after having read headers.
            <see langword="true"/> if it stops after having read headers; otherwise, <see langword="false"/>.
            </param>
            <param name="skipToNextLine">
            Indicates if the reader will skip directly to the next line without parsing the current one. 
            To be used when an error occurs.
            </param>
            <returns><see langword="true"/> if a record has been successfully reads; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Csv.CachedCsvReader.MoveToStart">
            <summary>
            Moves before the first record.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Csv.CachedCsvReader.MoveToLastCachedRecord">
            <summary>
            Moves to the last record read so far.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Csv.CachedCsvReader.MoveTo(System.Int64)">
            <summary>
            Moves to the specified record index.
            </summary>
            <param name="record">The record index.</param>
            <exception cref="T:ArgumentOutOfRangeException">
            	Record index must be > 0.
            </exception>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            	The instance has been disposed of.
            </exception>
        </member>
        <member name="T:CODE.Framework.Core.Utilities.Csv.CachedCsvReader.CsvBindingList">
            <summary>
            Represents a binding list wrapper for a CSV reader.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.Csv.CachedCsvReader.CsvBindingList._csv">
            <summary>
            Contains the linked CSV reader.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.Csv.CachedCsvReader.CsvBindingList._count">
            <summary>
            Contains the cached record count.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.Csv.CachedCsvReader.CsvBindingList._properties">
            <summary>
            Contains the cached property descriptors.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.Csv.CachedCsvReader.CsvBindingList._sort">
            <summary>
            Contains the current sort property.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.Csv.CachedCsvReader.CsvBindingList._direction">
            <summary>
            Contains the current sort direction.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Csv.CachedCsvReader.CsvBindingList.#ctor(CODE.Framework.Core.Utilities.Csv.CachedCsvReader)">
            <summary>
            Initializes a new instance of the CsvBindingList class.
            </summary>
            <param name="csv"></param>
        </member>
        <member name="T:CODE.Framework.Core.Utilities.Csv.CachedCsvReader.CsvPropertyDescriptor">
            <summary>
            Represents a CSV field property descriptor.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.Csv.CachedCsvReader.CsvPropertyDescriptor._index">
            <summary>
            Contains the field index.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Csv.CachedCsvReader.CsvPropertyDescriptor.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the CsvPropertyDescriptor class.
            </summary>
            <param name="fieldName">The field name.</param>
            <param name="index">The field index.</param>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.Csv.CachedCsvReader.CsvPropertyDescriptor.Index">
            <summary>
            Gets the field index.
            </summary>
            <value>The field index.</value>
        </member>
        <member name="T:CODE.Framework.Core.Utilities.Csv.CachedCsvReader.CsvRecordComparer">
            <summary>
            Represents a CSV record comparer.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.Csv.CachedCsvReader.CsvRecordComparer._field">
            <summary>
            Contains the field index of the values to compare.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.Csv.CachedCsvReader.CsvRecordComparer._direction">
            <summary>
            Contains the sort direction.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Csv.CachedCsvReader.CsvRecordComparer.#ctor(System.Int32,System.ComponentModel.ListSortDirection)">
            <summary>
            Initializes a new instance of the CsvRecordComparer class.
            </summary>
            <param name="field">The field index of the values to compare.</param>
            <param name="direction">The sort direction.</param>
        </member>
        <member name="T:CODE.Framework.Core.Utilities.Csv.CsvReader">
            <summary>
            Represents a reader that provides fast, non-cached, forward-only access to CSV data.  
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.Csv.CsvReader.DefaultBufferSize">
            <summary>
            Defines the default buffer size.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.Csv.CsvReader.DefaultDelimiter">
            <summary>
            Defines the default delimiter character separating each field.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.Csv.CsvReader.DefaultQuote">
            <summary>
            Defines the default quote character wrapping every field.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.Csv.CsvReader.DefaultEscape">
            <summary>
            Defines the default escape character letting insert quotation characters inside a quoted field.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.Csv.CsvReader.DefaultComment">
            <summary>
            Defines the default comment character indicating that a line is commented out.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.Csv.CsvReader.FieldHeaderComparer">
            <summary>
            Contains the field header comparer.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.Csv.CsvReader._reader">
            <summary>
            Contains the reader pointing to the CSV file.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.Csv.CsvReader._bufferSize">
            <summary>
            Contains the buffer size.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.Csv.CsvReader._comment">
            <summary>
            Contains the comment character indicating that a line is commented out.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.Csv.CsvReader._escape">
            <summary>
            Contains the escape character letting insert quotation characters inside a quoted field.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.Csv.CsvReader._delimiter">
            <summary>
            Contains the delimiter character separating each field.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.Csv.CsvReader._quote">
            <summary>
            Contains the quotation character wrapping every field.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.Csv.CsvReader._trimSpaces">
            <summary>
            Indicates if spaces at the start and end of a field are trimmed.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.Csv.CsvReader._hasHeaders">
            <summary>
            Indicates if field names are located on the first non commented line.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.Csv.CsvReader._initialized">
            <summary>
            Indicates if the class is initialized.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.Csv.CsvReader._fieldHeaders">
            <summary>
            Contains the field headers.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.Csv.CsvReader._fieldHeaderIndexes">
            <summary>
            Contains the dictionary of field indexes by header. The key is the field name and the value is its index.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.Csv.CsvReader._currentRecordIndex">
            <summary>
            Contains the current record index in the CSV file.
            A value of MinValue means that the reader has not been initialized yet.
            Otherwise, a negative value means that no record has been read yet.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.Csv.CsvReader._nextFieldStart">
            <summary>
            Contains the starting position of the next unread field.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.Csv.CsvReader._nextFieldIndex">
            <summary>
            Contains the index of the next unread field.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.Csv.CsvReader._fields">
            <summary>
            Contains the array of the field values for the current record.
            A null value indicates that the field have not been parsed.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.Csv.CsvReader._fieldCount">
            <summary>
            Contains the maximum number of fields to retrieve for each record.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.Csv.CsvReader._buffer">
            <summary>
            Contains the read buffer.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.Csv.CsvReader._bufferLength">
            <summary>
            Contains the current read buffer length.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.Csv.CsvReader._eof">
            <summary>
            Indicates if the end of the reader has been reached.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.Csv.CsvReader._eol">
            <summary>
            Indicates if the last read operation reached an EOL character.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.Csv.CsvReader._firstRecordInCache">
            <summary>
            Indicates if the first record is in cache.
            This can happen when initializing a reader with no headers
            because one record must be read to get the field count automatically
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.Csv.CsvReader._missingFieldFlag">
            <summary>
            Indicates if one or more field are missing for the current record.
            Resets after each successful record read.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.Csv.CsvReader._parseErrorFlag">
            <summary>
            Indicates if a parse error occured for the current record.
            Resets after each successful record read.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Csv.CsvReader.#ctor(System.IO.TextReader,System.Boolean)">
            <summary>
            Initializes a new instance of the CsvReader class.
            </summary>
            <param name="reader">A <see cref="T:TextReader"/> pointing to the CSV file.</param>
            <param name="hasHeaders"><see langword="true"/> if field names are located on the first non commented line, otherwise, <see langword="false"/>.</param>
            <exception cref="T:ArgumentNullException">
            	<paramref name="reader"/> is a <see langword="null"/>.
            </exception>
            <exception cref="T:ArgumentException">
            	Cannot read from <paramref name="reader"/>.
            </exception>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Csv.CsvReader.#ctor(System.IO.TextReader,System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the CsvReader class.
            </summary>
            <param name="reader">A <see cref="T:TextReader"/> pointing to the CSV file.</param>
            <param name="hasHeaders"><see langword="true"/> if field names are located on the first non commented line, otherwise, <see langword="false"/>.</param>
            <param name="bufferSize">The buffer size in bytes.</param>
            <exception cref="T:ArgumentNullException">
            	<paramref name="reader"/> is a <see langword="null"/>.
            </exception>
            <exception cref="T:ArgumentException">
            	Cannot read from <paramref name="reader"/>.
            </exception>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Csv.CsvReader.#ctor(System.IO.TextReader,System.Boolean,System.Char)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Utilities.Csv.CsvReader"/> class.
            </summary>
            <param name="reader">The reader.</param>
            <param name="hasHeaders">if set to <c>true</c> [has headers].</param>
            <param name="delimiter">The delimiter.</param>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Csv.CsvReader.#ctor(System.IO.TextReader,System.Boolean,System.Char,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Utilities.Csv.CsvReader"/> class.
            </summary>
            <param name="reader">The reader.</param>
            <param name="hasHeaders">if set to <c>true</c> [has headers].</param>
            <param name="delimiter">The delimiter.</param>
            <param name="bufferSize">Size of the buffer.</param>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Csv.CsvReader.#ctor(System.IO.TextReader,System.Boolean,System.Char,System.Char,System.Char,System.Char,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Utilities.Csv.CsvReader"/> class.
            </summary>
            <param name="reader">The reader.</param>
            <param name="hasHeaders">if set to <c>true</c> [has headers].</param>
            <param name="delimiter">The delimiter.</param>
            <param name="quote">The quote.</param>
            <param name="escape">The escape.</param>
            <param name="comment">The comment.</param>
            <param name="trimSpaces">if set to <c>true</c> [trim spaces].</param>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Csv.CsvReader.#ctor(System.IO.TextReader,System.Boolean,System.Char,System.Char,System.Char,System.Char,System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Utilities.Csv.CsvReader"/> class.
            </summary>
            <param name="reader">The reader.</param>
            <param name="hasHeaders">if set to <c>true</c> [has headers].</param>
            <param name="delimiter">The delimiter.</param>
            <param name="quote">The quote.</param>
            <param name="escape">The escape.</param>
            <param name="comment">The comment.</param>
            <param name="trimSpaces">if set to <c>true</c> [trim spaces].</param>
            <param name="bufferSize">Size of the buffer.</param>
        </member>
        <member name="E:CODE.Framework.Core.Utilities.Csv.CsvReader.ParseError">
            <summary>
            Occurs when there is an error while parsing the CSV stream.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Csv.CsvReader.OnParseError(CODE.Framework.Core.Utilities.Csv.ParseErrorEventArgs)">
            <summary>
            Raises the <see cref="M:ParseError"/> event.
            </summary>
            <param name="e">The <see cref="T:CODE.Framework.Core.Utilities.Csv.ParseErrorEventArgs"/> that contains the event data.</param>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.Csv.CsvReader.Comment">
            <summary>
            Gets the comment character indicating that a line is commented out.
            </summary>
            <value>The comment character indicating that a line is commented out.</value>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.Csv.CsvReader.Escape">
            <summary>
            Gets the escape character letting insert quotation characters inside a quoted field.
            </summary>
            <value>The escape character letting insert quotation characters inside a quoted field.</value>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.Csv.CsvReader.Delimiter">
            <summary>
            Gets the delimiter character separating each field.
            </summary>
            <value>The delimiter character separating each field.</value>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.Csv.CsvReader.Quote">
            <summary>
            Gets the quotation character wrapping every field.
            </summary>
            <value>The quotation character wrapping every field.</value>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.Csv.CsvReader.HasHeaders">
            <summary>
            Indicates if field names are located on the first non commented line.
            </summary>
            <value><see langword="true"/> if field names are located on the first non commented line, otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.Csv.CsvReader.TrimSpaces">
            <summary>
            Indicates if spaces at the start and end of a field are trimmed.
            </summary>
            <value><see langword="true"/> if spaces at the start and end of a field are trimmed, otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.Csv.CsvReader.BufferSize">
            <summary>
            Gets the buffer size.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.Csv.CsvReader.DefaultParseErrorAction">
            <summary>
            Gets or sets the default action to take when a parsing error has occured.
            </summary>
            <value>The default action to take when a parsing error has occured.</value>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.Csv.CsvReader.MissingFieldAction">
            <summary>
            Gets or sets the action to take when a field is missing.
            </summary>
            <value>The action to take when a field is missing.</value>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.Csv.CsvReader.SupportsMultiline">
            <summary>
            Gets or sets a value indicating if the reader supports multiline fields.
            </summary>
            <value>A value indicating if the reader supports multiline field.</value>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.Csv.CsvReader.SkipEmptyLines">
            <summary>
            Gets or sets a value indicating if the reader will skip empty lines.
            </summary>
            <value>A value indicating if the reader will skip empty lines.</value>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.Csv.CsvReader.FieldCount">
            <summary>
            Gets the maximum number of fields to retrieve for each record.
            </summary>
            <value>The maximum number of fields to retrieve for each record.</value>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.Csv.CsvReader.EndOfStream">
            <summary>
            Gets a value that indicates whether the current stream position is at the end of the stream.
            </summary>
            <value><see langword="true"/> if the current stream position is at the end of the stream; otherwise <see langword="false"/>.</value>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Csv.CsvReader.GetFieldHeaders">
            <summary>
            Gets the field headers.
            </summary>
            <returns>The field headers or an empty array if headers are not supported.</returns>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.Csv.CsvReader.CurrentRecordIndex">
            <summary>
            Gets the current record index in the CSV file.
            </summary>
            <value>The current record index in the CSV file.</value>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.Csv.CsvReader.MissingFieldFlag">
            <summary>
            Indicates if one or more field are missing for the current record.
            Resets after each successful record read.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.Csv.CsvReader.ParseErrorFlag">
            <summary>
            Indicates if a parse error occured for the current record.
            Resets after each successful record read.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.Csv.CsvReader.Item(System.Int32,System.String)">
            <summary>
            Gets the field with the specified name and record position. <see cref="M:hasHeaders"/> must be <see langword="true"/>.
            </summary>
            <value>
            The field with the specified name and record position.
            </value>
            <exception cref="T:ArgumentNullException">
            	<paramref name="field"/> is <see langword="null"/> or an empty string.
            </exception>
            <exception cref="T:InvalidOperationException">
            The CSV does not have headers (<see cref="M:HasHeaders"/> property is <see langword="false"/>).
            </exception>
            <exception cref="T:ArgumentException">
            	<paramref name="field"/> not found.
            </exception>
            <exception cref="T:ArgumentOutOfRangeException">
            	Record index must be > 0.
            </exception>
            <exception cref="T:InvalidOperationException">
            	Cannot move to a previous record in forward-only mode.
            </exception>
            <exception cref="T:EndOfStreamException">
            	Cannot read record at <paramref name="record"/>.
            </exception>
            <exception cref="T:MalformedCsvException">
            	The CSV appears to be corrupt at the current position.
            </exception>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.Csv.CsvReader.Item(System.Int32,System.Int32)">
            <summary>
            Gets the column with the specified name.
            </summary>
            <returns>The column with the specified name as an <see cref="T:System.Object"/>.</returns>
              
            <exception cref="T:System.IndexOutOfRangeException">No column with the specified name was found. </exception>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.Csv.CsvReader.Item(System.String)">
            <summary>
            Gets the column with the specified name.
            </summary>
            <returns>The column with the specified name as an <see cref="T:System.Object"/>.</returns>
              
            <exception cref="T:System.IndexOutOfRangeException">No column with the specified name was found. </exception>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.Csv.CsvReader.Item(System.Int32)">
            <summary>
            Gets the field at the specified index.
            </summary>
            <value>The field at the specified index.</value>
            <exception cref="T:ArgumentOutOfRangeException">
            	<paramref name="field"/> must be included in [0, <see cref="M:FieldCount"/>[.
            </exception>
            <exception cref="T:InvalidOperationException">
            	No record read yet. Call ReadLine() first.
            </exception>
            <exception cref="T:MalformedCsvException">
            	The CSV appears to be corrupt at the current position.
            </exception>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Csv.CsvReader.EnsureInitialize">
            <summary>
            Ensures that the reader is initialized.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Csv.CsvReader.GetFieldIndex(System.String)">
            <summary>
            Gets the field index for the provided header.
            </summary>
            <param name="header">The header to look for.</param>
            <returns>The field index for the provided header. -1 if not found.</returns>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Csv.CsvReader.CopyCurrentRecordTo(System.String[])">
            <summary>
            Copies the field array of the current record to a one-dimensional array, starting at the beginning of the target array.
            </summary>
            <param name="array">The array.</param>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Csv.CsvReader.CopyCurrentRecordTo(System.String[],System.Int32)">
            <summary>
            Copies the field array of the current record to a one-dimensional array, starting at the beginning of the target array.
            </summary>
            <param name="array"> The one-dimensional <see cref="T:Array"/> that is the destination of the fields of the current record.</param>
            <param name="index">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:ArgumentNullException">
            	<paramref name="array"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:ArgumentOutOfRangeException">
            	<paramref name="index"/> is les than zero or is equal to or greater than the length <paramref name="array"/>. 
            </exception>
            <exception cref="T:System.InvalidOperationException">
            No current record.
            </exception>
            <exception cref="T:System.ArgumentException">
            	The number of fields in the record is greater than the available space from <paramref name="index"/> to the end of <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Csv.CsvReader.GetCurrentRawData">
            <summary>
            Gets the current raw CSV data.
            </summary>
            <remarks>Used for exception handling purpose.</remarks>
            <returns>The current raw CSV data.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Csv.CsvReader.IsWhiteSpace(System.Char)">
            <summary>
            Indicates whether the specified Unicode character is categorized as white space.
            </summary>
            <param name="c">A Unicode character.</param>
            <returns><see langword="true"/> if <paramref name="c"/> is white space; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Csv.CsvReader.MoveTo(System.Int64)">
            <summary>
            Moves to the specified record index.
            </summary>
            <param name="record">The record index.</param>
            <exception cref="T:ArgumentOutOfRangeException">
            	Record index must be > 0.
            </exception>
            <exception cref="T:InvalidOperationException">
            	Cannot move to a previous record in forward-only mode.
            </exception>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Csv.CsvReader.ParseNewLine(System.Int32@)">
            <summary>
            Parses a new line delimiter.
            </summary>
            <param name="pos">The starting position of the parsing. Will contain the resulting end position.</param>
            <returns><see langword="true"/> if a new line delimiter was found; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Csv.CsvReader.IsNewLine(System.Int32)">
            <summary>
            Determines whether the character at the specified position is a new line delimiter.
            </summary>
            <param name="pos">The position of the character to verify.</param>
            <returns>
            	<see langword="true"/> if the character at the specified position is a new line delimiter; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Csv.CsvReader.ReadBuffer">
            <summary>
            Fills the buffer with data from the reader.
            </summary>
            <returns><see langword="true"/> if data was successfully read; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Csv.CsvReader.ReadField(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Reads the field at the specified index.
            Any unread fields with an inferior index will also be read as part of the required parsing.
            </summary>
            <param name="field">The field index.</param>
            <param name="initializing">Indicates if the reader is currently initializing.</param>
            <param name="discardValue">Indicates if the value(s) are discarded.</param>
            <returns>
            The field at the specified index. 
            A <see langword="null"/> indicates that an error occured or that the last field has been reached during initialization.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="field"/> is out of range.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	There is no current record.
            </exception>
            <exception cref="T:CODE.Framework.Core.Utilities.Csv.MissingFieldCsvException">
            	The CSV data appears to be missing a field.
            </exception>
            <exception cref="T:CODE.Framework.Core.Utilities.Csv.MalformedCsvException">
            	The CSV data appears to be malformed.
            </exception>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Csv.CsvReader.ReadNextRecord">
            <summary>
            Reads the next record.
            </summary>
            <returns><see langword="true"/> if a record has been successfully reads; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Csv.CsvReader.ReadNextRecord(System.Boolean,System.Boolean)">
            <summary>
            Reads the next record.
            </summary>
            <param name="onlyReadHeaders">
            Indicates if the reader will proceed to the next record after having read headers.
            <see langword="true"/> if it stops after having read headers; otherwise, <see langword="false"/>.
            </param>
            <param name="skipToNextLine">
            Indicates if the reader will skip directly to the next line without parsing the current one. 
            To be used when an error occurs.
            </param>
            <returns><see langword="true"/> if a record has been successfully reads; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Csv.CsvReader.SkipEmptyAndCommentedLines(System.Int32@)">
            <summary>
            Skips empty and commented lines.
            If the end of the buffer is reached, its content be discarded and filled again from the reader.
            </summary>
            <param name="pos">
            The position in the buffer where to start parsing. 
            Will contains the resulting position after the operation.
            </param>
            <returns><see langword="true"/> if the end of the reader has not been reached; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Csv.CsvReader.DoSkipEmptyAndCommentedLines(System.Int32@)">
            <summary>
            <para>Worker method.</para>
            <para>Skips empty and commented lines.</para>
            </summary>
            <param name="pos">
            The position in the buffer where to start parsing. 
            Will contains the resulting position after the operation.
            </param>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Csv.CsvReader.SkipWhiteSpaces(System.Int32@)">
            <summary>
            Skips whitespace characters.
            </summary>
            <param name="pos">The starting position of the parsing. Will contain the resulting end position.</param>
            <returns><see langword="true"/> if the end of the reader has not been reached; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Csv.CsvReader.SkipToNextLine(System.Int32@)">
            <summary>
            Skips ahead to the next NewLine character.
            If the end of the buffer is reached, its content be discarded and filled again from the reader.
            </summary>
            <param name="pos">
            The position in the buffer where to start parsing. 
            Will contains the resulting position after the operation.
            </param>
            <returns><see langword="true"/> if the end of the reader has not been reached; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Csv.CsvReader.HandleParseError(CODE.Framework.Core.Utilities.Csv.MalformedCsvException,System.Int32@)">
            <summary>
            Handles a parsing error.
            </summary>
            <param name="error">The parsing error that occured.</param>
            <param name="pos">The current position in the buffer.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="error"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Csv.CsvReader.HandleMissingField(System.String,System.Int32,System.Int32@)">
            <summary>
            Handles a missing field error.
            </summary>
            <param name="value">The partially parsed value, if available.</param>
            <param name="fieldIndex">The missing field index.</param>
            <param name="currentPosition">The current position in the raw data.</param>
            <returns>
            The resulting value according to <see cref="M:MissingFieldAction"/>.
            If the action is set to <see cref="T:MissingFieldAction.TreatAsParseError"/>,
            then the parse error will be handled according to <see cref="P:CODE.Framework.Core.Utilities.Csv.CsvReader.DefaultParseErrorAction"/>.
            </returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Csv.CsvReader.ValidateDataReader(CODE.Framework.Core.Utilities.Csv.CsvReader.DataReaderValidations)">
            <summary>
            Validates the state of the data reader.
            </summary>
            <param name="validations">The validations to accomplish.</param>
            <exception cref="T:System.InvalidOperationException">
            No current record.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This operation is invalid when the reader is closed.
            </exception>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Csv.CsvReader.CopyFieldToArray(System.Int32,System.Int64,System.Array,System.Int32,System.Int32)">
            <summary>
            Copy the value of the specified field to an array.
            </summary>
            <param name="field">The index of the field.</param>
            <param name="fieldOffset">The offset in the field value.</param>
            <param name="destinationArray">The destination array where the field value will be copied.</param>
            <param name="destinationOffset">The destination array offset.</param>
            <param name="length">The number of characters to copy from the field value.</param>
            <returns></returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Csv.CsvReader.GetEnumerator">
            <summary>
            Returns an <see cref="T:RecordEnumerator"/>  that can iterate through CSV records.
            </summary>
            <returns>An <see cref="T:RecordEnumerator"/>  that can iterate through CSV records.</returns>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Csv.CsvReader.System#Collections#Generic#IEnumerable{System#String[]}#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.Generics.IEnumerator"/>  that can iterate through CSV records.
            </summary>
            <returns>An <see cref="T:System.Collections.Generics.IEnumerator"/>  that can iterate through CSV records.</returns>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Csv.CsvReader.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator"/>  that can iterate through CSV records.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/>  that can iterate through CSV records.</returns>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.Csv.CsvReader._allocStack">
            <summary>
            Contains the stack when the object was allocated.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.Csv.CsvReader._isDisposed">
            <summary>
            Contains the disposed status flag.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.Csv.CsvReader._lock">
            <summary>
            Contains the locking object for multi-threading purpose.
            </summary>
        </member>
        <member name="E:CODE.Framework.Core.Utilities.Csv.CsvReader.Disposed">
            <summary>
            Occurs when the instance is disposed of.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.Csv.CsvReader.IsDisposed">
            <summary>
            Gets a value indicating whether the instance has been disposed of.
            </summary>
            <value>
            	<see langword="true"/> if the instance has been disposed of; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Csv.CsvReader.OnDisposed(System.EventArgs)">
            <summary>
            Raises the <see cref="M:Disposed"/> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Csv.CsvReader.CheckDisposed">
            <summary>
            Checks if the instance has been disposed of, and if it has, throws an <see cref="T:System.ComponentModel.ObjectDisposedException"/>; otherwise, does nothing.
            </summary>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            	The instance has been disposed of.
            </exception>
            <remarks>
            	Derived classes should call this method at the start of all methods and properties that should not be accessed after a call to <see cref="M:Dispose()"/>.
            </remarks>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Csv.CsvReader.Dispose">
            <summary>
            Releases all resources used by the instance.
            </summary>
            <remarks>
            	Calls <see cref="M:Dispose(Boolean)"/> with the disposing parameter set to <see langword="true"/> to free unmanaged and managed resources.
            </remarks>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Csv.CsvReader.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by this instance and optionally releases the managed resources.
            </summary>
            <param name="disposing">
            	<see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only unmanaged resources.
            </param>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Csv.CsvReader.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the instance is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="T:CODE.Framework.Core.Utilities.Csv.CsvReader.DataReaderValidations">
            <summary>
            Defines the data reader validations.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.Csv.CsvReader.DataReaderValidations.None">
            <summary>
            No validation.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.Csv.CsvReader.DataReaderValidations.IsInitialized">
            <summary>
            Validate that the data reader is initialized.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.Csv.CsvReader.DataReaderValidations.IsNotClosed">
            <summary>
            Validate that the data reader is not closed.
            </summary>
        </member>
        <member name="T:CODE.Framework.Core.Utilities.Csv.CsvReader.RecordEnumerator">
            <summary>
            Supports a simple iteration over the records of a <see cref="T:CsvReader"/>.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.Csv.CsvReader.RecordEnumerator._reader">
            <summary>
            Contains the enumerated <see cref="T:CsvReader"/>.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.Csv.CsvReader.RecordEnumerator._current">
            <summary>
            Contains the current record.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.Csv.CsvReader.RecordEnumerator._currentRecordIndex">
            <summary>
            Contains the current record index.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Csv.CsvReader.RecordEnumerator.#ctor(CODE.Framework.Core.Utilities.Csv.CsvReader)">
            <summary>
            Initializes a new instance of the <see cref="T:RecordEnumerator"/> class.
            </summary>
            <param name="reader">The <see cref="T:CsvReader"/> to iterate over.</param>
            <exception cref="T:ArgumentNullException">
            	<paramref name="reader"/> is a <see langword="null"/>.
            </exception>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.Csv.CsvReader.RecordEnumerator.Current">
            <summary>
            Gets the current record.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Csv.CsvReader.RecordEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next record of the CSV.
            </summary>
            <returns><see langword="true"/> if the enumerator was successfully advanced to the next record, <see langword="false"/> if the enumerator has passed the end of the CSV.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Csv.CsvReader.RecordEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first record in the CSV.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.Csv.CsvReader.RecordEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the current record.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Csv.CsvReader.RecordEnumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:CODE.Framework.Core.Utilities.Csv.MalformedCsvException">
            <summary>
            Represents the exception that is thrown when a CSV file is malformed.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.Csv.MalformedCsvException._message">
            <summary>
            Contains the message that describes the error.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.Csv.MalformedCsvException._rawData">
            <summary>
            Contains the raw data when the error occured.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.Csv.MalformedCsvException._currentFieldIndex">
            <summary>
            Contains the current field index.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.Csv.MalformedCsvException._currentRecordIndex">
            <summary>
            Contains the current record index.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.Csv.MalformedCsvException._currentPosition">
            <summary>
            Contains the current position in the raw data.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Csv.MalformedCsvException.#ctor">
            <summary>
            Initializes a new instance of the MalformedCsvException class.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Csv.MalformedCsvException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the MalformedCsvException class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Csv.MalformedCsvException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the MalformedCsvException class.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Csv.MalformedCsvException.#ctor(System.String,System.Int32,System.Int64,System.Int32)">
            <summary>
            Initializes a new instance of the MalformedCsvException class.
            </summary>
            <param name="rawData">The raw data when the error occured.</param>
            <param name="currentPosition">The current position in the raw data.</param>
            <param name="currentRecordIndex">The current record index.</param>
            <param name="currentFieldIndex">The current field index.</param>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Csv.MalformedCsvException.#ctor(System.String,System.Int32,System.Int64,System.Int32,System.Exception)">
            <summary>
            Initializes a new instance of the MalformedCsvException class.
            </summary>
            <param name="rawData">The raw data when the error occured.</param>
            <param name="currentPosition">The current position in the raw data.</param>
            <param name="currentRecordIndex">The current record index.</param>
            <param name="currentFieldIndex">The current field index.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Csv.MalformedCsvException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the MalformedCsvException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.Csv.MalformedCsvException.RawData">
            <summary>
            Gets the raw data when the error occured.
            </summary>
            <value>The raw data when the error occured.</value>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.Csv.MalformedCsvException.CurrentPosition">
            <summary>
            Gets the current position in the raw data.
            </summary>
            <value>The current position in the raw data.</value>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.Csv.MalformedCsvException.CurrentRecordIndex">
            <summary>
            Gets the current record index.
            </summary>
            <value>The current record index.</value>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.Csv.MalformedCsvException.CurrentFieldIndex">
            <summary>
            Gets the current field index.
            </summary>
            <value>The current record index.</value>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.Csv.MalformedCsvException.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary>
            <value>A message that describes the current exception.</value>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Csv.MalformedCsvException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:SerializationInfo"/> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:CODE.Framework.Core.Utilities.Csv.MissingFieldAction">
            <summary>
            Specifies the action to take when a field is missing.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.Csv.MissingFieldAction.ParseError">
            <summary>
            Treat as a parsing error.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.Csv.MissingFieldAction.ReplaceByEmpty">
            <summary>
            Replaces by an empty value.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.Csv.MissingFieldAction.ReplaceByNull">
            <summary>
            Replaces by a null value (<see langword="null"/>).
            </summary>
        </member>
        <member name="T:CODE.Framework.Core.Utilities.Csv.MissingFieldCsvException">
            <summary>
            Represents the exception that is thrown when a there is a missing field in a record of the CSV file.
            </summary>
            <remarks>
            MissingFieldException would have been a better name, but there is already a <see cref="T:System.MissingFieldException"/>.
            </remarks>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Csv.MissingFieldCsvException.#ctor">
            <summary>
            Initializes a new instance of the MissingFieldCsvException class.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Csv.MissingFieldCsvException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the MissingFieldCsvException class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Csv.MissingFieldCsvException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the MissingFieldCsvException class.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Csv.MissingFieldCsvException.#ctor(System.String,System.Int32,System.Int64,System.Int32)">
            <summary>
            Initializes a new instance of the MissingFieldCsvException class.
            </summary>
            <param name="rawData">The raw data when the error occured.</param>
            <param name="currentPosition">The current position in the raw data.</param>
            <param name="currentRecordIndex">The current record index.</param>
            <param name="currentFieldIndex">The current field index.</param>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Csv.MissingFieldCsvException.#ctor(System.String,System.Int32,System.Int64,System.Int32,System.Exception)">
            <summary>
            Initializes a new instance of the MissingFieldCsvException class.
            </summary>
            <param name="rawData">The raw data when the error occured.</param>
            <param name="currentPosition">The current position in the raw data.</param>
            <param name="currentRecordIndex">The current record index.</param>
            <param name="currentFieldIndex">The current field index.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Csv.MissingFieldCsvException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the MissingFieldCsvException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:CODE.Framework.Core.Utilities.Csv.ParseErrorAction">
            <summary>
            Specifies the action to take when a parsing error has occured.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.Csv.ParseErrorAction.RaiseEvent">
            <summary>
            Raises the <see cref="M:CsvReader.ParseError"/> event.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.Csv.ParseErrorAction.AdvanceToNextLine">
            <summary>
            Tries to advance to next line.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.Csv.ParseErrorAction.ThrowException">
            <summary>
            Throws an exception.
            </summary>
        </member>
        <member name="T:CODE.Framework.Core.Utilities.Csv.ParseErrorEventArgs">
            <summary>
            Provides data for the <see cref="M:CsvReader.ParseError"/> event.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.Csv.ParseErrorEventArgs._error">
            <summary>
            Contains the error that occured.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.Csv.ParseErrorEventArgs._action">
            <summary>
            Contains the action to take.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Csv.ParseErrorEventArgs.#ctor(CODE.Framework.Core.Utilities.Csv.MalformedCsvException,CODE.Framework.Core.Utilities.Csv.ParseErrorAction)">
            <summary>
            Initializes a new instance of the ParseErrorEventArgs class.
            </summary>
            <param name="error">The error that occured.</param>
            <param name="defaultAction">The default action to take.</param>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.Csv.ParseErrorEventArgs.Error">
            <summary>
            Gets the error that occured.
            </summary>
            <value>The error that occured.</value>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.Csv.ParseErrorEventArgs.Action">
            <summary>
            Gets or sets the action to take.
            </summary>
            <value>The action to take.</value>
        </member>
        <member name="T:CODE.Framework.Core.Utilities.DataHelper">
            <summary>
            This class provides a number of methods that help with a number of standard data tasks.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.DataHelper.CsvToTable(System.String,System.String)">
            <summary>
            This method takes a csv string (comma separated) and turns into a DataTable.
            </summary>
            <param name="csvString">The CSV string (comma separated).</param>
            <param name="tableName">Name of the table.</param>
            <returns></returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.DataHelper.TableToCsv(System.Data.DataTable)">
            <summary>
            This method takes a data table and turns all its contents into a CSV formatted string.
            </summary>
            <param name="table">Data Table</param>
            <returns>CSV String</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.DataHelper.TableToCsv(System.Data.DataView)">
            <summary>
            This method takes a data view and turns all its contents into a CSV formatted string.
            </summary>
            <param name="view">Data View</param>
            <returns>CSV String</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.DataHelper.ToGuidSafe(System.Object)">
            <summary>
            Safely converts a value into a Guid or returns Guid.Empty if the value is invalid.
            </summary>
            <param name="value">The value.</param>
            <returns>Guid</returns>
            <remarks>
            This method is an extension method
            </remarks>
            <example>
            using EPS.Utilities;
            
            // more code here
            
            Guid myGuid = dataSet.Tables[0].Rows[0]["id"].ToGuidSave();
            </example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.DataHelper.ToStringSafe(System.Object)">
            <summary>
            Safely converts a value into a string or returns string.Empty if the value is invalid.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <remarks>
            This method is an extension method
            </remarks>
            <example>
            using EPS.Utilities;
            
            // more code here
            
            string myString = dataSet.Tables[0].Rows[0]["name"].ToStringSave();
            </example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.DataHelper.ToBooleanSafe(System.Object)">
            <summary>
            Safely converts a value into a boolean or returns false if the value is invalid.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <remarks>
            This method is an extension method
            </remarks>
            <example>
            using EPS.Utilities;
            
            // more code here
            
            bool myBool = dataSet.Tables[0].Rows[0]["active"].ToBooleanSave();
            </example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.DataHelper.ToDateTimeSafe(System.Object)">
            <summary>
            Safely converts a value into a DateTime or returns DateTime.MinValue if the value is invalid.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <remarks>
            This method is an extension method
            </remarks>
            <example>
            using EPS.Utilities;
            
            // more code here
            
            DateTime myDate = dataSet.Tables[0].Rows[0]["timeStamp"].ToDateTimeSave();
            </example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.DataHelper.ToIntegerSafe(System.Object)">
            <summary>
            Safely converts a value into an integer or returns 0 if the value is invalid.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <remarks>
            This method is an extension method
            </remarks>
            <example>
            using EPS.Utilities;
            
            // more code here
            
            int myInt = dataSet.Tables[0].Rows[0]["number"].ToIntegerSave();
            </example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.DataHelper.ToDoubleSafe(System.Object)">
            <summary>
            Safely converts a value into a double or returns 0.0 if the value is invalid.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <remarks>
            This method is an extension method
            </remarks>
            <example>
            using EPS.Utilities;
            
            // more code here
            
            int myDouble = dataSet.Tables[0].Rows[0]["number"].ToDoubleSave();
            </example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.DataHelper.ToDecimalSafe(System.Object)">
            <summary>
            Safely converts a value into a decimal or returns 0.0 if the value is invalid.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <remarks>
            This method is an extension method
            </remarks>
            <example>
            using EPS.Utilities;
            
            // more code here
            
            decimal myDec = dataSet.Tables[0].Rows[0]["price"].ToDecimalSave();
            </example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.DataHelper.ToCharSafe(System.Object)">
            <summary>
            Safely converts a value into a char or returns ' ' if the value is invalid.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <remarks>
            This method is an extension method
            </remarks>
            <example>
            using EPS.Utilities;
            
            // more code here
            
            char myChar = dataSet.Tables[0].Rows[0]["character"].ToCharSave();
            </example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.DataHelper.ToByteArraySafe(System.Object)">
            <summary>
            Safely converts a value into a byte array or returns an empty byte array if the value is invalid.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
            <remarks>
            This method is an extension method
            </remarks>
            <example>
            using EPS.Utilities;
            
            // more code here
            
            byte[] myBytes = dataSet.Tables[0].Rows[0]["image"].ToByteArraySave();
            </example>
        </member>
        <member name="T:CODE.Framework.Core.Utilities.EmailHelper">
            <summary>
            This class provides basic functionaloty for email features.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.EmailHelper.SendEmail(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.String,System.String,System.Collections.Generic.List{System.Net.Mail.Attachment})">
            <summary>
            Sends an email to the specified recipient
            </summary>
            <param name="senderName">Sender Name</param>
            <param name="senderEmail">Sender Email Address</param>
            <param name="recipientName">Recipient Name</param>
            <param name="recipientEmail">Recipient Email Address</param>
            <param name="subject">Subject</param>
            <param name="textBody">Email Body (text-only version)</param>
            <param name="htmlBody">Email Body (HTML version)</param>
            <param name="mailServer">Mail server used to route the email. If null or not supplied, uses DefaultMailServer appSetting from config file</param>
            <param name="portNumber">If null or not supplied, uses default of 25</param>
            <param name="userName">Only required if SMTP server requires authentication to send</param>
            <param name="password">Only required if SMTP server requires authentication to send</param>
            <param name="attachments">(Optional) Attachments to send with the email</param>
            <returns>True if sent successfully</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.EmailHelper.IsEmailAddressWellFormed(System.String)">
            <summary>
            This method returns true if the email address is well formed and thus COULD be valid.
            </summary>
            <param name="email">Email address, such as billg@microsoft.com</param>
            <returns>True if the address appears to be valid.</returns>
            <remarks>
            This method does NOT check whether the address in fact does exist as a valid address on a mail server.
            </remarks>
        </member>
        <member name="T:CODE.Framework.Core.Utilities.EmailLogger">
            <summary>
            Email log logger class. Eses the Threadpool to send emails of log entries via smtp.
            </summary>
            <example>
            var logger = new EPS.Utilities.EmailLogLogger("Service Logger","services@mycompany.com", new {"Tech Support"}, new {"support@mycompany.com"}, "smtp.mycompany.com");
            EPS.Utilities.LoggingMediator.AddLogger(logger);
            
            EPS.Utilities.LoggingMediator.Log("Hello World!", EPS.Utilities.LogEventType.Information);
            EPS.Utilities.LoggingMediator.Log("A critical error occured!", EPS.Utilities.LogEventType.Critical | EPS.Utilities.LogEventType.Error);
            </example>    
        </member>
        <member name="M:CODE.Framework.Core.Utilities.EmailLogger.#ctor(System.String,System.String,System.Collections.Generic.List{CODE.Framework.Core.Utilities.EmailRecipient},System.String,System.String,System.Int32,System.String,System.String)">
            <summary>
            Sends log entries as emails to the specified recipient(s)
            </summary>
            <param name="senderName">Sender Name</param>
            <param name="senderEmail">Sender Email Address</param>
            <param name="recipients">The recipients.</param>
            <param name="appName">The name of the application. To be used on the subject line of the email</param>
            <param name="mailServer">Mail server used to route the email. If null or not supplied, uses DefaultMailServer appSetting from config file</param>
            <param name="portNumber">If null or not supplied, uses default of 25</param>
            <param name="userName">Only required if SMTP server requires authentication to send</param>
            <param name="password">Only required if SMTP server requires authentication to send</param>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.EmailLogger.Log(System.String,CODE.Framework.Core.Utilities.LogEventType)">
            <summary>
            Logs the specified event (text).
            </summary>
            <param name="logEvent">The event (text).</param>
            <param name="type">The event type.</param>
            <remarks>
            Log types are mapped to the following system event types (in this order):
            LogEventType.Critical   = EventLogEntryType.Error
            LogEventType.Error      = EventLogEntryType.FailureAudit
            LogEventType.Exception  = EventLogEntryType.FailureAudit
            LogEventType.Warning    = EventLogEntryType.Warning
            LogEventType.Success    = EventLogEntryType.SuccessAudit
               other:               = EventLogEntryType.Information
            </remarks>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.EmailLogger.GetRecipientsFromConfigFile">
            <summary>
            Reads the EmailLoggerReceipients appSetting from .config file and parses the value into a list.
            Multiple email addresses should be separated by semi-colons. Triendly names, if present should be separated by pipes '|'.
            For example:
                support@mycompany.com
                support@mycompany.com;fred@mycompany.com
                support@mycompany.com|MyCompany Support Desk;fred@mycompany.com|Fred Flintstone
            </summary>
        </member>
        <member name="T:CODE.Framework.Core.Utilities.EmailRecipient">
            <summary>
            Used by GetRecipientsFromConfigFile() when parsing email addresses and names from the .config file
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.EmailRecipient.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Utilities.EmailRecipient"/> class.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.EmailRecipient.Name">
            <summary>
            Email recipient name
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.EmailRecipient.EmailAddress">
            <summary>
            Recipient email address
            </summary>
            <value>The email address.</value>
        </member>
        <member name="T:CODE.Framework.Core.Utilities.Extensions.ColorExtensions">
            <summary>
            Extension methods for ColorHelper functionality
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Extensions.ColorExtensions.GetLitColor(System.Drawing.Color,System.Single)">
            <summary>
            This method applies lighting to a color.
            For instance, a color that has a lighting factor of 1 applies, appears at its original value.
            A color with a lighting factor of 0.5 appears only half as bright as it was before.
            A color with a lighting factor of 1.5 appears roughly twice as bright as before.
            A color with a lightning factor of 2 appears white.
            </summary>
            <param name="originalColor">Base color</param>
            <param name="lightFactor">Amount of light applied to the color</param>
            <returns>Lit color</returns>
            <remarks>This routine is very fast. Even when using it in tight loops, I (Markus) have not been able to 
            meassure a significant amount of time spent in this routine (always less than 1ms). I was originally
            concerened about the performance of this, so I added a caching mechanism, but that slowed things down
            by 2 orders of magnitude.</remarks>
        </member>
        <member name="T:CODE.Framework.Core.Utilities.Extensions.ImageExtensions">
            <summary>
            Extension methods for ImageHelper functionality
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Extensions.ImageExtensions.GetDisabledImage(System.Drawing.Image)">
            <summary>
            Returns a new bitmap that has a 'disabled' look
            </summary>
            <param name="originalBitmap">Original ('Enabled') Bitmap</param>
            <returns>Disabled Bitmap (image)</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Extensions.ImageExtensions.ToBitmap(System.Byte[])">
            <summary>
            Converts a byte array containing an image to a bitmap object.
            </summary>
            <param name="imageIn">The image in.</param>
            <returns></returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Extensions.ImageExtensions.ToByteArray(System.Drawing.Image)">
            <summary>
            Converts a bitmap object to an array of bytes.
            </summary>
            <param name="image">The bitmap in.</param>
            <returns>Byte array representing the image data</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Extensions.ImageExtensions.ToByteArray(System.Drawing.Image,System.Drawing.Imaging.ImageFormat)">
            <summary>
            Converts a bitmap object to an array of bytes.
            </summary>
            <param name="image">The bitmap in.</param>
            <param name="format">Desired storage format</param>
            <returns>Byte array representing the image data</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Extensions.ImageExtensions.Resize(System.Drawing.Image,System.Int32,System.Int32,CODE.Framework.Core.Utilities.ImageResizeMode)">
            <summary>
            Creates a high quality resized version of the provided image
            </summary>
            <param name="original">The original image</param>
            <param name="newWidth">The width of the new image</param>
            <param name="newHeight">The height of the new image</param>
            <param name="resizeMode">Resize mode (defines stretching)</param>
            <returns>The image in its new size</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Extensions.ImageExtensions.Resize(System.Drawing.Image,System.Int32,System.Int32)">
            <summary>
            Creates a high quality resized version of the provided image
            </summary>
            <param name="original">The original image</param>
            <param name="newWidth">The width of the new image</param>
            <param name="newHeight">The height of the new image</param>
            <returns>The image in its new size</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Extensions.ImageExtensions.Resize(System.Drawing.Image,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a high quality resized version of the provided image
            </summary>
            <param name="original">The original image</param>
            <param name="newWidth">The width of the new image</param>
            <param name="newHeight">The height of the new image</param>
            <param name="padding">Padding around the new image (can be - and often is - negative)</param>
            <returns>The image in its new size</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Extensions.ImageExtensions.Resize(System.Drawing.Image,System.Int32,System.Int32,CODE.Framework.Core.Utilities.ImageResizeMode,System.Int32,System.Drawing.Color)">
            <summary>
            Creates a high quality resized version of the provided image
            </summary>
            <param name="original">The original image</param>
            <param name="newWidth">The width of the new image</param>
            <param name="newHeight">The height of the new image</param>
            <param name="resizeMode">Resize mode (defines stretching)</param>
            <param name="padding">Padding around the new image (can be - and often is - negative)</param>
            <param name="backgroundColor">Background color for areas not overlapped by the original image (due to stretch or padding)</param>
            <returns>The image in its new size</returns>
        </member>
        <member name="T:CODE.Framework.Core.Utilities.Extensions.MarkupExtensions">
            <summary>
            Extension methods providing MarkupHelper functionality
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Extensions.MarkupExtensions.StripMarkup(System.String)">
            <summary>
            Strips all markup tags from the provided string
            </summary>
            <param name="markup">A string with markup</param>
            <returns>Text without markup</returns>
            <example>
            Example markup:
            &lt;html&gt;&lt;body style="color: black;"&gt;&lt;p&gt;This is some text&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
            Result after markup-strip:
            This is some text
            </example>
            <remarks>This method can be used as an extension method.</remarks>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Extensions.MarkupExtensions.GetBodyOnly(System.String)">
            <summary>
            Inspects the provided HTML for start and end body-tags.
            If those tags are present, only the content within the body tags (inner HTML)
            is included int he return value.
            </summary>
            <param name="html">The HTML.</param>
            <returns>Body portion of the HTML</returns>
            <remarks>
            This method is very helpful whenever a potentially complete HTML string needs to be
            displayed as a portion of a larger HTML output.
            </remarks>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Extensions.MarkupExtensions.GetStrippedBodyOnly(System.String)">
            <summary>
            Removes non-body elements from HTML and then strips all markup and returns the result.
            </summary>
            <param name="html">The HTML.</param>
            <returns>Body text without markup</returns>
            <example>
            Example markup:
            &lt;html&gt;&lt;head&gt;&lt;title&gt;Document Title&lt;/title&gt;&lt;head&gt;&lt;body style="color: black;"&gt;&lt;p&gt;This is some text&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
            Result after markup-strip:
            This is some text
            </example>
            <remarks>
            This method is very helpful whenever a potentially complete HTML string needs to be
            displayed as a portion of a larger HTML output.
            </remarks>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Extensions.MarkupExtensions.GetRssFormattedDateTime(System.DateTime)">
            <summary>
            Creates a time string formatted for RSS feeds
            </summary>
            <param name="date">Date to convert</param>
            <returns>Converted date</returns>
            <example>
            string rssDate = MarkupHelper.GetRssFormattedDateTime(DateTime.Now);
            </example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Extensions.MarkupExtensions.ToRssData(System.DateTime)">
            <summary>
            Returns a date formatted according to RSS rules
            </summary>
            <param name="date">The date.</param>
            <returns>RSS formatted date</returns>
            <example>
            using EPS.Utilities;
            
            // ... more code
            
            string rssDate = DateTime.Now.ToRssDate();
            </example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Extensions.MarkupExtensions.ToHtml(System.String)">
            <summary>
            Converts plain Text to HTML. Includes handling of line breaks and such.
            </summary>
            <param name="text">Text to convert</param>
            <returns>HTML</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Extensions.MarkupExtensions.HtmlEncode(System.String)">
            <summary>
            Encodes strings for use in HTML
            </summary>
            <param name="text">Text to convert</param>
            <returns>HTML-encoded string</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Extensions.MarkupExtensions.XmlEncode(System.String)">
            <summary>
            Encodes strings for use in XML
            </summary>
            <param name="text">Text to convert</param>
            <returns>XML-encoded string</returns>
            <remarks>Identical to HtmlEncode()</remarks>
        </member>
        <member name="T:CODE.Framework.Core.Utilities.ImageHelper">
            <summary>
            This class contains a number of methods that are useful in imaging scenarios.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ImageHelper.GetDisabledImage(System.Drawing.Image)">
            <summary>
            Returns a new bitmap that has a 'disabled' look
            </summary>
            <param name="originalBitmap">Original ('Enabled') Bitmap</param>
            <returns>Disabled Bitmap (image)</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ImageHelper.ByteArrayToBitmap(System.Byte[])">
            <summary>
            Converts a byte array containing an image to a bitmap object.
            </summary>
            <param name="imageIn">The image in.</param>
            <returns></returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ImageHelper.BitmapToByteArray(System.Drawing.Image)">
            <summary>
            Converts a bitmap object to an array of bytes.
            </summary>
            <param name="image">The bitmap in.</param>
            <returns>Byte array representing the image data</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ImageHelper.BitmapToByteArray(System.Drawing.Image,System.Drawing.Imaging.ImageFormat)">
            <summary>
            Converts a bitmap object to an array of bytes.
            </summary>
            <param name="image">The bitmap in.</param>
            <param name="format">Desired storage format</param>
            <returns>Byte array representing the image data</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ImageHelper.ResizeImage(System.Drawing.Image,System.Int32,System.Int32,CODE.Framework.Core.Utilities.ImageResizeMode)">
            <summary>
            Creates a high quality resized version of the provided image
            </summary>
            <param name="original">The original image</param>
            <param name="newWidth">The width of the new image</param>
            <param name="newHeight">The height of the new image</param>
            <param name="resizeMode">Resize mode (defines stretching)</param>
            <returns>The image in its new size</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ImageHelper.ResizeImage(System.Drawing.Image,System.Int32,System.Int32)">
            <summary>
            Creates a high quality resized version of the provided image
            </summary>
            <param name="original">The original image</param>
            <param name="newWidth">The width of the new image</param>
            <param name="newHeight">The height of the new image</param>
            <returns>The image in its new size</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ImageHelper.ResizeImage(System.Drawing.Image,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a high quality resized version of the provided image
            </summary>
            <param name="original">The original image</param>
            <param name="newWidth">The width of the new image</param>
            <param name="newHeight">The height of the new image</param>
            <param name="padding">Padding around the new image (can be - and often is - negative)</param>
            <returns>The image in its new size</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ImageHelper.ResizeImage(System.Drawing.Image,System.Int32,System.Int32,CODE.Framework.Core.Utilities.ImageResizeMode,System.Int32,System.Drawing.Color)">
            <summary>
            Creates a high quality resized version of the provided image
            </summary>
            <param name="original">The original image</param>
            <param name="newWidth">The width of the new image</param>
            <param name="newHeight">The height of the new image</param>
            <param name="resizeMode">Resize mode (defines stretching)</param>
            <param name="padding">Padding around the new image (can be - and often is - negative)</param>
            <param name="backgroundColor">Background color for areas not overlapped by the original image (due to stretch or padding)</param>
            <returns>The image in its new size</returns>
        </member>
        <member name="T:CODE.Framework.Core.Utilities.ImageResizeMode">
            <summary>
            Defines how the image is to be stretched
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.ImageResizeMode.Stretch">
            <summary>
            Stretch to new image size, even if the stretch is disproportionate
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.ImageResizeMode.StretchToNearestEdge">
            <summary>
            Stretch to the nearest edge (horizontal or vertical). Proportions are kept,
            and white areas may occur on the sides (top.bottom or left/right)
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.ImageResizeMode.StretchToFillKeepProportions">
            <summary>
            Stretches the image proportionally and overlaps the edges of the new image if need
            be, so no unused areas remain
            </summary>
        </member>
        <member name="T:CODE.Framework.Core.Utilities.Mapper">
            <summary>
            Class used to map two contracts
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.Mapper._maps">
            <summary>
            Internal list of defined maps
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.Mapper.MilosDefaultMaps">
            <summary>
            Provides a list of default maps as typically used by Milos
            </summary>
            <remarks>
            The following maps are included:
            PK -> Id
            PKString -> Id
            PKInteger -> Id
            </remarks>
            <value>The milos default maps.</value>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Mapper.AddMap(System.String,System.String)">
            <summary>
            Adds the map.
            </summary>
            <param name="sourceField">The source field.</param>
            <param name="destinationField">The destination field.</param>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Mapper.AddMaps(System.Collections.Generic.List{CODE.Framework.Core.Utilities.Map})">
            <summary>
            Adds a list of maps to the mappings
            </summary>
            <param name="maps">The maps.</param>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Mapper.Map(System.Object,System.Object)">
            <summary>
            Attempts to fill all the read/write properties in the destination object
            from the properties int he source object
            </summary>
            <param name="source">The source.</param>
            <param name="destination">The destination.</param>
            <remarks>
            This is identical to the MapObjects() instance method.
            This method is simply provided for concenience.
            </remarks>
            <returns></returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Mapper.Map(System.Object,System.Object,CODE.Framework.Core.Utilities.MappingOptions)">
            <summary>
            Attempts to fill all the read/write properties in the destination object
            from the properties int he source object
            </summary>
            <param name="source">The source.</param>
            <param name="destination">The destination.</param>
            <param name="options">The options.</param>
            <remarks>
            This is identical to the MapObjects() instance method.
            This method is simply provided for concenience.
            </remarks>
            <returns>True if map operation is a success</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Mapper.MapObjects(System.Object,System.Object)">
            <summary>
            Attempts to fill all the read/write properties in the destination object
            from the properties int he source object
            </summary>
            <param name="source">The source.</param>
            <param name="destination">The destination.</param>
            <returns>True if successful</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Mapper.MapObjects(System.Object,System.Object,CODE.Framework.Core.Utilities.MappingOptions)">
            <summary>
            Attempts to fill all the read/write properties in the destination object
            from the properties int he source object
            </summary>
            <param name="source">The source.</param>
            <param name="destination">The destination.</param>
            <param name="options">The options.</param>
            <returns>True if successful</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Mapper.Collections(System.Collections.IList,System.Collections.IList,System.String,System.Type)">
            <summary>
            Maps collections and all the objets in the collection
            </summary>
            <param name="source">The source.</param>
            <param name="destination">The destination.</param>
            <param name="keyField">The source key field.</param>
            <param name="destinationItemType">Type of the items to be added to the destination collection.</param>
            <returns></returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Mapper.Collections(System.Collections.IList,System.Collections.IList,System.String,System.Type,CODE.Framework.Core.Utilities.MappingOptions)">
            <summary>
            Maps collections and all the objets in the collection
            </summary>
            <param name="source">The source.</param>
            <param name="destination">The destination.</param>
            <param name="keyField">The source key field.</param>
            <param name="destinationItemType">Type of the items to be added to the destination collection.</param>
            <param name="options">The options.</param>
            <returns></returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Mapper.EnumerableToBusinessItemCollection(System.Collections.IEnumerable,System.Collections.IEnumerable,CODE.Framework.Core.Utilities.MappingOptions)">
            <summary>
            Maps any enumerable to a Milos Business Entity Sub Item collection
            </summary>
            <remarks>
            Can also map any other collection that has a simple parameterless Add() method that 
            returns a new object. And each item object needs to have a PK or PK_Integer or PK_String
            property (matching the type on the source). The source also needs to have a key property
            that maps to PK. Typically, this property is called "Id".
            That this method can fail at runtime if the destination type doesn't fulfill that criteria at runtime.
            </remarks>
            <param name="source">Any enumerable source</param>
            <param name="destination">Destination collection (weakly typed, but checked for the correct Add() method)</param>
            <param name="options">Mapping options</param>
            <returns>True if the operation is a success</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Mapper.GetSourceKeyField(CODE.Framework.Core.Utilities.MapKeyType)">
            <summary>
            Attempts to find the key property name on a source object
            </summary>
            <param name="keyType">Key type for which to find the appropriate property</param>
            <returns>Field name</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Mapper.GetMilosKeyField(CODE.Framework.Core.Utilities.MapKeyType)">
            <summary>
            Returns the appropriate Milos key field name
            </summary>
            <param name="keyType">Key type</param>
            <returns>Key field name</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Mapper.GetKeyTypeForObject(System.Object)">
            <summary>
            Attempts to find the key type for the provided object (which generally only works for Milos business objects)
            </summary>
            <param name="x"></param>
            <returns>Key type</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Mapper.MapCollections(System.Collections.IList,System.Collections.IList,System.String,System.Type)">
            <summary>
            Maps collections and all the objets in the collection
            </summary>
            <param name="source">The source.</param>
            <param name="destination">The destination.</param>
            <param name="keyField">The source key field.</param>
            <param name="destinationItemType">Type of the items to be added to the destination collection.</param>
            <returns></returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Mapper.MapCollections(System.Collections.IList,System.Collections.IList,System.String,System.Type,CODE.Framework.Core.Utilities.MappingOptions)">
            <summary>
            Maps collections and all the objets in the collection
            </summary>
            <param name="source">The source.</param>
            <param name="destination">The destination.</param>
            <param name="keyField">The source key field.</param>
            <param name="destinationItemType">Type of the items to be added to the destination collection.</param>
            <param name="options">The options.</param>
            <returns></returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Mapper.MapEnumValues(System.Object,System.Object,System.Reflection.PropertyInfo,System.Reflection.PropertyInfo,CODE.Framework.Core.Utilities.MappingOptions)">
            <summary>
            Maps values between two types that are different, but both enums
            </summary>
            <param name="source">The source.</param>
            <param name="destination">The destination.</param>
            <param name="property">The property.</param>
            <param name="sourceProperty">The source property.</param>
            <param name="options">The options.</param>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Mapper.UpdateEnumIfNeeded(System.Object,System.Reflection.PropertyInfo,System.Object,System.Object)">
            <summary>
            Updates the enum if needed.
            </summary>
            <param name="parentObject">The parent object.</param>
            <param name="property">The property.</param>
            <param name="currentValue">The current value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Mapper.UpdateValueIfNeeded(System.Object,System.Reflection.PropertyInfo,System.Object,System.Object)">
            <summary>
            Updates the value if needed.
            </summary>
            <param name="parentObject">The parent object that contains the property that may need to be set.</param>
            <param name="property">The property that may need to be set</param>
            <param name="currentValue">The current value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Mapper.SetValueOnProperty(System.Object,System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Sets the given value to the given propery.
            </summary>
            <param name="parentObject"></param>
            <param name="property"></param>
            <param name="newValue"></param>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Mapper.GetMappedSourcePropertyName(System.String,CODE.Framework.Core.Utilities.MapDirection)">
            <summary>
            Returns the field of the matching source property based on a known destination property name
            </summary>
            <param name="destinationProperty">The destination property.</param>
            <param name="direction">The direction.</param>
            <returns></returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Mapper.GetMappedSourcePropertyName(System.String,CODE.Framework.Core.Utilities.MapDirection,System.String,System.String)">
            <summary>
            Returns the field of the matching source property based on a known destination property name
            </summary>
            <param name="destinationProperty">Name of the source.</param>
            <param name="direction">The direction.</param>
            <param name="destinationContainer">The destination container.</param>
            <param name="sourceContainer">The source container.</param>
            <returns></returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Mapper.TableToList``1(System.Data.DataRow[],CODE.Framework.Core.Utilities.MappingOptions)">
            <summary>
            Maps tables to generic lists.
            </summary>
            <typeparam name="TDestination">The type of the destination.</typeparam>
            <param name="sourceRows">The source rows.</param>
            <param name="options">The options.</param>
            <returns></returns>
            <remarks>This is the same as the instance method MapTableToList&lt;TDestination&gt;()</remarks>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Mapper.TableToList``1(System.Data.DataTable,CODE.Framework.Core.Utilities.MappingOptions)">
            <summary>
            Maps tables to generic lists.
            </summary>
            <typeparam name="TDestination">The type of the destination.</typeparam>
            <param name="table">The table.</param>
            <param name="options">The options.</param>
            <returns></returns>
            <remarks>This is the same as the instance method MapTableToList&lt;TDestination&gt;()</remarks>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Mapper.TableToList``1(System.Data.DataTable,CODE.Framework.Core.Utilities.MappingOptions,System.Int32,System.Int32)">
            <summary>
            Maps tables to generic lists.
            </summary>
            <typeparam name="TDestination">The type of the destination.</typeparam>
            <param name="table">The table.</param>
            <param name="options">The options.</param>
            <param name="startRowIndex">First row index to be mapped (9 = row 10 is the first included row)</param>
            <param name="numberOfRowsToMap">Number of rows to map (start index = 20, number of rows = 10 means that rows 21-30 will be mapped)</param>
            <returns></returns>
            <remarks>This is the same as the instance method MapTableToList&lt;TDestination&gt;()</remarks>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Mapper.TableToList``1(System.Data.DataTable)">
            <summary>
            Maps tables to generic lists.
            </summary>
            <typeparam name="TDestination">The type of the destination.</typeparam>
            <param name="table">The table.</param>
            <returns></returns>
            <remarks>This is the same as the instance method MapTableToList&lt;TDestination&gt;()</remarks>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Mapper.MapTableToList``1(System.Data.DataRow[],CODE.Framework.Core.Utilities.MappingOptions)">
            <summary>
            Maps a data table's records to a generic List
            </summary>
            <typeparam name="TDestination">The type of the destination.</typeparam>
            <param name="sourceRows">The source rows.</param>
            <param name="options">The options.</param>
            <returns></returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Mapper.CopyFromRowToItem``1(System.Data.DataRow,CODE.Framework.Core.Utilities.MappingOptions,System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo},CODE.Framework.Core.Utilities.ExpressionTreeObjectActivator)">
            <summary>
            Copies from row to item.
            </summary>
            <typeparam name="TDestination">The type of the destination.</typeparam>
            <param name="row">The row.</param>
            <param name="options">The options.</param>
            <param name="properties">The properties.</param>
            <param name="activator">Activator</param>
            <returns></returns> 
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Mapper.GetPrefixedFieldName(System.Data.DataTable,System.String)">
            <summary>
            Tries to find a field name that matches if it had a prefix.
            </summary>
            <param name="table">The table.</param>
            <param name="fieldName">Name of the field.</param>
            <returns>Field name</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Mapper.MapTableToList``1(System.Data.DataTable)">
            <summary>
            Maps the enumerables.
            </summary>
            <typeparam name="TDestination">The type of the destination.</typeparam>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Mapper.MapTableToList``1(System.Data.DataTable,CODE.Framework.Core.Utilities.MappingOptions)">
            <summary>
            Maps the enumerables.
            </summary>
            <typeparam name="TDestination">The type of the destination.</typeparam>
            <param name="source">The source.</param>
            <param name="options">The options.</param>
            <returns></returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Mapper.MapTableToList``1(System.Type,System.Data.DataTable)">
            <summary>
            Maps the enumerables.
            </summary>
            <typeparam name="TDestination">The type of the destination.</typeparam>
            <param name="destinationType">Destination type</param>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Mapper.MapTableToList``1(System.Type,System.Data.DataTable,CODE.Framework.Core.Utilities.MappingOptions)">
            <summary>
            Maps the enumerables.
            </summary>
            <typeparam name="TDestination">The type of the destination.</typeparam>
            <param name="destinationType">Destination type</param>
            <param name="source">The source.</param>
            <param name="options">The options.</param>
            <returns></returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Mapper.MapTableToList``1(System.Type,System.Data.DataTable,CODE.Framework.Core.Utilities.MappingOptions,System.Int32,System.Int32)">
            <summary>
            Maps the enumerables.
            </summary>
            <typeparam name="TDestination">The type of the destination.</typeparam>
            <param name="destinationType">Destination type</param>
            <param name="source">The source.</param>
            <param name="options">The options.</param>
            <param name="startRowIndex">First row index to be mapped (9 = row 10 is the first included row)</param>
            <param name="numberOfRowsToMap">Number of rows to map (start index = 20, number of rows = 10 means that rows 21-30 will be mapped)</param>
            <returns></returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Mapper.TableToCollection``1(System.Data.DataRow[],CODE.Framework.Core.Utilities.MappingOptions)">
            <summary>
            Maps tables to generic collection.
            </summary>
            <typeparam name="TDestination">The type of the destination.</typeparam>
            <param name="sourceRows">The source rows.</param>
            <param name="options">The options.</param>
            <returns></returns>
            <remarks>This is the same as the instance method MapTableToCollection&lt;TDestination&gt;()</remarks>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Mapper.TableToCollection``1(System.Data.DataTable,CODE.Framework.Core.Utilities.MappingOptions)">
            <summary>
            Maps tables to generic lists.
            </summary>
            <typeparam name="TDestination">The type of the destination.</typeparam>
            <param name="table">The table.</param>
            <param name="options">The options.</param>
            <returns></returns>
            <remarks>This is the same as the instance method MapTableToCollection&lt;TDestination&gt;()</remarks>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Mapper.TableToCollection``1(System.Data.DataTable,CODE.Framework.Core.Utilities.MappingOptions,System.Int32,System.Int32)">
            <summary>
            Maps tables to generic lists.
            </summary>
            <typeparam name="TDestination">The type of the destination.</typeparam>
            <param name="table">The table.</param>
            <param name="options">The options.</param>
            <param name="startRowIndex">First row index to be mapped (9 = row 10 is the first included row)</param>
            <param name="numberOfRowsToMap">Number of rows to map (start index = 20, number of rows = 10 means that rows 21-30 will be mapped)</param>
            <returns></returns>
            <remarks>This is the same as the instance method MapTableToCollection&lt;TDestination&gt;()</remarks>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Mapper.TableToCollection``1(System.Data.DataTable)">
            <summary>
            Maps tables to generic lists.
            </summary>
            <typeparam name="TDestination">The type of the destination.</typeparam>
            <param name="table">The table.</param>
            <returns></returns>
            <remarks>This is the same as the instance method MapTableToCollection&lt;TDestination&gt;()</remarks>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Mapper.MapTableToCollection``1(System.Data.DataRow[],CODE.Framework.Core.Utilities.MappingOptions)">
            <summary>
            Maps a data table's records to a generic collection
            </summary>
            <typeparam name="TDestination">The type of the destination.</typeparam>
            <param name="sourceRows">The source rows.</param>
            <param name="options">The options.</param>
            <returns></returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Mapper.MapTableToCollection``1(System.Data.DataTable)">
            <summary>
            Maps a data table to a generic collection of the specified type
            </summary>
            <typeparam name="TDestination">The type of the destination.</typeparam>
            <param name="source">The source.</param>
            <returns></returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Mapper.MapTableToCollection``1(System.Data.DataTable,CODE.Framework.Core.Utilities.MappingOptions)">
            <summary>
            Maps the enumerables.
            </summary>
            <typeparam name="TDestination">The type of the destination.</typeparam>
            <param name="source">The source.</param>
            <param name="options">The options.</param>
            <returns></returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Mapper.MapTableToCollection``1(System.Data.DataTable,CODE.Framework.Core.Utilities.MappingOptions,System.Int32,System.Int32)">
            <summary>
            Maps the enumerables.
            </summary>
            <typeparam name="TDestination">The type of the destination.</typeparam>
            <param name="source">The source.</param>
            <param name="options">The options.</param>
            <param name="startRowIndex">First row index to be mapped (9 = row 10 is the first included row)</param>
            <param name="numberOfRowsToMap">Number of rows to map (start index = 20, number of rows = 10 means that rows 21-30 will be mapped)</param>
            <returns></returns>
        </member>
        <member name="T:CODE.Framework.Core.Utilities.Mapper.ReflectionHelper">
            <summary>
            Class used internally to aid in reflection tasks
            </summary>
        </member>
        <member name="T:CODE.Framework.Core.Utilities.MapKeyType">
            <summary>
             Key type used for mapping
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.MapKeyType.Guid">
            <summary>
             Guid key
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.MapKeyType.Integer">
            <summary>
             Integer key (auto-increment or otherwise)
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.MapKeyType.String">
            <summary>
             String key
            </summary>
        </member>
        <member name="T:CODE.Framework.Core.Utilities.Map">
            <summary>
            Defines a single field map
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Map.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Utilities.Map"/> class.
            </summary>
            <param name="sourceField">The source field.</param>
            <param name="destinationField">The destination field.</param>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Map.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Utilities.Map"/> class.
            </summary>
            <param name="sourceField">The source field.</param>
            <param name="sourceContainer">The source container.</param>
            <param name="destinationField">The destination field.</param>
            <param name="destinationContainer">The destination container.</param>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.Map.SourceField">
            <summary>
            Gets or sets the source field.
            </summary>
            <value>The source field.</value>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.Map.SourceContainer">
            <summary>
            Gets or sets the source container.
            </summary>
            <value>The source container.</value>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.Map.DestinationField">
            <summary>
            Gets or sets the destination field.
            </summary>
            <value>The destination field.</value>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.Map.DestinationContainer">
            <summary>
            Gets or sets the destination container.
            </summary>
            <value>The destination container.</value>
        </member>
        <member name="T:CODE.Framework.Core.Utilities.MapDirection">
            <summary>
            Map direction
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.MapDirection.Forward">
            <summary>
            Source to destination
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.MapDirection.Backward">
            <summary>
            Destination to source
            </summary>
        </member>
        <member name="T:CODE.Framework.Core.Utilities.MappingOptions">
            <summary>
            Mapping options (settings)
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.MappingOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Utilities.MappingOptions"/> class.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.MappingOptions.MapEnums">
            <summary>
            Defines whether enums should be mapped, even if they are not the exact same enum.
            </summary>
            <remarks>
            Tries to map enums by their names and if that doesn't work, by their value (integer or byte)
            </remarks>
            <value><c>true</c> if enums are to be mapped, otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.MappingOptions.MatchEnumCase">
            <summary>
            Indicates wheter auto-map enum attempts shall be case sensitive or not
            </summary>
            <value><c>true</c> if case sensitive, otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.MappingOptions.SmartPrefixMap">
            <summary>
            If set to true, the mapper will automatically try to make prefixed fields to 
            non-prefixed properties, such as cName or _name or c_name to Name.
            </summary>
            <value><c>true</c> if [smart prefix map]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.MappingOptions.Maps">
            <summary>
            If not null, this list of maps will be used instead of other defined maps
            </summary>
            <value>The maps.</value>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.MappingOptions.ExcludedFields">
            <summary>
            List of excluded fields
            </summary>
            <value>The excluded fields.</value>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.MappingOptions.MapDirection">
            <summary>
            Direction of the mapping operation
            </summary>
            <remarks>
            Forward = Source to destinction
            Backward = Destination to source
            </remarks>
            <value>The map direction.</value>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.MappingOptions.MapFunctions">
            <summary>
            A list of functions that get called for mapped objets.
            For iterative maps (tables,...), map functions are called for each record.
            </summary>
            <value>The map functions.</value>
            <remarks>
            Parameter 1 = source object (forward map, otherwise destination)
            Parameter 2 = destination object (forward map, otherwise source)
            Parameter 3 = direction
            Return value = true if successful
            </remarks>
        </member>
        <member name="T:CODE.Framework.Core.Utilities.ExpressionTreeObjectActivator">
            <summary>
            Instantiates a given type by building an expression tree
            that invokes the default construction on the type.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ExpressionTreeObjectActivator.#ctor(System.Type)">
            <summary>
            Constructor
            </summary>
            <param name="objectType">Type of the object to be instantiated.</param>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ExpressionTreeObjectActivator.InstantiateType">
            <summary>
            Instantiates the type using its default parameterless constructor.
            </summary>
            <returns></returns>
        </member>
        <member name="T:CODE.Framework.Core.Utilities.MarkupHelper">
            <summary>
            This helper class provides all kinds of features useful for markup (HTML, RSS, XAML, XML,...) processing
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.MarkupHelper.StripMarkup(System.String)">
            <summary>
            Strips all markup tags from the provided string
            </summary>
            <param name="markup">A string with markup</param>
            <returns>Text without markup</returns>
            <example>
            Example markup:
            &lt;html&gt;&lt;body style="color: black;"&gt;&lt;p&gt;This is some text&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
            Result after markup-strip:
            This is some text
            </example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.MarkupHelper.GetBodyOnly(System.String)">
            <summary>
            Inspects the provided HTML for start and end body-tags.
            If those tags are present, only the content within the body tags (inner HTML)
            is included int he return value.
            </summary>
            <param name="html">The HTML.</param>
            <returns>Body portion of the HTML</returns>
            <remarks>
            This method is very helpful whenever a potentially complete HTML string needs to be
            displayed as a portion of a larger HTML output.
            </remarks>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.MarkupHelper.GetStrippedBodyOnly(System.String)">
            <summary>
            Removes non-body elements from HTML and then strips all markup and returns the result.
            </summary>
            <param name="html">The HTML.</param>
            <returns>Body text without markup</returns>
            <example>
            Example markup:
            &lt;html&gt;&lt;head&gt;&lt;title&gt;Document Title&lt;/title&gt;&lt;head&gt;&lt;body style="color: black;"&gt;&lt;p&gt;This is some text&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
            Result after markup-strip:
            This is some text
            </example>
            <remarks>
            This method is very helpful whenever a potentially complete HTML string needs to be
            displayed as a portion of a larger HTML output.
            </remarks>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.MarkupHelper.GetRssFormattedDateTime(System.DateTime)">
            <summary>
            Creates a time string formatted for RSS feeds
            </summary>
            <param name="date">Date to convert</param>
            <returns>Converted date</returns>
            <example>
            string rssDate = MarkupHelper.GetRssFormattedDateTime(DateTime.Now);
            </example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.MarkupHelper.ToRssData(System.DateTime)">
            <summary>
            Returns a date formatted according to RSS rules
            </summary>
            <param name="date">The date.</param>
            <returns>RSS formatted date</returns>
            <example>
            string rssDate = MarkupHelper.ToRssDate(DateTime.Now);
            </example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.MarkupHelper.XmlEncode(System.String)">
            <summary>XML-encodes a string and returns the encoded string.</summary>
            <param name="text">The text string to encode. </param>
            <returns>The XML-encoded text.</returns>
            <remarks>Identical to HtmlEncode()</remarks>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.MarkupHelper.HtmlEncode(System.String)">
            <summary>HTML-encodes a string and returns the encoded string.</summary>
            <param name="text">The text string to encode. </param>
            <returns>The HTML-encoded text.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.MarkupHelper.PlainTextToHtml(System.String)">
            <summary>
            Converts plain text to HTML
            </summary>
            <param name="text">The plain text.</param>
            <returns>HTML</returns>
            <example>
            string myText = "Hello World!\r\n\r\nText > HTML";
            string myHtml = MarkupHelper.PlainTextToHtml(myText);
            </example>
        </member>
        <member name="T:CODE.Framework.Core.Utilities.NetworkHelper">
            <summary>
            This class contains various useful features for detecting network state
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.NetworkHelper.NetworkAvailable">
            <summary>
            Gets a value indicating whether a valid network conneciton is available
            </summary>
            <value><c>true</c> if [network available]; otherwise, <c>false</c>.</value>
            <example>
            if (NetworkHelper.NetworkAvailable)
            {
                // ... do something
            }
            </example>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.NetworkHelper.InternetConnectionAvailable">
            <summary>
            Gets a value indicating whether a connection to the Internet is available
            </summary>
            <value>
            	<c>true</c> if an Internet connection is available..
            </value>
            <example>
            if (NetworkHelper.InternetConnectionAvailable)
            {
                // ... do something
            }
            </example>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.NetworkHelper.FastestConnectionSpeed">
            <summary>
            Gets the speed of the fastest available connection in bits per second.
            </summary>
            <value>Connection speed.</value>
            <remarks>
            Tunnel and Loopback adapters are ignored.
            </remarks>
            <example>
            if (NetworkHelper.FastestConnectionSpeed >= 54000000)
            {
                // ... download something large
            }
            else
            {
                MessageBox.Show("You need at least an 802.11a connection (or better) for this feature.");
            }
            </example>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.NetworkHelper.AllIPAddresses">
            <summary>
            Gets all the IP addresses (IPv4) utilized by the current system.
            </summary>
            <value>All IP addresses.</value>
            <remarks>
            Only IPv4 addresses are included.
            Tunnel and Loopback adapters are ignored.
            Only adapters that are up are considered.
            </remarks>
            <example>
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("IP Addresses used by this system:");
            foreach (IPAddressInformation address in NetworkHelper.AllIPAddresses)
            {
                sb.AppendLine(address.Address.ToString());
            }
            MessageBox.Show(sb.ToString());
            </example>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.NetworkHelper.AllIPAddressesClearText">
            <summary>
            Gets all the IP addresses (IPv4) utilized by the current system in clear text representation.
            </summary>
            <value>All IP addresses.</value>
            <remarks>
            Only IPv4 addresses are included.
            Tunnel and Loopback adapters are ignored.
            Only adapters that are up are considered.
            </remarks>
            <example>
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("IP Addresses used by this system:");
            foreach (string address in NetworkHelper.AllIPAddressesClearText)
            {
                sb.AppendLine(address);
            }
            MessageBox.Show(sb.ToString());
            </example>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.NetworkHelper.CurrentIPAddressClearText">
            <summary>
            Gets the system's current IP address (IPv4) in clear text.
            </summary>
            <value>The current ip address.</value>
            <remarks>
            If the system currently uses multiple IP addresses, the first unicast address
            on the fastest adapter will be returned.
            </remarks>
            <example>
            MessageBox.Show("Current IP Address: " + NetworkHelper.CurrentIPAddressClearText);
            </example>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.NetworkHelper.CurrentIPAddress">
            <summary>
            Gets the system's current IP address (IPv4).
            </summary>
            <value>The current ip address.</value>
            <remarks>
            If the system currently uses multiple IP addresses, the first unicast address
            on the fastest adapter will be returned.
            </remarks>
            <example>
            MessageBox.Show("Current IP Address: " + NetworkHelper.CurrentIPAddress.Address.ToString());
            </example>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.NetworkHelper.AllCurrentDomains">
            <summary>
            Gets a collection of all current domains we are connected to.
            </summary>
            <value>All current domains.</value>
            <example>
            StringBuilder sb = new StringBuilder();
            sb.AppendLine("Current domains:");
            foreach (string domain in NetworkHelper.AllCurrentDomains)
            {
                sb.AppendLine(domain);
            }
            MessageBox.Show(sb.ToString());
            </example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.NetworkHelper.CurrentlyConnectedToDomain(System.String)">
            <summary>
            Returns true, if the system is currently connected to the specified domain.
            </summary>
            <param name="domain">The domain (case insensitive).</param>
            <returns>True if connected to the domain.</returns>
            <example>
            if (NetworkHelper.CurrentlyConnectedToDomain("mydomain"))
            {
                // ... do something with it
            }
            </example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.NetworkHelper.CanConnect(System.String)">
            <summary>
            Determines whether it is possible to connect to the specified host.
            </summary>
            <param name="host">The host.</param>
            <returns>
            	<c>true</c> if this instance can connect the specified host; otherwise, <c>false</c>.
            </returns>
            <example>
            if (NetworkHelper.CanConnect("www.Microsoft.com"))
            {
            // ... do something with the connection
            }
            </example>
            <remarks>Port 80 is used to make the connection attempt.</remarks>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.NetworkHelper.CanConnect(System.String,System.Int32)">
            <summary>
            Determines whether it is possible to connect to the specified host.
            </summary>
            <param name="host">The host.</param>
            <param name="port">The port.</param>
            <returns>
            	<c>true</c> if this instance can connect the specified host; otherwise, <c>false</c>.
            </returns>
            <example>
            if (NetworkHelper.CanConnect("www.Microsoft.com", 80))
            {
                // ... do something with the connection
            }
            </example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.NetworkHelper.GetAllAddressesForAdapter(System.Net.NetworkInformation.IPInterfaceProperties)">
            <summary>
            Gets all addresses for an adapter.
            </summary>
            <param name="interfaceProperties">The interface properties.</param>
            <returns>List of IP Addresses</returns>
            <remarks>For internal use only</remarks>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.NetworkHelper.CanConnectFromAddress(System.Net.IPAddress,System.Collections.Generic.IEnumerable{System.Net.NetworkInformation.IPAddressInformation},System.Net.IPHostEntry,System.Int32)">
            <summary>
            Determines whether it is possible to connect to the specified local host address.
            </summary>
            <param name="localHostAddress">The local host address.</param>
            <param name="adapterAddressList">The adapter address list.</param>
            <param name="remoteHostEntry">The remote host entry.</param>
            <param name="port">The port.</param>
            <returns>true if this instance can connect from the specified local host addr; otherwise false.</returns>
            <remarks>For internal use only</remarks>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.NetworkHelper.CanConnectFromEndPoint(System.Net.EndPoint,System.Net.IPHostEntry,System.Int32)">
            <summary>
            Determines whether it is possible to connect to the remote host from the specified endpoint.
            </summary>
            <param name="localEndPoint">The local end point.</param>
            <param name="remoteHostEntry">The remote host entry.</param>
            <param name="port">The port.</param>
            <returns>
            	<c>true</c> if this instance [can connect from end point] the specified local EP; otherwise, <c>false</c>.
            </returns>
            <remarks>For internal use only</remarks>
        </member>
        <member name="E:CODE.Framework.Core.Utilities.NetworkHelper.NetworkAddressChanged">
            <summary>
            Occurs when the IP Address of a network interface changes
            </summary>
            <remarks>
            This event is provided for consistency only. 
            It simply passes through to NetworkChange.NetworkAddressChanged
            </remarks>
        </member>
        <member name="E:CODE.Framework.Core.Utilities.NetworkHelper.NetworkAvailabilityChanged">
            <summary>
            Occurs when the availability of a network changes
            </summary>
            <remarks>
            This event is provided for consistency only. 
            It simply passes through to NetworkChange.NetworkAvailabilityChanged
            </remarks>
        </member>
        <member name="T:CODE.Framework.Core.Utilities.PowerHelper">
            <summary>
            This class provides a number of power-related features
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.PowerHelper._dummyMessageReceiver">
            <summary>
            Dummy form use to receive messages
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.PowerHelper._handlePowerSource">
            <summary>
            Handle for power source changed
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.PowerHelper._handleBatteryCapacity">
            <summary>
            Handle for battery capacity changes
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.PowerHelper._handleMonitorOn">
            <summary>
            Handle for monitor power status changes
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.PowerHelper._handlePowerScheme">
            <summary>
            Handle for power scheme changes
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.PowerHelper._listeningForPowerEvents">
            <summary>
            Indicates whether the class currently listens for power events
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.PowerHelper.CurrentStatus">
            <summary>
            Current power status of the system
            </summary>
            <value>The current status.</value>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.PowerHelper._windowHandle">
            <summary>
            Window handle for windows power messages
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.PowerHelper.IsVistaOrLater">
            <summary>
            Returns true if the current OS is at least Vista
            </summary>
            <returns></returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.PowerHelper.RegisterForPowerNotifications">
            <summary>
            Registers for power notifications.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.PowerHelper.UnregisterForPowerNotifications">
            <summary>
            Unregisters for power notifications.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.PowerHelper.MessageHook(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Boolean@)">
            <summary>
            Message hook for power notifications
            </summary>
            <param name="windowHandle">The window handle.</param>
            <param name="message">The message.</param>
            <param name="parameterW">The parameter W.</param>
            <param name="parameterL">The parameter L.</param>
            <param name="handled">if set to <c>true</c> [handled].</param>
            <returns></returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.PowerHelper.KeepScreenAlive(System.Boolean)">
            <summary>
            Defines whether the screen should be allowed to go to sleep.
            </summary>
            <param name="keepAlive">If true, the screen will not go into sleep mode</param>
            <returns>True if successfully set</returns>
            <remarks>This method is specific to the thread that calls it. When the thread goes away, so does this setting.</remarks>
        </member>
        <member name="E:CODE.Framework.Core.Utilities.PowerHelper._powerChanged">
            <summary>
            Occurs when power settings change
            </summary>
        </member>
        <member name="E:CODE.Framework.Core.Utilities.PowerHelper.PowerChanged">
            <summary>
            Occurs when power settings change
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.PowerHelper.RaisePowerChanged">
            <summary>
            Raises the power changed event.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.PowerHelper.WM_POWERBROADCAST">
            <summary>
            Power broadcase
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.PowerHelper.DEVICE_NOTIFY_WINDOW_HANDLE">
            <summary>
            Device notify window handle
            </summary>
        </member>
        <member name="T:CODE.Framework.Core.Utilities.PowerHelper.NativeMethods">
            <summary>
            Native (interop) methods used by the PowerHelper class
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.PowerHelper.NativeMethods.GetSystemPowerStatus(CODE.Framework.Core.Utilities.PowerHelper.SYSTEM_POWER_STATUS)">
            <summary>
            Gets the system power status.
            </summary>
            <param name="SystemPowerStatus">The system power status.</param>
            <returns>True of false, to indicate success</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.PowerHelper.NativeMethods.GetDevicePowerState(System.IntPtr,System.Boolean@)">
            <summary>
            Gets the power state of the device.
            </summary>
            <param name="device">The device.</param>
            <param name="on">if set to <c>true</c>, the device is on.</param>
            <returns></returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.PowerHelper.NativeMethods.PowerGetActiveScheme(System.IntPtr,System.IntPtr@)">
            <summary>
            Powers the get ative scheme (Vista).
            </summary>
            <param name="userRootPowerKey">The user root power key.</param>
            <param name="activePolicyGuid">The active policy GUID.</param>
            <returns></returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.PowerHelper.NativeMethods.RegisterPowerSettingNotification(System.IntPtr,System.Guid@,System.Int32)">
            <summary>
            Registers for power setting notifications.
            </summary>
            <param name="handle">The handle.</param>
            <param name="powerSettingGuid">The power setting GUID.</param>
            <param name="flags">The flags.</param>
            <returns></returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.PowerHelper.NativeMethods.UnregisterPowerSettingNotification(System.IntPtr)">
            <summary>
            Unregisters for power setting notification.
            </summary>
            <param name="handle">The handle.</param>
            <returns></returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.PowerHelper.NativeMethods.SetThreadExecutionState(CODE.Framework.Core.Utilities.PowerHelper.EXECUTION_STATE)">
            <summary>
            Sets the state of the thread execution.
            </summary>
            <param name="state">The state.</param>
            <returns></returns>
        </member>
        <member name="T:CODE.Framework.Core.Utilities.PowerHelper.MessageSinkWindow">
            <summary>
            Dummy class used as a message sink for windows messages
            sent to receive power notifications
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.PowerHelper.MessageSinkWindow.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Message handler
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="T:CODE.Framework.Core.Utilities.PowerHelper.SYSTEM_POWER_STATUS">
            <summary>
            System Power Status
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.PowerHelper.SYSTEM_POWER_STATUS.ACLineStatus">
            <summary>
            AC Line Status
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.PowerHelper.SYSTEM_POWER_STATUS.BatteryFlag">
            <summary>
            Battery Flag
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.PowerHelper.SYSTEM_POWER_STATUS.BatteryLifePercent">
            <summary>
            Battery life precent
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.PowerHelper.SYSTEM_POWER_STATUS.Reserved1">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.PowerHelper.SYSTEM_POWER_STATUS.BatteryLifeTime">
            <summary>
            Battery life time remaining
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.PowerHelper.SYSTEM_POWER_STATUS.BatteryFullLifeTime">
            <summary>
            Battery full lifetime
            </summary>
        </member>
        <member name="T:CODE.Framework.Core.Utilities.PowerHelper.ACLineStatus">
            <summary>
            AC Line Status
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.PowerHelper.ACLineStatus.Battery">
            <summary>
            Battery 
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.PowerHelper.ACLineStatus.AC">
            <summary>
            AC
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.PowerHelper.ACLineStatus.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="T:CODE.Framework.Core.Utilities.PowerHelper.BatteryFlag">
            <summary>
            Battery flag
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.PowerHelper.BatteryFlag.High">
            <summary>
            High
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.PowerHelper.BatteryFlag.Low">
            <summary>
            Low
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.PowerHelper.BatteryFlag.Critical">
            <summary>
            Critical
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.PowerHelper.BatteryFlag.Charging">
            <summary>
            Charging
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.PowerHelper.BatteryFlag.NoSystemBattery">
            <summary>
            No systme battery
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.PowerHelper.BatteryFlag.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="T:CODE.Framework.Core.Utilities.PowerHelper.PowerSettings">
            <summary>
            Defines various constants for power settings
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.PowerHelper.PowerSettings.GUID_MIN_POWER_SAVINGS">
            <summary>
            High Performance - The scheme is designed to deliver maximum performance 
            at the expense of power consumption savings.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.PowerHelper.PowerSettings.GUID_MAX_POWER_SAVINGS">
            <summary>
            Power Saver - The scheme is designed to deliver maximum power consumption 
            savings at the expense of system performance and responsiveness.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.PowerHelper.PowerSettings.GUID_TYPICAL_POWER_SAVINGS">
            <summary>
            Automatic (Balanced) - The scheme is designed to automatically balance 
            performance and power consumption savings.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.PowerHelper.PowerSettings.GUID_MONITOR_POWER_ON">
            <summary>
            Monitor on switch
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.PowerHelper.PowerSettings.GUID_ACDC_POWER_SOURCE">
            <summary>
            Power source
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.PowerHelper.PowerSettings.GUID_POWERSCHEME_PERSONALITY">
            <summary>
            Power scheme personality
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.PowerHelper.PowerSettings.GUID_BATTERY_PERCENTAGE_REMAINING">
            <summary>
            Battery percentage remaining
            </summary>
        </member>
        <member name="T:CODE.Framework.Core.Utilities.PowerHelper.EXECUTION_STATE">
            <summary>
            Thread execution state
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.PowerHelper.EXECUTION_STATE.None">
            <summary>
            No keep alive required
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.PowerHelper.EXECUTION_STATE.ES_SYSTEM_REQUIRED">
            <summary>
            System required
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.PowerHelper.EXECUTION_STATE.ES_DISPLAY_REQUIRED">
            <summary>
            Display required
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.PowerHelper.EXECUTION_STATE.ES_CONTINUOUS">
            <summary>
            Continuous
            </summary>
        </member>
        <member name="T:CODE.Framework.Core.Utilities.PowerPlan">
            <summary>
            Power plan (Windows Vista)
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.PowerPlan.HighPerformance">
            <summary>
            High performance
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.PowerPlan.PowerSaver">
            <summary>
            PowerSaver
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.PowerPlan.Balanced">
            <summary>
            Balanced
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.PowerPlan.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="T:CODE.Framework.Core.Utilities.PowerSource">
            <summary>
            Power source
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.PowerSource.Battery">
            <summary>
            Battery (DC)
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.PowerSource.PluggedIn">
            <summary>
            Plugged in (AC)
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.PowerSource.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="T:CODE.Framework.Core.Utilities.BatteryChargeState">
            <summary>
            Battery charge state
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.BatteryChargeState.Normal">
            <summary>
            Normal
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.BatteryChargeState.High">
            <summary>
            High
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.BatteryChargeState.Low">
            <summary>
            Low
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.BatteryChargeState.Critical">
            <summary>
            Critical
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.BatteryChargeState.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="T:CODE.Framework.Core.Utilities.DeviceState">
            <summary>
            Device state
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.DeviceState.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.DeviceState.On">
            <summary>
            On
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.DeviceState.Off">
            <summary>
            Off
            </summary>
        </member>
        <member name="T:CODE.Framework.Core.Utilities.PowerInformation">
            <summary>
            Provides information about system power status
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.PowerInformation.BatteryIsCharging">
            <summary>
            Indicates whether the battery is currently charging.
            </summary>
            <value><c>true</c> if [battery is charging]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.PowerInformation.BatteryAvailable">
            <summary>
            Indicates whether a battery is available.
            </summary>
            <value><c>true</c> if [battery available]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.PowerInformation.BatteryChargeState">
            <summary>
            The state of the battery charge.
            </summary>
            <value>The state of the battery charge.</value>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.PowerInformation.Source">
            <summary>
            Power source
            </summary>
            <value>Source</value>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.PowerInformation.Plan">
            <summary>
            Current power plan (Vista only)
            </summary>
            <value>The plan.</value>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.PowerInformation.BatteryPercentLeft">
            <summary>
            Battery percent left.
            </summary>
            <value>The battery percent left.</value>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.PowerInformation.RemainingBatteryLifeTime">
            <summary>
            Remaining battery lifetime.
            </summary>
            <value>The remaining battery lifetime.</value>
            <remarks>
            Depending on the system's hardware, this information may not be available.
            In that case, the value of this property is TimeSpan.MinValue.
            </remarks>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.PowerInformation.TotalBatteryLifeTime">
            <summary>
            Total battery lifetime.
            </summary>
            <value>The remaining battery lifetime.</value>
            <remarks>
            Depending on the system's hardware, this information may not be available.
            In that case, the value of this property is TimeSpan.MinValue.
            </remarks>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.PowerInformation.MonitorState">
            <summary>
            State of the monitor.
            </summary>
            <value>The state of the monitor.</value>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.PowerInformation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Utilities.PowerInformation"/> class.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.PowerInformation.DiskDriveState">
            <summary>
            State of the disk drive.
            </summary>
            <value>The state of the disk drive.</value>
        </member>
        <member name="T:CODE.Framework.Core.Utilities.PowerChangeEventArgs">
            <summary>
            Power settings changed
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.PowerChangeEventArgs.PowerInformation">
            <summary>
            Gets or sets the power information.
            </summary>
            <value>The power information.</value>
        </member>
        <member name="T:CODE.Framework.Core.Utilities.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.Properties.Resources.BufferSizeTooSmall">
            <summary>
              Looks up a localized string similar to Buffer size must be 1 or more..
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.Properties.Resources.CannotMovePreviousRecordInForwardOnly">
            <summary>
              Looks up a localized string similar to Cannot move to a previous record in forward-only mode..
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.Properties.Resources.CannotReadRecordAtIndex">
            <summary>
              Looks up a localized string similar to Cannot read record at index &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.Properties.Resources.EnumerationFinishedOrNotStarted">
            <summary>
              Looks up a localized string similar to Enumeration has either not started or has already finished..
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.Properties.Resources.EnumerationVersionCheckFailed">
            <summary>
              Looks up a localized string similar to Collection was modified; enumeration operation may not execute..
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.Properties.Resources.FieldHeaderNotFound">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; field header not found..
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.Properties.Resources.FieldIndexOutOfRange">
            <summary>
              Looks up a localized string similar to Field index must be included in [0, FieldCount[. Specified field index was : &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.Properties.Resources.MalformedCsvException">
            <summary>
              Looks up a localized string similar to The CSV appears to be corrupt near record &apos;{0}&apos; field &apos;{1} at position &apos;{2}&apos;. Current raw data : &apos;{3}&apos;..
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.Properties.Resources.MissingFieldActionNotSupported">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is not a supported missing field action..
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.Properties.Resources.NoCurrentRecord">
            <summary>
              Looks up a localized string similar to No current record..
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.Properties.Resources.NoHeaders">
            <summary>
              Looks up a localized string similar to The CSV does not have headers (CsvReader.HasHeaders property is false)..
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.Properties.Resources.NotEnoughSpaceInArray">
            <summary>
              Looks up a localized string similar to The number of fields in the record is greater than the available space from index to the end of the destination array..
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.Properties.Resources.ParseErrorActionInvalidInsideParseErrorEvent">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is not a valid ParseErrorAction while inside a ParseError event..
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.Properties.Resources.ParseErrorActionNotSupported">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is not a supported ParseErrorAction..
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.Properties.Resources.ReaderClosed">
            <summary>
              Looks up a localized string similar to This operation is invalid when the reader is closed..
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.Properties.Resources.RecordIndexLessThanZero">
            <summary>
              Looks up a localized string similar to Record index must be 0 or more..
            </summary>
        </member>
    </members>
</doc>
