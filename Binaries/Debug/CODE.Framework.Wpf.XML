<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CODE.Framework.Wpf</name>
    </assembly>
    <members>
        <member name="T:CODE.Framework.Wpf.Behavior.IAttachedObject">
            <summary>
            An interface for an object that can be attached to another object. 
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Behavior.IAttachedObject.Attach(System.Windows.DependencyObject)">
            <summary>
            Attaches to the specified object. 
            </summary>
            <param name="dependencyObject">The object to attach to.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Behavior.IAttachedObject.Detach">
            <summary>
            Detaches this instance from its associated object. 
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Behavior.IAttachedObject.AssociatedObject">
            <summary>
            Represents the object the instance is attached to.
            </summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Behavior.Behavior">
            <summary>
            Encapsulates state information and zero or more ICommands into an attachable object. 
            </summary>
            <remarks>
            This is an infrastructure class. Behavior authors should derive from Behavior instead of from this class.
            </remarks>
        </member>
        <member name="M:CODE.Framework.Wpf.Behavior.Behavior.Attach(System.Windows.DependencyObject)">
            <summary>
            Attaches to the specified object.
            </summary>
            <param name="dependencyObject">The object to attach to.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Behavior.Behavior.OnAssociatedObjectChanged">
            <summary>
            Fires the associated object changed event (if used)
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Behavior.Behavior.OnAttached">
            <summary>
            Called after the behavior is attached to an AssociatedObject. 
            </summary>
            <remarks>Override this to hook up functionality to the AssociatedObject.</remarks>
        </member>
        <member name="M:CODE.Framework.Wpf.Behavior.Behavior.OnAttachedInternal">
            <summary>
            Similar to OnAttached(), but used for internal purposes only. Do not override.
            </summary>
            <remarks>Do not override this method. Override OnAttached() instead.</remarks>
        </member>
        <member name="M:CODE.Framework.Wpf.Behavior.Behavior.OnDetaching">
            <summary>
            Called when the behavior is being detached from its AssociatedObject, but before it has actually occurred. 
            </summary>
            <remarks>Override this to unhook functionality from the AssociatedObject.</remarks>
        </member>
        <member name="M:CODE.Framework.Wpf.Behavior.Behavior.Detach">
            <summary>
            Detaches this instance from its associated object.
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Behavior.Behavior.AssociatedObjectChanged">
            <summary>
            Fires when the assopciated object changes
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Behavior.Behavior.AssociatedObject">
            <summary>
            Represents the object the instance is attached to.
            </summary>
            <value>Associated object or null</value>
        </member>
        <member name="T:CODE.Framework.Wpf.Behavior.Behavior`1">
            <summary>
            Encapsulates state information and zero or more ICommands into an attachable object. 
            </summary>
            <typeparam name="TAttached">The type the behavior can be attached to.</typeparam>
            <remarks>
            Behavior is the base class for providing attachable state and commands to an object. 
            The types the Behavior can be attached to can be controlled by the generic parameter. 
            Override OnAttached() and OnDetaching() methods to hook and unhook any necessary 
            handlers from the AssociatedObject. 
            </remarks>
        </member>
        <member name="P:CODE.Framework.Wpf.Behavior.Behavior`1.AssociatedObject">
            <summary>
            Represents the object the instance is attached to.
            </summary>
            <value>Associated object or null</value>
        </member>
        <member name="M:CODE.Framework.Wpf.Behavior.Behavior`1.FindResource(System.String)">
            <summary>
            Attempts to find a resource within the current resource lookup chain.
            (Typically such a resource would be associated with the object this behavior is attached to,
            or its parent UI, or it may be available generally in the application).
            </summary>
            <param name="resourceKey">Resource Key</param>
            <returns>Resource if found, or null</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Behavior.Behavior`1.FindStyle(System.String)">
            <summary>
            Attempts to find a style resource within the current resource lookup chain.
            </summary>
            <param name="styleResourceKey">Resource key of the style</param>
            <returns>Style if found, otherwise null</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Behavior.Behavior`1.FindElement(System.String)">
            <summary>
            Tries to find an object by name in the associated UI.
            </summary>
            <param name="elementName">Name associated with the element (X:Name)</param>
            <returns>Object reference or null if not found</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Behavior.Behavior`1.FindRootElement">
            <summary>
            Attempts to find the root UI object the current associated object lives in.
            </summary>
            <returns>Object reference or null</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Behavior.Behavior`1.ApplyStyleToObject(System.String,System.String)">
            <summary>
            Applies the specified style to the specified object
            </summary>
            <param name="styleResourceKey">Key of the style resource that is to be assigned</param>
            <param name="elementName">Name (X:Name) of the element the style is to be applied to.</param>
            <returns>True if successful</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Behavior.Behavior`1.ApplyStyleToObject(System.Windows.Style,System.String)">
            <summary>
            Applies the specified style to the specified object
            </summary>
            <param name="style">Style to assign</param>
            <param name="elementName">Name (X:Name) of the element the style is to be applied to.</param>
            <returns>True if successful</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Behavior.Behavior`1.ApplyStyleToObject(System.String,System.Windows.FrameworkElement)">
            <summary>
            Applies the specified style to the specified object
            </summary>
            <param name="styleResourceKey">Key of the style resource that is to be assigned</param>
            <param name="obj">Object to assign the style to</param>
            <returns>True if successful</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Behavior.Behavior`1.ApplyStyleToObject(System.Windows.Style,System.Windows.FrameworkElement)">
            <summary>
            Applies the specified style to the specified object
            </summary>
            <param name="style">Style to assign</param>
            <param name="obj">Object to assign the style to</param>
            <returns>True if successful</returns>
        </member>
        <member name="T:CODE.Framework.Wpf.BindingConverters.BooleanToVisibleConverter">
            <summary>
            Converts boolean values to Visibility
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.BindingConverters.BooleanToVisibleConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:CODE.Framework.Wpf.BindingConverters.BooleanToVisibleConverter.ConvertBoolean(System.Object,System.String)">
            <summary>
            Converts strings to boolean.
            </summary>
            <param name="value">The value.</param>
            <param name="trueValue">The true value.</param>
            <returns></returns>
        </member>
        <member name="M:CODE.Framework.Wpf.BindingConverters.BooleanToVisibleConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="T:CODE.Framework.Wpf.BindingConverters.LitBrushConverter">
            <summary>
            Converts solid color brushes to a lighter or darker version
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.BindingConverters.LitBrushConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:CODE.Framework.Wpf.BindingConverters.LitBrushConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="T:CODE.Framework.Wpf.BindingConverters.LitColorConverter">
            <summary>
            Converts colors to a lighter or darker version
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.BindingConverters.LitColorConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:CODE.Framework.Wpf.BindingConverters.LitColorConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="T:CODE.Framework.Wpf.BindingConverters.NullToVisibleConverter">
            <summary>Returns Collapsed for null values. Visible otherwise.</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.BindingConverters.NullToVisibleConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>Converts a value. </summary>
            <returns>A converted value. If the method returns null, the valid null value is used.</returns>
            <param name="value">The value produced by the binding source.</param><param name="targetType">The type of the binding target property.</param><param name="parameter">The converter parameter to use.</param><param name="culture">The culture to use in the converter.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.BindingConverters.NullToVisibleConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>Converts a value. </summary>
            <returns>A converted value. If the method returns null, the valid null value is used.</returns>
            <param name="value">The value that is produced by the binding target.</param><param name="targetType">The type to convert to.</param><param name="parameter">The converter parameter to use.</param><param name="culture">The culture to use in the converter.</param>
        </member>
        <member name="T:CODE.Framework.Wpf.BindingConverters.StringToVisibleConverter">
            <summary>Returns Collapsed for empty strings. Visible otherwise.</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.BindingConverters.StringToVisibleConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>Converts a value. </summary>
            <returns>A converted value. If the method returns null, the valid null value is used.</returns>
            <param name="value">The value produced by the binding source.</param><param name="targetType">The type of the binding target property.</param><param name="parameter">The converter parameter to use.</param><param name="culture">The culture to use in the converter.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.BindingConverters.StringToVisibleConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>Converts a value. </summary>
            <returns>A converted value. If the method returns null, the valid null value is used.</returns>
            <param name="value">The value that is produced by the binding target.</param><param name="targetType">The type to convert to.</param><param name="parameter">The converter parameter to use.</param><param name="culture">The culture to use in the converter.</param>
        </member>
        <member name="T:CODE.Framework.Wpf.BindingConverters.TransparentBrushConverter">
            <summary>
            Converts solid color brushes to a semi-transparent version of the same color
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.BindingConverters.TransparentBrushConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a color value to its semi-transparent counterpart. The converter parameter defines the opacity (1 = fully opaque, 0 = fully transparent).
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:CODE.Framework.Wpf.BindingConverters.TransparentBrushConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="T:CODE.Framework.Wpf.BindingConverters.TransparentColorConverter">
            <summary>
            Converts colors to a semi-transparent version of the same color
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.BindingConverters.TransparentColorConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a color value to its semi-transparent counterpart. The converter parameter defines the opacity (1 = fully opaque, 0 = fully transparent).
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:CODE.Framework.Wpf.BindingConverters.TransparentColorConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="T:CODE.Framework.Wpf.Controls.AutoComplete">
            <summary>Attachable auto-complete behavior</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.AutoComplete.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.AutoComplete.AutoCompleteItemsSourceProperty">
            <summary>Attached property to set the items source for auto complete</summary>
            <remarks>This attached property can be attached to any UI Element to define auto-complete behavior</remarks>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.AutoComplete.AutoCompleteItemsSourceChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>Handler for auto complete item source changes</summary>
            <param name="d">Source object</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.AutoComplete.GetAutoCompleteItemsSource(System.Windows.DependencyObject)">
            <summary>Auto complete items source</summary>
            <param name="obj">Object to set the auto complete items source on</param>
            <returns>Auto complete items source</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.AutoComplete.SetAutoCompleteItemsSource(System.Windows.DependencyObject,System.Collections.IEnumerable)">
            <summary>Auto complete items source</summary>
            <param name="obj">Object to set the auto complete items source on</param>
            <param name="value">Value to set</param>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.AutoComplete.AutoCompleteSelectedItemProperty">
            <summary>Attached property to set the item that was picked by auto-complete</summary>
            <remarks>This attached property can be attached to any UI Element to define auto-complete behavior</remarks>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.AutoComplete.GetAutoCompleteSelectedItem(System.Windows.DependencyObject)">
            <summary>Auto complete selected item</summary>
            <param name="obj">Object to set the auto complete selected itemon</param>
            <returns>Auto complete selected item</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.AutoComplete.SetAutoCompleteSelectedItem(System.Windows.DependencyObject,System.Object)">
            <summary>Auto complete selected item</summary>
            <param name="obj">Object to set the auto complete selected item on</param>
            <param name="value">Value to set</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.AutoComplete.OnItemsSourceChanged(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            Called when the source of an item in a selector changes.
            </summary>
            <param name="oldValue">Old value of the source.</param>
            <param name="newValue">New value of the source.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.AutoComplete.GetAutoCompleteUIElement(System.Windows.UIElement)">
            <summary>Returns an existing reference to the UI used for the drop-down (or creates a new one)</summary>
            <param name="attachedTo">Object the UI is to be attached to</param>
            <returns>UI element</returns>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.AutoComplete.AutoCompleteDisplayMemberPathProperty">
            <summary>Attached property to set the items source for auto complete</summary>
            <remarks>This attached property can be attached to any UI Element to define auto-complete behavior</remarks>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.AutoComplete.AutoCompleteDisplayMemberPathChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>Handler for auto complete item source changes</summary>
            <param name="d">Source object</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.AutoComplete.GetAutoCompleteDisplayMemberPathSource(System.Windows.DependencyObject)">
            <summary>Auto complete items source</summary>
            <param name="obj">Object to set the auto complete items source on</param>
            <returns>Auto complete items source</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.AutoComplete.SetAutoCompleteDisplayMemberPath(System.Windows.DependencyObject,System.String)">
            <summary>Auto complete items source</summary>
            <param name="obj">Object to set the auto complete items source on</param>
            <param name="value">Value to set</param>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.AutoComplete.AutoCompleteUIProperty">
            <summary>Actual UI used by the auto-complete drop down</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.AutoComplete.GetAutoCompleteUI(System.Windows.DependencyObject)">
            <summary>Auto complete UI</summary>
            <param name="obj">Object to get the auto complete UI on</param>
            <returns>Auto complete UI</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.AutoComplete.SetAutoCompleteUI(System.Windows.DependencyObject,CODE.Framework.Wpf.Controls.AutoComplete)">
            <summary>Auto complete UI</summary>
            <param name="obj">Object to set the auto complete UI on</param>
            <param name="value">Value to set</param>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.AutoComplete.AutoCompleteItemTemplateProperty">
            <summary>Attached property to set the item template for each item in the auto-complete drop down</summary>
            <remarks>This attached property can be attached to any UI Element to define auto-complete behavior</remarks>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.AutoComplete.AutoCompleteItemTemplateChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>Handler for auto complete item template changes</summary>
            <param name="d">Source object</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.AutoComplete.GetAutoCompleteItemTemplate(System.Windows.DependencyObject)">
            <summary>Auto complete item template</summary>
            <param name="obj">Object to set the auto complete item template on</param>
            <returns>Auto complete item template</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.AutoComplete.SetAutoCompleteItemTemplate(System.Windows.DependencyObject,System.Windows.DataTemplate)">
            <summary>Auto complete item template</summary>
            <param name="obj">Object to set the auto complete item template on</param>
            <param name="value">Value to set</param>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.AutoComplete.AutoCompleteStyleProperty">
            <summary>Attached property to set the style for the auto-complete listbox</summary>
            <remarks>This attached property can be attached to any UI Element to define auto-complete behavior</remarks>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.AutoComplete.AutoCompleteStyleChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>Handler for auto complete style changes</summary>
            <param name="d">Source object</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.AutoComplete.GetAutoCompleteStyle(System.Windows.DependencyObject)">
            <summary>Auto complete style</summary>
            <param name="obj">Object to set the auto complete style on</param>
            <returns>Auto complete style</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.AutoComplete.SetAutoCompleteStyle(System.Windows.DependencyObject,System.Windows.Style)">
            <summary>Auto complete style</summary>
            <param name="obj">Object to set the auto complete style on</param>
            <param name="value">Value to set</param>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.AutoComplete._uiEligibleToBeVisible">
            <summary>
            Internal flag indicating whether the UI would theoretically be visible if it had items
            </summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Controls.AutoCompleteDropDownAdorner">
            <summary>Adorner UI for the drop-down part of the auto-complete implementation</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.AutoCompleteDropDownAdorner.#ctor(System.Windows.UIElement,CODE.Framework.Wpf.Controls.AutoComplete)">
            <summary>Constructor</summary>
            <param name="adornedElement">Adorned element (typically a textbox)</param>
            <param name="ui">The UI that is to be used in the drop-down</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.AutoCompleteDropDownAdorner.DisconnectVisualChild(CODE.Framework.Wpf.Controls.AutoComplete)">
            <summary>
            Disconnects a visual child element
            </summary>
            <param name="ui"></param>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.AutoCompleteDropDownAdorner.MeasureOverride(System.Windows.Size)">
            <summary>
            Implements any custom measuring behavior for the adorner.
            </summary>
            <param name="constraint">A size to constrain the adorner to.</param>
            <returns>
            A <see cref="T:System.Windows.Size"/> object representing the amount of layout space needed by the adorner.
            </returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.AutoCompleteDropDownAdorner.ArrangeOverride(System.Windows.Size)">
            <summary>
            When overridden in a derived class, positions child elements and determines a size for a <see cref="T:System.Windows.FrameworkElement"/> derived class.
            </summary>
            <param name="finalSize">The final area within the parent that this element should use to arrange itself and its children.</param>
            <returns>
            The actual size used.
            </returns>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.AutoCompleteDropDownAdorner.VisualChildrenCount">
            <summary>
            Gets the number of visual child elements within this element.
            </summary>
            <returns>The number of visual child elements for this element.</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.AutoCompleteDropDownAdorner.GetVisualChild(System.Int32)">
            <summary>
            Overrides <see cref="M:System.Windows.Media.Visual.GetVisualChild(System.Int32)"/>, and returns a child at the specified index from a collection of child elements.
            </summary>
            <param name="index">The zero-based index of the requested child element in the collection.</param>
            <returns>
            The requested child element. This should not return null; if the provided index is out of range, an exception is thrown.
            </returns>
        </member>
        <member name="T:CODE.Framework.Wpf.Controls.BorderEx">
            <summary>
            Border class with special extensions
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.BorderEx.KeepHeightAndWidthEqualProperty">
            <summary>
            If set to true, the object will always have the same height and width
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.BorderEx.OnKeepHeightAndWidthEqualChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Fires whenever the property changes
            </summary>
            <param name="d">Object the attached property has been set on</param>
            <param name="args">Event arguments</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.BorderEx.SetKeepHeightAndWidthEqual(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            If set to true, the object will always have the same height and width
            </summary>
            <param name="d">The dependency object to set the value on</param>
            <param name="value">True if height and width are meant to always be equal.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.BorderEx.GetKeepHeightAndWidthEqual(System.Windows.DependencyObject)">
            <summary>
            If set to true, the object will always have the same height and width
            </summary>
            <param name="d">The dependency object to set the value on</param>
            <returns>True if height and width are meant to always be equal.</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.BorderEx.GetForceCircularOutline(System.Windows.DependencyObject)">
            <summary>
            Defines whether the border attempts to set its corner radius to form a circle
            </summary>
            <param name="obj">The border object.</param>
            <returns>True, if the object is meant to be circular.</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.BorderEx.SetForceCircularOutline(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Defines whether the border attempts to set its corner radius to form a circle
            </summary>
            <param name="obj">The border object.</param>
            <param name="value">True, if the object is meant to be circular.</param>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.BorderEx.ForceCircularOutlineProperty">
            <summary>
            Defines whether the border attempts to set its corner radius to form a circle
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.BorderEx.OnForceCircularOutlineChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Fires when the property changes
            </summary>
            <param name="d">The border</param>
            <param name="args">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:CODE.Framework.Wpf.Controls.ContentTextDisplay">
            <summary>
            This control can pick up any content and attempts to turn it into text and displays it
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.ContentTextDisplay.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Wpf.Controls.ContentTextDisplay"/> class.
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.ContentTextDisplay.Content">
            <summary>
            Content to be displayed
            </summary>
            <value>The content.</value>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.ContentTextDisplay.ContentProperty">
            <summary>
            Content to be displayed
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.ContentTextDisplay.MaxLineCount">
            <summary>
            Maximum line count for the display of the content text
            </summary>
            <value>The maximum line count.</value>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.ContentTextDisplay.MaxLineCountProperty">
            <summary>
            Maximum line count for the display of the content text
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.ContentTextDisplay.InvalidateDisplay(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Fires when the content changes
            </summary>
            <param name="d">The control the content changed on</param>
            <param name="args">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.ContentTextDisplay.MeasureOverride(System.Windows.Size)">
            <summary>
            Called to remeasure a control.
            </summary>
            <param name="constraint">The maximum size that the method can return.</param>
            <returns>The size of the control, up to the maximum specified by <paramref name="constraint" />.</returns>
        </member>
        <member name="T:CODE.Framework.Wpf.Controls.DockHost">
            <summary>
            This content control can be used for content that can be undocked into a separate window
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.DockHost.IsDocked">
            <summary>Indicates and sets whether the current content is displayed in-place/docked (true) or in a separate window (false)</summary>
            <value><c>true</c> if the content is docked; otherwise, <c>false</c>.</value>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.DockHost.IsDockedProperty">
            <summary>Indicates and sets whether the current content is displayed in-place/docked (true) or in a separate window (false)</summary>
            <value><c>true</c> if the content is docked; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.DockHost.IsDockedChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>Fires when IsDocked changes</summary>
            <param name="d">The dependency object.</param>
            <param name="args">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.DockHost.FloatWindow">
            <summary>
            Potential reference to the window used to host the floating content
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.DockHost.WindowClosing">
            <summary>
            True when the window is in the process of being closed
            </summary>
            <value><c>true</c> if [window closing]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.DockHost.Title">
            <summary>Gets or sets the title.</summary>
            <value>The title.</value>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.DockHost.TitleProperty">
            <summary>The title property </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.DockHost.TitleChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>Fires when the title changes</summary>
            <param name="d">The dependency object.</param>
            <param name="args">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.DockHost.FloatWindowStyle">
            <summary>Style for the floating window</summary>
            <value>The float window style.</value>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.DockHost.FloatWindowStyleProperty">
            <summary>Style for the floating window</summary>
            <value>The float window style.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.DockHost.ContentVisibility">
            <summary>Defines whether the content is supposed to be visible (docked or not)</summary>
            <value>The content visibility.</value>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.DockHost.ContentVisibilityProperty">
            <summary>Defines whether the content is supposed to be visible (docked or not)</summary>
            <value>The content visibility.</value>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.DockHost.ContentVisibilityChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Contents the visibility changed.
            </summary>
            <param name="d">The d.</param>
            <param name="args">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:CODE.Framework.Wpf.Controls.FloatingDockWindow">
            <summary>
            Window class used by the DockHost to display undocked windows
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.FloatingDockWindow.#ctor(CODE.Framework.Wpf.Controls.DockHost)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Wpf.Controls.FloatingDockWindow"/> class.
            </summary>
            <param name="host">The host.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.FloatingDockWindow.#ctor(CODE.Framework.Wpf.Layout.MultiPanel,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Wpf.Controls.FloatingDockWindow" /> class.
            </summary>
            <param name="multiPanel">The multi panel parent container.</param>
            <param name="title">The title.</param>
            <param name="oldChildIndex">Old index of the child in the multi panel.</param>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.FloatingDockWindow.AutoDockOnClose">
            <summary>
            Indicates whether clicking the close button will automatically dock the content back into the host
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.FloatingDockWindow.AutoDockOnCloseProperty">
            <summary>
            Indicates whether clicking the close button will automatically dock the content back into the host
            </summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Controls.DockWindowContentButton">
            <summary>
            Button to initiate a dock operation in the floating dock window
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.DockWindowContentButton.OnClick">
            <summary>
            Called when a <see cref="T:System.Windows.Controls.Button" /> is clicked.
            </summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Controls.Ex">
            <summary>
            Generic extensions applicable to all controls and panels
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.Ex.EventCommandProperty">
            <summary>Attached property to set a single command event</summary>
            <remarks>This attached property can be attached to any UI Element to define a command used to handle an event</remarks>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.Ex.EventCommandPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>Handler for event command changes</summary>
            <param name="d">Source object</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.Ex.GetEventCommand(System.Windows.DependencyObject)">
            <summary>Event command</summary>
            <param name="obj">Object to get the event command for</param>
            <returns>Event command</returns>
            <remarks>This attached property can be attached to any UI Element to define an event command</remarks>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.Ex.SetEventCommand(System.Windows.DependencyObject,CODE.Framework.Wpf.Controls.EventCommand)">
            <summary>Event command</summary>
            <param name="obj">Object to set the event command on</param>
            <param name="value">Value to set</param>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.Ex.EventCommandsProperty">
            <summary>Attached property to set multiple command events</summary>
            <remarks>This attached property can be attached to any UI Element to define a command used to handle an event</remarks>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.Ex.EventCommandsPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>Handler for event commands changes</summary>
            <param name="d">Source object</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.Ex.GetEventCommands(System.Windows.DependencyObject)">
            <summary>Event commands</summary>
            <param name="obj">Object to get the event commands for</param>
            <returns>Event command</returns>
            <remarks>This attached property can be attached to any UI Element to define an event command</remarks>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.Ex.SetEventCommands(System.Windows.DependencyObject,CODE.Framework.Wpf.Controls.EventCommandsCollection)">
            <summary>Event commands</summary>
            <param name="obj">Object to set the event command on</param>
            <param name="value">Value to set</param>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.Ex.SelectOnEntryProperty">
            <summary>Defines whether an object (such as a textbox) automatically is selected when focus moves into it</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.Ex.SetSelectOnEntry(System.Windows.DependencyObject,System.Boolean)">
            <summary>Defines whether an object (such as a textbox) automatically is selected when focus moves into it</summary>
            <param name="obj">The object to set the value on</param>
            <param name="value">True for auto-select</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.Ex.GetSelectOnEntry(System.Windows.DependencyObject)">
            <summary>Defines whether an object (such as a textbox) automatically is selected when focus moves into it</summary>
            <param name="obj">The object to retrieve the value for</param>
            <returns>True if auto-select</returns>
        </member>
        <member name="T:CODE.Framework.Wpf.Controls.EventCommand">
            <summary>
            This object can be used to route any event to a command
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.EventCommand.SetUIElement(System.Windows.FrameworkElement)">
            <summary>Called ot set the UI element this event command belongs to.</summary>
            <param name="attachedTo">Associated object  </param>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.EventCommand.SetUIElement(System.Windows.FrameworkContentElement)">
            <summary>Called ot set the UI element this event command belongs to.</summary>
            <param name="attachedTo">Associated object  </param>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.EventCommand.Event">
            <summary>Event that is to fire the command</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.EventCommand.EventProperty">
            <summary>Event that is to fire the command</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.EventCommand.Command">
            <summary>Command that is to be executed when the desired event fires.</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.EventCommand.CommandProperty">
            <summary>Command that is to be executed when the desired event fires.</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.EventCommand.CommandParameter">
            <summary>Command parameter associated with the command.</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.EventCommand.CommandParameterProperty">
            <summary>Command parameter associated with the command.</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.EventCommand.Execute(System.Object,System.Object)">
            <summary>
            This method is referenced by reflection and used to pass an event to the associated command
            </summary>
            <param name="sender">Original event sender</param>
            <param name="e">Event parameters</param>
        </member>
        <member name="T:CODE.Framework.Wpf.Controls.EventCommandParameters">
            <summary>
            Used to pass sender, event arguments, and parameter information to an event command
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.EventCommandParameters.Sender">
            <summary>Original source of the event</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.EventCommandParameters.EventArgs">
            <summary>Original event arguments</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.EventCommandParameters.CommandParameter">
            <summary>Command parameter</summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Controls.EventCommandsCollection">
            <summary>Collection of Event Command objects</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.EventCommandsCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Wpf.Controls.EventCommandsCollection"/> class.
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.EventCommandsCollection.SetUIElement(System.Windows.FrameworkElement)">
            <summary>Called ot set the UI element this event command belongs to.</summary>
            <param name="attachedTo">Associated object  </param>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.EventCommandsCollection.SetUIElement(System.Windows.FrameworkContentElement)">
            <summary>Called ot set the UI element this event command belongs to.</summary>
            <param name="attachedTo">Associated object  </param>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.EventCommandsCollection.ConfigureEventCommand(CODE.Framework.Wpf.Controls.EventCommand)">
            <summary>Configures a newly added event command</summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Controls.ListBoxEx">
            <summary>
            ListBox with additional features
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.ListBoxEx.CommandProperty">
            <summary>Attached property to set a listbox's command</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.ListBoxEx.CommandPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handler for command changes
            </summary>
            <param name="d">Source object</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.ListBoxEx.MouseDoubleClickCommandTrigger(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Triggers a potentially attached command after double-click
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.ListBoxEx.SelectionChangedCommandTrigger(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            Triggers a potentially attached command after selection changes.
            </summary>
            <param name="sender">The ListBox.</param>
            <param name="e">The <see cref="T:System.Windows.Controls.SelectionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.ListBoxEx.TriggerCommand(System.Windows.DependencyObject,System.Object)">
            <summary>
            Triggers the associated command.
            </summary>
            <param name="sender">The sender (ListBox) that triggered the operation.</param>
            <param name="selectedItem">The selected item (used as the command parameter unless an explicit parameter is set).</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.ListBoxEx.GetCommand(System.Windows.DependencyObject)">
            <summary>Command to be triggered on items in the list</summary>
            <param name="obj">Object to set command on</param>
            <returns>Command</returns>
            <remarks>This attached property can be attached to any UI Element to define a command</remarks>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.ListBoxEx.SetCommand(System.Windows.DependencyObject,System.Windows.Input.ICommand)">
            <summary>Command</summary>
            <param name="obj">Object to set the command on</param>
            <param name="value">Value to set</param>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.ListBoxEx.CommandTriggerProperty">
            <summary>Attached property to set command trigger</summary>
            <remarks>This attached property can be attached to any UI Element to define a command trigger mode</remarks>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.ListBoxEx.GetCommandTrigger(System.Windows.DependencyObject)">
            <summary>Command trigger mode</summary>
            <param name="obj">Object to set the command trigger on</param>
            <returns>Command trigger mode</returns>
            <remarks>This attached property can be attached to any UI Element to define the command trigger mode</remarks>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.ListBoxEx.SetCommandTrigger(System.Windows.DependencyObject,CODE.Framework.Wpf.Controls.ListBoxCommandTrigger)">
            <summary>Command trigger</summary>
            <param name="obj">Object to set the command trigger on</param>
            <param name="value">Value to set</param>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.ListBoxEx.CommandParameterModeProperty">
            <summary>Attached property to set command parameter mode</summary>
            <remarks>This attached property can be attached to any UI Element to define a command parameter mode</remarks>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.ListBoxEx.GetCommandParameterMode(System.Windows.DependencyObject)">
            <summary>Command parameter mode</summary>
            <param name="obj">Object to set the command parameter mode on</param>
            <returns>Command parameter mode</returns>
            <remarks>This attached property can be attached to any UI Element to define the command parameter mode</remarks>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.ListBoxEx.SetCommandParameterMode(System.Windows.DependencyObject,CODE.Framework.Wpf.Controls.ListBoxCommandTrigger)">
            <summary>Command parameter mode</summary>
            <param name="obj">Object to set the command parameter mode on</param>
            <param name="value">Value to set</param>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.ListBoxEx.CommandParameterProperty">
            <summary>Attached property to set the command parameter</summary>
            <remarks>This attached property can be attached to any UI Element to define the command parameter</remarks>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.ListBoxEx.GetCommandParameter(System.Windows.DependencyObject)">
            <summary>Command parameter</summary>
            <param name="obj">Object to set the command parameter on</param>
            <returns>Command parameter</returns>
            <remarks>This attached property can be attached to any UI Element to define the command parameter</remarks>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.ListBoxEx.SetCommandParameter(System.Windows.DependencyObject,System.Object)">
            <summary>Cmmand parameter</summary>
            <param name="obj">Object to set the command parameter on</param>
            <param name="value">Value to set</param>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.ListBoxEx.SelectedItemCollectionProperty">
            <summary>Provides a way to bind selected items into an observable collection</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.ListBoxEx.GetSelectedItemCollection(System.Windows.DependencyObject)">
            <summary>Collection containing selected items</summary>
            <param name="obj">Object to set collection on</param>
            <returns>Collection</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.ListBoxEx.SetSelectedItemCollection(System.Windows.DependencyObject,System.Windows.Input.ICommand)">
            <summary>Selected item collection</summary>
            <param name="obj">Object to set the collection on</param>
            <param name="value">Value to set</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.ListBoxEx.SelectedItemCollectionPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>Fires when the selected item collection is changed</summary>
            <param name="d">Dependency object (listbox, most likely)</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.ListBoxEx.AutoScrollToSelectedItemProperty">
            <summary>Indicates whether or not the listbox shall automatically scroll to selected items when the selected item changes</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.ListBoxEx.AutoScrollToSelectedItemChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Autoes the scroll to selected item changed.
            </summary>
            <param name="o">The object the value has been set on.</param>
            <param name="args">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.ListBoxEx.GetAutoScrollToSelectedItem(System.Windows.DependencyObject)">
            <summary>Indicates whether or not the listbox shall automatically scroll to selected items when the selected item changes</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.ListBoxEx.SetAutoScrollToSelectedItem(System.Windows.DependencyObject,System.Boolean)">
            <summary>Indicates whether or not the listbox shall automatically scroll to selected items when the selected item changes</summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Controls.ListBoxCommandTrigger">
            <summary>
            Defines when the command on the ListBox is to be triggered
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.ListBoxCommandTrigger.DoubleClick">
            <summary>
            Trigger command on item double-click
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.ListBoxCommandTrigger.Select">
            <summary>
            Trigger command on item selection
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.ListBoxCommandTrigger.DoubleClickAndSelect">
            <summary>
            Trigger command after either double-click or selection changed
            </summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Controls.ListBoxCommandParameterMode">
            <summary>
            Defines how a default listbox command passes selection information as the command parameter
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.ListBoxCommandParameterMode.SingleSelectedObject">
            <summary>
            Pass only one selected object, even if there are multiple selected objects (passes the first object in the list of *newly selected items* if more than one item is selected)
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.ListBoxCommandParameterMode.ListOfSelectedObjects">
            <summary>
            Passes the entire list of selected objects
            </summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Controls.ListBoxFastGridHeader">
            <summary>
            Generic header control usable with Lists to create a data grid-style header. Optimized for lists with a large number of coluns
            </summary>
            <remarks>This control is very similar in purpose to the ListBoxGridHeader class. However, it trades flexibility and feature-set for performance.
            This control can render a large list of columns very quickly, but it doesn't support all the features of the ListBoxGridHeader class, such
            as cell templates.</remarks>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.ListBoxFastGridHeader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Wpf.Controls.ListBoxFastGridHeader"/> class.
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.ListBoxFastGridHeader.Columns">
            <summary>Generic column definition</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.ListBoxFastGridHeader.ColumnsProperty">
            <summary>Generic column definition</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.ListBoxFastGridHeader.OnColumnsChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>Called when columns change.</summary>
            <param name="o">The object the columns changed on.</param>
            <param name="args">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.ListBoxFastGridHeader.HorizontalHeaderOffset">
            <summary>Horizontal offset of the header</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.ListBoxFastGridHeader.HorizontalHeaderOffsetProperty">
            <summary>Horizontal offset of the header</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.ListBoxFastGridHeader.HorizontalHeaderOffsetChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>Horizontals the header offset changed.</summary>
            <param name="o">The object the property was changed on.</param>
            <param name="args">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.ListBoxFastGridHeader.Foreground">
            <summary>Foreground brush (for text rendering)</summary>
            <value>The foreground.</value>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.ListBoxFastGridHeader.ForegroundProperty">
            <summary>Foreground brush (for text rendering)</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.ListBoxFastGridHeader.FontFamily">
            <summary> Font family used to render the header text</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.ListBoxFastGridHeader.FontFamilyProperty">
            <summary> Font family used to render the header text</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.ListBoxFastGridHeader.FontSize">
            <summary>Font size used to render the header font elements</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.ListBoxFastGridHeader.FontSizeProperty">
            <summary>Font size used to render the header font elements</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.ListBoxFastGridHeader.FontStyle">
            <summary>Font style used to render the header font elements</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.ListBoxFastGridHeader.FontStyleProperty">
            <summary>Font style used to render the header font elements</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.ListBoxFastGridHeader.FontWeight">
            <summary>Font weight used to render the header font elements</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.ListBoxFastGridHeader.FontWeightProperty">
            <summary>Font weight used to render the header font elements</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.ListBoxFastGridHeader.GridLineColor">
            <summary>Brush used as the basis for the grid line pen</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.ListBoxFastGridHeader.GridLineColorProperty">
            <summary>Brush used as the basis for the grid line pen</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.ListBoxFastGridHeader.OnGridLineColorChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Fires when the grid line color property changes
            </summary>
            <param name="d">Object the color was changed on</param>
            <param name="args">Event arguments</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.ListBoxFastGridHeader.InvalidateAll">
            <summary>
            Triggers invalidation of all visuals and layouts
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.ListBoxFastGridHeader.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
            Draws the content of a <see cref="T:System.Windows.Media.DrawingContext" /> object during the render pass of a <see cref="T:System.Windows.Controls.Panel" /> element.
            </summary>
            <param name="dc">The <see cref="T:System.Windows.Media.DrawingContext" /> object to draw.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.ListBoxFastGridHeader.RenderStandardHeaderElements(System.Windows.Media.DrawingContext,System.Double)">
            <summary>
            Renders the standard header elements such as border and background.
            </summary>
            <param name="dc">The dc.</param>
            <param name="headerHeight">Height of the header.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.ListBoxFastGridHeader.GetHeaderHeight">
            <summary>
            Returns the desired height for the entire header
            </summary>
            <returns>double</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.ListBoxFastGridHeader.RenderColumnHeader(System.Windows.Media.DrawingContext,CODE.Framework.Wpf.Controls.ListColumn,System.Windows.Rect)">
            <summary>
            Renders the header for an individual column
            </summary>
            <param name="dc">Drawing context</param>
            <param name="column">Column</param>
            <param name="columnClientRect">The suggested area for the header</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.ListBoxFastGridHeader.GetGridLinePen">
            <summary>
            Returns the pen used for grid line rendering in the header
            </summary>
            <returns>Pen</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.ListBoxFastGridHeader.OnMouseMove(System.Windows.Input.MouseEventArgs)">
            <summary>
            Invoked when an unhandled MouseMove attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.ListBoxFastGridHeader.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Invoked when an unhandled MouseDown attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. This event data reports details about the mouse button that was pressed and the handled state.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.ListBoxFastGridHeader.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Invoked when an unhandled MouseUp routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. The event data reports that the mouse button was released.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.ListBoxFastGridHeader.MeasureOverride(System.Windows.Size)">
            <summary>
            When overridden in a derived class, measures the size in layout required for child elements and determines a size for the <see cref="T:System.Windows.FrameworkElement" />-derived class.
            </summary>
            <param name="availableSize">The available size that this element can give to child elements. Infinity can be specified as a value to indicate that the element will size to whatever content is available.</param>
            <returns>The size that this element determines it needs during layout, based on its calculations of child element sizes.</returns>
        </member>
        <member name="T:CODE.Framework.Wpf.Controls.ResizeAreaWrapper">
            <summary>For internal use only</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.ResizeAreaWrapper.HotArea">
            <summary>For internal use only</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.ResizeAreaWrapper.Column">
            <summary>For internal use only</summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Controls.ListBoxFastSmartDataTemplate">
            <summary>
            Multi-column ListBox data template designed to render fast (although with a limited feature set)
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.ListBoxFastSmartDataTemplate.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Wpf.Controls.ListBoxFastSmartDataTemplate"/> class.
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.ListBoxFastSmartDataTemplate.FindAncestor``1(System.Windows.DependencyObject)">
            <summary>Walks the visual tree to find the parent of a certain type</summary>
            <typeparam name="T">Type to search</typeparam>
            <param name="d">Object for which to find the ancestor</param>
            <returns>Object or null</returns>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.ListBoxFastSmartDataTemplate.Columns">
            <summary>Generic column definition</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.ListBoxFastSmartDataTemplate.ColumnsProperty">
            <summary>Generic column definition</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.ListBoxFastSmartDataTemplate.OnColumnsChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>Called when columns change.</summary>
            <param name="o">The object the columns changed on.</param>
            <param name="args">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.ListBoxFastSmartDataTemplate.InvalidateAll">
            <summary>
            Triggers invaliation of everything
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.ListBoxFastSmartDataTemplate.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
            Draws the content of a <see cref="T:System.Windows.Media.DrawingContext" /> object during the render pass of a <see cref="T:System.Windows.Controls.Panel" /> element.
            </summary>
            <param name="dc">The <see cref="T:System.Windows.Media.DrawingContext" /> object to draw.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.ListBoxFastSmartDataTemplate.LineUp">
            <summary>
            Scrolls up within content by one logical unit.
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.ListBoxFastSmartDataTemplate.LineDown">
            <summary>
            Scrolls down within content by one logical unit.
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.ListBoxFastSmartDataTemplate.LineLeft">
            <summary>
            Scrolls left within content by one logical unit.
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.ListBoxFastSmartDataTemplate.LineRight">
            <summary>
            Scrolls right within content by one logical unit.
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.ListBoxFastSmartDataTemplate.PageUp">
            <summary>
            Scrolls up within content by one page.
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.ListBoxFastSmartDataTemplate.PageDown">
            <summary>
            Scrolls down within content by one page.
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.ListBoxFastSmartDataTemplate.PageLeft">
            <summary>
            Scrolls left within content by one page.
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.ListBoxFastSmartDataTemplate.PageRight">
            <summary>
            Scrolls right within content by one page.
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.ListBoxFastSmartDataTemplate.MouseWheelUp">
            <summary>
            Scrolls up within content after a user clicks the wheel button on a mouse.
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.ListBoxFastSmartDataTemplate.MouseWheelDown">
            <summary>
            Scrolls down within content after a user clicks the wheel button on a mouse.
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.ListBoxFastSmartDataTemplate.MouseWheelLeft">
            <summary>
            Scrolls left within content after a user clicks the wheel button on a mouse.
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.ListBoxFastSmartDataTemplate.MouseWheelRight">
            <summary>
            Scrolls right within content after a user clicks the wheel button on a mouse.
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.ListBoxFastSmartDataTemplate.SetHorizontalOffset(System.Double)">
            <summary>
            Sets the amount of horizontal offset.
            </summary>
            <param name="offset">The degree to which content is horizontally offset from the containing viewport.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.ListBoxFastSmartDataTemplate.SetVerticalOffset(System.Double)">
            <summary>
            Sets the amount of vertical offset.
            </summary>
            <param name="offset">The degree to which content is vertically offset from the containing viewport.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.ListBoxFastSmartDataTemplate.MakeVisible(System.Windows.Media.Visual,System.Windows.Rect)">
            <summary>
            Forces content to scroll until the coordinate space of a <see cref="T:System.Windows.Media.Visual" /> object is visible.
            </summary>
            <param name="visual">A <see cref="T:System.Windows.Media.Visual" /> that becomes visible.</param>
            <param name="rectangle">A bounding rectangle that identifies the coordinate space to make visible.</param>
            <returns>A <see cref="T:System.Windows.Rect" /> that is visible.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.ListBoxFastSmartDataTemplate.CanVerticallyScroll">
            <summary>
            Gets or sets a value that indicates whether scrolling on the vertical axis is possible.
            </summary>
            <value><c>true</c> if this instance can vertically scroll; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.ListBoxFastSmartDataTemplate.CanHorizontallyScroll">
            <summary>
            Gets or sets a value that indicates whether scrolling on the horizontal axis is possible.
            </summary>
            <value><c>true</c> if this instance can horizontally scroll; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.ListBoxFastSmartDataTemplate.ExtentWidth">
            <summary>
            Gets the horizontal size of the extent.
            </summary>
            <value>The width of the extent.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.ListBoxFastSmartDataTemplate.ExtentHeight">
            <summary>
            Gets the vertical size of the extent.
            </summary>
            <value>The height of the extent.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.ListBoxFastSmartDataTemplate.ViewportWidth">
            <summary>
            Gets the horizontal size of the viewport for this content.
            </summary>
            <value>The width of the viewport.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.ListBoxFastSmartDataTemplate.ViewportHeight">
            <summary>
            Gets the vertical size of the viewport for this content.
            </summary>
            <value>The height of the viewport.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.ListBoxFastSmartDataTemplate.HorizontalOffset">
            <summary>
            Gets the horizontal offset of the scrolled content.
            </summary>
            <value>The horizontal offset.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.ListBoxFastSmartDataTemplate.VerticalOffset">
            <summary>
            Gets the vertical offset of the scrolled content.
            </summary>
            <value>The vertical offset.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.ListBoxFastSmartDataTemplate.ScrollOwner">
            <summary>
            Gets or sets a <see cref="T:System.Windows.Controls.ScrollViewer" /> element that controls scrolling behavior.
            </summary>
            <value>The scroll owner.</value>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.ListBoxFastSmartDataTemplate.MeasureOverride(System.Windows.Size)">
            <summary>
            When overridden in a derived class, measures the size in layout required for child elements and determines a size for the <see cref="T:System.Windows.FrameworkElement" />-derived class.
            </summary>
            <param name="availableSize">The available size that this element can give to child elements. Infinity can be specified as a value to indicate that the element will size to whatever content is available.</param>
            <returns>The size that this element determines it needs during layout, based on its calculations of child element sizes.</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.ListBoxFastSmartDataTemplate.MeasureForScroll(System.Windows.Size)">
            <summary>
            Measures for scroll operations
            </summary>
            <param name="availableSize">Size of the available.</param>
        </member>
        <member name="T:CODE.Framework.Wpf.Controls.IScrollMeasure">
            <summary>
            When a class implements this interface, it can force a re-measure operation specific to scroll settings
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.IScrollMeasure.MeasureForScroll(System.Windows.Size)">
            <summary>
            Measures for scroll operations
            </summary>
            <param name="availableSize"></param>
        </member>
        <member name="T:CODE.Framework.Wpf.Controls.ListBoxGridHeader">
            <summary>Generic header control usable with Lists to create a data grid-style header</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.ListBoxGridHeader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Wpf.Controls.ListBoxGridHeader"/> class.
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.ListBoxGridHeader.Columns">
            <summary>Generic column definition</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.ListBoxGridHeader.ColumnsProperty">
            <summary>Generic column definition</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.ListBoxGridHeader.OnColumnsChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>Called when columns change.</summary>
            <param name="o">The object the columns changed on.</param>
            <param name="args">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.ListBoxGridHeader.ParentListBox">
            <summary>Reference to the parent listbox this header belongs to</summary>
            <value>The parent ListBox.</value>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.ListBoxGridHeader.ParentListBoxProperty">
            <summary>Reference to the parent listbox this header belongs to</summary>
            <value>The parent ListBox.</value>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.ListBoxGridHeader.ParentListBoxChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>Fires when the parent list box changes</summary>
            <param name="d">The d.</param>
            <param name="args">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.ListBoxGridHeader.HorizontalHeaderOffset">
            <summary>Horizontal offset of the header</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.ListBoxGridHeader.HorizontalHeaderOffsetProperty">
            <summary>Horizontal offset of the header</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.ListBoxGridHeader.HorizontalHeaderOffsetChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>Horizontals the header offset changed.</summary>
            <param name="o">The object the property was changed on.</param>
            <param name="args">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.ListBoxGridHeader.InvalidateHorizontalHeaderOffset">
            <summary>
            Forces re-applying of the horizontal header offset
            </summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Controls.HeaderClickCommandParameters">
            <summary>Parameters passed to the header click command</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.HeaderClickCommandParameters.Column">
            <summary>Reference to the clicked column</summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Controls.HeaderContentControl">
            <summary>For internal use only</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.HeaderContentControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Wpf.Controls.HeaderContentControl"/> class.
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.HeaderContentControl.Column">
            <summary>List column associated with this header click content control</summary>
            <value>The column.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.HeaderContentControl.HeaderClickCommand">
            <summary>Header click command</summary>
            <value>The header click command.</value>
            <remarks>This is usually populated by means of a binding</remarks>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.HeaderContentControl.HeaderClickCommandProperty">
            <summary>Header click command</summary>
            <remarks>This is usually populated by means of a binding</remarks>
        </member>
        <member name="T:CODE.Framework.Wpf.Controls.TextPlusGraphic">
            <summary>
            Arranges two elements left-to-right. Shrinks the left element if need be
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.TextPlusGraphic.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Wpf.Controls.TextPlusGraphic"/> class.
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.TextPlusGraphic.MeasureOverride(System.Windows.Size)">
            <summary>
            When overridden in a derived class, measures the size in layout required for child elements and determines a size for the <see cref="T:System.Windows.FrameworkElement" />-derived class.
            </summary>
            <param name="availableSize">The available size that this element can give to child elements. Infinity can be specified as a value to indicate that the element will size to whatever content is available.</param>
            <returns>The size that this element determines it needs during layout, based on its calculations of child element sizes.</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.TextPlusGraphic.ArrangeOverride(System.Windows.Size)">
            <summary>
            When overridden in a derived class, positions child elements and determines a size for a <see cref="T:System.Windows.FrameworkElement" /> derived class.
            </summary>
            <param name="finalSize">The final area within the parent that this element should use to arrange itself and its children.</param>
            <returns>The actual size used.</returns>
        </member>
        <member name="T:CODE.Framework.Wpf.Controls.ListBoxItemEx">
            <summary>
            Extensions for list box items
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.ListBoxItemEx.SelectItemWhenFocusWithinProperty">
            <summary>Indicates whether the list box item should automatically be considered selected when the focus moves to any of the controls within the item</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.ListBoxItemEx.SelectItemwhenFocusWithinChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Selects the itemwhen focus within changed.
            </summary>
            <param name="o">The o.</param>
            <param name="args">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.ListBoxItemEx.GetSelectItemWhenFocusWithin(System.Windows.DependencyObject)">
            <summary>Indicates whether the list box item should automatically be considered selected when the focus moves to any of the controls within the item</summary>
            <param name="o">The object to set the value on.</param>
            <returns></returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.ListBoxItemEx.SetSelectItemWhenFocusWithin(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Indicates whether the list box item should automatically be considered selected when the focus moves to any of the controls within the item
            </summary>
            <param name="o">The object to set the value on.</param>
            <param name="value">if set to <c>true</c> [value].</param>
        </member>
        <member name="T:CODE.Framework.Wpf.Controls.ListBoxSmartDataTemplate">
            <summary>Smart, self-populating data template that can be used in generic listboxes with columns</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.ListBoxSmartDataTemplate.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Wpf.Controls.ListBoxSmartDataTemplate"/> class.
            </summary>
        </member>
        <member name="E:CODE.Framework.Wpf.Controls.ListBoxSmartDataTemplate.EditModeChanged">
            <summary>Occurs when the row edit mode changes</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.ListBoxSmartDataTemplate.FindAncestor``1(System.Windows.DependencyObject)">
            <summary>Walks the visual tree to find the parent of a certain type</summary>
            <typeparam name="T">Type to search</typeparam>
            <param name="d">Object for which to find the ancestor</param>
            <returns>Object or null</returns>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.ListBoxSmartDataTemplate.Columns">
            <summary>Generic column definition</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.ListBoxSmartDataTemplate.ColumnsProperty">
            <summary>Generic column definition</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.ListBoxSmartDataTemplate.OnColumnsChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>Called when columns change.</summary>
            <param name="o">The object the columns changed on.</param>
            <param name="args">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.ListBoxSmartDataTemplate.DefaultColumns">
            <summary>Definition of default columns, which can be used in case the listbox itself does not define columns</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.ListBoxSmartDataTemplate.DefaultColumnsProperty">
            <summary>Definition of default columns, which can be used in case the listbox itself does not define columns</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.ListBoxSmartDataTemplate.DefaultColumnsChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>Fires when the default columns change</summary>
            <param name="o">The o.</param>
            <param name="args">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.ListBoxSmartDataTemplate.EditMode">
            <summary>Edit mode for the current row</summary>
            <value>The edit mode.</value>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.ListBoxSmartDataTemplate.EditModeProperty">
            <summary>Edit mode for the current row</summary>
            <value>The edit mode.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.ListBoxSmartDataTemplate.IsManualEditEnabled">
            <summary>Indicates whether the current template is in manual editing mode</summary>
            <value><c>true</c> if this instance is manual edit enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.ListBoxSmartDataTemplate.IsManualEditEnabledProperty">
            <summary>Indicates whether the current template is in manual editing mode</summary>
            <value><c>true</c> if this instance is manual edit enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.ListBoxSmartDataTemplate.OnEditModeChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>Occurs when the edit mode changes</summary>
            <param name="d">The source.</param>
            <param name="args">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:CODE.Framework.Wpf.Controls.LengthToGridLengthConverter">
            <summary>
            Converts double-lengths to grid lengths
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.LengthToGridLengthConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>A converted value. If the method returns null, the valid null value is used.</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.LengthToGridLengthConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>A converted value. If the method returns null, the valid null value is used.</returns>
        </member>
        <member name="T:CODE.Framework.Wpf.Controls.ListEx">
            <summary>Special features that can be attached to listboxes</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.ListEx.ColumnsProperty">
            <summary>This attached property can be used to generically express the content of columns</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.ListEx.SetColumns(System.Windows.DependencyObject,CODE.Framework.Wpf.Controls.ListColumnsCollection)">
            <summary>Sets the columns.</summary>
            <param name="o">The DependencyObject to set the value on.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.ListEx.GetColumns(System.Windows.DependencyObject)">
            <summary>Gets the columns.</summary>
            <param name="o">The DependencyObject to get the value on.</param>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.ListEx.ShowHeaderEditControlsProperty">
            <summary>Defines whether header edit controls are to be displayed (if there are any defined)</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.ListEx.SetShowHeaderEditControls(System.Windows.DependencyObject,System.Boolean)">
            <summary>Defines whether header edit controls are to be displayed (if there are any defined)</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.ListEx.GetShowHeaderEditControls(System.Windows.DependencyObject)">
            <summary>Defines whether header edit controls are to be displayed (if there are any defined)</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.ListEx.AutoEnableListColumnsProperty">
            <summary>
            Setting this property to true on a ListBox automatically loads appropriate templates for the ListBox to support rows and columns
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.ListEx.OnAutoEnableListColumnsChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Fires when the AutoEnableListColumns property changed
            </summary>
            <param name="d">The dependency object (ListBox)</param>
            <param name="args">Event args.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.ListEx.SetAutoEnableListColumns(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Setting this property to true on a ListBox automatically loads appropriate templates for the ListBox to support rows and columns
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.ListEx.GetAutoEnableListColumns(System.Windows.DependencyObject)">
            <summary>
            Setting this property to true on a ListBox automatically loads appropriate templates for the ListBox to support rows and columns
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.ListEx.IsEditableProperty">
            <summary>
            Indicates whether the league is to be forced into edit more (if set to true)
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.ListEx.SetIsEditable(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Indicates whether the league is to be forced into edit more (if set to true)
            </summary>
            <param name="d">The object to set the value on</param>
            <param name="value">True or false</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.ListEx.GetIsEditable(System.Windows.DependencyObject)">
            <summary>
            Indicates whether the league is to be forced into edit more (if set to true)
            </summary>
            <param name="d">The object to get the value for.</param>
            <returns>True or false</returns>
        </member>
        <member name="T:CODE.Framework.Wpf.Controls.ListColumnsCollection">
            <summary>Observable collection of generic list columns</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.ListColumnsCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Wpf.Controls.ListColumnsCollection"/> class.
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.ListColumnsCollection.EditModeBindingPath">
            <summary>
            Path to a boolean source that defines whether a row is editable or not
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.ListColumnsCollection.ShowGridLines">
            <summary>
            Defines whether and when grid lines shall be displayed
            </summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Controls.ListColumn">
            <summary>
            An abstract definition of a column
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.ListColumn.Header">
            <summary>Column Header</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.ListColumn.HeaderProperty">
            <summary>Column Header</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.ListColumn.ShowColumnHeaderText">
            <summary>Defines whether a header label (text) shall be displayed</summary>
            <value>True (default) or false</value>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.ListColumn.ShowColumnHeaderTextProperty">
            <summary>Defines whether a header label (text) shall be displayed</summary>
            <value>True (default) or false</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.ListColumn.ShowColumnHeaderEditControl">
            <summary>Defines whether a header edit control (textbox) shall be displayed</summary>
            <value>True or false (default)</value>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.ListColumn.ShowColumnHeaderEditControlProperty">
            <summary>Defines whether a header edit control (textbox) shall be displayed</summary>
            <value>True or false (default)</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.ListColumn.ColumnHeaderEditControlBindingPath">
            <summary>Binding path for a column header edit control</summary>
            <value>The column header edit control binding path.</value>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.ListColumn.ColumnHeaderEditControlBindingPathProperty">
            <summary>Binding path for a column header edit control</summary>
            <value>The column header edit control binding path.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.ListColumn.ColumnHeaderEditControlUpdateTrigger">
            <summary>Binding update trigger for a column header edit control</summary>
            <value>The column header edit control update trigger.</value>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.ListColumn.ColumnHeaderEditControlUpdateTriggerProperty">
            <summary>Binding update trigger for a column header edit control</summary>
            <value>The column header edit control update trigger.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.ListColumn.ColumnHeaderEditControlWatermarkText">
            <summary>Watermark text for a potential header control</summary>
            <value>The column header edit control watermark text.</value>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.ListColumn.ColumnHeaderEditControlWatermarkTextProperty">
            <summary>Watermark text for a potential header control</summary>
            <value>The column header edit control watermark text.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.ListColumn.Width">
            <summary>Column Width</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.ListColumn.WidthProperty">
            <summary>Column Width</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.ListColumn.OnWidthChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Fires when the column width changes
            </summary>
            <param name="d">Column object</param>
            <param name="args">Event arguments</param>
        </member>
        <member name="E:CODE.Framework.Wpf.Controls.ListColumn.WidthChanged">
            <summary>
            Occurs when the column width changes
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.ListColumn.ActualWidth">
            <summary>For internal use only</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.ListColumn.ActualWidthProperty">
            <summary>For internal use only</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.ListColumn.BindingPath">
            <summary>Path the column is bound to</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.ListColumn.BindingPathProperty">
            <summary>Path expression the column is bound to (used as a standard binding expression into each item's data context</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.ListColumn.EditControlBindingPath">
            <summary>Binding path used for edit control (if empty, the regular BindingPath property applies)</summary>
            <value>The edit control binding path.</value>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.ListColumn.EditControlBindingPathProperty">
            <summary>Binding path used for edit control (if empty, the regular BindingPath property applies)</summary>
            <value>The edit control binding path.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.ListColumn.EditControlUpdateSourceTrigger">
            <summary>Defines when the binding of edit controls triggers an update</summary>
            <value>The edit control update source trigger.</value>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.ListColumn.EditControlUpdateSourceTriggerProperty">
            <summary>Defines when the binding of edit controls triggers an update</summary>
            <value>The edit control update source trigger.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.ListColumn.EditControlStringFormat">
            <summary>Binding StringFormat for the edit control binding</summary>
            <value>The edit control string format.</value>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.ListColumn.EditControlStringFormatProperty">
            <summary>Binding StringFormat for the edit control binding</summary>
            <value>The edit control string format.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.ListColumn.ItemTemplate">
            <summary>Item template used for the column</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.ListColumn.ItemTemplateProperty">
            <summary>Item template used for the column</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.ListColumn.HeaderTemplate">
            <summary>Template used for column headers</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.ListColumn.HeaderTemplateProperty">
            <summary>Template used for column headers</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.ListColumn.IsResizable">
            <summary>Defines whether the column is resizable</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.ListColumn.IsResizableProperty">
            <summary>Defines whether the column is resizable</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.ListColumn.ShowHeaderGridLine">
            <summary>Defines whether a vertical header line shall be shown to indicate the size of the header</summary>
            <value><c>true</c> if line is to be displayed; otherwise, <c>false</c>.</value>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.ListColumn.ShowHeaderGridLineProperty">
            <summary>Defines whether a vertical header line shall be shown to indicate the size of the header</summary>
            <value><c>true</c> if line is to be displayed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.ListColumn.HeaderGridLineStyle">
            <summary>Style to be used for header grid lines</summary>
            <value>The header grid line style.</value>
            <remarks>Header grid line objects are Border objects that wrap the entire header</remarks>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.ListColumn.HeaderGridLineStyleProperty">
            <summary>Style to be used for header grid lines</summary>
            <value>The header grid line style.</value>
            <remarks>Header grid line objects are Border objects that wrap the entire header</remarks>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.ListColumn.HeaderClickCommandBindingPath">
            <summary>Binding path to bind a header click command</summary>
            <remarks>Note that standard binding would not be applicable int his case, since column headers do not exist within the visual tree structure that would provide the standard data context</remarks>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.ListColumn.HeaderClickCommandBindingPathProperty">
            <summary>Binding path to bind a header click command</summary>
            <remarks>Note that standard binding would not be applicable int his case, since column headers do not exist within the visual tree structure that would provide the standard data context</remarks>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.ListColumn.CellBackground">
            <summary>Background brush for individual cells</summary>
            <value>The cell background.</value>
            <remarks>Only applies for columns without item templates. Note that in order to data bind individual row background colors, the CellBackgroundBindingPath property has to be used.</remarks>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.ListColumn.CellBackgroundProperty">
            <summary>Background brush for individual cells</summary>
            <value>The cell background.</value>
            <remarks>Only applies for columns without item templates. Note that in order to data bind individual row background colors, the CellBackgroundBindingPath property has to be used.</remarks>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.ListColumn.CellBackgroundBindingPath">
            <summary>Defines a binding path for individual cell background colors.</summary>
            <value>The cell background binding path.</value>
            <remarks>It is not possible to just bind the CellBackground property using standard WPF binding, as that would bind the generic definition of the cell, not each actual cell in the list. Using the binding path property, a new binding to the path will be created for each item.</remarks>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.ListColumn.CellBackgroundBindingPathProperty">
            <summary>Defines a binding path for individual cell background colors.</summary>
            <value>The cell background binding path.</value>
            <remarks>It is not possible to just bind the CellBackground property using standard WPF binding, as that would bind the generic definition of the cell, not each actual cell in the list. Using the binding path property, a new binding to the path will be created for each item.</remarks>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.ListColumn.CellBackgroundOpacity">
            <summary>Defines the background opacity of the cell</summary>
            <value>The cell background opacity.</value>
            <remarks>Only applies if the CellBackground property is not null.</remarks>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.ListColumn.CellBackgroundOpacityProperty">
            <summary>Defines the background opacity of the cell</summary>
            <value>The cell background opacity.</value>
            <remarks>Only applies if the CellBackground property is not null</remarks>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.ListColumn.ColumnControl">
            <summary>Defines which type of control the column should be using</summary>
            <value>The column controls.</value>
            <remarks>Only applies for columns without item templates</remarks>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.ListColumn.ColumnControlProperty">
            <summary>Defines which type of control the column should be using</summary>
            <value>The column controls.</value>
            <remarks>Only applies for columns without item templates</remarks>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.ListColumn.CellContentAlignment">
            <summary>Content alignment for cell content</summary>
            <value>The cell content alignment.</value>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.ListColumn.CellContentAlignmentProperty">
            <summary>Content alignment for cell content</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.ListColumn.HeaderTextAlignment">
            <summary>Text alignment for simple text headers</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.ListColumn.HeaderTextAlignmentProperty">
            <summary>Text alignment for simple text headers</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.ListColumn.TextListItemsSourceBindingPath">
            <summary>Binding path expression used for the list (such as a combobox) of a text list hosted control</summary>
            <value>The text list item source binding path.</value>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.ListColumn.TextListItemsSourceBindingPathProperty">
            <summary>Binding path expression used for the list (such as a combobox) of a text list hosted control</summary>
            <value>The text list item source binding path.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.ListColumn.TextListDisplayMemberPath">
            <summary>Display member binding path path expression used for the list (such as a combobox) of a text list hosted control</summary>
            <value>The text list display member path.</value>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.ListColumn.TextListDisplayMemberPathProperty">
            <summary>Display member binding path path expression used for the list (such as a combobox) of a text list hosted control</summary>
            <value>The text list display member path.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.ListColumn.TextListSelectedValuePath">
            <summary>Selected value binding path path expression used for the list (such as a combobox) of a text list hosted control</summary>
            <value>The text list selected value path.</value>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.ListColumn.TextListSelectedValuePathProperty">
            <summary>Selected value binding path path expression used for the list (such as a combobox) of a text list hosted control</summary>
            <value>The text list selected value path.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.ListColumn.ImagePreviewStyle">
            <summary>Defines an (optional) style that can be applied to image previews when the column control is set to ImageWithPreview</summary>
            <value>The image preview style.</value>
            <remarks>The base object for the preview is an Image element</remarks>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.ListColumn.ImagePreviewStyleProperty">
            <summary>Defines an (optional) style that can be applied to image previews when the column control is set to ImageWithPreview</summary>
            <value>The image preview style.</value>
            <remarks>The base object for the preview is an Image element</remarks>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.ListColumn.CellPadding">
            <summary>Padding for the cell's content</summary>
            <value>The cell padding.</value>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.ListColumn.CellPaddingProperty">
            <summary>Padding for the cell's content</summary>
            <value>The cell padding.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.ListColumn.CellContentWidth">
            <summary>Cell content width. If set, forces the cell to explicitly take on a certain width. (This can be especially useful for images)</summary>
            <value>The width of the cell content.</value>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.ListColumn.CellContentWidthProperty">
            <summary>Cell content width. If set, forces the cell to explicitly take on a certain width. (This can be especially useful for images)</summary>
            <value>The width of the cell content.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.ListColumn.CellContentHeight">
            <summary>Cell content height. If set, forces the cell to explicitly take on a certain height. (This can be especially useful for images)</summary>
            <value>The height of the cell content.</value>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.ListColumn.CellContentHeightProperty">
            <summary>Cell content height. If set, forces the cell to explicitly take on a certain height. (This can be especially useful for images)</summary>
            <value>The height of the cell content.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.ListColumn.EditMode">
            <summary>Defines the edit mode for the cell</summary>
            <value>The edit mode.</value>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.ListColumn.EditModeProperty">
            <summary>Defines the edit mode for the cell</summary>
            <value>The edit mode.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.ListColumn.EditTextBoxStyle">
            <summary>Style used for text edit textboxes</summary>
            <value>The edit text box style.</value>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.ListColumn.EditTextBoxStyleProperty">
            <summary>Style used for text edit textboxes</summary>
            <value>The edit text box style.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.ListColumn.EditCheckmarkStyle">
            <summary>Style used for checkmark edit checkboxes</summary>
            <value>The edit checkmark style.</value>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.ListColumn.EditCheckmarkStyleProperty">
            <summary>Style used for checkmark edit checkboxes</summary>
            <value>The edit checkmark style.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.ListColumn.EditTextListStyle">
            <summary>Style used for tex list edit controls</summary>
            <value>The edit text list style.</value>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.ListColumn.EditTextListStyleProperty">
            <summary>Style used for tex list edit controls</summary>
            <value>The edit text list style.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.ListColumn.GridLineBrush">
            <summary>Defines the brushed to be used to draw grid lines</summary>
            <value>The grid line brush.</value>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.ListColumn.GridLineBrushProperty">
            <summary>Defines the brushed to be used to draw grid lines</summary>
            <value>The grid line brush.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.ListColumn.ReadOnlyControlEventCommands">
            <summary>Collection of event commands associated with the control that is used to display cell data in read-only fashion</summary>
            <value>The read only control event commands collection.</value>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.ListColumn.ReadOnlyControlEventCommandsProperty">
            <summary>Collection of event commands associated with the control that is used to display cell data in read-only fashion</summary>
            <value>The read only control event commands collection.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.ListColumn.WriteControlEventCommands">
            <summary>Collection of event commands associated with the control that is used to display cell data for editing</summary>
            <value>The read only control event commands collection.</value>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.ListColumn.WriteControlEventCommandsProperty">
            <summary>Collection of event commands associated with the control that is used to display cell data for editing</summary>
            <value>The read only control event commands collection.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.ListColumn.HeaderEventCommands">
            <summary>Collection of event commands associated with the header control</summary>
            <value>The header event commands.</value>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.ListColumn.HeaderEventCommandsProperty">
            <summary>Collection of event commands associated with the header control</summary>
            <value>The header event commands.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.ListColumn.SortOrder">
            <summary>Column sort order indicator</summary>
            <value>The sort order indicator.</value>
            <remarks>Note that setting this value does NOT actually sort the bound data. It simply creates a visual indicator showing that the column is sorted.</remarks>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.ListColumn.SortOrderProperty">
            <summary>Column sort order indicator</summary>
            <value>The sort order indicator.</value>
            <remarks>Note that setting this value does NOT actually sort the bound data. It simply creates a visual indicator showing that the column is sorted.</remarks>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.ListColumn.SortOrderBindingPath">
            <summary>Binding path for a dynamically set sort order</summary>
            <value>The sort order binding path.</value>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.ListColumn.SortOrderBindingPathProperty">
            <summary>Binding path for a dynamically set sort order</summary>
            <value>The sort order binding path.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.ListColumn.IsFrozen">
            <summary>Indicates whether the column is considered to be "frozen"</summary>
            <remarks>Frozen status usually indicates that all frozen columns are kept visible on the left side of the listbox. Note that different controls and styles may interpret this property differently.</remarks>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.ListColumn.IsFrozenProperty">
            <summary>Indicates whether the column is considered to be "frozen"</summary>
            <remarks>Frozen status usually indicates that all frozen columns are kept visible on the left side of the listbox. Note that different controls and styles may interpret this property differently.</remarks>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.ListColumn.Visibility">
            <summary>
            Gets or sets the visible of the column.
            </summary>
            <value>The visible.</value>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.ListColumn.VisibilityProperty">
            <summary>
            Gets or sets the visible of the column.
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.ListColumn.OnVisibilityChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Occurs when the visibility of the column changes
            </summary>
            <param name="d">ListColumn</param>
            <param name="args">Event args</param>
        </member>
        <member name="E:CODE.Framework.Wpf.Controls.ListColumn.VisibilityChanged">
            <summary>
            Occurs when the column width changes
            </summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Controls.ListColumnControls">
            <summary>
            Supported list column controls
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.ListColumnControls.Auto">
            <summary>
            Data templates automatically pick the control they feel is most appropriate
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.ListColumnControls.Text">
            <summary>
            Text element
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.ListColumnControls.Checkmark">
            <summary>
            Check mark (check box)
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.ListColumnControls.TextList">
            <summary>
            Text element populated from a list of possible values (typically expressed as a drop down list in edit mode)
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.ListColumnControls.Image">
            <summary>
            Image
            </summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Controls.ListColumnContentAlignment">
            <summary>Content alignment options for list columns</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.ListColumnContentAlignment.Default">
            <summary>Default content alignment for each control</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.ListColumnContentAlignment.Left">
            <summary>Content is left aligned</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.ListColumnContentAlignment.Center">
            <summary>Content is center aligned</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.ListColumnContentAlignment.Right">
            <summary>Content is right aligned</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.ListColumnContentAlignment.Stretch">
            <summary>Stretch across entire width</summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Controls.ListRowEditMode">
            <summary>
            Row edit mode for multi-column lists
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.ListRowEditMode.ReadOnly">
            <summary>All cells are read-only</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.ListRowEditMode.ReadWriteAll">
            <summary>All cells are read/write</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.ListRowEditMode.Manual">
            <summary>Mode is set on a row-by-row basis manually by means of a binding (true/false)</summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Controls.ListGridLineMode">
            <summary>
            Defines when grid lines should be displayed in a list with columns
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.ListGridLineMode.Never">
            <summary>Never show grid lines</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.ListGridLineMode.Always">
            <summary>Always show grid lines</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.ListGridLineMode.EditOnly">
            <summary>Only show grid lines when the cell is being edited</summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Controls.PasswordBoxEx">
            <summary>
            This class adds features to the PasswordBox control (in particular a bindable value property)
            </summary>
            <remarks>Note: This object can only be used through attached properties, since the default PasswordBox control is sealed and can thus not be used as a baseclass for this object.</remarks>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.PasswordBoxEx.ValueProperty">
            <summary>Attached property to set the password</summary>
            <remarks>This attached property can be attached to any UI Element to define row heights</remarks>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.PasswordBoxEx.ValuePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handler for password value changes
            </summary>
            <param name="d">Source object</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.PasswordBoxEx.GetValue(System.Windows.DependencyObject)">
            <summary>Gets the password value</summary>
            <param name="obj">Object to set the password on</param>
            <returns>Password value</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.PasswordBoxEx.SetValue(System.Windows.DependencyObject,System.String)">
            <summary>Password value</summary>
            <param name="obj">Object to set the password value on</param>
            <param name="value">Value to set</param>
        </member>
        <member name="T:CODE.Framework.Wpf.Controls.RichTextBoxEx">
            <summary>
            RichtextBox with a bindable property "Xaml" which is a FlowDocument serialized as a string.
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.RichTextBoxEx.XamlProperty">
            <summary>
            XAML version of the document
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.RichTextBoxEx.ChangeXaml(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Changes the xaml.
            </summary>
            <param name="dependencyObject">The dependency object.</param>
            <param name="a">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.RichTextBoxEx.UpdateXaml(System.Windows.Controls.RichTextBox)">
            <summary>
            Updates the XAML property from the textbox's document
            </summary>
            <param name="richTextBox">The rich text box.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.RichTextBoxEx.GetXaml(System.Windows.DependencyObject)">
            <summary>
            Returns the XAML version of the document
            </summary>
            <param name="obj">The textbox object</param>
            <returns>XAML flow document string</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.RichTextBoxEx.SetXaml(System.Windows.DependencyObject,System.String)">
            <summary>
            Sets the document based on a XAML string
            </summary>
            <param name="obj">The textbox object</param>
            <param name="value">The XAML document string to set</param>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.RichTextBoxEx.XamlEditModeProperty">
            <summary>
            Defines whether the serialized XAML property shall be a fully qualified FlowDocument or just a snippet of XAML text
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.RichTextBoxEx.GetXamlEditMode(System.Windows.DependencyObject)">
            <summary>
            Returns the XAML version of the document
            </summary>
            <param name="obj">The textbox object</param>
            <returns>XAML flow document string</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.RichTextBoxEx.SetXamlEditMode(System.Windows.DependencyObject,CODE.Framework.Wpf.Controls.XamlEditMode)">
            <summary>
            Sets the document based on a XAML string
            </summary>
            <param name="obj">The textbox object</param>
            <param name="value">The XAML document string to set</param>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.RichTextBoxEx.DocumentSerializerProperty">
            <summary>
            Defines a custom serializer object for the flow document
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.RichTextBoxEx.GetDocumentSerializer(System.Windows.DependencyObject)">
            <summary>
            Defines a custom serializer object for the flow document
            </summary>
            <param name="obj">The textbox object</param>
            <returns>Flow document serializer</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.RichTextBoxEx.SetDocumentSerializer(System.Windows.DependencyObject,CODE.Framework.Wpf.Controls.IFlowDocumentSerializer)">
            <summary>
            Defines a custom serializer object for the flow document
            </summary>
            <param name="obj">The textbox object</param>
            <param name="value">The flow document serializer</param>
        </member>
        <member name="T:CODE.Framework.Wpf.Controls.XamlEditMode">
            <summary>
            Defines different edit modes for XAML base text
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.XamlEditMode.FlowDocument">
            <summary>
            Text is serialized as a fully qualified flow document
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.XamlEditMode.XamlSnippet">
            <summary>
            Text is serialized as a XAML snippet
            </summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Controls.IFlowDocumentSerializer">
            <summary>
            Flow document serializer interface
            </summary>
            <remarks>
            This interface has been created to enable custom serialization of flow documents in rich text boxes
            </remarks>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.IFlowDocumentSerializer.Serialize(System.Windows.Documents.FlowDocument)">
            <summary>
            Returns the text/xaml for a given flow document
            </summary>
            <param name="document">The document to serialize.</param>
            <returns>The serialized version of the document</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.IFlowDocumentSerializer.Deserialize(System.String)">
            <summary>
            Returns a flow document representing the provided text
            </summary>
            <param name="text">The serialized version of the flow document.</param>
            <returns>Flow document</returns>
        </member>
        <member name="T:CODE.Framework.Wpf.Controls.SortOrderIndicator">
            <summary>Control used to indicate sort orders</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.SortOrderIndicator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Wpf.Controls.SortOrderIndicator"/> class.
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.SortOrderIndicator.Order">
            <summary>Sort order</summary>
            <value>The sort order</value>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.SortOrderIndicator.OrderProperty">
            <summary>Sort order</summary>
            <value>The sort order</value>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.SortOrderIndicator.DependencyPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>Fires when one of the dependency properties changes that causes a brush change</summary>
            <param name="d">The source</param>
            <param name="args">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.SortOrderIndicator.UnsortedBrush">
            <summary>Brush used to indicate unsorted order</summary>
            <value>The unsorted brush.</value>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.SortOrderIndicator.UnsortedBrushProperty">
            <summary>Brush used to indicate unsorted order</summary>
            <value>The unsorted brush.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.SortOrderIndicator.AscendingBrush">
            <summary>Brush used to indicate ascending order</summary>
            <value>The ascending brush.</value>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.SortOrderIndicator.AscendingBrushProperty">
            <summary>Brush used to indicate ascending order</summary>
            <value>The ascending brush.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.SortOrderIndicator.DescendingBrush">
            <summary>Brush used to indicate descending order</summary>
            <value>The descending brush.</value>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.SortOrderIndicator.DescendingBrushProperty">
            <summary>Brush used to indicate descending order</summary>
            <value>The descending brush.</value>
        </member>
        <member name="T:CODE.Framework.Wpf.Controls.SortOrder">
            <summary>
            Sort order
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.SortOrder.Unsorted">
            <summary>
            Unsorted
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.SortOrder.Ascending">
            <summary>
            Ascending sort
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.SortOrder.Descending">
            <summary>
            Descending sort
            </summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Controls.TextBlockEx">
            <summary>
            TextBlock class with extended features
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.TextBlockEx.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Wpf.Controls.TextBlockEx"/> class.
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.TextBlockEx.#ctor(System.Windows.Documents.Inline)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Controls.TextBlock" /> class, adding a specified <see cref="T:System.Windows.Documents.Inline" /> element as the initial display content.
            </summary>
            <param name="inline">An object deriving from the abstract <see cref="T:System.Windows.Documents.Inline" /> class, to be added as the initial content.</param>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.TextBlockEx.RegularExpression">
            <summary>
            Gets or sets the regular expression.
            </summary>
            <value>The regular expression.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.TextBlockEx.SearchWords">
            <summary>
            Search words
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.TextBlockEx.SearchWordsProperty">
            <summary>
            Search words
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.TextBlockEx.SearchWordsPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Fores when the search words change
            </summary>
            <param name="o">The object the property changed on</param>
            <param name="args">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="E:CODE.Framework.Wpf.Controls.TextBlockEx.OnHighlightableTextChanged">
            <summary>
            Occurs when [on highlightable text changed].
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.TextBlockEx.HighlightableText">
            <summary>
            Gets or sets the highlightable text.
            </summary>
            <value>The highlightable text.</value>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.TextBlockEx.HighlightableTextProperty">
            <summary>
            The highlightable text property
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.TextBlockEx.HighlightableTextChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Fires when the highlight text changes
            </summary>
            <param name="o">The o.</param>
            <param name="args">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="E:CODE.Framework.Wpf.Controls.TextBlockEx.OnHighlightForegroundChanged">
            <summary>
            Occurs when the highlight foreground changes
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.TextBlockEx.HighlightForeground">
            <summary>
            Gets or sets the highlight foreground.
            </summary>
            <value>The highlight foreground.</value>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.TextBlockEx.HighlightForegroundProperty">
            <summary>
            The highlight foreground property
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.TextBlockEx.HighlightableForegroundChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Fires when the highlight foreground changes
            </summary>
            <param name="o">The o.</param>
            <param name="args">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="E:CODE.Framework.Wpf.Controls.TextBlockEx.OnHighlightBackgroundChanged">
            <summary>
            Occurs when the highlight background changes
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.TextBlockEx.HighlightBackground">
            <summary>
            Gets or sets the highlight background.
            </summary>
            <value>The highlight background.</value>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.TextBlockEx.HighlightBackgroundProperty">
            <summary>
            The highlight background property
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.TextBlockEx.HighlightableBackgroundChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Fires when the highlight background changes
            </summary>
            <param name="o">The o.</param>
            <param name="args">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.TextBlockEx.AddSearchString(System.String)">
            <summary>
            Adds the search string.
            </summary>
            <param name="inString">The in string.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.TextBlockEx.Update">
            <summary>
            Updates the regular expression
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.TextBlockEx.RefreshHighlightedText">
            <summary>
            Refreshes the highlighted text.
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.TextBlockEx.UpdateRegex">
            <summary>
            Updates the regex.
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.TextBlockEx.IsValidRegex(System.String)">
            <summary>
            Determines whether the provided string is a valid RegEx
            </summary>
            <param name="inRegex">The in regex.</param>
            <returns>True of false</returns>
        </member>
        <member name="T:CODE.Framework.Wpf.Controls.TextBoxEx">
            <summary>
            This class provides extensions to the text box class
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.TextBoxEx.WatermarkTextProperty">
            <summary>Watermark text property (can be used to set text for empty textboxes)</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.TextBoxEx.SetWatermarkText(System.Windows.DependencyObject,System.String)">
            <summary>Watermark text property (can be used to set text for empty textboxes)</summary>
            <param name="o">The object to set the value on.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.TextBoxEx.GetWatermarkText(System.Windows.DependencyObject)">
            <summary>Watermark text property (can be used to set text for empty textboxes)</summary>
            <param name="o">The object to get the value for.</param>
            <returns>System.String.</returns>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.TextBoxEx.RegexInputMaskProperty">
            <summary>
            Attached property can be used to define a RegEx based input mask
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.TextBoxEx.InputMaskRegExProperty">
            <summary>
            Attached property can be used to define a RegEx based input mask
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.TextBoxEx.OnInputMaskRegExChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Fires when the input mask regular expression changes
            </summary>
            <param name="o">The object the mask is set on.</param>
            <param name="args">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.TextBoxEx.PreviewTextInputHandler(System.Object,System.Windows.Input.TextCompositionEventArgs)">
            <summary>
            Text input handler
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.Input.TextCompositionEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.TextBoxEx.PastingHandler(System.Object,System.Windows.DataObjectPastingEventArgs)">
            <summary>
            Fires when text is pasted into the control
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.DataObjectPastingEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.TextBoxEx.GetProposedText(System.Windows.Controls.TextBox,System.String)">
            <summary>
            Gets the text a new input event would produce if we let things go forward
            </summary>
            <param name="textBox">The text box.</param>
            <param name="newText">The new text.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.TextBoxEx.GetProposedTextBackspace(System.Windows.Controls.TextBox)">
            <summary>
            Gets the proposed text assuming a backspace.
            </summary>
            <param name="textBox">The text box.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.TextBoxEx.GetTextWithSelectionRemoved(System.Windows.Controls.TextBox)">
            <summary>
            Returns what the textbox text would be with the current selection removed
            </summary>
            <param name="textBox">TextBox</param>
            <returns>Text</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.TextBoxEx.SetInputMaskRegEx(System.Windows.DependencyObject,System.String)">
            <summary>
            Sets the input mask.
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.TextBoxEx.GetInputMaskRegEx(System.Windows.DependencyObject)">
            <summary>
            Gets the input mask.
            </summary>
        </member>
        <member name="E:CODE.Framework.Wpf.Controls.TextBoxEx.ToggleSpellCheck">
            <summary>
            Fires when the spell check flag is toggled
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.TextBoxEx.UseCustomDictionariesProperty">
            <summary>When set to True, assumes a custom user dictionary named UserDictionary.lex in the application folder.
            Spell check context menu allows user to add words to the UserDictionary.lex custom dictionary.
            If UserDictionary.lex does not exist, it will be created.
            IgnoreAllDictionary.lex will also be created. Unlike UserDictionary.lex it will be overwritten each time the app is restarted.
            Other custom dictionaries found in the same folder will be used, but only UserDictionary.lex will get "Added" words.
            Custom dictionary path can be overridden in the app.config by adding a CustomDictionaryPath key and value to appSettings.
            Custom dictionary path setting is applicaiton wide.</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.TextBoxEx.GetUseCustomDictionaries(System.Windows.DependencyObject)">
            <summary>
            Gets UseCustomDictionaries
            </summary>
            <param name="obj">The object.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.TextBoxEx.SetUseCustomDictionaries(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets UseCustomDictionaries
            </summary>
            <param name="obj">The object.</param>
            <param name="value">if set to <c>true</c> [value].</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.TextBoxEx.UseCustomDictionariesChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Fires when UseCustomDictionaries changes
            </summary>
            <param name="dependencyObject">The dependency object.</param>
            <param name="a">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:CODE.Framework.Wpf.Controls.TouchEx">
            <summary>
            This class provides attached properties for touch-related features
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.TouchEx.UpdatePointingDeviceInputModeProperty">
            <summary>
            If set to true, the PointingDeviceInputMode attached property is automatically and continuously set on the target object
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.TouchEx.GetUpdatePointingDeviceInputMode(System.Windows.DependencyObject)">
            <summary>
            If set to true, the PointingDeviceInputMode attached property is automatically and continuously set on the target object
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.TouchEx.SetUpdatePointingDeviceInputMode(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            If set to true, the PointingDeviceInputMode attached property is automatically and continuously set on the target object
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.TouchEx.OnUpdatePointingDeviceInputModeChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Fires when the property value changes
            </summary>
            <param name="d">Deopendency object the value is set on</param>
            <param name="e">Event args</param>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.TouchEx.PointingDeviceInputModeProperty">
            <summary>
            Indicates the current input mode
            </summary>
            <remarks>This property should never be set manually. It is auto-updated if UpdatePointingDeviceInputMode is set to true.</remarks>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.TouchEx._mostRecentPointingDeviceInputMode">
            <summary>
            Global flag for the most recent input mode
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.TouchEx.OnPointingDeviceInputModeChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Fires when the property value changes
            </summary>
            <param name="d">Reference to the object the value changed on</param>
            <param name="e">Event args</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.TouchEx.GetPointingDeviceInputMode(System.Windows.DependencyObject)">
            <summary>
            Indicates the current input mode
            </summary>
            <remarks>This property should never be set manually. It is auto-updated if UpdatePointingDeviceInputMode is set to true.</remarks>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.TouchEx.SetPointingDeviceInputMode(System.Windows.DependencyObject,CODE.Framework.Wpf.Controls.PointingDeviceInputMode)">
            <summary>
            Indicates the current input mode
            </summary>
            <remarks>This property should never be set manually. It is auto-updated if UpdatePointingDeviceInputMode is set to true.</remarks>
        </member>
        <member name="T:CODE.Framework.Wpf.Controls.PointingDeviceInputMode">
            <summary>
            Defines available input modes for pointing devices
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.PointingDeviceInputMode.Mouse">
            <summary>
            The mouse is used as a pointing device
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.PointingDeviceInputMode.Touch">
            <summary>
            Touch is used
            </summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Controls.TreeViewEx">
            <summary>
            Tree view with additional features
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.TreeViewEx.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Wpf.Controls.TreeViewEx"/> class.
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.TreeViewEx.SelectedNode">
            <summary>Selected node (item)</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.TreeViewEx.SelectedNodeProperty">
            <summary>Selected node (item)</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.TreeViewEx.SelectedNodePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>Change-handler for the selected node property</summary>
            <param name="d">The dependency object the property is set on (TreeViewEx).</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.TreeViewEx.SelectItem(System.Object)">
            <summary>
            Selects the item in the tree
            </summary>
            <param name="item">The data bound tree item</param>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.TreeViewEx.BringItemIntoViewWhenSelected">
            <summary>When set to true, programmatically selecting an item in the tree will also bring it into view</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.TreeViewEx.BringItemIntoViewWhenSelectedProperty">
            <summary>When set to true, programmatically selecting an item in the tree will also bring it into view</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.TreeViewEx.CommandProperty">
            <summary>Attached property to set a tree view's command</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.TreeViewEx.CommandPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handler for command changes
            </summary>
            <param name="d">Source object</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.TreeViewEx.MouseDoubleClickCommandTrigger(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Triggers a potentially attached command after double-click
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.TreeViewEx.SelectionChangedCommandTrigger(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            Triggers a potentially attached command after selection changes.
            </summary>
            <param name="sender">The TreeViewEx object.</param>
            <param name="e">The <see cref="T:System.Object"/> instance containing the event data.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.TreeViewEx.TriggerCommand(System.Windows.DependencyObject,System.Object)">
            <summary>
            Triggers the associated command.
            </summary>
            <param name="sender">The sender (TreeViewEx) that triggered the operation.</param>
            <param name="selectedItem">The selected item (used as the command parameter unless an explicit parameter is set).</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.TreeViewEx.GetCommand(System.Windows.DependencyObject)">
            <summary>Command to be triggered on items in the list</summary>
            <param name="obj">Object to set command on</param>
            <returns>Command</returns>
            <remarks>This attached property can be attached to any UI Element to define a command</remarks>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.TreeViewEx.SetCommand(System.Windows.DependencyObject,System.Windows.Input.ICommand)">
            <summary>Command</summary>
            <param name="obj">Object to set the command on</param>
            <param name="value">Value to set</param>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.TreeViewEx.CommandTriggerProperty">
            <summary>Attached property to set command trigger</summary>
            <remarks>This attached property can be attached to any UI Element to define a command trigger mode</remarks>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.TreeViewEx.GetCommandTrigger(System.Windows.DependencyObject)">
            <summary>Command trigger mode</summary>
            <param name="obj">Object to set the command trigger on</param>
            <returns>Command trigger mode</returns>
            <remarks>This attached property can be attached to any UI Element to define the command trigger mode</remarks>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.TreeViewEx.SetCommandTrigger(System.Windows.DependencyObject,CODE.Framework.Wpf.Controls.TreeViewCommandTrigger)">
            <summary>Command trigger</summary>
            <param name="obj">Object to set the command trigger on</param>
            <param name="value">Value to set</param>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.TreeViewEx.CommandParameterProperty">
            <summary>Attached property to set the command parameter</summary>
            <remarks>This attached property can be attached to any UI Element to define the command parameter</remarks>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.TreeViewEx.GetCommandParameter(System.Windows.DependencyObject)">
            <summary>Command parameter</summary>
            <param name="obj">Object to set the command parameter on</param>
            <returns>Command parameter</returns>
            <remarks>This attached property can be attached to any UI Element to define the command parameter</remarks>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.TreeViewEx.SetCommandParameter(System.Windows.DependencyObject,System.Object)">
            <summary>Cmmand parameter</summary>
            <param name="obj">Object to set the command parameter on</param>
            <param name="value">Value to set</param>
        </member>
        <member name="T:CODE.Framework.Wpf.Controls.TreeViewCommandTrigger">
            <summary>
            Defines when the command on the TreeView is to be triggered
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.TreeViewCommandTrigger.DoubleClick">
            <summary>
            Trigger command on item double-click
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.TreeViewCommandTrigger.Select">
            <summary>
            Trigger command on item selection
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.TreeViewCommandTrigger.DoubleClickAndSelect">
            <summary>
            Trigger command after either double-click or selection changed
            </summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Controls.SpecialWindowButton">
            <summary>
            Abstract class used to define special window functions
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.SpecialWindowButton.RootWindow">
            <summary>
            Returns a reference to the root window the button is in
            </summary>
            <value>The root window.</value>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.SpecialWindowButton.GetParentWindow(System.Windows.DependencyObject)">
            <summary>
            Gets the parent window.
            </summary>
            <param name="child">The child.</param>
            <returns>Window.</returns>
        </member>
        <member name="T:CODE.Framework.Wpf.Controls.MinimizeButton">
            <summary>
            This button automatically minimizes the current window it is in
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.MinimizeButton.OnClick">
            <summary>
            Called when a <see cref="T:System.Windows.Controls.Button" /> is clicked.
            </summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Controls.CloseButton">
            <summary>
            This button automatically closes the current window it is in
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.CloseButton.OnClick">
            <summary>
            Called when a <see cref="T:System.Windows.Controls.Button" /> is clicked.
            </summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Controls.ToggleMaximizeButton">
            <summary>
            This button automatically toggles between normal and maximized states
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.ToggleMaximizeButton.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Wpf.Controls.ToggleMaximizeButton" /> class.
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.ToggleMaximizeButton.IsMaximized">
            <summary>
            Indicates whether the parent window is maximized
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.ToggleMaximizeButton.IsMaximizedProperty">
            <summary>
            Indicates whether the parent window is maximized
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.ToggleMaximizeButton.OnClick">
            <summary>
            Called when a <see cref="T:System.Windows.Controls.Button" /> is clicked.
            </summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Controls.WindowEx">
            <summary>
            Special window class with various (attached) properties that provide special capabilities
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.WindowEx.AutoWindowDragEnabledProperty">
            <summary>If set to true, the window can be dragged automatically by clicking in the background or header area</summary>
            <remarks>If the HeaderHeight property is set to anything larger than 0, only clicks within the header area will be considered for dragging.</remarks>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.WindowEx.AutoWindowDragEnabledChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>Handler for auto-windows-drag-enabled changes</summary>
            <param name="dependencyObject">The dependency object.</param>
            <param name="dependencyPropertyChangedEventArgs">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.WindowEx.WindowDragHandler(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>Handler for window drag operations</summary>
            <param name="sender">The sender.</param>
            <param name="mouseButtonEventArgs">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.WindowEx.GetAutoWindowDragEnabled(System.Windows.DependencyObject)">
            <summary>If set to true, the window can be dragged automatically by clicking in the background or header area</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.WindowEx.SetAutoWindowDragEnabled(System.Windows.DependencyObject,System.Boolean)">
            <summary>If set to true, the window can be dragged automatically by clicking in the background or header area</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.WindowEx.AutoWindowMaximizeEnabledProperty">
            <summary>If set to true, the window automatically maximizes when double-clicked</summary>
            <remarks>If the HeaderHeight property is set to anything larger than 0, only clicks within the header area will be considered for dragging.</remarks>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.WindowEx.AutoWindowMaximizeEnabledChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>Handler for auto-windows-maximize changes</summary>
            <param name="dependencyObject">The dependency object.</param>
            <param name="dependencyPropertyChangedEventArgs">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.WindowEx.WindowMaximizeHandler(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>Handler for window maximize operations</summary>
            <param name="sender">The sender.</param>
            <param name="mouseButtonEventArgs">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.WindowEx.GetAutoWindowMaximizeEnabled(System.Windows.DependencyObject)">
            <summary>If set to true, the window can be dragged automatically by clicking in the background or header area</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.WindowEx.SetAutoWindowMaximizeEnabled(System.Windows.DependencyObject,System.Boolean)">
            <summary>If set to true, the window can be dragged automatically by clicking in the background or header area</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.WindowEx.HeaderHeightProperty">
            <summary>
            Defines the area at the top of the window that is considered the "Header". 
            This is the area of the screen that drag and double-click operations will be handled in
            If this is 0 or less, then the whole window is drag and double-click enabled
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.WindowEx.GetHeaderHeight(System.Windows.DependencyObject)">
            <summary>Gets the height of the header.</summary>
            <param name="obj">Dependency object to set the value on</param>
            <returns></returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.WindowEx.SetHeaderHeight(System.Windows.DependencyObject,System.Double)">
            <summary>Sets the height of the header.</summary>
            <param name="obj">Dependency object to set the value on</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.WindowEx.IsMouseActionInHeader(System.Windows.Window,System.Windows.Point)">
            <summary>Determines whether an action taken with the mouse is within the area we consider to be the "header".</summary>
            <param name="window">The window.</param>
            <param name="mousePosition">The mouse position.</param>
            <returns>True or false</returns>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.WindowEx.AutoWindowResizingEnabledProperty">
            <summary>If true, the window allows resizing, even if the window is a borderless window</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.WindowEx.AutoWindowResizingEnabledChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>Change event handler for auto resizing</summary>
            <param name="dependencyObject">Dependency object</param>
            <param name="dependencyPropertyChangedEventArgs">Event args</param>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.WindowEx.DynamicIconProperty">
            <summary>Window icon path (set dynamically, which means it doesn't have to exist during design time)</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.WindowEx.DynamicIconChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Fires when the dynamic icon changes
            </summary>
            <param name="d">The d.</param>
            <param name="args">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> instance containing the event data.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.WindowEx.GetDynamicIcon(System.Windows.DependencyObject)">
            <summary>Window icon path (set dynamically, which means it doesn't have to exist during design time)</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.WindowEx.SetDynamicIcon(System.Windows.DependencyObject,System.String)">
            <summary>Window icon path (set dynamically, which means it doesn't have to exist during design time)</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.WindowEx.IsBorderlessProperty">
            <summary>Indicates whether the window should switch into special borderless mode</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.WindowEx.IsBorderlessChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>Fires when the IsBorderless property changess</summary>
            <param name="d">The dependency object.</param>
            <param name="args">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.WindowEx.GetIsBorderless(System.Windows.DependencyObject)">
            <summary>Indicates whether the window should switch into special borderless mode</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.WindowEx.SetIsBorderless(System.Windows.DependencyObject,System.Boolean)">
            <summary>Indicates whether the window should switch into special borderless mode</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.WindowEx.HasDropShadowProperty">
            <summary>
            Indicates whether and when the window shall have a drop shaddow
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.WindowEx.HasDropShadowChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Fires when HasDropShadow changes
            </summary>
            <param name="source">The dependency object.</param>
            <param name="args">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.WindowEx.WindowDeactivatedForDropShadow(System.Object,System.EventArgs)">
            <summary>
            Fires when the window deactivates for drop-shadow purposes
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.WindowEx.WindowActivatedForDropShadow(System.Object,System.EventArgs)">
            <summary>
            Fires when the window activates for drop-shadow purposes
            </summary>
            <param name="sender">The sender.</param>
            <param name="eventArgs">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.WindowEx.GetHasDropShadow(System.Windows.DependencyObject)">
            <summary>
            Indicates whether and when the window shall have a drop shaddow
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.WindowEx.SetHasDropShadow(System.Windows.DependencyObject,CODE.Framework.Wpf.Controls.EffectActiveStates)">
            <summary>
            Indicates whether and when the window shall have a drop shaddow
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.WindowEx.WindowHook(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Boolean@)">
            <summary>
            Handles window messages
            </summary>
            <param name="hwnd">The window handle.</param>
            <param name="msg">The message.</param>
            <param name="wParam">The w param.</param>
            <param name="lParam">The l param.</param>
            <param name="handled">if set to <c>true</c> [handled].</param>
            <returns>IntPtr.</returns>
        </member>
        <member name="T:CODE.Framework.Wpf.Controls.WindowEx.MonitorInfo">
            <summary>Monitor info interop class</summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Controls.WindowEx.InteropRect">
            <summary>Win32 RECT structure</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.WindowEx.InteropRect.left">
            <summary> Win32 </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.WindowEx.InteropRect.top">
            <summary> Win32 </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.WindowEx.InteropRect.right">
            <summary> Win32 </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.WindowEx.InteropRect.bottom">
            <summary> Win32 </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.WindowEx.InteropRect.Empty">
            <summary> Win32 </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.WindowEx.InteropRect.Width">
            <summary> Win32 </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.WindowEx.InteropRect.Height">
            <summary> Win32 </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.WindowEx.InteropRect.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary> Win32 </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.WindowEx.InteropRect.#ctor(CODE.Framework.Wpf.Controls.WindowEx.InteropRect)">
            <summary> Win32 </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.WindowEx.InteropRect.IsEmpty">
            <summary> Win32 </summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Controls.WindowEx.MinMaxInfo">
            <summary>MinMaxInfo interop struct</summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Controls.WindowEx.InteropPoint">
            <summary>
            InteropPoint aka POINTAPI
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.WindowEx.InteropPoint.X">
            <summary>
            X coordinate of point.
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.WindowEx.InteropPoint.Y">
            <summary>
            Y coordinate of point.
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.WindowEx.InteropPoint.#ctor(System.Int32,System.Int32)">
            <summary>
            Construct a point of coordinates (X,Y).
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.WindowEx.GetMonitorInfo(System.IntPtr,CODE.Framework.Wpf.Controls.WindowEx.MonitorInfo)">
            <summary>Get monitor info interop function</summary>
            <param name="hMonitor">The monitor handle.</param>
            <param name="lpmi">The lpmi.</param>
            <returns>True or false</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.WindowEx.MonitorFromWindow(System.IntPtr,System.Int32)">
            <summary>Monitor from Window handle interop function</summary>
            <param name="handle">The handle.</param>
            <param name="flags">The flags.</param>
            <returns>True or false</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.WindowEx.WindowGetMinMaxInfo(System.IntPtr,System.IntPtr)">
            <summary>Populates the min/max info for the specified window handle</summary>
            <param name="hwnd">The window handle</param>
            <param name="lParam">Prameters</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.WindowEx.WindowResizeMouseDownHandler(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>Mouse down handler for resize behavior</summary>
            <param name="sender">The sender.</param>
            <param name="mouseButtonEventArgs">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.WindowEx.MustHandleResize(System.Windows.Point,System.Windows.Window)">
            <summary>Figures out whether the current mouse position indicates a required resize operation</summary>
            <param name="position">The position.</param>
            <param name="window">The window.</param>
            <returns>True if resize handling is needed</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.WindowEx.WindowResizeMouseDownMoveHandler(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>This event handler is used to release the capruted mouse</summary>
            <param name="sender">The sender.</param>
            <param name="mouseEventArgs">The <see cref="T:System.Windows.Input.MouseEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.WindowEx.WindowResizeMouseUpHandler(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>This event handler is used to release the captured mouse</summary>
            <param name="sender">The sender.</param>
            <param name="mouseEventArgs">The <see cref="T:System.Windows.Input.MouseEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.WindowEx.WindowResizeMouseOverHandler(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>Mouse over handler for resize behavior</summary>
            <param name="sender">The sender.</param>
            <param name="mouseEventArgs">The <see cref="T:System.Windows.Input.MouseEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.WindowEx.GetAutoWindowResizingEnabled(System.Windows.DependencyObject)">
            <summary>If true, the window allows resizing, even if the window is a borderless window</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.WindowEx.SetAutoWindowResizingEnabled(System.Windows.DependencyObject,System.Boolean)">
            <summary>If true, the window allows resizing, even if the window is a borderless window</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.WindowEx.DwmSetWindowAttribute(System.IntPtr,System.Int32,System.Int32@,System.Int32)">
            <summary>
            External API call to set window attributes
            </summary>
            <param name="hwnd">Window handle</param>
            <param name="attr">Attribute to set</param>
            <param name="attrValue">Attribute value</param>
            <param name="attrSize">Attribute size</param>
            <returns></returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.WindowEx.DwmExtendFrameIntoClientArea(System.IntPtr,System.Drawing.Printing.Margins@)">
            <summary>
            Extends the frame into the client area
            </summary>
            <param name="hWnd">Window handle</param>
            <param name="pMarInset">Margin</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.WindowEx.ShowDropShadow(System.Windows.Window)">
            <summary>
            Drops a standard shadow to a WPF Window, even if the window is borderless. Only works with DWM (Vista and later).
            </summary>
            <remarks>
            This method is much more efficient than setting AllowsTransparency to true and using the DropShadow effect,
            as AllowsTransparency involves a huge permormance issue (hardware acceleration is turned off for all the window).
            </remarks>
            <param name="window">Window to which the shadow will be applied</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.WindowEx.HideDropShadow(System.Windows.Window)">
            <summary>
            Removes the drop shaddow from a window
            </summary>
            <param name="window">The window.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.WindowEx.OnWindowSourceInitialized(System.Object,System.EventArgs)">
            <summary>
            Called when the window is done initializing
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.WindowEx.DropShadow(System.Windows.Window)">
            <summary>
            The actual method that makes API calls to drop the shadow to the window
            </summary>
            <param name="window">Window to which the shadow will be applied</param>
            <returns>True if the method succeeded, false if not</returns>
        </member>
        <member name="T:CODE.Framework.Wpf.Controls.EffectActiveStates">
            <summary>
            Indicates when a certain effect shoudl be active
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.EffectActiveStates.Never">
            <summary>
            Never
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.EffectActiveStates.OnlyIfElementActive">
            <summary>
            Only then element the effect applies to is activated
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.EffectActiveStates.Always">
            <summary>
            Always
            </summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Controls.ZoomSlider">
            <summary>
            Slider class used to set zoom levels
            </summary>
            <remarks>
            In zoom scenarios, the value 1 is usually the middle of the slider, while all the way
            to the left is something like .5 and all the way to the right is something like 500
            </remarks>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.ZoomSlider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Wpf.Controls.ZoomSlider"/> class.
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.ZoomSlider.MaximumZoom">
            <summary>
            Maximum zoom factor (example: 500% is 5)
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.ZoomSlider.MaximumZoomProperty">
            <summary>
            Maximum zoom factor (example: 500% is 5)
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.ZoomSlider.MinimumZoom">
            <summary>
            Minimum zoom factor (example: 50% is 0.5)
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.ZoomSlider.MinimumZoomProperty">
            <summary>
            Minimum zoom factor (example: 50% is 0.5)
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.ZoomSlider.ZoomText">
            <summary>
            Text representation of the current zoom level
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.ZoomSlider.ZoomTextProperty">
            <summary>
            Text representation of the current zoom level
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.ZoomSlider.Zoom">
            <summary>
            Actual zoom factor based on the slider value
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.ZoomSlider.ZoomProperty">
            <summary>
            Actual zoom factor based on the slider value
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.ZoomSlider.OnZoomFactorChanged">
            <summary>
            Called when the zoom factor changes (can be overridden in subclasses)
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.ZoomSlider.UpdateChangeIncrement">
            <summary>
            Calculates the change increment of the slider when the user clicks +/- based
            on the current value as well as min/max increments
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.ZoomSlider.UpdateZoomFromValue">
            <summary>
            Calculates the zoom factor from the current value and min/max settings
            </summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Controls.GridEx">
            <summary>
            Special subclassed version of a grid that supports styling column and row sizes
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.GridEx.ColumnWidthsProperty">
            <summary>Attached property to set column widths</summary>
            <remarks>This attached property can be attached to any UI Element to define column widths</remarks>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.GridEx.ColumnWidthsPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handler for column width changes
            </summary>
            <param name="d">Source object</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.GridEx.GetColumnWidths(System.Windows.DependencyObject)">
            <summary>Column widths</summary>
            <param name="obj">Object to set the columns widths on</param>
            <returns>Column width</returns>
            <remarks>This attached property can be attached to any UI Element to define the column width</remarks>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.GridEx.SetColumnWidths(System.Windows.DependencyObject,System.String)">
            <summary>Column width</summary>
            <param name="obj">Object to set the column widths on</param>
            <param name="value">Value to set</param>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.GridEx.RowHeightsProperty">
            <summary>Attached property to set row heights</summary>
            <remarks>This attached property can be attached to any UI Element to define row heights</remarks>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.GridEx.RowHeightsPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handler for row height changes
            </summary>
            <param name="d">Source object</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.GridEx.GetRowHeights(System.Windows.DependencyObject)">
            <summary>Row heights</summary>
            <param name="obj">Object to set the row heights on</param>
            <returns>Column width</returns>
            <remarks>This attached property can be attached to any UI Element to define the row height</remarks>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.GridEx.SetRowHeights(System.Windows.DependencyObject,System.String)">
            <summary>Row heights</summary>
            <param name="obj">Object to set the row heights on</param>
            <param name="value">Value to set</param>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.GridEx.AdjustWidthToParentListItem">
            <summary>If this grid is used within a list box (list item), it can be set to automatically adjust its width to match the exact width available to list items</summary>
            <value><c>true</c> if [adjust width to parent list item]; otherwise, <c>false</c>.</value>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.GridEx.AdjustWidthToParentListItemProperty">
            <summary>If this grid is used within a list box (list item), it can be set to automatically adjust its width to match the exact width available to list items</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.GridEx.AdjustWidthToParentListItemPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>Fires when the adjust width to parent list item property changes</summary>
            <param name="d">The grid this was set on</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.GridEx._listItemWidthBound">
            <summary>Indicates whether the binding to the width of the list item has already been created for the grid</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.GridEx.CreateListItemWidthBinding">
            <summary>Creates a binding to set the grid to the width of the list item</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.GridEx.OnVisualParentChanged(System.Windows.DependencyObject)">
            <summary>Invoked when the parent of this element in the visual tree is changed. Overrides <see cref="M:System.Windows.UIElement.OnVisualParentChanged(System.Windows.DependencyObject)"/>.</summary>
            <param name="oldParent">The old parent element. May be null to indicate that the element did not have a visual parent previously.</param>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.GridEx.UseItemIndex">
            <summary>If this grid is used within a list box (list item), it can automatically expose an item index property that can be used to know if the row is odd or even and the like.</summary>
            <remarks>For this to have any effect, the list itself must have an alternation count set to something other than 0 or 1</remarks>
            <value>True of false</value>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.GridEx.UseItemIndexProperty">
            <summary>If this grid is used within a list box (list item), it can automatically expose an alternation count property that can be used to know if the row is odd or even and the like.</summary>
            <remarks>For this to have any effect, the list itself must have an alternation count set to something other than 0 or 1</remarks>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.GridEx.UseItemIndexPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>Fires when the user alternation count property changes</summary>
            <param name="d">The grid this was set on</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.GridEx.FindAncestor``1(System.Windows.DependencyObject)">
            <summary>Walks the visual tree to find the parent of a certain type</summary>
            <typeparam name="T">Type to search</typeparam>
            <param name="d">Object for which to find the ancestor</param>
            <returns>Object or null</returns>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.GridEx.ItemIndex">
            <summary>If this grid is used within a list box (list item), and the UseAlternationCount property is set to true, this property will tell the alternation count (such as 0 and 1 for odd and even rows).</summary>
            <remarks>For this to have any effect, the list itself must have an alternation count set to something other than 0 or 1</remarks>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.GridEx.ItemIndexProperty">
            <summary>If this grid is used within a list box (list item), and the UseAlternationCount property is set to true, this property will tell the alternation count (such as 0 and 1 for odd and even rows).</summary>
            <remarks>For this to have any effect, the list itself must have an alternation count set to something other than 0 or 1</remarks>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.GridEx.IsOddRow">
            <summary>Indicates whether this grid is used in an item in a list control and that item has an odd row index</summary>
            <remarks>Only works if this grid is used in a data template inside of a listbox</remarks>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.GridEx.IsOddRowProperty">
            <summary>Indicates whether this grid is used in an item in a list control and that item has an odd row index</summary>
            <remarks>Only works if this grid is used in a data template inside of a listbox</remarks>
        </member>
        <member name="P:CODE.Framework.Wpf.Controls.GridEx.ListItemWidth">
            <summary>For internal use only</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.GridEx.ListItemWidthProperty">
            <summary>For internal use only</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.GridEx.OnListItemWidthChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>For internal use only</summary>
            <param name="source">The source.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.GridEx.SetBackground(System.Windows.Controls.Panel,System.Windows.Media.Brush,System.Double,System.Double)">
            <summary>Internal method used to set the background brush on a Grid object</summary>
            <param name="grid">The grid on which to set these values.</param>
            <param name="brush">The brush.</param>
            <param name="lightFactor">The light factor.</param>
            <param name="opacity">The opacity.</param>
            <remarks>Combines BackgroundBrush, BackgroundBrushLightFactor, and BackgroundBrushOpacity to set the Background property</remarks>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.GridEx.BackgroundBrushProperty">
            <summary>Background brush</summary>
            <remarks>This property is similar to the Background property, but can be used in conjunction with BackgroundBrushLightFactor and BackgroundBrushOpacity</remarks>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.GridEx.BackgroundBrushPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>Handler for background brush changed</summary>
            <param name="d">Source object</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.GridEx.GetBackgroundBrush(System.Windows.DependencyObject)">
            <summary>Background brush</summary>
            <returns>Background brush</returns>
            <remarks>This property is similar to the Background property, but can be used in conjunction with BackgroundLightFactor and BackgroundBrushTransparency</remarks>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.GridEx.SetBackgroundBrush(System.Windows.DependencyObject,System.Windows.Media.Brush)">
            <summary>Background brush</summary>
            <remarks>This property is similar to the Background property, but can be used in conjunction with BackgroundLightFactor and BackgroundBrushTransparency</remarks>
            <param name="obj">Object to set the value on</param>
            <param name="value">Value to set</param>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.GridEx.BackgroundBrushLightFactorProperty">
            <summary>Background brush light factor</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.GridEx.BackgroundBrushLightFactorPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>Handler for background brush light factor changed</summary>
            <param name="d">Source object</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.GridEx.GetBackgroundBrushLightFactor(System.Windows.DependencyObject)">
            <summary>Background brush light factor</summary>
            <returns>Background brush light factor</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.GridEx.SetBackgroundBrushLightFactor(System.Windows.DependencyObject,System.Double)">
            <summary>Background brush light factor</summary>
            <param name="obj">Object to set the value on</param>
            <param name="value">Value to set</param>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.GridEx.BackgroundBrushOpacityProperty">
            <summary>Background brush light factor</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.GridEx.BackgroundBrushOpacityPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>Handler for background brush light factor changed</summary>
            <param name="d">Source object</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.GridEx.GetBackgroundBrushOpacity(System.Windows.DependencyObject)">
            <summary>Background brush opacity</summary>
            <returns>Background brush opacity</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.GridEx.SetBackgroundBrushOpacity(System.Windows.DependencyObject,System.Double)">
            <summary>Background brush opacity</summary>
            <param name="obj">Object to set the value on</param>
            <param name="value">Value to set</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.GridEx.GetEnableRenderTransformMouseMove(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            When set to true, this property enables mouse moving of the element using render transforms (translate transform)
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.GridEx.SetEnableRenderTransformMouseMove(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            When set to true, this property enables mouse moving of the element using render transforms (translate transform)
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Controls.GridEx.EnableRenderTransformMouseMoveProperty">
            <summary>
            When set to true, this property enables mouse moving of the element using render transforms (translate transform)
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Controls.GridEx.OnEnableRenderTransformMouseMoveChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Fires when the EnableRenderTransformMouseMove property changes
            </summary>
            <param name="d">The d.</param>
            <param name="args">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:CODE.Framework.Wpf.Interfaces.IHorizontalOffset">
            <summary>
            Interfaced to express a UI element's intrinsic ability to render itself with a horizontal offset (for things like scrolling)
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Interfaces.IHorizontalOffset.Offset">
            <summary>
            The actual horizontal offset
            </summary>
            <remarks>The offset may be beyond the extent of the element in scenarios where multiple offset controls coexist</remarks>
        </member>
        <member name="P:CODE.Framework.Wpf.Interfaces.IHorizontalOffset.ExtentWidth">
            <summary>
            The total width of the element (including visible and invisible parts)
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Interfaces.IHorizontalOffset.ViewPortWidth">
            <summary>
            The width of the visible part of the element
            </summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Interfaces.IInvalidated">
            <summary>
            This interface defines events that can fire on various invalidation events
            </summary>
        </member>
        <member name="E:CODE.Framework.Wpf.Interfaces.IInvalidated.ArrangeInvalidated">
            <summary>
            Fires when InvalidateArrange() is called
            </summary>
        </member>
        <member name="E:CODE.Framework.Wpf.Interfaces.IInvalidated.MeasureInvalidated">
            <summary>
            Fires when InvalidateMeasure() is called
            </summary>
        </member>
        <member name="E:CODE.Framework.Wpf.Interfaces.IInvalidated.VisualInvalidated">
            <summary>
            Fires when InvalidateVisual() is called
            </summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Interfaces.ILazyLoad">
            <summary>Lazy load interface</summary>
            <remarks>This interface can be used vor various lazy load (a.k.a. "on demand load") scenarios</remarks>
        </member>
        <member name="P:CODE.Framework.Wpf.Interfaces.ILazyLoad.HasLoaded">
            <summary>
            Indicates whether the control has loaded successfully
            </summary>
            <remarks>Should usually return true after the Load() method has been called the first time.</remarks>
        </member>
        <member name="M:CODE.Framework.Wpf.Interfaces.ILazyLoad.Load">
            <summary>
            This method gets invoked whenever the object needs to load.
            </summary>
            <remarks>Typically, the implementation of this method should set HasLoaded to true</remarks>
        </member>
        <member name="T:CODE.Framework.Wpf.Interfaces.ISourceInformation">
            <summary>
            Interface to identify the source of some object or element
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Interfaces.ISourceInformation.OriginalLoadLocation">
            <summary>
            Location an element was originally loaded from
            </summary>
            <value>The original document load location.</value>
        </member>
        <member name="T:CODE.Framework.Wpf.Interfaces.ITitle">
            <summary>
            Generic title interface
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Interfaces.ITitle.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>The title.</value>
        </member>
        <member name="T:CODE.Framework.Wpf.Interfaces.IUserInterfaceActivation">
            <summary>
            This interface can be implemented by UI elements who desire to support activation notification
            </summary>
        </member>
        <member name="E:CODE.Framework.Wpf.Interfaces.IUserInterfaceActivation.Activated">
            <summary>
            Occurs when the user interface got activated
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Interfaces.IUserInterfaceActivation.RaiseActivated">
            <summary>
            Raises the activated events.
            </summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Layout.BidirectionalStackPanel">
            <summary>
            This control behaves much like a stack panel but arranges items not just top-to-bottom or left-to-right,
            but it can at the same time arrange items at the opposite end of the control based on horizontal and
            vertical alignment settings
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.BidirectionalStackPanel.ChildItemMarginProperty">
            <summary>Additional margin added to each child item in this stack</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.BidirectionalStackPanel.IgnoreChildItemBottomMarginForTextElementsProperty">
            <summary>Defines whether the extra bottom child item margin for text elements (labels and textblocks) should be ignored</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.BidirectionalStackPanel.LastTopItemFillsSpaceProperty">
            <summary>Indicates whether the last top (or left) item fills the remaining space</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.BidirectionalStackPanel.LastTopItemFillMarginProperty">
            <summary>Defines how much of a margin is to be left below the last top item in case the last top item is set to fill the available space</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.BidirectionalStackPanel.ScrollBarModeProperty">
            <summary>Defines whether the stack panel automatically handles scrollbars</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.BidirectionalStackPanel.ScrollBarStyle">
            <summary>Style used by the scroll bars</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.BidirectionalStackPanel.ScrollBarStyleProperty">
            <summary>Style used by the scroll bars</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.BidirectionalStackPanel.ScrollBarStyleChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            This method gets called whenever the ScrollBarStyle property is updated
            </summary>
            <param name="d">Dependency object</param>
            <param name="args">Arguments</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.BidirectionalStackPanel.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.BidirectionalStackPanel.ChildItemMargin">
            <summary>Additional margin added to each child item in this stack</summary>
            <remarks>Note that this margin is added to whatever native margin the control may already have</remarks>
            <value>The child item margin.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.BidirectionalStackPanel.IgnoreChildItemBottomMarginForTextElements">
            <summary>Defines whether the extra bottom child item margin for text elements (labels and textblocks) should be ignored</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.BidirectionalStackPanel.LastTopItemFillsSpace">
            <summary>Indicates whether the last top (or left) item fills the remaining space</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.BidirectionalStackPanel.LastTopItemFillMargin">
            <summary>Defines how much of a margin is to be left below the last top item in case the last top item is set to fill the available space</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.BidirectionalStackPanel.ScrollBarMode">
            <summary>Defines whether the stack panel automatically handles scrollbars</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.BidirectionalStackPanel.InvalidateAllVisuals(System.Windows.DependencyObject)">
            <summary>Invalidates everything in the UI and forces a refresh</summary>
            <param name="source">Reference to an instance of the form itself</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.BidirectionalStackPanel.MeasureOverride(System.Windows.Size)">
            <summary>
            Measures the child elements of a <see cref="T:System.Windows.Controls.StackPanel"/> in anticipation of arranging them during the <see cref="M:System.Windows.Controls.StackPanel.ArrangeOverride(System.Windows.Size)"/> pass.
            </summary>
            <param name="constraint">An upper limit <see cref="T:System.Windows.Size"/> that should not be exceeded.</param>
            <returns>
            The <see cref="T:System.Windows.Size"/> that represents the desired size of the element.
            </returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.BidirectionalStackPanel.ArrangeOverride(System.Windows.Size)">
            <summary>
            Arranges the content of a <see cref="T:System.Windows.Controls.StackPanel"/> element.
            </summary>
            <param name="arrangeSize">The <see cref="T:System.Windows.Size"/> that this element should use to arrange its child elements.</param>
            <returns>
            The <see cref="T:System.Windows.Size"/> that represents the arranged size of this <see cref="T:System.Windows.Controls.StackPanel"/> element and its child elements.
            </returns>
        </member>
        <member name="T:CODE.Framework.Wpf.Layout.BidirectionalStackPanelScrollBarModes">
            <summary>
            Defines scroll bar behavior (visibility) for the bidirectional stack panel
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.BidirectionalStackPanelScrollBarModes.None">
            <summary>
            No scroll bars shall be shown
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.BidirectionalStackPanelScrollBarModes.Automatic">
            <summary>
            Scroll bar handling is automatic and scroll bars will show up as needed
            </summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Layout.BidirectionalStackPanelScrollAdorner">
            <summary>Adorner UI for scrollbars of the bidirectional stack panel control</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.BidirectionalStackPanelScrollAdorner.#ctor(CODE.Framework.Wpf.Layout.BidirectionalStackPanel,System.Windows.Controls.Primitives.ScrollBar,System.Windows.Controls.Primitives.ScrollBar)">
            <summary>Constructor</summary>
            <param name="adornedElement">Adorned element</param>
            <param name="horizontal">The horizontal scrollbar.</param>
            <param name="vertical">The vertical scrollbar.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.BidirectionalStackPanelScrollAdorner.MeasureOverride(System.Windows.Size)">
            <summary>Implements any custom measuring behavior for the adorner.</summary>
            <param name="constraint">A size to constrain the adorner to.</param>
            <returns>A <see cref="T:System.Windows.Size"/> object representing the amount of layout space needed by the adorner.</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.BidirectionalStackPanelScrollAdorner.ArrangeOverride(System.Windows.Size)">
            <summary>When overridden in a derived class, positions child elements and determines a size for a <see cref="T:System.Windows.FrameworkElement"/> derived class.</summary>
            <param name="finalSize">The final area within the parent that this element should use to arrange itself and its children.</param>
            <returns>The actual size used.</returns>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.BidirectionalStackPanelScrollAdorner.VisualChildrenCount">
            <summary>Gets the number of visual child elements within this element.</summary>
            <returns>The number of visual child elements for this element.</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.BidirectionalStackPanelScrollAdorner.GetVisualChild(System.Int32)">
            <summary>Overrides <see cref="M:System.Windows.Media.Visual.GetVisualChild(System.Int32)"/>, and returns a child at the specified index from a collection of child elements.</summary>
            <param name="index">The zero-based index of the requested child element in the collection.</param>
            <returns>The requested child element. This should not return null; if the provided index is out of range, an exception is thrown.</returns>
        </member>
        <member name="T:CODE.Framework.Wpf.Layout.ColumnPanel">
            <summary>
            This automatic layout control can arrange elements in columns
            </summary>
            <remarks>
            This control can be seen as a super-simple Grid control that only supports columns and only 
            0-margin and vertical and horizontal stretch alignments. The advantage of this control is performance.
            </remarks>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.ColumnPanel.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.ColumnPanel.ColumnDefinitions">
            <summary>Column definitions</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.ColumnPanel.ColumnDefinitionsProperty">
            <summary>Column definitions</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.ColumnPanel.GetColumn(System.Windows.DependencyObject)">
            <summary>Column assignment</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.ColumnPanel.SetColumn(System.Windows.DependencyObject,System.Int32)">
            <summary>Column assignment</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.ColumnPanel.ColumnProperty">
            <summary>Column assignment</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.ColumnPanel.MeasureOverride(System.Windows.Size)">
            <summary>
            When overridden in a derived class, measures the size in layout required for child elements and determines a size for the <see cref="T:System.Windows.FrameworkElement" />-derived class.
            </summary>
            <param name="availableSize">The available size that this element can give to child elements. Infinity can be specified as a value to indicate that the element will size to whatever content is available.</param>
            <returns>The size that this element determines it needs during layout, based on its calculations of child element sizes.</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.ColumnPanel.ArrangeOverride(System.Windows.Size)">
            <summary>
            When overridden in a derived class, positions child elements and determines a size for a <see cref="T:System.Windows.FrameworkElement" /> derived class.
            </summary>
            <param name="finalSize">The final area within the parent that this element should use to arrange itself and its children.</param>
            <returns>The actual size used.</returns>
        </member>
        <member name="T:CODE.Framework.Wpf.Layout.ColumnPanelColumnDefinition">
            <summary>
            Specialized column definition for ColumnPanel control
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.ColumnPanelColumnDefinition.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Wpf.Layout.ColumnPanelColumnDefinition"/> class.
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.ColumnPanelColumnDefinition.#ctor(System.Windows.Controls.ColumnDefinition)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Wpf.Layout.ColumnPanelColumnDefinition"/> class.
            </summary>
            <param name="column">The column.</param>
        </member>
        <member name="E:CODE.Framework.Wpf.Layout.ColumnPanelColumnDefinition.WidthChanged">
            <summary>
            Occurs when the column width changes
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.ColumnPanelColumnDefinition.AutoShowChildElement">
            <summary>
            Indicates whether child elements (cell contents) should be made visible automatically when the cell is shown
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.ColumnPanelColumnDefinition.Visible">
            <summary>
            Gets or sets the visible of the column.
            </summary>
            <value>The visible.</value>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.ColumnPanelColumnDefinition.VisibleProperty">
            <summary>
            Gets or sets the visible of the column.
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.ColumnPanelColumnDefinition.ReadOnlyText">
            <summary>
            Read only text property used as column content by some renderers
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.ColumnPanelColumnDefinition.ReadOnlyTextProperty">
            <summary>
            Read only text property used as column content by some renderers
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.ColumnPanelColumnDefinition.OnReadOnlyTextChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Invoked when read-only text changes
            </summary>
            <param name="d">The dependency object the text changes on</param>
            <param name="args">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="E:CODE.Framework.Wpf.Layout.ColumnPanelColumnDefinition.ReadOnlyTextChanged">
            <summary>
            Occurs when read-only text changes
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.ColumnPanelColumnDefinition.ReadOnlyTextAlignment">
            <summary>
            Desired text alignment for read-only column content (note: this is only supported by some rederers)
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.ColumnPanelColumnDefinition.ReadOnlyTextAlignmentProperty">
            <summary>
            Desired text alignment for read-only column content (note: this is only supported by some rederers)
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.ColumnPanelColumnDefinition.OnReadOnlyTextAlignmentChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Occurs when the read-only text alignment changes
            </summary>
            <param name="d">The d.</param>
            <param name="args">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="E:CODE.Framework.Wpf.Layout.ColumnPanelColumnDefinition.ReadOnlyTextAlignmentChanged">
            <summary>
            Occurs when read-only text alignment changes
            </summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Layout.ColumnPanelColumnsCollection">
            <summary>
            Spezialized collection class for column definitions on the ColumnPanel class
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.ColumnPanelColumnsCollection.#ctor(CODE.Framework.Wpf.Layout.ColumnPanel)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Wpf.Layout.ColumnPanelColumnsCollection"/> class.
            </summary>
            <param name="parent">The parent.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.ColumnPanelColumnsCollection.Add(System.Windows.Controls.ColumnDefinition)">
            <summary>
            Adds the specified column.
            </summary>
            <param name="column">The column.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.ColumnPanelColumnsCollection.Add(CODE.Framework.Wpf.Layout.ColumnPanelColumnDefinition)">
            <summary>
            Adds the specified column.
            </summary>
            <param name="column">The column.</param>
        </member>
        <member name="T:CODE.Framework.Wpf.Layout.DockContainer">
            <summary>
            This class can be used to host various controls as dockable elements
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.DockContainer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Wpf.Layout.DockContainer"/> class.
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.DockContainer._mainDockWell">
            <summary>List of UI elements used in the main dock well</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.DockContainer.MainDockWell">
            <summary>List of UI elements used in the main dock well</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.DockContainer._secondaryDockWell">
            <summary>List of UI elements used in the secondary dock well</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.DockContainer.SecondaryDockWell">
            <summary>List of UI elements used in the secondary dock well</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.DockContainer._hotAreas">
            <summary>'Hot' areas within the panel (these areas have special mouse actions tied to them)</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.DockContainer.DockPositionProperty">
            <summary>Dock position attached property</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.DockContainer.GetDockPosition(System.Windows.DependencyObject)">
            <summary>Gets the dock position</summary>
            <param name="obj">The object.</param>
            <returns>DockPosition.</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.DockContainer.SetDockPosition(System.Windows.DependencyObject,CODE.Framework.Wpf.Layout.DockPosition)">
            <summary>Sets the dock position. </summary>
            <param name="obj">The object.</param>
            <param name="value">The value.</param>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.DockContainer.TitleProperty">
            <summary>Title property used for docked elements</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.DockContainer.GetTitle(System.Windows.DependencyObject)">
            <summary>Title property used for docked elements</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.DockContainer.SetTitle(System.Windows.DependencyObject,System.String)">
            <summary>Title property used for docked elements</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.DockContainer.SplitterWidth">
            <summary>Width of the splitter bar</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.DockContainer.SplitterWidthProperty">
            <summary>Width of the splitter bar</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.DockContainer.SplitterHeight">
            <summary>Height of the splitter bar</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.DockContainer.SplitterHeightProperty">
            <summary>Height of the splitter bar</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.DockContainer.DockWellRenderer">
            <summary>Gets or sets the dock well renderer object.</summary>
            <value>The dock well renderer.</value>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.DockContainer.DockWellRendererProperty">
            <summary>Gets or sets the dock well renderer object.</summary>
            <value>The dock well renderer.</value>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.DockContainer.InvalidateAll(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>Invalidates arrange and measure</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.DockContainer.MeasureOverride(System.Windows.Size)">
            <summary>
            When overridden in a derived class, measures the size in layout required for child elements and determines a size for the <see cref="T:System.Windows.FrameworkElement" />-derived class.
            </summary>
            <param name="availableSize">The available size that this element can give to child elements. Infinity can be specified as a value to indicate that the element will size to whatever content is available.</param>
            <returns>The size that this element determines it needs during layout, based on its calculations of child element sizes.</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.DockContainer.ArrangeOverride(System.Windows.Size)">
            <summary>
            When overridden in a derived class, positions child elements and determines a size for a <see cref="T:System.Windows.FrameworkElement" /> derived class.
            </summary>
            <param name="finalSize">The final area within the parent that this element should use to arrange itself and its children.</param>
            <returns>The actual size used.</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.DockContainer.OnMouseMove(System.Windows.Input.MouseEventArgs)">
            <summary>
            Invoked when an unhandled MouseMove attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</param>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.DockContainer.MouseDownAndMoveOverride">
            <summary>If this delegate is set, this delegate will receive mouse move events, rather than letting the standard mouse move event handler handle it</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.DockContainer.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Invoked when an unhandled <see cref="E:System.Windows.UIElement.MouseLeftButtonDown" /> routed event is raised on this element. Implement this method to add class handling for this event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. The event data reports that the left mouse button was pressed.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.DockContainer.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Invoked when an unhandled <see cref="E:System.Windows.UIElement.MouseLeftButtonUp" /> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. The event data reports that the left mouse button was released.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.DockContainer.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
            Draws the content of a <see cref="T:System.Windows.Media.DrawingContext" /> object during the render pass of a <see cref="T:System.Windows.Controls.Panel" /> element.
            </summary>
            <param name="dc">The <see cref="T:System.Windows.Media.DrawingContext" /> object to draw.</param>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.DockContainer.LeftDockWidth">
            <summary>Width of the left dock area</summary>
            <value>The width of the left dock.</value>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.DockContainer.LeftDockWidthProperty">
            <summary>Width of the left dock area</summary>
            <value>The width of the left dock.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.DockContainer.RightDockWidth">
            <summary>Width of the right dock area</summary>
            <value>The width of the right dock.</value>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.DockContainer.RightDockWidthProperty">
            <summary>Width of the right dock area</summary>
            <value>The width of the right dock.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.DockContainer.TopDockHeight">
            <summary>Height of the top dock area</summary>
            <value>The height of the top dock.</value>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.DockContainer.TopDockHeightProperty">
            <summary>Height of the top dock area</summary>
            <value>The height of the top dock.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.DockContainer.BottomDockHeight">
            <summary>Height of the bottom dock area</summary>
            <value>The height of the bottom dock.</value>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.DockContainer.BottomDockHeightProperty">
            <summary>Height of the bottom dock area</summary>
            <value>The height of the bottom dock.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.DockContainer.MainDockSelectedIndex">
            <summary>Index of the main selected item in the dock well</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.DockContainer.MainDockSelectedIndexProperty">
            <summary>Index of the main selected item in the dock well</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.DockContainer.LeftDockSelectedIndex">
            <summary>Index of the left selected item in the dock well</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.DockContainer.LeftDockSelectedIndexProperty">
            <summary>Index of the left selected item in the dock well</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.DockContainer.RightDockSelectedIndex">
            <summary>Index of the right selected item in the dock well</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.DockContainer.RightDockSelectedIndexProperty">
            <summary>Index of the right selected item in the dock well</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.DockContainer.TopDockSelectedIndex">
            <summary>Index of the top selected item in the dock well</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.DockContainer.TopDockSelectedIndexProperty">
            <summary>Index of the top selected item in the dock well</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.DockContainer.BottomDockSelectedIndex">
            <summary>Index of the bottom selected item in the dock well</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.DockContainer.BottomDockSelectedIndexProperty">
            <summary>Index of the bottom selected item in the dock well</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.DockContainer.OrganizeUIElements">
            <summary>
            Arranges UI elements into their wells
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.DockContainer.AddHotArea(CODE.Framework.Wpf.Layout.HotArea)">
            <summary>Adds a hot area to the overall list</summary>
            <param name="hotArea">The hot area.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.DockContainer.FindTemplatedItemsControl">
            <summary>See if this current control is used as an items panel to lay out another control. If so, this method returns the actual control</summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Layout.DockedUIElement">
            <summary>
            Reference container for docked UI elements
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.DockedUIElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Wpf.Layout.DockedUIElement"/> class.
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.DockedUIElement.Element">
            <summary>Reference to the actual UI element</summary>
            <value>The element.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.DockedUIElement.Position">
            <summary>Gets or sets the dock position.</summary>
            <value>The position.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.DockedUIElement.IsDocked">
            <summary>Indicates whether the object is docked or not (free floating)</summary>
            <value><c>true</c> if this instance is docked; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.DockedUIElement.Title">
            <summary>Title property used for docked elements</summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Layout.DockPosition">
            <summary>Position of docked UI element</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.DockPosition.Top">
            <summary>
            Top
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.DockPosition.Bottom">
            <summary>
            Bottom
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.DockPosition.Left">
            <summary>
            Left
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.DockPosition.Right">
            <summary>
            Right
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.DockPosition.Main">
            <summary>
            Main dock well
            </summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Layout.IDockWellRenderer">
            <summary>
            Common functionality for objects used to render document wells
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.IDockWellRenderer.MainWellHeaderHeight">
            <summary>
            Main well header height
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.IDockWellRenderer.DockWellHeaderHeight">
            <summary>
            Dock well header height
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.IDockWellRenderer.DockWellFooterHeight">
            <summary>
            Dock well footer height
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.IDockWellRenderer.GetMainWellClientRect">
            <summary>
            Returns the size of the client area (the area available for the actually hosted control, which excludes things like the area needed for the header) of the dock well
            </summary>
            <returns>Size.</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.IDockWellRenderer.GetDockWellClientRect(CODE.Framework.Wpf.Layout.DockPosition)">
            <summary>
            Returns the size of the client area (the area available for the actually hosted control, which excludes things like the area needed for the header) of the dock well
            </summary>
            <param name="position">The position.</param>
            <returns>Size.</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.IDockWellRenderer.GetMainWellRect">
            <summary>Returns the size of the client area (the area available for the actually hosted control, as well as other chrome) of the dock well</summary>
            <returns>Size.</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.IDockWellRenderer.GetDockWellRect(CODE.Framework.Wpf.Layout.DockPosition)">
            <summary>Returns the size of the whole area (the area available for the actually hosted control, as well as other chrome) of the dock well</summary>
            <param name="position">The position.</param>
            <returns>Size.</returns>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.IDockWellRenderer.LeftDockWidth">
            <summary>Width of the left dock well</summary>
            <value>The width of the left dock.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.IDockWellRenderer.RightDockWidth">
            <summary>Width of the right dock well</summary>
            <value>The width of the right dock.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.IDockWellRenderer.TopDockHeight">
            <summary>Height of the top dock well</summary>
            <value>The height of the top dock.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.IDockWellRenderer.BottomDockHeight">
            <summary>Height of the bottom dock well</summary>
            <value>The height of the bottom dock.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.IDockWellRenderer.TotalHeight">
            <summary>Total height of the dock panel</summary>
            <value>The total height.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.IDockWellRenderer.TotalWidth">
            <summary>Total width of the dock panel</summary>
            <value>The total width.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.IDockWellRenderer.SplitterWidth">
            <summary>
            Width of the splitter element
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.IDockWellRenderer.SplitterHeight">
            <summary>
            Height of the splitter element
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.IDockWellRenderer.DrawChrome(System.Windows.Media.DrawingContext)">
            <summary> Draws the actual chrome around the docked objects </summary>
            <param name="dc">Drawing context</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.IDockWellRenderer.DrawDockWindowChrome(System.Windows.Media.DrawingContext,System.Collections.Generic.List{CODE.Framework.Wpf.Layout.DockedUIElement},System.Int32,System.Windows.Rect,System.Boolean,System.Windows.Point)">
            <summary>Draws the chrome for a window that is being dragged</summary>
            <param name="dc">The drawing context.</param>
            <param name="elements">The docked elements.</param>
            <param name="selectedIndex">Index of the selected dock element.</param>
            <param name="areaRect">The area rectangle used to draw the chrome.</param>
            <param name="showTabs">Defines whether tabs headers should be shown.</param>
            <param name="firstTabOffset">In special cases, the first tab may be offset by a certain margin</param>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.IDockWellRenderer.MainElements">
            <summary>Docked main elements</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.IDockWellRenderer.LeftElements">
            <summary>Docked left elements</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.IDockWellRenderer.TopElements">
            <summary>Docked top elements</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.IDockWellRenderer.RightElements">
            <summary>Docked right elements</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.IDockWellRenderer.BottomElements">
            <summary>Docked bottom elements</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.IDockWellRenderer.MainSelectedIndex">
            <summary>Index of the selected element in the main well</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.IDockWellRenderer.LeftSelectedIndex">
            <summary>Index of the selected element in the left well</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.IDockWellRenderer.TopSelectedIndex">
            <summary>Index of the selected element in the top well</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.IDockWellRenderer.RightSelectedIndex">
            <summary>Index of the selected element in the right well</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.IDockWellRenderer.BottomSelectedIndex">
            <summary>Index of the selected element in the bottom well</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.IDockWellRenderer.SetDockContainer(CODE.Framework.Wpf.Layout.DockContainer)">
            <summary>Sets a reference to the actual doc container</summary>
            <param name="container">Container</param>
        </member>
        <member name="T:CODE.Framework.Wpf.Layout.StandardDockWellRenderer">
            <summary>
            Standard dock well renderer
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.StandardDockWellRenderer.MainWellHeaderHeight">
            <summary>
            Gets the height of the header.
            </summary>
            <value>The height of the header.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.StandardDockWellRenderer.DockWellHeaderHeight">
            <summary>
            Gets the height of the dock well header.
            </summary>
            <value>The height of the dock well header.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.StandardDockWellRenderer.DockWellFooterHeight">
            <summary>
            Gets the height of the dock well footer.
            </summary>
            <value>The height of the dock well footer.</value>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.StandardDockWellRenderer.GetMainWellClientRect">
            <summary>
            Returns the size of the client area (the area available for the actually hosted control, which excludes things like the area needed for the header) of the dock well
            </summary>
            <returns>Size.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.StandardDockWellRenderer.GetDockWellClientRect(CODE.Framework.Wpf.Layout.DockPosition)">
            <summary>
            Returns the size of the client area (the area available for the actually hosted control, which excludes things like the area needed for the header) of the dock well
            </summary>
            <param name="position">The position.</param>
            <returns>Size.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.StandardDockWellRenderer.GetMainWellRect">
            <summary>
            Returns the size of the client area (the area available for the actually hosted control, as well as other chrome) of the dock well
            </summary>
            <returns>Size.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.StandardDockWellRenderer.GetDockWellRect(CODE.Framework.Wpf.Layout.DockPosition)">
            <summary>
            Returns the size of the whole area (the area available for the actually hosted control, as well as other chrome) of the dock well
            </summary>
            <param name="position">The position.</param>
            <returns>Size.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.StandardDockWellRenderer.NewRect(System.Double,System.Double,System.Double,System.Double)">
            <summary>Returns a new Rect and makes sure the values used for it are not invalid</summary>
            <param name="x">X</param>
            <param name="y">Y</param>
            <param name="width">Width.</param>
            <param name="height">Height.</param>
            <returns>Rect.</returns>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.StandardDockWellRenderer.LeftDockWidth">
            <summary>
            Width of the left dock well
            </summary>
            <value>The width of the left dock.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.StandardDockWellRenderer.RightDockWidth">
            <summary>
            Width of the right dock well
            </summary>
            <value>The width of the right dock.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.StandardDockWellRenderer.TopDockHeight">
            <summary>
            Height of the top dock well
            </summary>
            <value>The height of the top dock.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.StandardDockWellRenderer.BottomDockHeight">
            <summary>
            Height of the bottom dock well
            </summary>
            <value>The height of the bottom dock.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.StandardDockWellRenderer.TotalHeight">
            <summary>
            Total height of the dock panel
            </summary>
            <value>The total height.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.StandardDockWellRenderer.TotalWidth">
            <summary>
            Total width of the dock panel
            </summary>
            <value>The total width.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.StandardDockWellRenderer.SplitterWidth">
            <summary>
            Width of the splitter element
            </summary>
            <value>The width of the splitter.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.StandardDockWellRenderer.SplitterHeight">
            <summary>
            Height of the splitter element
            </summary>
            <value>The height of the splitter.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.StandardDockWellRenderer.MainElements">
            <summary>
            Docked main elements
            </summary>
            <value>The main elements.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.StandardDockWellRenderer.LeftElements">
            <summary>
            Docked left elements
            </summary>
            <value>The left elements.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.StandardDockWellRenderer.TopElements">
            <summary>
            Docked top elements
            </summary>
            <value>The top elements.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.StandardDockWellRenderer.RightElements">
            <summary>
            Docked right elements
            </summary>
            <value>The right elements.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.StandardDockWellRenderer.BottomElements">
            <summary>
            Docked bottom elements
            </summary>
            <value>The bottom elements.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.StandardDockWellRenderer.MainSelectedIndex">
            <summary>
            Index of the selected element in the main well
            </summary>
            <value>The index of the main selected.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.StandardDockWellRenderer.LeftSelectedIndex">
            <summary>
            Index of the selected element in the left well
            </summary>
            <value>The index of the left selected.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.StandardDockWellRenderer.TopSelectedIndex">
            <summary>
            Index of the selected element in the top well
            </summary>
            <value>The index of the top selected.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.StandardDockWellRenderer.RightSelectedIndex">
            <summary>
            Index of the selected element in the right well
            </summary>
            <value>The index of the right selected.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.StandardDockWellRenderer.BottomSelectedIndex">
            <summary>
            Index of the selected element in the bottom well
            </summary>
            <value>The index of the bottom selected.</value>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.StandardDockWellRenderer.SetDockContainer(CODE.Framework.Wpf.Layout.DockContainer)">
            <summary>
            Sets a reference to the actual doc container
            </summary>
            <param name="container">Container</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.StandardDockWellRenderer.DrawChrome(System.Windows.Media.DrawingContext)">
            <summary> Draws the actual chrome around the docked objects </summary>
            <param name="dc">Drawing context</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.StandardDockWellRenderer.DrawDockWindowChrome(System.Windows.Media.DrawingContext,System.Collections.Generic.List{CODE.Framework.Wpf.Layout.DockedUIElement},System.Int32,System.Windows.Rect,System.Boolean,System.Windows.Point)">
            <summary>
            Draws the chrome for a window that is being dragged
            </summary>
            <param name="dc">The drawing context.</param>
            <param name="elements">The docked elements.</param>
            <param name="selectedIndex">Index of the selected dock element.</param>
            <param name="clientRect">The client area.</param>
            <param name="showTabs">Defines whether tabs headers should be shown.</param>
            <param name="firstTabOffset">In special cases, the first tab may be offset by a certain margin</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.StandardDockWellRenderer.DrawDockWellChrome(System.Windows.Media.DrawingContext,System.Collections.Generic.List{CODE.Framework.Wpf.Layout.DockedUIElement},System.Windows.Rect,System.Int32,System.Boolean,System.Windows.Point)">
            <summary>Draws the chrome around a dock well</summary>
            <param name="dc">The drawing context.</param>
            <param name="elements">The elements.</param>
            <param name="areaRect">The area rect.</param>
            <param name="selectedIndex">Index of the selected.</param>
            <param name="showTabs">Defines whether tabs headers should be shown.</param>
            <param name="firstTabOffset">In special cases, the first tab may be offset by a certain margin</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.StandardDockWellRenderer.DrawMainWellChrome(System.Windows.Media.DrawingContext)">
            <summary>Draws the chrome around the main well.</summary>
            <param name="dc">The drawing context.</param>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.StandardDockWellRenderer.MainWellHeaderBackgroundBrush">
            <summary>Brush used to render the tab header of the main well</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.StandardDockWellRenderer.MainWellHeaderBackgroundBrushProperty">
            <summary>Brush used to render the tab header of the main well</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.StandardDockWellRenderer.MainWellBorderBrush">
            <summary>Border color of the main well</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.StandardDockWellRenderer.MainWellBorderBrushProperty">
            <summary>Border color of the main well</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.StandardDockWellRenderer.DockWellBorderBrush">
            <summary>Border color of the dock well</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.StandardDockWellRenderer.DockWellBorderBrushProperty">
            <summary>Border color of the dock well</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.StandardDockWellRenderer.DockWellSelectedFooterBackgroundBrush">
            <summary>Background color of the active footer tab in the dock well</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.StandardDockWellRenderer.DockWellSelectedFooterBackgroundBrushProperty">
            <summary>Background color of the active footer tab in the dock well</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.StandardDockWellRenderer.MainWellHeaderForegroundBrush">
            <summary>Foreground brush for unselected headers</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.StandardDockWellRenderer.MainWellHeaderForegroundBrushProperty">
            <summary>Foreground brush for unselected headers</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.StandardDockWellRenderer.DockWellHeaderFlourishBrush">
            <summary>Brush used to fill the empty space in the header</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.StandardDockWellRenderer.DockWellHeaderFlourishBrushProperty">
            <summary>Brush used to fill the empty space in the header</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.StandardDockWellRenderer.DockWellHeaderBackgroundBrush">
            <summary>Brush used to fill the docked header</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.StandardDockWellRenderer.DockWellHeaderBackgroundBrushProperty">
            <summary>Brush used to fill the docked header</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.StandardDockWellRenderer.DockWellActivePageBackgroundBrush">
            <summary>Brush used to fill the docked active page</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.StandardDockWellRenderer.DockWellActivePageBackgroundBrushProperty">
            <summary>Brush used to fill the docked active page</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.StandardDockWellRenderer.DockWellHeaderForegroundBrush">
            <summary>Foreground brush for unselected dock headers</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.StandardDockWellRenderer.DockWellHeaderForegroundBrushProperty">
            <summary>Foreground brush for unselected dock headers</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.StandardDockWellRenderer.DockWellFooterForegroundBrush">
            <summary>Foreground brush for unselected dock footers</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.StandardDockWellRenderer.DockWellFooterForegroundBrushProperty">
            <summary>Foreground brush for unselected dock footers</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.StandardDockWellRenderer.DockWellSelectedFooterForegroundBrush">
            <summary>Foreground brush for selected dock footers</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.StandardDockWellRenderer.DockWellSelectedFooterForegroundBrushProperty">
            <summary>Foreground brush for selected dock footers</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.StandardDockWellRenderer.MainWellSelectedHeaderForegroundBrush">
            <summary>Foreground brush for unselected headers</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.StandardDockWellRenderer.MainWellSelectedHeaderForegroundBrushProperty">
            <summary>Foreground brush for unselected headers</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.StandardDockWellRenderer.MainWellHeaderFontSize">
            <summary>Font size for the main well header</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.StandardDockWellRenderer.MainWellHeaderFontSizeProperty">
            <summary>Font size for the main well header</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.StandardDockWellRenderer.MainWellHeaderFontFamily">
            <summary>Font family used for the main well header</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.StandardDockWellRenderer.MainWellHeaderFontFamilyProperty">
            <summary>Font family used for the main well header</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.StandardDockWellRenderer.MainWellHeaderFontStyle">
            <summary>Font style used for the main well header</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.StandardDockWellRenderer.MainWellHeaderFontStyleProperty">
            <summary>Font style used for the main well header</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.StandardDockWellRenderer.MainWellHeaderFontWeight">
            <summary>Font weight used for the main well header</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.StandardDockWellRenderer.MainWellHeaderFontWeightProperty">
            <summary>Font weight used for the main well header</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.StandardDockWellRenderer.DockWellHeaderFontSize">
            <summary>Font size for the dock well header</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.StandardDockWellRenderer.DockWellHeaderFontSizeProperty">
            <summary>Font size for the dock well header</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.StandardDockWellRenderer.DockWellHeaderFontFamily">
            <summary>Font family used for the dock well header</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.StandardDockWellRenderer.DockWellHeaderFontFamilyProperty">
            <summary>Font family used for the dock well header</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.StandardDockWellRenderer.DockWellHeaderFontStyle">
            <summary>Font style used for the dock well header</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.StandardDockWellRenderer.DockWellHeaderFontStyleProperty">
            <summary>Font style used for the dock well header</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.StandardDockWellRenderer.DockWellHeaderFontWeight">
            <summary>Font weight used for the dock well header</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.StandardDockWellRenderer.DockWellHeaderFontWeightProperty">
            <summary>Font weight used for the dock well header</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.StandardDockWellRenderer.DockWellFooterFontSize">
            <summary>Font size for the dock well footer</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.StandardDockWellRenderer.DockWellFooterFontSizeProperty">
            <summary>Font size for the dock well footer</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.StandardDockWellRenderer.DockWellFooterFontFamily">
            <summary>Font family used for the dock well footer</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.StandardDockWellRenderer.DockWellFooterFontFamilyProperty">
            <summary>Font family used for the dock well footer</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.StandardDockWellRenderer.DockWellFooterFontStyle">
            <summary>Font style used for the dock well footer</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.StandardDockWellRenderer.DockWellFooterFontStyleProperty">
            <summary>Font style used for the dock well footer</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.StandardDockWellRenderer.DockWellFooterFontWeight">
            <summary>Font weight used for the dock well footer</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.StandardDockWellRenderer.DockWellFooterFontWeightProperty">
            <summary>Font weight used for the dock well footer</summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Layout.HotArea">
            <summary>
            Special area within a panel that is 'hot' (such as when the mouse moves over)
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.HotArea.#ctor(CODE.Framework.Wpf.Layout.DockContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Wpf.Layout.HotArea"/> class.
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.HotArea.AreaRectangle">
            <summary>The rectangle that's 'hot'</summary>
            <value>The area rectangle.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.HotArea.SpecialMouseCursor">
            <summary>Mouse cursor used when the mouse moves over the hot area</summary>
            <value>The special mouse cursor.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.HotArea.Parent">
            <summary>DockContainer this element goes with</summary>
            <value>The parent.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.HotArea.MouseOver">
            <summary>Fires when the mouse moves over the hot area</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.HotArea.MouseDown">
            <summary>Fires when the left mouse button is pressed over the hot area</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.HotArea.MouseClick">
            <summary>Fires when the mouse clicks in the hot area</summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Layout.SplitterHotArea">
            <summary>
            Special hot area used for splitters
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.SplitterHotArea.#ctor(CODE.Framework.Wpf.Layout.DockContainer,System.Windows.Input.Cursor,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Wpf.Layout.HotArea" /> class.
            </summary>
            <param name="parent">The parent.</param>
            <param name="cursor">The cursor.</param>
            <param name="splitterIndex">Index of the splitter.</param>
        </member>
        <member name="T:CODE.Framework.Wpf.Layout.DockedTabHotArea">
            <summary>
            Special hot area for docked tab headers
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.DockedTabHotArea.#ctor(CODE.Framework.Wpf.Layout.DockContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Wpf.Layout.DockedTabHotArea" /> class.
            </summary>
            <param name="parent">The parent.</param>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.DockedTabHotArea.Position">
            <summary>Dock position</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.DockedTabHotArea.NewIndex">
            <summary>New selected index when clicked</summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Layout.DockWellFloatWindow">
            <summary>Window class used to host floating secondary dock elements</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.DockWellFloatWindow.#ctor(CODE.Framework.Wpf.Layout.DockContainer,CODE.Framework.Wpf.Layout.DockedUIElement,CODE.Framework.Wpf.Layout.IDockWellRenderer,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Wpf.Layout.DockWellFloatWindow" /> class.
            </summary>
            <param name="parent">The parent.</param>
            <param name="dockedElement">The docked element.</param>
            <param name="renderer">The dock well renderer.</param>
            <param name="headerHeight">Height of the header.</param>
            <param name="footerHeight">Height of the footer.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.DockWellFloatWindow.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
            When overridden in a derived class, participates in rendering operations that are directed by the layout system. The rendering instructions for this element are not used directly when this method is invoked, and are instead preserved for later asynchronous use by layout and drawing.
            </summary>
            <param name="drawingContext">The drawing instructions for a specific element. This context is provided to the layout system.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.DockWellFloatWindow.OnClosing(System.ComponentModel.CancelEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Window.Closing" /> event.
            </summary>
            <param name="e">A <see cref="T:System.ComponentModel.CancelEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.DockWellFloatWindow.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseUp" /> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. The event data reports that the mouse button was released.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.DockWellFloatWindow.MeasureOverride(System.Windows.Size)">
            <summary>
            Override this method to measure the size of a window.
            </summary>
            <param name="availableSize">A <see cref="T:System.Windows.Size" /> that reflects the available size that this window can give to the child. Infinity can be given as a value to indicate that the window will size to whatever content is available.</param>
            <returns>A <see cref="T:System.Windows.Size" /> that reflects the size that this window determines it needs during layout, based on its calculations of children's sizes.</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.DockWellFloatWindow.ArrangeOverride(System.Windows.Size)">
            <summary>
            Override this method to arrange and size a window and its child elements.
            </summary>
            <param name="arrangeBounds">A <see cref="T:System.Windows.Size" /> that reflects the final size that the window should use to arrange itself and its children.</param>
            <returns>A <see cref="T:System.Windows.Size" /> that reflects the actual size that was used.</returns>
        </member>
        <member name="T:CODE.Framework.Wpf.Layout.EditForm">
            <summary>Automatic edit form layout</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.EditForm.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.EditForm.LayoutElasticity">
            <summary>Defines whether the layout is elastic (smartly resizes automatically) or not</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.EditForm.LayoutElasticityProperty">
            <summary>Defines whether the layout is elastic (smartly resizes automatically) or not</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.EditForm.LabelPosition">
            <summary>Defines the position of the label relative to the edit control</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.EditForm.LabelPositionsProperty">
            <summary>Defines the position of the label relative to the edit control</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.EditForm.VerticalSpacing">
            <summary>Vertical spacing in between individual elements</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.EditForm.VerticalSpacingProperty">
            <summary>Vertical spacing in between individual elements</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.EditForm.MinVerticalSpacing">
            <summary>Minimum vertical spacing in between individual elements (only used if elastic layout is enabled)</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.EditForm.MinVerticalSpacingProperty">
            <summary>Minimum vertical spacing in between individual elements (only used if elastic layout is enabled)</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.EditForm.GroupSpacing">
            <summary>Vertical additional spacing before new groups</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.EditForm.GroupSpacingProperty">
            <summary>Vertical additional spacing before new groups</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.EditForm.MinGroupSpacing">
            <summary>Minimum vertical additional spacing before new groups (only used if elastic layout is enabled)</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.EditForm.MinGroupSpacingProperty">
            <summary>Minimum vertical additional spacing before new groups (only used if elastic layout is enabled)</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.EditForm.RenderGroupBackground">
            <summary>Defines whether a group background should be rendered for groups</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.EditForm.RenderGroupBackgroundProperty">
            <summary>Defines whether a group background should be rendered for groups</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.EditForm.RenderHorizontalControlSeparatorLines">
            <summary>
            Indicates whether a horizontal separator line should be rendered after every control-pair
            </summary>
            <value><c>true</c> if [render horizontal control separator lines]; otherwise, <c>false</c>.</value>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.EditForm.RenderHorizontalControlSeparatorLinesProperty">
            <summary>
            Indicates whether a horizontal separator line should be rendered after every control-pair
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.EditForm.VerticalControlSeparatorOffset">
            <summary>
            Vertical offset for a potential horizontal control separator line (if shown)
            </summary>
            <value>The vertical control separator offset.</value>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.EditForm.VerticalControlSeparatorOffsetProperty">
            <summary>
            Vertical offset for a potential horizontal control separator line (if shown)
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.EditForm.HorizontalLineSeparatorBrush">
            <summary>
            Brush used to render horizontal separators between control pairs
            </summary>
            <value>The horizontal line separator brush.</value>
            <remarks>Only used if RenderHorizontalControlSeparatorLines = true</remarks>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.EditForm.HorizontalLineSeparatorBrushProperty">
            <summary>
            Brush used to render horizontal separators between control pairs
            </summary>
            <remarks>Only used if RenderHorizontalControlSeparatorLines = true</remarks>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.EditForm.GroupBackgroundBrush">
            <summary>Background brush for group backgrounds</summary>
            <remarks>Only used of RenderGroupBackground = true</remarks>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.EditForm.GroupBackgroundBrushProperty">
            <summary>Background brush for group backgrounds</summary>
            <remarks>Only used of RenderGroupBackground = true</remarks>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.EditForm.GroupBorderBrush">
            <summary>Border brush for group backgrounds</summary>
            <remarks>Only used of RenderGroupBackground = true</remarks>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.EditForm.GroupBorderBrushProperty">
            <summary>Border brush for group backgrounds</summary>
            <remarks>Only used of RenderGroupBackground = true</remarks>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.EditForm.GroupBorderWidth">
            <summary>Drawing width for the border of group backgrounds</summary>
            <remarks>Only used of RenderGroupBackground = true</remarks>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.EditForm.GroupBorderWidthProperty">
            <summary>Drawing width for the border of group backgrounds</summary>
            <remarks>Only used of RenderGroupBackground = true</remarks>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.EditForm.GroupBorderMargin">
            <summary>Margin to be added between a rendered group border and the actual group elements</summary>
            <remarks>Only used of RenderGroupBackground = true</remarks>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.EditForm.GroupBorderMarginProperty">
            <summary>Margin to be added between a rendered group border and the actual group elements</summary>
            <remarks>Only used of RenderGroupBackground = true</remarks>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.EditForm.EditControlLeftSpacing">
            <summary>Left padding/margin that separates the label from the edit control</summary>
            <remarks>Only applicable when the label is positioned to the left of the edit control</remarks>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.EditForm.EditControlLeftSpacingProperty">
            <summary>Left padding/margin that separates the label from the edit control</summary>
            <remarks>Only applicable when the label is positioned to the left of the edit control</remarks>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.EditForm.MinEditControlLeftSpacing">
            <summary>Minimum left padding/margin that separates the label from the edit control (only applies for elastic layouts)</summary>
            <remarks>Only applicable when the label is positioned to the left of the edit control</remarks>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.EditForm.MinEditControlLeftSpacingProperty">
            <summary>Minimum left padding/margin that separates the label from the edit control (only applies for elastic layouts)</summary>
            <remarks>Only applicable when the label is positioned to the left of the edit control</remarks>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.EditForm.FlowWithPreviousSpacing">
            <summary>Spacing (typically horizontal) for controls that are to flow with the previous element</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.EditForm.FlowWithPreviousSpacingProperty">
            <summary>Spacing (typically horizontal) for controls that are to flow with the previous element</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.EditForm.EditControlTopSpacing">
            <summary>Top padding/margin that separates the label from the edit control</summary>
            <remarks>Only applicable when the label is positioned to the top of the edit control</remarks>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.EditForm.EditControlTopSpacingProperty">
            <summary>Top padding/margin that separates the label from the edit control</summary>
            <remarks>Only applicable when the label is positioned to the top of the edit control</remarks>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.EditForm.ColumnSpacing">
            <summary>Spacing between columns</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.EditForm.ColumnSpacingProperty">
            <summary>Spacing between columns</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.EditForm.MinColumnSpacing">
            <summary>Minimum spacing between columns (only applies for elastic layouts)</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.EditForm.MinColumnSpacingProperty">
            <summary>Minimum spacing between columns (only applies for elastic layouts)</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.EditForm.GroupHeaderRenderer">
            <summary>Object used to render the group headers</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.EditForm.GroupHeaderRendererProperty">
            <summary>Object used to render the group headers</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.EditForm.GroupHeaderTopSpacing">
            <summary>Vertical additional spacing before new groups</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.EditForm.GroupHeaderTopSpacingProperty">
            <summary>Vertical additional spacing before new groups</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.EditForm.GroupHeaderBottomSpacing">
            <summary>Vertical additional spacing before new groups</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.EditForm.GroupHeaderBottomSpacingProperty">
            <summary>Vertical additional spacing before new groups</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.EditForm.MinGroupHeaderBottomSpacing">
            <summary>Minimum vertical additional spacing after new group headers (only used if elastic layout is enabled)</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.EditForm.MinGroupHeaderBottomSpacingProperty">
            <summary>Minimum vertical additional spacing after new group headers (only used if elastic layout is enabled)</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.EditForm.MinGroupHeaderTopSpacing">
            <summary>Minimum vertical additional spacing before new group headers (only used if elastic layout is enabled)</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.EditForm.MinGroupHeaderTopSpacingProperty">
            <summary>Minimum vertical additional spacing before new group headers (only used if elastic layout is enabled)</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.EditForm.GroupHeaderFontFamily">
            <summary>Font family used to render group headers</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.EditForm.GroupHeaderFontFamilyProperty">
            <summary>Font family used to render group headers</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.EditForm.GroupHeaderFontStyle">
            <summary>Font style used to render group headers</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.EditForm.GroupHeaderFontStyleProperty">
            <summary>Font style used to render group headers</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.EditForm.GroupHeaderFontWeight">
            <summary>Font weight used to render group headers</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.EditForm.GroupHeaderFontWeightProperty">
            <summary>Font weight used to render group headers</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.EditForm.GroupHeaderFontSize">
            <summary>Font size used to render group headers</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.EditForm.GroupHeaderFontSizeProperty">
            <summary>Font size used to render group headers</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.EditForm.GroupHeaderForegroundBrush">
            <summary>Foreground brush used to render group headers</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.EditForm.GroupHeaderForegroundBrushProperty">
            <summary>Foreground brush used to render group headers</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.EditForm.VerticalLabelControlOffset">
            <summary>Number of pixels the label is offset down when the layout uses labels to the left of the edit control</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.EditForm.VerticalLabelControlOffsetProperty">
            <summary>Number of pixels the label is offset down when the layout uses labels to the left of the edit control</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.EditForm.MinElasticScaleFactor">
            <summary>Smallest factor the layout automatically scales to (only applicable when the elasticity of the layout includes the option to scale)</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.EditForm.MinElasticScaleFactorProperty">
            <summary>Smallest factor the layout automatically scales to (only applicable when the elasticity of the layout includes the option to scale)</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.EditForm.ScrollBarMode">
            <summary>Defines whether the edit form automatically handles scrollbars</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.EditForm.ScrollBarModeProperty">
            <summary>Defines whether the edit form automatically handles scrollbars</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.EditForm.InvalidateAllVisuals(System.Windows.DependencyObject)">
            <summary>Invalidates everything in the UI and forces a refresh</summary>
            <param name="source">Reference to an instance of the form itself</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.EditForm.MeasureOverride(System.Windows.Size)">
            <summary>Provides the behavior for the Measure pass of Silverlight layout. Classes can override this method to define their own Measure pass behavior.</summary>
            <param name="availableSize">The available size that this object can give to child objects. Infinity can be specified as a value to indicate that the object will size to whatever content is available.</param>
            <returns>The size that this object determines it needs during layout, based on its calculations of child object allotted sizes.</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.EditForm.ShrinkVerticalIfNeeded(System.Windows.Size,System.Windows.Size)">
            <summary>Shrinks the layout vertically if possible and desired</summary>
            <param name="availableSize">Available parent size</param>
            <param name="requiredSize">Size currently required</param>
            <returns>Size required after a potential shrinking pass</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.EditForm.ShrinkHorizontalIfNeeded(System.Windows.Size,System.Windows.Size)">
            <summary>Shrinks the layout horizontally if possible and desired</summary>
            <param name="availableSize">Available parent size</param>
            <param name="requiredSize">Size currently required</param>
            <returns>Size required after a potential shrinking pass</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.EditForm.PerformMeasurePass(System.Collections.Generic.IEnumerable{System.Collections.Generic.List{CODE.Framework.Wpf.Layout.ControlPair}})">
            <summary>Performs a single measuring pass based on current spacing assumptions</summary>
            <param name="columns">Collection of columns to measure</param>
            <returns></returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.EditForm.MeasureLabelSize(CODE.Framework.Wpf.Layout.ControlPair)">
            <summary>
            This method is used to measure the size of the label part of the pair
            </summary>
            <param name="controlPair">The control pair.</param>
            <returns>Size.</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.EditForm.CalculateColumnSize(System.Collections.Generic.IEnumerable{CODE.Framework.Wpf.Layout.ControlPair},System.Int32)">
            <summary>
            Performs a measuring pass on a single column
            </summary>
            <param name="column">The column to measure.</param>
            <param name="columnIndex">Index of the column.</param>
            <returns>Size required.</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.EditForm.ArrangeOverride(System.Windows.Size)">
            <summary>Provides the behavior for the Arrange pass of Silverlight layout. Classes can override this method to define their own Arrange pass behavior.</summary>
            <param name="finalSize">The final area within the parent that this object should use to arrange itself and its children.</param>
            <returns>The actual size used once the element is arranged.</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.EditForm.CustomLabelHandlingOverride(CODE.Framework.Wpf.Layout.ControlPair,System.Double,System.Double,System.Double,System.Windows.Size)">
            <summary>
            This method can be used to create custom label handling code.
            Override this method if you want to handle the label logic in a subclass.
            </summary>
            <param name="controlPair">The control pair for which the label needs to be handled.</param>
            <param name="currentX">The current X position in the overall layout.</param>
            <param name="currentY">The current Y position in the overall layout.</param>
            <param name="width">The suggested width for the label.</param>
            <param name="customLabelOffset">Set this parameter to move the X and Y coordinates as a result of custom handling</param>
            <returns>Return true if custom handling code takes over and no default label handling is needed</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.EditForm.GetColumns">
            <summary>Iterates over all the controls and returns them in columns and tuples</summary>
            <returns>Columns of control pairs</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.EditForm.IsControlStandAlone(System.Windows.DependencyObject)">
            <summary>
            Returns true if the object passed is a stand-alone control
            </summary>
            <param name="obj">The control object.</param>
            <returns><c>true</c> if [is control stand alone] [the specified obj]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.EditForm.DoesControlFlowWithPrevious(System.Windows.DependencyObject)">
            <summary>
            Returns true if the passed object is a control that is meant to flow with the previous control
            rather than forming a new pair.
            </summary>
            <param name="obj">The obj.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.EditForm.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
            Draws the content of a <see cref="T:System.Windows.Media.DrawingContext"/> object during the render pass of a <see cref="T:System.Windows.Controls.Panel"/> element.
            </summary>
            <param name="dc">The <see cref="T:System.Windows.Media.DrawingContext"/> object to draw.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.EditForm.OnRenderCustom(System.Windows.Media.DrawingContext,System.Double,System.Windows.Point)">
            <summary>
            This method is designed to be overridden in subclasses to provide additional render functionality
            </summary>
            <param name="dc">The drawing context.</param>
            <param name="scale">The current scale that shall be applied to rendering</param>
            <param name="offset">The current offset that shall be applied to rendering.</param>
        </member>
        <member name="T:CODE.Framework.Wpf.Layout.ControlPair">
            <summary>
            This class is used to represent a "pair" of controls
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.ControlPair.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Wpf.Layout.ControlPair" /> class.
            </summary>
            <param name="secondarySpacing">The spacing for secondary controls.</param>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.ControlPair.Label">
            <summary>The label element</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.ControlPair.Edit">
            <summary>The edit element</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.ControlPair.Span">
            <summary>This element (if set) spans both label and edit control</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.ControlPair.SecondaryControls">
            <summary>List of controls that flow with this control pair as secondary "edit" controls</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.ControlPair.DesiredLabelWidth">
            <summary>
            Desired width for the label element
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.ControlPair.ForceLabelWidth(System.Double)">
            <summary>
            This method can be used to override the width of the label
            </summary>
            <param name="width">Width the label is to be forced to</param>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.ControlPair.DesiredLabelHeight">
            <summary>
            Desired height for the label element
            </summary>
            <value>The height of the desired label.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.ControlPair.DesiredEditWidth">
            <summary>
            Desired width of the edit control
            </summary>
            <value>The width of the desired edit.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.ControlPair.DesiredTotalEditWidth">
            <summary>
            Desired width for the total label element
            </summary>
            <value>The width of the desired total edit.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.ControlPair.DesiredEditHeight">
            <summary>
            Desired height for the edit part of the pair
            </summary>
            <value>The height of the desired edit.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.ControlPair.DesiredSpanWidth">
            <summary>
            Desired width for a span element
            </summary>
            <value>The width of the desired span.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.ControlPair.DesiredSpanHeight">
            <summary>
            Desired height for a span element
            </summary>
            <value>The height of the desired span.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.ControlPair.GroupBreak">
            <summary>
            Indicates whether this pair starts a group break
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.ControlPair.ForceGroupBreak">
            <summary>
            This method can be used to force a group break before this pair
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.ControlPair.GroupHeader">
            <summary>
            Group header text
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.ControlPair.AdditionalEditControls">
            <summary>
            List of additional UI controls that create a flow
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.ControlPair.LabelSpansFullWidth">
            <summary>Indicates whether the label control spans the full available width of the property sheet (no edit controls are displayed in that case)</summary>
            <value><c>true</c> if [label spans full width]; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:CODE.Framework.Wpf.Layout.EditFormLabelPositions">
            <summary>Defines the position of the labels in an edit form</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.EditFormLabelPositions.Left">
            <summary>The label is to the left of the edit control</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.EditFormLabelPositions.Top">
            <summary>The label is positioned to the top of the edit control</summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Layout.LayoutElasticity">
            <summary>Defines whether the layout can change smartly</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.LayoutElasticity.None">
            <summary>No auto-resizing</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.LayoutElasticity.Layout">
            <summary>The layout can change dynamically</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.LayoutElasticity.LayoutAndScale">
            <summary>The layout can change dynamically and will scale down if need be</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.LayoutElasticity.LayoutAndReflow">
            <summary>The layout can change dynamically and columns will re-flow is need be</summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Layout.EditFormScrollBarModes">
            <summary>Defines which scrollbars are handled automatically in an edit form</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.EditFormScrollBarModes.None">
            <summary>No automatic scrollbar handling</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.EditFormScrollBarModes.Horizontal">
            <summary>Automatically handle the horizontal scrollbar</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.EditFormScrollBarModes.Vertical">
            <summary>Automatically handle the vertical scrollbar</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.EditFormScrollBarModes.Both">
            <summary>Automatically handle both scrollbars</summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Layout.EditFormScrollAdorner">
            <summary>Adorner UI for scrollbars of the edit form control</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.EditFormScrollAdorner.#ctor(CODE.Framework.Wpf.Layout.EditForm,System.Windows.Controls.Primitives.ScrollBar,System.Windows.Controls.Primitives.ScrollBar)">
            <summary>Constructor</summary>
            <param name="adornedElement">Adorned element EditForm</param>
            <param name="horizontal">The horizontal scrollbar.</param>
            <param name="vertical">The vertical scrollbar.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.EditFormScrollAdorner.MeasureOverride(System.Windows.Size)">
            <summary>Implements any custom measuring behavior for the adorner.</summary>
            <param name="constraint">A size to constrain the adorner to.</param>
            <returns>A <see cref="T:System.Windows.Size"/> object representing the amount of layout space needed by the adorner.</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.EditFormScrollAdorner.ArrangeOverride(System.Windows.Size)">
            <summary>When overridden in a derived class, positions child elements and determines a size for a <see cref="T:System.Windows.FrameworkElement"/> derived class.</summary>
            <param name="finalSize">The final area within the parent that this element should use to arrange itself and its children.</param>
            <returns>The actual size used.</returns>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.EditFormScrollAdorner.VisualChildrenCount">
            <summary>Gets the number of visual child elements within this element.</summary>
            <returns>The number of visual child elements for this element.</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.EditFormScrollAdorner.GetVisualChild(System.Int32)">
            <summary>Overrides <see cref="M:System.Windows.Media.Visual.GetVisualChild(System.Int32)"/>, and returns a child at the specified index from a collection of child elements.</summary>
            <param name="index">The zero-based index of the requested child element in the collection.</param>
            <returns>The requested child element. This should not return null; if the provided index is out of range, an exception is thrown.</returns>
        </member>
        <member name="T:CODE.Framework.Wpf.Layout.FlowForm">
            <summary>
            Provides automatic layout for a flowing data entry form
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.FlowForm.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Wpf.Layout.FlowForm"/> class.
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.FlowForm._currentRows">
            <summary>
            List of current rows of controls
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.FlowForm.EditControlLeftSpacing">
            <summary>Left padding/margin that separates the label from the edit control</summary>
            <remarks>Only applicable when the label is positioned to the left of the edit control</remarks>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.FlowForm.EditControlLeftSpacingProperty">
            <summary>Left padding/margin that separates the label from the edit control</summary>
            <remarks>Only applicable when the label is positioned to the left of the edit control</remarks>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.FlowForm.MinEditControlLeftSpacing">
            <summary>Minimum left padding/margin that separates the label from the edit control (only applies for elastic layouts)</summary>
            <remarks>Only applicable when the label is positioned to the left of the edit control</remarks>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.FlowForm.MinEditControlLeftSpacingProperty">
            <summary>Minimum left padding/margin that separates the label from the edit control (only applies for elastic layouts)</summary>
            <remarks>Only applicable when the label is positioned to the left of the edit control</remarks>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.FlowForm.EditControlTopSpacing">
            <summary>Top padding/margin that separates the label from the edit control</summary>
            <remarks>Only applicable when the label is positioned to the top of the edit control</remarks>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.FlowForm.EditControlTopSpacingProperty">
            <summary>Top padding/margin that separates the label from the edit control</summary>
            <remarks>Only applicable when the label is positioned to the top of the edit control</remarks>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.FlowForm.LabelControlLeftSpacing">
            <summary>Left padding/margin that separates the edit control from the next label</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.FlowForm.LabelControlLeftSpacingProperty">
            <summary>Left padding/margin that separates the edit control from the next label</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.FlowForm.MinLabelControlLeftSpacing">
            <summary>Minimum left padding/margin that separates the edit control from the next label (only applies for elastic layouts)</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.FlowForm.MinLabelControlLeftSpacingProperty">
            <summary>Minimum left padding/margin that separates the edit control from the next label (only applies for elastic layouts)</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.FlowForm.GroupHeaderRenderer">
            <summary>Object used to render the group headers</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.FlowForm.GroupHeaderRendererProperty">
            <summary>Object used to render the group headers</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.FlowForm.GroupHeaderTopSpacing">
            <summary>Vertical additional spacing before new groups</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.FlowForm.GroupHeaderTopSpacingProperty">
            <summary>Vertical additional spacing before new groups</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.FlowForm.GroupHeaderBottomSpacing">
            <summary>Vertical additional spacing before new groups</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.FlowForm.GroupHeaderBottomSpacingProperty">
            <summary>Vertical additional spacing before new groups</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.FlowForm.MinGroupHeaderBottomSpacing">
            <summary>Minimum vertical additional spacing after new group headers (only used if elastic layout is enabled)</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.FlowForm.MinGroupHeaderBottomSpacingProperty">
            <summary>Minimum vertical additional spacing after new group headers (only used if elastic layout is enabled)</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.FlowForm.MinGroupHeaderTopSpacing">
            <summary>Minimum vertical additional spacing before new group headers (only used if elastic layout is enabled)</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.FlowForm.MinGroupHeaderTopSpacingProperty">
            <summary>Minimum vertical additional spacing before new group headers (only used if elastic layout is enabled)</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.FlowForm.GroupHeaderFontFamily">
            <summary>Font family used to render group headers</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.FlowForm.GroupHeaderFontFamilyProperty">
            <summary>Font family used to render group headers</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.FlowForm.GroupHeaderFontStyle">
            <summary>Font style used to render group headers</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.FlowForm.GroupHeaderFontStyleProperty">
            <summary>Font style used to render group headers</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.FlowForm.GroupHeaderFontWeight">
            <summary>Font weight used to render group headers</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.FlowForm.GroupHeaderFontWeightProperty">
            <summary>Font weight used to render group headers</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.FlowForm.GroupHeaderFontSize">
            <summary>Font size used to render group headers</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.FlowForm.GroupHeaderFontSizeProperty">
            <summary>Font size used to render group headers</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.FlowForm.GroupHeaderForegroundBrush">
            <summary>Foreground brush used to render group headers</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.FlowForm.GroupHeaderForegroundBrushProperty">
            <summary>Foreground brush used to render group headers</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.FlowForm.LabelFontFamily">
            <summary>Font family used to render labels</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.FlowForm.LabelFontFamilyProperty">
            <summary>Font family used to render labels</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.FlowForm.LabelFontStyle">
            <summary>Font style used to render labels</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.FlowForm.LabelFontStyleProperty">
            <summary>Font style used to render labels</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.FlowForm.LabelFontWeight">
            <summary>Font weight used to render labels</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.FlowForm.LabelFontWeightProperty">
            <summary>Font weight used to render labels</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.FlowForm.LabelFontSize">
            <summary>Font size used to render labels</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.FlowForm.LabelFontSizeProperty">
            <summary>Font size used to render labels</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.FlowForm.LabelTextAlignment">
            <summary>Text alignment used to render labels</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.FlowForm.LabelTextAlignmentProperty">
            <summary>Text alignment used to render labels</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.FlowForm.LabelForegroundBrush">
            <summary>Foreground brush used to render labels</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.FlowForm.LabelForegroundBrushProperty">
            <summary>Foreground brush used to render group headers</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.FlowForm.VerticalLabelControlOffset">
            <summary>Number of pixels the label is offset down when the layout uses labels to the left of the edit control</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.FlowForm.VerticalLabelControlOffsetProperty">
            <summary>Number of pixels the label is offset down when the layout uses labels to the left of the edit control</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.FlowForm.VerticalSpacing">
            <summary>Vertical spacing in between individual elements</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.FlowForm.VerticalSpacingProperty">
            <summary>Vertical spacing in between individual elements</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.FlowForm.MinVerticalSpacing">
            <summary>Minimum vertical spacing in between individual elements (only used if elastic layout is enabled)</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.FlowForm.MinVerticalSpacingProperty">
            <summary>Minimum vertical spacing in between individual elements (only used if elastic layout is enabled)</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.FlowForm.GroupSpacing">
            <summary>Vertical additional spacing before new groups</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.FlowForm.GroupSpacingProperty">
            <summary>Vertical additional spacing before new groups</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.FlowForm.MinGroupSpacing">
            <summary>Minimum vertical additional spacing before new groups (only used if elastic layout is enabled)</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.FlowForm.MinGroupSpacingProperty">
            <summary>Minimum vertical additional spacing before new groups (only used if elastic layout is enabled)</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.FlowForm.SpecialCheckBoxBehaviorActive">
            <summary>Indicates whether or not checkboxes shoudl be handled special (typically kept together as groups)</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.FlowForm.SpecialCheckBoxBehaviorActiveProperty">
            <summary>Indicates whether or not checkboxes shoudl be handled special (typically kept together as groups)</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.FlowForm.SpecialRadioButtonBehaviorActive">
            <summary>Indicates whether or not radio buttons shoudl be handled special (typically kept together as groups)</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.FlowForm.SpecialRadioButtonActiveProperty">
            <summary>Indicates whether or not checkboxes shoudl be handled special (typically kept together as groups)</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.FlowForm.EditControlMinimumWidth">
            <summary>
            Minimum Width to be used for edit controls
            </summary>
            <value>The minimum width of the edit control.</value>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.FlowForm.EditControlMinimumWidthProperty">
            <summary>
            Minimum Width to be used for edit controls
            </summary>
            <value>The minimum width of the edit control.</value>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.FlowForm.InvalidateAllVisuals(System.Windows.DependencyObject)">
            <summary>Invalidates everything in the UI and forces a refresh</summary>
            <param name="source">Reference to an instance of the form itself</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.FlowForm.MeasureOverride(System.Windows.Size)">
            <summary>
            When overridden in a derived class, measures the size in layout required for child elements and determines a size for the <see cref="T:System.Windows.FrameworkElement" />-derived class.
            </summary>
            <param name="availableSize">The available size that this element can give to child elements. Infinity can be specified as a value to indicate that the element will size to whatever content is available.</param>
            <returns>The size that this element determines it needs during layout, based on its calculations of child element sizes.</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.FlowForm.CalculateLabelSize(System.String,System.Windows.DependencyObject)">
            <summary>
            Calculates the size required to show the specified text label for the element at hand
            </summary>
            <param name="label">Label (text) to measure</param>
            <param name="element">UI Element that label goes with (used to retrieve other settings, such as font info)</param>
            <returns>Size required</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.FlowForm.AddNewRow(System.Collections.Generic.IList{CODE.Framework.Wpf.Layout.ControlRow})">
            <summary>
            Adds a new row of controls to the list of existing rows
            </summary>
            <param name="rows">Existing rows</param>
            <returns>Added row</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.FlowForm.GetTotalRowWidth(CODE.Framework.Wpf.Layout.ControlRow,System.Double,System.Double)">
            <summary>
            Calculates the width of the complete row
            </summary>
            <param name="row">The row.</param>
            <param name="labelWidth">Width of the first label.</param>
            <param name="availableWidth">Total available width.</param>
            <returns>Total width of the row including all spacing</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.FlowForm.GetNumberOfElementsThatFitInRow(CODE.Framework.Wpf.Layout.ControlRow,System.Double,System.Double)">
            <summary>Returns how many of the specified row's elements fit in the available horizontal space</summary>
            <param name="row">The row.</param>
            <param name="labelWidth">Width of the label.</param>
            <param name="availableWidth">Total available width.</param>
            <returns>Number of elements that fit in the row.</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.FlowForm.InsertFakeLabel(System.Collections.Generic.List{CODE.Framework.Wpf.Layout.ControlRowElement},System.Windows.UIElement,System.Int32)">
            <summary>
            Inserts a fake label to act as a spacer
            </summary>
            <param name="elements">The elements collection to insert the label into.</param>
            <param name="element">The element that follows (which could potentially define font attributes).</param>
            <param name="insertionIndex">Index of the insertion.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.FlowForm.GetWidestFirstLabel(System.Collections.Generic.IEnumerable{CODE.Framework.Wpf.Layout.ControlRow})">
            <summary>
            Calculates the width of the widest first label in all the rows
            </summary>
            <param name="rows">Collection of control rows</param>
            <returns>Maximum width</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.FlowForm.ArrangeOverride(System.Windows.Size)">
            <summary>
            When overridden in a derived class, positions child elements and determines a size for a <see cref="T:System.Windows.FrameworkElement" /> derived class.
            </summary>
            <param name="finalSize">The final area within the parent that this element should use to arrange itself and its children.</param>
            <returns>The actual size used.</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.FlowForm.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
            Draws the content of a <see cref="T:System.Windows.Media.DrawingContext" /> object during the render pass of a <see cref="T:System.Windows.Controls.Panel" /> element.
            </summary>
            <param name="dc">The <see cref="T:System.Windows.Media.DrawingContext" /> object to draw.</param>
        </member>
        <member name="T:CODE.Framework.Wpf.Layout.ControlRow">
            <summary>
            This class is designed for internal use only. It is used to logically organize controls within a FlowForm into distinct rows of controls
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.ControlRow.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Wpf.Layout.ControlRow"/> class.
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.ControlRow.Elements">
            <summary>List of elements within the row</summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Layout.ControlRowElement">
            <summary>
            This class is designed for internal use only. It is used to wrap a control/element within a row of controls
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.ControlRowElement.Element">
            <summary>Holds a reference to the actual element</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.ControlRowElement.DesiredPosition">
            <summary>Desired control position</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.ControlRowElement.DesiredSize">
            <summary>Desired control size</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.ControlRowElement.MaxLabelWidth">
            <summary>Maximum label width in this column</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.ControlRowElement.IsAutoGeneratedLabel">
            <summary>Indicates whether this is a placeholder for an auto-generated label</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.ControlRowElement.Label">
            <summary>Label caption used for auto-generated labels</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.ControlRowElement.IsConsideredLabelElement">
            <summary>True if the current element is considered to play the role of a label (typically an odd numbered element in the current row</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.ControlRowElement.HadOriginalLineBreak">
            <summary>Indicates whether the control was originally flagged to force a line break before the control</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.ControlRowElement.IsFullSpanControl">
            <summary>Indicates whether this control is meant to span the full width of the available surface</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.ControlRowElement.FontFamily">
            <summary>
            Font family
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.ControlRowElement.FontStyle">
            <summary>
            Font Style
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.ControlRowElement.FontWeight">
            <summary>
            Font weight
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.ControlRowElement.FontSize">
            <summary>
            Font size
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.ControlRowElement.ForegroundBrush">
            <summary>
            Color
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.ControlRowElement.IsFakeLabel">
            <summary>
            Indicates whether this control is a "fake" label control (which just acts as a spacer and can be removed from the flow at any time)
            </summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Layout.GridPrimarySecondary">
            <summary>
            Special grid class that provides default behavior used by primary/secondary form layout styles
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.GridPrimarySecondary.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Wpf.Layout.GridPrimarySecondary"/> class.
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.GridPrimarySecondary.SecondaryUIElementSize">
            <summary>Size of the secondary UI element (height only for horizontal splits)</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.GridPrimarySecondary.SecondaryUIElementSizeProperty">
            <summary>Size of the secondary UI element (could be height or height)</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.GridPrimarySecondary.UIElementSpacing">
            <summary>Spacing between primary and secondary UI elements (both horizontal and vertical)</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.GridPrimarySecondary.UIElementSpacingProperty">
            <summary>Spacing between primary and secondary UI elements (both horizontal and vertical)</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.GridPrimarySecondary.OnUIElementSpacingChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>Handles changes in UI Element spacing</summary>
            <param name="obj">Object that changed</param>
            <param name="args">Event arguments</param>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.GridPrimarySecondary.PrimaryUIElementMargin">
            <summary>Margin wrap around all elements flagged as primary UI elements</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.GridPrimarySecondary.PrimaryUIElementMarginProperty">
            <summary>Margin wrap around all elements flagged as primary UI elements</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.GridPrimarySecondary.SecondaryUIElementMargin">
            <summary>Margin wrap around all elements flagged as secondary UI elements</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.GridPrimarySecondary.SecondaryUIElementMarginProperty">
            <summary>Margin wrap around all elements flagged as secondary UI elements</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.GridPrimarySecondary.SecondaryUIElementAlignmentChangeSize">
            <summary>Defines the size at which the layout automatically switches from primary (usually top/bottom) orientation to secondary (usually left/right) orientation</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.GridPrimarySecondary.SecondaryUIElementAlignmentChangeSizeProperty">
            <summary>Defines the size at which the layout automatically switches from primary (usually top/bottom) orientation to secondary (usually left/right) orientation</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.GridPrimarySecondary.UIElementOrder">
            <summary>Defines the logical orientaiton of primary and secondary UI elements</summary>
            <remarks>Each style/skin/theme can choose to interpret this setting differently</remarks>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.GridPrimarySecondary.UIElementOrderProperty">
            <summary>Defines the logical orientaiton of primary and secondary UI elements</summary>
            <remarks>Each style/skin/theme can choose to interpret this setting differently</remarks>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.GridPrimarySecondary.SecondaryAreaBackgroundBrush">
            <summary>Brush used for the background area of the secondary UI area</summary>
            <value>The secondary area background brush.</value>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.GridPrimarySecondary.SecondaryAreaBackgroundBrushProperty">
            <summary>Brush used for the background area of the secondary UI area</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.GridPrimarySecondary.SecondaryAreaBackgroundBrushPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>Fires when the secondary area brush changed</summary>
            <param name="obj">The object the property was set on.</param>
            <param name="args">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.GridPrimarySecondary.SecondaryAreaBackgroundBrushOpacity">
            <summary>Brush opacity used for the background area of the secondary UI area</summary>
            <value>The secondary area background brush opacity.</value>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.GridPrimarySecondary.SecondaryAreaBackgroundBrushOpacityProperty">
            <summary>Brush opacity used for the background area of the secondary UI area</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.GridPrimarySecondary.SecondaryAreaBackgroundBrushOpacityPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>Fires when the secondary area brush opacity changed</summary>
            <param name="obj">The object the property was set on.</param>
            <param name="args">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.GridPrimarySecondary.SecondaryAreaBackgroundBrushLightFactor">
            <summary>Brush LightFactor used for the background area of the secondary UI area</summary>
            <value>The secondary area background brush LightFactor.</value>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.GridPrimarySecondary.SecondaryAreaBackgroundBrushLightFactorProperty">
            <summary>Brush LightFactor used for the background area of the secondary UI area</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.GridPrimarySecondary.SecondaryAreaBackgroundBrushLightFactorPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>Fires when the secondary area brush LightFactor changed</summary>
            <param name="obj">The object the property was set on.</param>
            <param name="args">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.GridPrimarySecondary.SetInternalSecondaryAreaBackgroundBrush">
            <summary>Updates the internal settings for the primary secondary brush</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.GridPrimarySecondary.PrimaryAreaBackgroundBrush">
            <summary>Brush used for the background area of the primary UI area</summary>
            <value>The primary area background brush.</value>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.GridPrimarySecondary.PrimaryAreaBackgroundBrushProperty">
            <summary>Brush used for the background area of the primary UI area</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.GridPrimarySecondary.PrimaryAreaBackgroundBrushPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>Fires when the primary area brush changed</summary>
            <param name="obj">The object the property was set on.</param>
            <param name="args">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.GridPrimarySecondary.PrimaryAreaBackgroundBrushOpacity">
            <summary>Brush opacity used for the background area of the primary UI area</summary>
            <value>The secondary area background brush opacity.</value>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.GridPrimarySecondary.PrimaryAreaBackgroundBrushOpacityProperty">
            <summary>Brush opacity used for the background area of the primary UI area</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.GridPrimarySecondary.PrimaryAreaBackgroundBrushOpacityPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>Fires when the primary area brush opacity changed</summary>
            <param name="obj">The object the property was set on.</param>
            <param name="args">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.GridPrimarySecondary.PrimaryAreaBackgroundBrushLightFactor">
            <summary>Brush LightFactor used for the background area of the primary UI area</summary>
            <value>The secondary area background brush LightFactor.</value>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.GridPrimarySecondary.PrimaryAreaBackgroundBrushLightFactorProperty">
            <summary>Brush LightFactor used for the background area of the primary UI area</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.GridPrimarySecondary.PrimaryAreaBackgroundBrushLightFactorPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>Fires when the primary area brush LightFactor changed</summary>
            <param name="obj">The object the property was set on.</param>
            <param name="args">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.GridPrimarySecondary.SetInternalPrimaryAreaBackgroundBrush">
            <summary>Updates the internal settings for the primary secondary brush</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.GridPrimarySecondary.CalculatedLayout">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.GridPrimarySecondary.AssignElements(CODE.Framework.Wpf.Layout.GridPrimarySecondary.PrimarySecondaryLayout,System.Windows.UIElement,System.Collections.Generic.IEnumerable{System.Windows.UIElement},System.Boolean)">
            <summary>
            Assigns the elements.
            </summary>
            <param name="layout">The layout.</param>
            <param name="primary">The primary.</param>
            <param name="secondary">The secondary.</param>
            <param name="mustInvalidate">if set to <c>true</c> [must invalidate].</param>
            <returns>True if successful</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.GridPrimarySecondary.MeasureOverride(System.Windows.Size)">
            <summary>
            Measures the children of a <see cref="T:System.Windows.Controls.Grid" /> in anticipation of arranging them during the <see cref="M:System.Windows.Controls.Grid.ArrangeOverride(System.Windows.Size)" /> pass.
            </summary>
            <param name="constraint">Indicates an upper limit size that should not be exceeded.</param>
            <returns><see cref="T:System.Windows.Size" /> that represents the required size to arrange child content.</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.GridPrimarySecondary.OnRender(System.Windows.Media.DrawingContext)">
            <summary>Draws the content of a <see cref="T:System.Windows.Media.DrawingContext"/> object during the render pass of a <see cref="T:System.Windows.Controls.Panel"/> element.</summary>
            <param name="dc">The <see cref="T:System.Windows.Media.DrawingContext"/> object to draw.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.GridPrimarySecondary.CustomRender(System.Windows.Media.DrawingContext)">
            <summary>
            This method draws additional elements into the main display area
            </summary>
            <param name="dc">Drawing context</param>
        </member>
        <member name="T:CODE.Framework.Wpf.Layout.GridPrimarySecondary.PrimarySecondaryLayout">
            <summary>
            Layout options
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.GridPrimarySecondary.PrimarySecondaryLayout.SecondaryTopPrimaryBottom">
            <summary>
            Secondary on top, primary fills bottom
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.GridPrimarySecondary.PrimarySecondaryLayout.PrimaryTopSecondaryBottom">
            <summary>
            Secondary on bottom, primary fills top
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.GridPrimarySecondary.PrimarySecondaryLayout.SecondaryLeftPrimaryRight">
            <summary>
            Secondary on the left, primary fills right
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.GridPrimarySecondary.PrimarySecondaryLayout.PrimaryLeftSecondaryRight">
            <summary>
            Secondary on the right, primary fills left
            </summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Layout.PrimarySecondaryOrientation">
            <summary>
            Defines the order in which UI elements are arranged
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.PrimarySecondaryOrientation.SecondaryPrimary">
            <summary>
            Secondary first, then primary (often secondary at the top and primary at the bottom, or secondary left and primary right)
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.PrimarySecondaryOrientation.PrimarySecondary">
            <summary>
            Primary first, then secondary (often secondary at the bottom and primary at the top, or secondary right and primary left)
            </summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Layout.LazyLoadStackPanel">
            <summary>
            Special stack panel class that can use ILazyLoad members
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.LazyLoadStackPanel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Wpf.Layout.LazyLoadStackPanel"/> class.
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.LazyLoadStackPanel.MeasureOverride(System.Windows.Size)">
            <summary>
            When overridden in a derived class, measures the size in layout required for child elements and determines a size for the <see cref="T:System.Windows.FrameworkElement" />-derived class.
            </summary>
            <param name="availableSize">The available size that this element can give to child elements. Infinity can be specified as a value to indicate that the element will size to whatever content is available.</param>
            <returns>The size that this element determines it needs during layout, based on its calculations of child element sizes.</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.LazyLoadStackPanel.ArrangeOverride(System.Windows.Size)">
            <summary>
            When overridden in a derived class, positions child elements and determines a size for a <see cref="T:System.Windows.FrameworkElement" /> derived class.
            </summary>
            <param name="finalSize">The final area within the parent that this element should use to arrange itself and its children.</param>
            <returns>The actual size used.</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.LazyLoadStackPanel.LineUp">
            <summary>
            Scrolls up within content by one logical unit.
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.LazyLoadStackPanel.LineDown">
            <summary>
            Scrolls down within content by one logical unit.
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.LazyLoadStackPanel.LineLeft">
            <summary>
            Scrolls left within content by one logical unit.
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.LazyLoadStackPanel.LineRight">
            <summary>
            Scrolls right within content by one logical unit.
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.LazyLoadStackPanel.PageUp">
            <summary>
            Scrolls up within content by one page.
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.LazyLoadStackPanel.PageDown">
            <summary>
            Scrolls down within content by one page.
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.LazyLoadStackPanel.PageLeft">
            <summary>
            Scrolls left within content by one page.
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.LazyLoadStackPanel.PageRight">
            <summary>
            Scrolls right within content by one page.
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.LazyLoadStackPanel.MouseWheelUp">
            <summary>
            Scrolls up within content after a user clicks the wheel button on a mouse.
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.LazyLoadStackPanel.MouseWheelDown">
            <summary>
            Scrolls down within content after a user clicks the wheel button on a mouse.
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.LazyLoadStackPanel.MouseWheelLeft">
            <summary>
            Scrolls left within content after a user clicks the wheel button on a mouse.
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.LazyLoadStackPanel.MouseWheelRight">
            <summary>
            Scrolls right within content after a user clicks the wheel button on a mouse.
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.LazyLoadStackPanel.SetHorizontalOffset(System.Double)">
            <summary>
            Sets the amount of horizontal offset.
            </summary>
            <param name="offset">The degree to which content is horizontally offset from the containing viewport.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.LazyLoadStackPanel.SetVerticalOffset(System.Double)">
            <summary>
            Sets the amount of vertical offset.
            </summary>
            <param name="offset">The degree to which content is vertically offset from the containing viewport.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.LazyLoadStackPanel.MakeVisible(System.Windows.Media.Visual,System.Windows.Rect)">
            <summary>
            Forces content to scroll until the coordinate space of a <see cref="T:System.Windows.Media.Visual" /> object is visible.
            </summary>
            <param name="visual">A <see cref="T:System.Windows.Media.Visual" /> that becomes visible.</param>
            <param name="rectangle">A bounding rectangle that identifies the coordinate space to make visible.</param>
            <returns>A <see cref="T:System.Windows.Rect" /> that is visible.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.LazyLoadStackPanel.CanVerticallyScroll">
            <summary>
            Gets or sets a value that indicates whether scrolling on the vertical axis is possible.
            </summary>
            <value><c>true</c> if this instance can vertically scroll; otherwise, <c>false</c>.</value>
            <returns>true if scrolling is possible; otherwise, false. This property has no default value.</returns>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.LazyLoadStackPanel.CanHorizontallyScroll">
            <summary>
            Gets or sets a value that indicates whether scrolling on the horizontal axis is possible.
            </summary>
            <value><c>true</c> if this instance can horizontally scroll; otherwise, <c>false</c>.</value>
            <returns>true if scrolling is possible; otherwise, false. This property has no default value.</returns>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.LazyLoadStackPanel.ExtentWidth">
            <summary>
            Gets the horizontal size of the extent.
            </summary>
            <value>The width of the extent.</value>
            <returns>A <see cref="T:System.Double" /> that represents, in device independent pixels, the horizontal size of the extent. This property has no default value.</returns>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.LazyLoadStackPanel.ExtentHeight">
            <summary>
            Gets the vertical size of the extent.
            </summary>
            <value>The height of the extent.</value>
            <returns>A <see cref="T:System.Double" /> that represents, in device independent pixels, the vertical size of the extent.This property has no default value.</returns>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.LazyLoadStackPanel.ViewportWidth">
            <summary>
            Gets the horizontal size of the viewport for this content.
            </summary>
            <value>The width of the viewport.</value>
            <returns>A <see cref="T:System.Double" /> that represents, in device independent pixels, the horizontal size of the viewport for this content. This property has no default value.</returns>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.LazyLoadStackPanel.ViewportHeight">
            <summary>
            Gets the vertical size of the viewport for this content.
            </summary>
            <value>The height of the viewport.</value>
            <returns>A <see cref="T:System.Double" /> that represents, in device independent pixels, the vertical size of the viewport for this content. This property has no default value.</returns>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.LazyLoadStackPanel.HorizontalOffset">
            <summary>
            Gets the horizontal offset.
            </summary>
            <value>The horizontal offset.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.LazyLoadStackPanel.VerticalOffset">
            <summary>
            Gets the vertical offset of the scrolled content.
            </summary>
            <value>The vertical offset.</value>
            <returns>A <see cref="T:System.Double" /> that represents, in device independent pixels, the vertical offset of the scrolled content. Valid values are between zero and the <see cref="P:System.Windows.Controls.Primitives.IScrollInfo.ExtentHeight" /> minus the <see cref="P:System.Windows.Controls.Primitives.IScrollInfo.ViewportHeight" />. This property has no default value.</returns>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.LazyLoadStackPanel.ScrollOwner">
            <summary>
            Gets or sets a <see cref="T:System.Windows.Controls.ScrollViewer" /> element that controls scrolling behavior.
            </summary>
            <value>The scroll owner.</value>
            <returns>A <see cref="T:System.Windows.Controls.ScrollViewer" /> element that controls scrolling behavior. This property has no default value.</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.LazyLoadStackPanel.InvalidateScrollInfo">
            <summary>
            Invalidates the scroll information for the scroll owner (if a scroll owner is set).
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.LazyLoadStackPanel.ScrollToItem(System.Int32)">
            <summary>
            Scrolls the current display to the specified item index
            </summary>
            <param name="itemIndex">Index of the item.</param>
        </member>
        <member name="T:CODE.Framework.Wpf.Layout.MetroTiles">
            <summary>
            Performs layout of child elements using a Windows 8 metro style approach
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.MetroTiles.GroupTitleProperty">
            <summary>Display title for the group an item is in</summary>
            <remarks>This is a display value only and changes in localized versions</remarks>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.MetroTiles.GroupNameProperty">
            <summary>Internal name for the group an item is in</summary>
            <remarks>This name never changes, even in localized versions. Note that if this property is not set explicitly, it defaults to the group title.</remarks>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.MetroTiles.DefaultTileWidthProperty">
            <summary>Default tile width mode used for all tiles that do not have an explicit mode set</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.MetroTiles.TileWidthModeProperty">
            <summary>Internal name for the group an item is in</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.MetroTiles.TileHeightProperty">
            <summary>Height of a single tile (which is uniform across all objects in a tile layout)</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.MetroTiles.TileWidthProperty">
            <summary>Width of a single tile (which is uniform across all objects in a tile layout... double width tiles are twice this value + horizontal tile spacing)</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.MetroTiles.TileVisibilityProperty">
            <summary>Visibility of the tile</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.MetroTiles.HorizontalTileSpacingProperty">
            <summary>Horizontal spacing of a tiles within groups</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.MetroTiles.VerticalTileSpacingProperty">
            <summary>Vertical tile spacing within groups</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.MetroTiles.HorizontalGroupSpacingProperty">
            <summary>Horizontal spacing of a tiles within groups</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.MetroTiles.ContentTopLeftPaddingProperty">
            <summary>Top and left padding before the first tile</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.MetroTiles.RenderHeadersProperty">
            <summary>Defines whether text headers shall be rendered</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.MetroTiles.HeaderRendererProperty">
            <summary>Object used to render the captions</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.MetroTiles.HeaderFontFamilyProperty">
            <summary>Font family used to render group headers</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.MetroTiles.HeaderFontStyleProperty">
            <summary>Font style used to render group headers</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.MetroTiles.HeaderFontWeightProperty">
            <summary>Font weight used to render group headers</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.MetroTiles.HeaderFontSizeProperty">
            <summary>Font size used to render group headers</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.MetroTiles.HeaderForegroundBrushProperty">
            <summary>Foreground brush used to render group headers</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.MetroTiles.HeaderSpacingProperty">
            <summary>Spacing between the caption and the element</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.MetroTiles.DefaultTileWidth">
            <summary>Default tile width mode used for all tiles that do not have an explicit mode set</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.MetroTiles.ContentTopLeftPadding">
            <summary>Top and left padding before the first tile</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.MetroTiles.RenderHeaders">
            <summary>Defines whether text headers shall be rendered</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.MetroTiles.HeaderRenderer">
            <summary>Object used to render the captions</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.MetroTiles.HeaderFontFamily">
            <summary>Font family used to render group headers</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.MetroTiles.HeaderFontStyle">
            <summary>Font style used to render group headers</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.MetroTiles.HeaderFontWeight">
            <summary>Font weight used to render group headers</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.MetroTiles.HeaderFontSize">
            <summary>Font size used to render group headers</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.MetroTiles.HeaderForegroundBrush">
            <summary>Foreground brush used to render group headers</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.MetroTiles.HeaderSpacing">
            <summary>Spacing between the caption and the element</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.MetroTiles.GetGroupTitle(System.Windows.DependencyObject)">
            <summary>Get operation for GroupTitleProperty dependency property</summary><param name="obj">The object the property really belongs to</param><returns>Actual property value.</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.MetroTiles.SetGroupTitle(System.Windows.DependencyObject,System.String)">
            <summary>Set operation for GroupTitleProperty dependency property</summary><param name="obj">The object the property really belongs to</param><param name="value">The value to set.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.MetroTiles.GetGroupName(System.Windows.DependencyObject)">
            <summary>Get operation for GroupTitleProperty dependency property</summary><param name="obj">The object the property really belongs to</param><returns>Actual property value.</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.MetroTiles.SetGroupName(System.Windows.DependencyObject,System.String)">
            <summary>Set operation for GroupTitleProperty dependency property</summary><param name="obj">The object the property really belongs to</param><param name="value">The value to set.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.MetroTiles.GetTileWidthMode(System.Windows.DependencyObject)">
            <summary>Get operation for GroupTitleProperty dependency property</summary><param name="obj">The object the property really belongs to</param><returns>Actual property value.</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.MetroTiles.SetTileWidthMode(System.Windows.DependencyObject,CODE.Framework.Wpf.Layout.TileWidthModes)">
            <summary>Set operation for GroupTitleProperty dependency property</summary><param name="obj">The object the property really belongs to</param><param name="value">The value to set.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.MetroTiles.GetTileHeight(System.Windows.DependencyObject)">
            <summary>Get operation for TileHeightProperty dependency property</summary><param name="obj">The object the property really belongs to</param><returns>Actual property value.</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.MetroTiles.SetTileHeight(System.Windows.DependencyObject,System.Double)">
            <summary>Set operation for TileHeightProperty dependency property</summary><param name="obj">The object the property really belongs to</param><param name="value">The value to set.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.MetroTiles.GetTileVisibility(System.Windows.DependencyObject)">
            <summary>
            Gets the tile visibility.
            </summary>
            <param name="obj">The object.</param>
            <returns>Visibility.</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.MetroTiles.SetTileVisibility(System.Windows.DependencyObject,System.Windows.Visibility)">
            <summary>
            Sets the tile visibility.
            </summary>
            <param name="obj">The object.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.MetroTiles.GetTileWidth(System.Windows.DependencyObject)">
            <summary>Get operation for TileHeightProperty dependency property</summary><param name="obj">The object the property really belongs to</param><returns>Actual property value.</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.MetroTiles.SetTileWidth(System.Windows.DependencyObject,System.Double)">
            <summary>Set operation for TileHeightProperty dependency property</summary><param name="obj">The object the property really belongs to</param><param name="value">The value to set.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.MetroTiles.GetHorizontalTileSpacing(System.Windows.DependencyObject)">
            <summary>Get operation for HorizontalTileSpacingProperty dependency property</summary><param name="obj">The object the property really belongs to</param><returns>Actual property value.</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.MetroTiles.SetHorizontalTileSpacing(System.Windows.DependencyObject,System.Double)">
            <summary>Set operation for HorizontalTileSpacingProperty dependency property</summary><param name="obj">The object the property really belongs to</param><param name="value">The value to set.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.MetroTiles.GetVerticalTileSpacing(System.Windows.DependencyObject)">
            <summary>Get operation for VerticalTileSpacingProperty dependency property</summary><param name="obj">The object the property really belongs to</param><returns>Actual property value.</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.MetroTiles.SetVerticalTileSpacing(System.Windows.DependencyObject,System.Double)">
            <summary>Set operation for VerticalTileSpacingProperty dependency property</summary><param name="obj">The object the property really belongs to</param><param name="value">The value to set.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.MetroTiles.GetHorizontalGroupSpacing(System.Windows.DependencyObject)">
            <summary>Get operation for HorizontalTileSpacingProperty dependency property</summary><param name="obj">The object the property really belongs to</param><returns>Actual property value.</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.MetroTiles.SetHorizontalGroupSpacing(System.Windows.DependencyObject,System.Double)">
            <summary>Set operation for HorizontalTileSpacingProperty dependency property</summary><param name="obj">The object the property really belongs to</param><param name="value">The value to set.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.MetroTiles.InvalidateEverything(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>Invalidates all layout, measurement, and rendering</summary>
            <param name="dependencyObject">One-To-Many panel to invalidate</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.MetroTiles.MeasureOverride(System.Windows.Size)">
            <summary>
            When overridden in a derived class, measures the size in layout required for child elements and determines a size for the <see cref="T:System.Windows.FrameworkElement"/>-derived class.
            </summary>
            <param name="availableSize">The available size that this element can give to child elements. Infinity can be specified as a value to indicate that the element will size to whatever content is available.</param>
            <returns>
            The size that this element determines it needs during layout, based on its calculations of child element sizes.
            </returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.MetroTiles.ArrangeOverride(System.Windows.Size)">
            <summary>
            When overridden in a derived class, positions child elements and determines a size for a <see cref="T:System.Windows.FrameworkElement"/> derived class.
            </summary>
            <param name="finalSize">The final area within the parent that this element should use to arrange itself and its children.</param>
            <returns>The actual size used.</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.MetroTiles.GetChildrenByGroup">
            <summary>
            Goes through the entire collection of child elements and returns them by groups
            </summary>
            <returns></returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.MetroTiles.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
            Draws the content of a <see cref="T:System.Windows.Media.DrawingContext"/> object during the render pass of a <see cref="T:System.Windows.Controls.Panel"/> element.
            </summary>
            <param name="dc">The <see cref="T:System.Windows.Media.DrawingContext"/> object to draw.</param>
        </member>
        <member name="T:CODE.Framework.Wpf.Layout.TileWidthModes">
            <summary>
            Standard supported tile widths
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.TileWidthModes.Normal">
            <summary>
            Normal (typically square)
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.TileWidthModes.Double">
            <summary>
            Double-wide
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.TileWidthModes.Default">
            <summary>
            Uses the default set for the entire panel
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.TileWidthModes.Tiny">
            <summary>
            Tiny tile size (quarter of the normal ones)
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.TileWidthModes.DoubleSquare">
            <summary>
            Square size of the double size (twice as large as double)
            </summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Layout.MultiPanel">
            <summary>
            This layout panel arranges objects in multiple "panels", typically multiple rows of panels
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.MultiPanel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Wpf.Layout.MultiPanel"/> class.
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.MultiPanel.Spacing">
            <summary>
            Margin between panels
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.MultiPanel.SpacingProperty">
            <summary>
            Margin between panels
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.MultiPanel.HeaderRenderer">
            <summary>
            Optional header renderer object
            </summary>
            <value>The header renderer.</value>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.MultiPanel.HeaderRendererProperty">
            <summary>
            Optional header renderer object
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.MultiPanel.OnHeaderRendererChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Fires when the Header Renderer changes.
            </summary>
            <param name="d">The multi panel object</param>
            <param name="args">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.MultiPanel.MeasureOverride(System.Windows.Size)">
            <summary>
            When overridden in a derived class, measures the size in layout required for child elements and determines a size for the <see cref="T:System.Windows.FrameworkElement" />-derived class.
            </summary>
            <param name="availableSize">The available size that this element can give to child elements. Infinity can be specified as a value to indicate that the element will size to whatever content is available.</param>
            <returns>The size that this element determines it needs during layout, based on its calculations of child element sizes.</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.MultiPanel.ArrangeOverride(System.Windows.Size)">
            <summary>
            When overridden in a derived class, positions child elements and determines a size for a <see cref="T:System.Windows.FrameworkElement" /> derived class.
            </summary>
            <param name="finalSize">The final area within the parent that this element should use to arrange itself and its children.</param>
            <returns>The actual size used.</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.MultiPanel.OnMouseMove(System.Windows.Input.MouseEventArgs)">
            <summary>
            Invoked when an unhandled System.Windows.Input.Mouse.MouseMove attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.MultiPanel.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
            <summary>
            Invoked when an unhandled System.Windows.Input.Mouse.MouseEnter attached event is raised on this element. Implement this method to add class handling for this event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.MultiPanel.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
            <summary>
            Invoked when an unhandled System.Windows.Input.Mouse.MouseLeave attached event is raised on this element. Implement this method to add class handling for this event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.MultiPanel.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Invoked when an unhandled System.Windows.Input.Mouse.MouseDown attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. This event data reports details about the mouse button that was pressed and the handled state.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.MultiPanel.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Invoked when an unhandled System.Windows.Input.Mouse.MouseUp routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. The event data reports that the mouse button was released.</param>
        </member>
        <member name="T:CODE.Framework.Wpf.Layout.MultiPanel.HeaderRenderInformation">
            <summary>
            Header renderer information
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.MultiPanel.HeaderRenderInformation.TotalArea">
            <summary>
            Complete area used up by the child element + header
            </summary>
            <value>The total area.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.MultiPanel.HeaderRenderInformation.Child">
            <summary>
            Gets or sets the child.
            </summary>
            <value>The child.</value>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.MultiPanel.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
            Draws the content of a <see cref="T:System.Windows.Media.DrawingContext" /> object during the render pass of a <see cref="T:System.Windows.Controls.Panel" /> element.
            </summary>
            <param name="dc">The <see cref="T:System.Windows.Media.DrawingContext" /> object to draw.</param>
        </member>
        <member name="T:CODE.Framework.Wpf.Layout.IMultiPanelHeaderRenderer">
            <summary>
            This interface can be implemented to create a renderer object that measures and renders
            headers for child elements contained in a MultiPanel
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.IMultiPanelHeaderRenderer.GetClientArea(System.Windows.Rect)">
            <summary>
            Returns the client area (the area available for the child control) based on the total area available for the child
            </summary>
            <param name="totalArea">The total area.</param>
            <returns>The client area</returns>
            <remarks>
            When a header is added for a child element, it takes away from the area available for the child.
            For instance, when a header text is to be rendered across the top of a child, then the child must be moved down 
            and the overall space for the child shrinks accordingly. The value returned by this method indicates
            the remaining space for the child element.
            </remarks>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.IMultiPanelHeaderRenderer.Render(System.Windows.Media.DrawingContext,System.Windows.Size,System.Windows.UIElement)">
            <summary>Renders the header element for a single child.</summary>
            <param name="dc">The drawing context.</param>
            <param name="clientAreaSize">Size of the client area of the entire contained control (including area). Note: Top/left render position is always 0,0.</param>
            <param name="child">The actual child element.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.IMultiPanelHeaderRenderer.OnMouseEnter(CODE.Framework.Wpf.Layout.MultiPanel,System.Windows.Input.MouseEventArgs,System.Collections.Generic.List{CODE.Framework.Wpf.Layout.MultiPanel.HeaderRenderInformation})">
            <summary>
            Invoked when an unhandled System.Windows.Input.Mouse.MouseEnter attached event is raised on this element. Implement this method to add class handling for this event.
            </summary>
            <param name="multiPanel">The multi panel.</param>
            <param name="e">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</param>
            <param name="headerRenderAreas">Area information for specific headers</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.IMultiPanelHeaderRenderer.OnMouseLeave(CODE.Framework.Wpf.Layout.MultiPanel,System.Windows.Input.MouseEventArgs,System.Collections.Generic.List{CODE.Framework.Wpf.Layout.MultiPanel.HeaderRenderInformation})">
            <summary>
            Invoked when an unhandled System.Windows.Input.Mouse.MouseLeave attached event is raised on this element. Implement this method to add class handling for this event.
            </summary>
            <param name="multiPanel">The multi panel.</param>
            <param name="e">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</param>
            <param name="headerRenderAreas">Area information for specific headers</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.IMultiPanelHeaderRenderer.OnMouseDown(CODE.Framework.Wpf.Layout.MultiPanel,System.Windows.Input.MouseButtonEventArgs,System.Collections.Generic.List{CODE.Framework.Wpf.Layout.MultiPanel.HeaderRenderInformation})">
            <summary>
            Invoked when an unhandled System.Windows.Input.Mouse.MouseDown attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.
            </summary>
            <param name="multiPanel">The multi panel.</param>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. This event data reports details about the mouse button that was pressed and the handled state.</param>
            <param name="headerRenderAreas">Area information for specific headers</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.IMultiPanelHeaderRenderer.OnMouseUp(CODE.Framework.Wpf.Layout.MultiPanel,System.Windows.Input.MouseButtonEventArgs,System.Collections.Generic.List{CODE.Framework.Wpf.Layout.MultiPanel.HeaderRenderInformation})">
            <summary>
            Invoked when an unhandled System.Windows.Input.Mouse.MouseUp routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.
            </summary>
            <param name="multiPanel">The multi panel.</param>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. The event data reports that the mouse button was released.</param>
            <param name="headerRenderAreas">Area information for specific headers</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.IMultiPanelHeaderRenderer.OnMouseMove(CODE.Framework.Wpf.Layout.MultiPanel,System.Windows.Input.MouseEventArgs,System.Collections.Generic.List{CODE.Framework.Wpf.Layout.MultiPanel.HeaderRenderInformation})">
            <summary>
            Invoked when an unhandled System.Windows.Input.Mouse.MouseMove attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.
            </summary>
            <param name="multiPanel">The multi panel.</param>
            <param name="e">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</param>
            <param name="headerRenderAreas">Area information for specific headers</param>
        </member>
        <member name="T:CODE.Framework.Wpf.Layout.MultiPanelHeaderRenderer">
            <summary>
            Standard header renderer object for multi panel headers
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.MultiPanelHeaderRenderer.Orientation">
            <summary>
            Header Text Orientation
            </summary>
            <value>The orientation of the header text.</value>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.MultiPanelHeaderRenderer.OrientationProperty">
            <summary>
            Header Text Orientation
            </summary>
            <value>The orientation of the header text.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.MultiPanelHeaderRenderer.FontSize">
            <summary>
            Header text font size
            </summary>
            <value>The header text font size.</value>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.MultiPanelHeaderRenderer.FontSizeProperty">
            <summary>
            Header text font size
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.MultiPanelHeaderRenderer.FontFamily">
            <summary>
            Header text font family
            </summary>
            <value>The header text font family.</value>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.MultiPanelHeaderRenderer.FontFamilyProperty">
            <summary>
            Header text font family
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.MultiPanelHeaderRenderer.FontStyle">
            <summary>
            Header text font style
            </summary>
            <value>The header text font style.</value>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.MultiPanelHeaderRenderer.FontStyleProperty">
            <summary>
            Header text font style
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.MultiPanelHeaderRenderer.FontWeight">
            <summary>
            Header text font weight
            </summary>
            <value>The header text font weight.</value>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.MultiPanelHeaderRenderer.FontWeightProperty">
            <summary>
            Header text font weight
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.MultiPanelHeaderRenderer.Foreground">
            <summary>
            Foreground brush for the header text
            </summary>
            <value>Header text foreground brush.</value>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.MultiPanelHeaderRenderer.ForegroundProperty">
            <summary>
            Foreground brush for the header text
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.MultiPanelHeaderRenderer.Background">
            <summary>
            The background brush for the entire header area
            </summary>
            <value>The background brush.</value>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.MultiPanelHeaderRenderer.BackgroundProperty">
            <summary>
            The background brush for the entire header area
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.MultiPanelHeaderRenderer.CloseIcon">
            <summary>
            Brush used to render the close icon
            </summary>
            <value>The close icon.</value>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.MultiPanelHeaderRenderer.CloseIconProperty">
            <summary>
            Brush used to render the close icon
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.MultiPanelHeaderRenderer.MaxCloseIconSize">
            <summary>
            Max height/width for the close icon
            </summary>
            <value>The maximum size of the close icon.</value>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.MultiPanelHeaderRenderer.MaxCloseIconSizeProperty">
            <summary>
            Max height/width for the close icon
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.MultiPanelHeaderRenderer.FloatWindowStyle">
            <summary>
            Optional style for windows in undock scenarios
            </summary>
            <value>The float window style.</value>
            <remarks>The style needs to target type FloatingDockWindow</remarks>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.MultiPanelHeaderRenderer.FloatWindowStyleProperty">
            <summary>
            Optional style for windows in undock scenarios
            </summary>
            <remarks>The style needs to target type FloatingDockWindow</remarks>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.MultiPanelHeaderRenderer.GetClientArea(System.Windows.Rect)">
            <summary>
            Returns the client area (the area available for the child control) based on the total area available for the child
            </summary>
            <param name="totalArea">The total area.</param>
            <returns>The client area</returns>
            <remarks>When a header is added for a child element, it takes away from the area available for the child.
            For instance, when a header text is to be rendered across the top of a child, then the child must be moved down
            and the overall space for the child shrinks accordingly. The value returned by this method indicates
            the remaining space for the child element.</remarks>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.MultiPanelHeaderRenderer.Render(System.Windows.Media.DrawingContext,System.Windows.Size,System.Windows.UIElement)">
            <summary>
            Renders the header element for a single child
            </summary>
            <param name="dc">The drawing context.</param>
            <param name="clientAreaSize">Size of the client area of the entire contained control (including area). Note: Top/left render position is always 0,0.</param>
            <param name="child">The actual child element.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.MultiPanelHeaderRenderer.OnMouseEnter(CODE.Framework.Wpf.Layout.MultiPanel,System.Windows.Input.MouseEventArgs,System.Collections.Generic.List{CODE.Framework.Wpf.Layout.MultiPanel.HeaderRenderInformation})">
            <summary>
            Invoked when an unhandled System.Windows.Input.Mouse.MouseEnter attached event is raised on this element. Implement this method to add class handling for this event.
            </summary>
            <param name="multiPanel">The multi panel.</param>
            <param name="e">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</param>
            <param name="headerRenderAreas"></param>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.MultiPanelHeaderRenderer.OnMouseLeave(CODE.Framework.Wpf.Layout.MultiPanel,System.Windows.Input.MouseEventArgs,System.Collections.Generic.List{CODE.Framework.Wpf.Layout.MultiPanel.HeaderRenderInformation})">
            <summary>
            Invoked when an unhandled System.Windows.Input.Mouse.MouseLeave attached event is raised on this element. Implement this method to add class handling for this event.
            </summary>
            <param name="multiPanel">The multi panel.</param>
            <param name="e">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</param>
            <param name="headerRenderAreas"></param>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.MultiPanelHeaderRenderer.OnMouseDown(CODE.Framework.Wpf.Layout.MultiPanel,System.Windows.Input.MouseButtonEventArgs,System.Collections.Generic.List{CODE.Framework.Wpf.Layout.MultiPanel.HeaderRenderInformation})">
            <summary>
            Invoked when an unhandled System.Windows.Input.Mouse.MouseDown attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.
            </summary>
            <param name="multiPanel">The multi panel.</param>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. This event data reports details about the mouse button that was pressed and the handled state.</param>
            <param name="headerRenderAreas"></param>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.MultiPanelHeaderRenderer.OnMouseUp(CODE.Framework.Wpf.Layout.MultiPanel,System.Windows.Input.MouseButtonEventArgs,System.Collections.Generic.List{CODE.Framework.Wpf.Layout.MultiPanel.HeaderRenderInformation})">
            <summary>
            Invoked when an unhandled System.Windows.Input.Mouse.MouseUp routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.
            </summary>
            <param name="multiPanel">The multi panel.</param>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. The event data reports that the mouse button was released.</param>
            <param name="headerRenderAreas"></param>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.MultiPanelHeaderRenderer.OnMouseMove(CODE.Framework.Wpf.Layout.MultiPanel,System.Windows.Input.MouseEventArgs,System.Collections.Generic.List{CODE.Framework.Wpf.Layout.MultiPanel.HeaderRenderInformation})">
            <summary>
            Invoked when an unhandled System.Windows.Input.Mouse.MouseMove attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.
            </summary>
            <param name="multiPanel">The multi panel.</param>
            <param name="e">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</param>
            <param name="headerRenderAreas"></param>
        </member>
        <member name="T:CODE.Framework.Wpf.Layout.OneToManyPanel">
            <summary>
            Special layout panel geared towards rendering 1-to-many UIs (such as customers and their orders)
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.OneToManyPanel.CaptionRenderer">
            <summary>Object used to render the captions</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.OneToManyPanel.CaptionRendererProperty">
            <summary>Object used to render the captions</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.OneToManyPanel.CaptionFontFamily">
            <summary>Font family used to render group headers</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.OneToManyPanel.CaptionFontFamilyProperty">
            <summary>Font family used to render group headers</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.OneToManyPanel.CaptionFontStyle">
            <summary>Font style used to render group headers</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.OneToManyPanel.CaptionFontStyleProperty">
            <summary>Font style used to render group headers</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.OneToManyPanel.CaptionFontWeight">
            <summary>Font weight used to render group headers</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.OneToManyPanel.CaptionFontWeightProperty">
            <summary>Font weight used to render group headers</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.OneToManyPanel.CaptionFontSize">
            <summary>Font size used to render group headers</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.OneToManyPanel.CaptionFontSizeProperty">
            <summary>Font size used to render group headers</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.OneToManyPanel.CaptionForegroundBrush">
            <summary>Foreground brush used to render group headers</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.OneToManyPanel.CaptionForegroundBrushProperty">
            <summary>Foreground brush used to render group headers</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.OneToManyPanel.Orientation">
            <summary>Indicates whether the general layout is horizontal or vertical</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.OneToManyPanel.OrientationProperty">
            <summary>Indicates whether the general layout is horizontal or vertical</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.OneToManyPanel.Spacing">
            <summary>Spacing between the 2 elements</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.OneToManyPanel.SpacingProperty">
            <summary>Spacing between the 2 elements</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.OneToManyPanel.CaptionSpacing">
            <summary>Spacing between the caption and the element</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.OneToManyPanel.CaptionSpacingProperty">
            <summary>Spacing between the caption and the element</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.OneToManyPanel.CaptionProperty">
            <summary>Caption for elements within a one-to-many panel</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.OneToManyPanel.GetCaption(System.Windows.DependencyObject)">
            <summary>Caption for elements within a one-to-many panel</summary>
            <param name="obj">The dependency object the value is associated with</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.OneToManyPanel.SetCaption(System.Windows.DependencyObject,System.String)">
            <summary>Caption for elements within a one-to-many panel</summary>
            <param name="obj">The dependency object the value is associated with</param>
            <param name="value">Value</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.OneToManyPanel.InvalidateEverything(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>Invalidates all layout, measurement, and rendering</summary>
            <param name="dependencyObject">One-To-Many panel to invalidate</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.OneToManyPanel.MeasureOverride(System.Windows.Size)">
            <summary>
            When overridden in a derived class, measures the size in layout required for child elements and determines a size for the <see cref="T:System.Windows.FrameworkElement"/>-derived class.
            </summary>
            <param name="availableSize">The available size that this element can give to child elements. Infinity can be specified as a value to indicate that the element will size to whatever content is available.</param>
            <returns>
            The size that this element determines it needs during layout, based on its calculations of child element sizes.
            </returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.OneToManyPanel.ArrangeOverride(System.Windows.Size)">
            <summary>
            When overridden in a derived class, positions child elements and determines a size for a <see cref="T:System.Windows.FrameworkElement"/> derived class.
            </summary>
            <param name="finalSize">The final area within the parent that this element should use to arrange itself and its children.</param>
            <returns>
            The actual size used.
            </returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.OneToManyPanel.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
            Draws the content of a <see cref="T:System.Windows.Media.DrawingContext"/> object during the render pass of a <see cref="T:System.Windows.Controls.Panel"/> element.
            </summary>
            <param name="dc">The <see cref="T:System.Windows.Media.DrawingContext"/> object to draw.</param>
        </member>
        <member name="T:CODE.Framework.Wpf.Layout.PanoramaPanel">
            <summary>
            Panorama layout container (similar, but not identical, to the Windows Phone Panorama control)
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.PanoramaPanel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Wpf.Layout.PanoramaPanel"/> class.
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.PanoramaPanel.SelectedIndex">
            <summary>
            Selected item within the panorama
            </summary>
            <value>The index of the selected.</value>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.PanoramaPanel.SelectedIndexProperty">
            <summary>
            Selected item within the panorama
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.PanoramaPanel.OnSelectedIndexChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Fires when the selected panorama item changes
            </summary>
            <param name="d">The panorama panel</param>
            <param name="args">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.PanoramaPanel.HeaderFontSize">
            <summary>
            Font size for header elements
            </summary>
            <value>The size of the header font.</value>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.PanoramaPanel.HeaderFontSizeProperty">
            <summary>
            Font size for header elements
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.PanoramaPanel.OnHeaderFontSizeChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Fires when the header font size changes
            </summary>
            <param name="d">The panorama panel</param>
            <param name="args">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.PanoramaPanel.HeaderFontFamily">
            <summary>
            Font family used for header rendering
            </summary>
            <value>The header font family.</value>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.PanoramaPanel.HeaderFontFamilyProperty">
            <summary>
            Font family used for header rendering
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.PanoramaPanel.OnHeaderFontFamilyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Fires when the header font family changes
            </summary>
            <param name="d">The panorama panel</param>
            <param name="args">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.PanoramaPanel.SelectedHeaderForeground">
            <summary>
            Brush used to render the selected header
            </summary>
            <value>The selected header foreground.</value>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.PanoramaPanel.SelectedHeaderForegroundProperty">
            <summary>
            Brush used to render the selected header
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.PanoramaPanel.OnSelectedHeaderForegroundChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Fires when the header selected foreground brush changes
            </summary>
            <param name="d">The panorama panel</param>
            <param name="args">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.PanoramaPanel.UnselectedHeaderForeground">
            <summary>
            Brush used to render the unselected header
            </summary>
            <value>The unselected header foreground.</value>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.PanoramaPanel.UnselectedHeaderForegroundProperty">
            <summary>
            Brush used to render the unselected header
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.PanoramaPanel.OnUnselectedHeaderForegroundChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Fires when the header unselected foreground brush changes
            </summary>
            <param name="d">The panorama panel</param>
            <param name="args">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.PanoramaPanel.HorizontalHeaderRenderingOffset">
            <summary>
            For internal use only
            </summary>
            <value>The horizontal header rendering offset.</value>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.PanoramaPanel.HorizontalHeaderRenderingOffsetProperty">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.PanoramaPanel.OnHorizontalHeaderRenderingOffsetChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            For internal use only
            </summary>
            <param name="d">The panorama panel</param>
            <param name="args">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.PanoramaPanel.MeasureOverride(System.Windows.Size)">
            <summary>
            When overridden in a derived class, measures the size in layout required for child elements and determines a size for the <see cref="T:System.Windows.FrameworkElement" />-derived class.
            </summary>
            <param name="availableSize">The available size that this element can give to child elements. Infinity can be specified as a value to indicate that the element will size to whatever content is available.</param>
            <returns>The size that this element determines it needs during layout, based on its calculations of child element sizes.</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.PanoramaPanel.ArrangeOverride(System.Windows.Size)">
            <summary>
            When overridden in a derived class, positions child elements and determines a size for a <see cref="T:System.Windows.FrameworkElement" /> derived class.
            </summary>
            <param name="finalSize">The final area within the parent that this element should use to arrange itself and its children.</param>
            <returns>The actual size used.</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.PanoramaPanel.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
            Draws the content of a <see cref="T:System.Windows.Media.DrawingContext" /> object during the render pass of a <see cref="T:System.Windows.Controls.Panel" /> element.
            </summary>
            <param name="dc">The <see cref="T:System.Windows.Media.DrawingContext" /> object to draw.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.PanoramaPanel.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Invoked when an unhandled <see cref="E:System.Windows.UIElement.MouseLeftButtonDown" /> routed event is raised on this element. Implement this method to add class handling for this event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. The event data reports that the left mouse button was pressed.</param>
        </member>
        <member name="T:CODE.Framework.Wpf.Layout.PrimarySecondaryHorizontalPanel">
            <summary>
            This panel can lay out primary/secondary element views in a horizontal fashion, with added features, such as collapsing the secondary part.
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.PrimarySecondaryHorizontalPanel.CanCollapseSecondary">
            <summary>
            Defines whether the secondary part of the UI can be collapsed
            </summary>
            <value><c>true</c> if this instance can collapse secondary; otherwise, <c>false</c>.</value>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.PrimarySecondaryHorizontalPanel.CanCollapseSecondaryProperty">
            <summary>
            Defines whether the secondary part of the UI can be collapsed
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.PrimarySecondaryHorizontalPanel.IsSecondaryElementCollapsed">
            <summary>
            Indicates whether the secondary element is currently collapsed
            </summary>
            <value><c>true</c> if this instance is secondary element collapsed; otherwise, <c>false</c>.</value>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.PrimarySecondaryHorizontalPanel.IsSecondaryElementCollapsedProperty">
            <summary>
            Indicates whether the secondary element is currently collapsed
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.PrimarySecondaryHorizontalPanel.OnIsSecondaryElementCollapsedChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Fires when the collapse state of the secondary element changes
            </summary>
            <param name="d">The panel object</param>
            <param name="args">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.PrimarySecondaryHorizontalPanel.ElementSpacing">
            <summary>
            Spacing between primary and secondary elements
            </summary>
            <value>The element spacing.</value>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.PrimarySecondaryHorizontalPanel.ElementSpacingProperty">
            <summary>
            Spacing between primary and secondary elements
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.PrimarySecondaryHorizontalPanel.SecondaryElementWidth">
            <summary>
            Width available to the secondary element
            </summary>
            <value>The width of the secondary element.</value>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.PrimarySecondaryHorizontalPanel.SecondaryElementWidthProperty">
            <summary>
            Width available to the secondary element
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.PrimarySecondaryHorizontalPanel.HeaderRenderer">
            <summary>
            Header renderer used to render visual aspects of the panel
            </summary>
            <value>The header renderer.</value>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.PrimarySecondaryHorizontalPanel.HeaderRendererProperty">
            <summary>
            Header renderer used to render visual aspects of the panel
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.PrimarySecondaryHorizontalPanel.SecondaryAreaLocation">
            <summary>
            Defines the desired location of the secondary element
            </summary>
            <value>The secondary area location.</value>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.PrimarySecondaryHorizontalPanel.SecondaryAreaLocationProperty">
            <summary>
            Defines the desired location of the secondary element
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.PrimarySecondaryHorizontalPanel.PrimaryAreaBackground">
            <summary>
            Background brush for the primary area
            </summary>
            <value>The primary area background.</value>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.PrimarySecondaryHorizontalPanel.PrimaryAreaBackgroundProperty">
            <summary>
            Background brush for the primary area
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.PrimarySecondaryHorizontalPanel.OnPrimaryAreaBackgroundChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Fires when the primary area background brush changes
            </summary>
            <param name="d">The panel object</param>
            <param name="args">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.PrimarySecondaryHorizontalPanel.SecondaryAreaBackground">
            <summary>
            Background brush for the secondary area
            </summary>
            <value>The secondary area background.</value>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.PrimarySecondaryHorizontalPanel.SecondaryAreaBackgroundProperty">
            <summary>
            Background brush for the secondary area
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.PrimarySecondaryHorizontalPanel.OnSecondaryAreaBackgroundChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Fires when the secondary area background color changes
            </summary>
            <param name="d">The d.</param>
            <param name="args">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.PrimarySecondaryHorizontalPanel.MeasureOverride(System.Windows.Size)">
            <summary>
            When overridden in a derived class, measures the size in layout required for child elements and determines a size for the <see cref="T:System.Windows.FrameworkElement" />-derived class.
            </summary>
            <param name="availableSize">The available size that this element can give to child elements. Infinity can be specified as a value to indicate that the element will size to whatever content is available.</param>
            <returns>The size that this element determines it needs during layout, based on its calculations of child element sizes.</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.PrimarySecondaryHorizontalPanel.ArrangeOverride(System.Windows.Size)">
            <summary>
            When overridden in a derived class, positions child elements and determines a size for a <see cref="T:System.Windows.FrameworkElement" /> derived class.
            </summary>
            <param name="finalSize">The final area within the parent that this element should use to arrange itself and its children.</param>
            <returns>The actual size used.</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.PrimarySecondaryHorizontalPanel.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
            Draws the content of a <see cref="T:System.Windows.Media.DrawingContext" /> object during the render pass of a <see cref="T:System.Windows.Controls.Panel" /> element.
            </summary>
            <param name="dc">The <see cref="T:System.Windows.Media.DrawingContext" /> object to draw.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.PrimarySecondaryHorizontalPanel.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Invoked when an unhandled Mouse Down attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. This event data reports details about the mouse button that was pressed and the handled state.</param>
        </member>
        <member name="T:CODE.Framework.Wpf.Layout.IPrimarySecondaryHorizontalPanelHeaderRenderer">
            <summary>
            Interface for a stylable header renderer used by the PrimarySecondaryHorizontalPanel
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.IPrimarySecondaryHorizontalPanelHeaderRenderer.GetPrimaryClientArea(System.Windows.Rect,CODE.Framework.Wpf.Layout.PrimarySecondaryHorizontalPanel)">
            <summary>
            Detirmines the size of the client area for the primary element, based on the overall area allocated to it
            </summary>
            <param name="totalPrimaryArea">The total primary area.</param>
            <param name="parentPanel">The parent panel.</param>
            <returns>The client size (area usable by the contained element, which excludes areas needed for header information)</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.IPrimarySecondaryHorizontalPanelHeaderRenderer.GetSecondaryClientArea(System.Windows.Rect,CODE.Framework.Wpf.Layout.PrimarySecondaryHorizontalPanel)">
            <summary>
            Detirmines the size of the client area for the secondary element, based on the overall area allocated to it
            </summary>
            <param name="totalSecondaryArea">The total secondary area.</param>
            <param name="parentPanel">The parent panel.</param>
            <returns>The client size (area usable by the contained element, which excludes areas needed for header information)</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.IPrimarySecondaryHorizontalPanelHeaderRenderer.Render(System.Windows.Media.DrawingContext,System.Windows.Rect,System.Windows.Rect,CODE.Framework.Wpf.Layout.PrimarySecondaryHorizontalPanel)">
            <summary>
            Renders additional graphical elements
            </summary>
            <param name="dc">The dc.</param>
            <param name="currentPrimaryArea">The current primary area.</param>
            <param name="currentSecondaryArea">The current secondary area.</param>
            <param name="parentPanel">The parent panel.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.IPrimarySecondaryHorizontalPanelHeaderRenderer.GetMinimumCollapsedAreaWidth(CODE.Framework.Wpf.Layout.PrimarySecondaryHorizontalPanel)">
            <summary>
            Returns the minimum width of a collapsed secondary area
            </summary>
            <param name="parentPanel">The parent panel.</param>
            <returns>Minimum width of the area</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.IPrimarySecondaryHorizontalPanelHeaderRenderer.Click(System.Windows.Point,System.Windows.Rect,System.Windows.Rect,CODE.Framework.Wpf.Layout.PrimarySecondaryHorizontalPanel)">
            <summary>
            Called when a click on the panel background happens
            </summary>
            <param name="location">The location of the click.</param>
            <param name="currentPrimaryArea">The current primary area.</param>
            <param name="currentSecondaryArea">The current secondary area.</param>
            <param name="parentPanel">The parent panel.</param>
            <returns>True if the click event has been handled and no further processing is needed</returns>
        </member>
        <member name="T:CODE.Framework.Wpf.Layout.StandardPrimarySecondaryHorizontalPanelHeaderRenderer">
            <summary>
            Standard renderer for the primary/secondary horizontal panel
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.StandardPrimarySecondaryHorizontalPanelHeaderRenderer.CollapsedSecondaryAreaIcon">
            <summary>
            Brush used to render a collapsed state icon for a collapsed primary area
            </summary>
            <value>The collapsed secondary area icon.</value>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.StandardPrimarySecondaryHorizontalPanelHeaderRenderer.CollapsedSecondaryAreaIconProperty">
            <summary>
            Brush used to render a collapsed state icon for a collapsed primary area
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.StandardPrimarySecondaryHorizontalPanelHeaderRenderer.ExpandedSecondaryAreaIcon">
            <summary>
            Brush used to render an expanded state icon for an expanded primary area
            </summary>
            <value>The expanded secondary area icon.</value>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.StandardPrimarySecondaryHorizontalPanelHeaderRenderer.ExpandedSecondaryAreaIconProperty">
            <summary>
            Brush used to render an expanded state icon for an expanded primary area
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.StandardPrimarySecondaryHorizontalPanelHeaderRenderer.ExpandCollapseIconSize">
            <summary>
            Size of the expand/collapse icon
            </summary>
            <value>The size of the expand collapse icon.</value>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.StandardPrimarySecondaryHorizontalPanelHeaderRenderer.ExpandCollapseIconSizeProperty">
            <summary>
            Size of the expand/collapse icon
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.StandardPrimarySecondaryHorizontalPanelHeaderRenderer.IconMargin">
            <summary>
            Defines the margin around the header icon
            </summary>
            <value>The icon margin.</value>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.StandardPrimarySecondaryHorizontalPanelHeaderRenderer.IconMarginProperty">
            <summary>
            Defines the margin around the header icon
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.StandardPrimarySecondaryHorizontalPanelHeaderRenderer.IgnoreIconSizeForLayout">
            <summary>
            Indicates whether the icon size and placement is to be considered and reserved when laying out other objects,
            or whether the icon will simply overlap other elements
            </summary>
            <value><c>true</c> if the icon is to be ignored for layout, otherwise, <c>false</c>.</value>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.StandardPrimarySecondaryHorizontalPanelHeaderRenderer.IgnoreIconSizeForLayoutProperty">
            <summary>
            Indicates whether the icon size and placement is to be considered and reserved when laying out other objects,
            or whether the icon will simply overlap other elements
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.StandardPrimarySecondaryHorizontalPanelHeaderRenderer.GetPrimaryClientArea(System.Windows.Rect,CODE.Framework.Wpf.Layout.PrimarySecondaryHorizontalPanel)">
            <summary>
            Detirmines the size of the client area for the primary element, based on the overall area allocated to it
            </summary>
            <param name="totalPrimaryArea">The total primary area.</param>
            <param name="parentPanel">The parent panel.</param>
            <returns>The client size (area usable by the contained element, which excludes areas needed for header information)</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.StandardPrimarySecondaryHorizontalPanelHeaderRenderer.GetSecondaryClientArea(System.Windows.Rect,CODE.Framework.Wpf.Layout.PrimarySecondaryHorizontalPanel)">
            <summary>
            Detirmines the size of the client area for the secondary element, based on the overall area allocated to it
            </summary>
            <param name="totalSecondaryArea">The total secondary area.</param>
            <param name="parentPanel">The parent panel.</param>
            <returns>The client size (area usable by the contained element, which excludes areas needed for header information)</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.StandardPrimarySecondaryHorizontalPanelHeaderRenderer.Render(System.Windows.Media.DrawingContext,System.Windows.Rect,System.Windows.Rect,CODE.Framework.Wpf.Layout.PrimarySecondaryHorizontalPanel)">
            <summary>
            Renders additional graphical elements
            </summary>
            <param name="dc">The dc.</param>
            <param name="currentPrimaryArea">The current primary area.</param>
            <param name="currentSecondaryArea">The current secondary area.</param>
            <param name="parentPanel">The parent panel.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.StandardPrimarySecondaryHorizontalPanelHeaderRenderer.GetMinimumCollapsedAreaWidth(CODE.Framework.Wpf.Layout.PrimarySecondaryHorizontalPanel)">
            <summary>
            Returns the minimum width of a collapsed secondary area
            </summary>
            <param name="parentPanel">The parent panel.</param>
            <returns>Minimum width of the area</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.StandardPrimarySecondaryHorizontalPanelHeaderRenderer.Click(System.Windows.Point,System.Windows.Rect,System.Windows.Rect,CODE.Framework.Wpf.Layout.PrimarySecondaryHorizontalPanel)">
            <summary>
            Called when a click on the panel background happens
            </summary>
            <param name="location">The location of the click.</param>
            <param name="currentPrimaryArea">The current primary area.</param>
            <param name="currentSecondaryArea">The current secondary area.</param>
            <param name="parentPanel">The parent panel.</param>
            <returns>True if the click event has been handled and no further processing is needed</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:CODE.Framework.Wpf.Layout.SecondaryAreaLocation">
            <summary>
            Defines where the secondary area should be placed by the layout engine
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.SecondaryAreaLocation.Left">
            <summary>
            Docked on the left
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.SecondaryAreaLocation.Right">
            <summary>
            Docked on the right
            </summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Layout.PropertySheet">
            <summary>
            This class produces an outline like a property sheet in Visual Studio
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.PropertySheet.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Wpf.Layout.PropertySheet"/> class.
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.PropertySheet.Padding">
            <summary>Padding for child elements</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.PropertySheet.PaddingProperty">
            <summary>Padding for child elements</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.PropertySheet.VerticalElementSpacing">
            <summary>Vertical spacing between rows of elements in the property sheet</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.PropertySheet.VerticalElementSpacingProperty">
            <summary>Vertical spacing between rows of elements in the property sheet</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.PropertySheet.HorizontalElementSpacing">
            <summary>Horizontal spacing between label and edit elements</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.PropertySheet.HorizontalElementSpacingProperty">
            <summary>Horizontal spacing between label and edit elements</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.PropertySheet.AdditionalFlowElementSpacing">
            <summary>Defines the horizontal space between the main edit control and subsequent flow controls</summary>
            <value>The additional flow element spacing.</value>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.PropertySheet.AdditionalFlowElementSpacingProperty">
            <summary>Defines the horizontal space between the main edit control and subsequent flow controls</summary>
            <value>The additional flow element spacing.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.PropertySheet.GroupHeaderRenderer">
            <summary>Object used to render group headers</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.PropertySheet.GroupHeaderRendererProperty">
            <summary>Object used to render group headers</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.PropertySheet.ShowGroupHeaders">
            <summary>If set to true, renders group headers, if group information is set on child elements</summary>
            <remarks>Group information should be set on the label elements within the child collection (the odd numbered elements)</remarks>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.PropertySheet.ShowGroupHeadersProperty">
            <summary>If set to true, renders group headers, if group information is set on child elements</summary>
            <remarks>Group information should be set on the label elements within the child collection (the odd numbered elements)</remarks>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.PropertySheet.MeasureOverride(System.Windows.Size)">
            <summary>
            When overridden in a derived class, measures the size in layout required for child elements and determines a size for the <see cref="T:System.Windows.FrameworkElement" />-derived class.
            </summary>
            <param name="availableSize">The available size that this element can give to child elements. Infinity can be specified as a value to indicate that the element will size to whatever content is available.</param>
            <returns>The size that this element determines it needs during layout, based on its calculations of child element sizes.</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.PropertySheet.ArrangeOverride(System.Windows.Size)">
            <summary>
            When overridden in a derived class, positions child elements and determines a size for a <see cref="T:System.Windows.FrameworkElement" /> derived class.
            </summary>
            <param name="finalSize">The final area within the parent that this element should use to arrange itself and its children.</param>
            <returns>The actual size used.</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.PropertySheet.GetControls">
            <summary>
            Gets the controls in pairs.
            </summary>
            <returns>List&lt;ControlPair&gt;.</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.PropertySheet.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Invoked when an unhandled MouseDown attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. This event data reports details about the mouse button that was pressed and the handled state.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.PropertySheet.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
            Draws the content of a <see cref="T:System.Windows.Media.DrawingContext" /> object during the render pass of a <see cref="T:System.Windows.Controls.Panel" /> element.
            </summary>
            <param name="dc">The <see cref="T:System.Windows.Media.DrawingContext" /> object to draw.</param>
        </member>
        <member name="T:CODE.Framework.Wpf.Layout.PropertySheetScrollAdorner">
            <summary>Adorner UI for scrollbars of the edit form control</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.PropertySheetScrollAdorner.#ctor(CODE.Framework.Wpf.Layout.PropertySheet,System.Windows.Controls.Primitives.ScrollBar)">
            <summary>Constructor</summary>
            <param name="adornedElement">Adorned element PropertySheet</param>
            <param name="vertical">The vertical scrollbar.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.PropertySheetScrollAdorner.MeasureOverride(System.Windows.Size)">
            <summary>Implements any custom measuring behavior for the adorner.</summary>
            <param name="constraint">A size to constrain the adorner to.</param>
            <returns>A <see cref="T:System.Windows.Size"/> object representing the amount of layout space needed by the adorner.</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.PropertySheetScrollAdorner.ArrangeOverride(System.Windows.Size)">
            <summary>When overridden in a derived class, positions child elements and determines a size for a <see cref="T:System.Windows.FrameworkElement"/> derived class.</summary>
            <param name="finalSize">The final area within the parent that this element should use to arrange itself and its children.</param>
            <returns>The actual size used.</returns>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.PropertySheetScrollAdorner.VisualChildrenCount">
            <summary>Gets the number of visual child elements within this element.</summary>
            <returns>The number of visual child elements for this element.</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.PropertySheetScrollAdorner.GetVisualChild(System.Int32)">
            <summary>Overrides <see cref="M:System.Windows.Media.Visual.GetVisualChild(System.Int32)"/>, and returns a child at the specified index from a collection of child elements.</summary>
            <param name="index">The zero-based index of the requested child element in the collection.</param>
            <returns>The requested child element. This should not return null; if the provided index is out of range, an exception is thrown.</returns>
        </member>
        <member name="T:CODE.Framework.Wpf.Layout.IPropertySheetHeaderRenderer">
            <summary>Fundamental interface for a header renderer for the property sheet</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.IPropertySheetHeaderRenderer.GetHeaderPaddingUsedForRendering(System.String)">
            <summary>Returns the spacing used by header rendering</summary>
            <param name="headerText">Header text to be rendered</param>
            <returns>Margin used (note: only top and left are respected)</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.IPropertySheetHeaderRenderer.RenderHeader(System.Windows.Media.DrawingContext,System.Double,System.Double,System.String,System.Boolean)">
            <summary>Performs the actual header rendering</summary>
            <param name="dc">DrawingContext</param>
            <param name="top">Indicates the current top render position</param>
            <param name="actualWidth">Maximum actual width of the render area</param>
            <param name="headerText">Header text that is to be rendered</param>
            <param name="isExpanded">Indicates whether the header is expanded (or collapsed)</param>
        </member>
        <member name="T:CODE.Framework.Wpf.Layout.PropertySheetHeaderRenderer">
            <summary>Renderer object for headers on the property sheet renderer</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.PropertySheetHeaderRenderer.FontFamily">
            <summary>Font family</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.PropertySheetHeaderRenderer.FontFamilyProperty">
            <summary>Font family</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.PropertySheetHeaderRenderer.FontSize">
            <summary>Font size</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.PropertySheetHeaderRenderer.FontSizeProperty">
            <summary>Font size</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.PropertySheetHeaderRenderer.FontStyle">
            <summary>Font style</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.PropertySheetHeaderRenderer.FontStyleProperty">
            <summary>Font style</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.PropertySheetHeaderRenderer.FontWeight">
            <summary>Font weight</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.PropertySheetHeaderRenderer.FontWeightProperty">
            <summary>Font weight</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.PropertySheetHeaderRenderer.Foreground">
            <summary>Foreground brush</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.PropertySheetHeaderRenderer.ForegroundProperty">
            <summary>Foreground brush</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.PropertySheetHeaderRenderer.Background">
            <summary>Background brush</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.PropertySheetHeaderRenderer.BackgroundProperty">
            <summary>Background brush</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.PropertySheetHeaderRenderer.ItemIndentation">
            <summary>Indentation for all the items when the property sheet shows groups</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.PropertySheetHeaderRenderer.ItemIndentationProperty">
            <summary>Indentation for all the items when the property sheet shows groups</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.PropertySheetHeaderRenderer.ExpandedIcon">
            <summary>Brush to render an expanded icon</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.PropertySheetHeaderRenderer.ExpandedIconProperty">
            <summary>Brush to render an expanded icon</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.PropertySheetHeaderRenderer.CollapsedIcon">
            <summary>Brush to render an collapsed icon</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.PropertySheetHeaderRenderer.CollapsedIconProperty">
            <summary>Brush to render an collapsed icon</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.PropertySheetHeaderRenderer.GetHeaderPaddingUsedForRendering(System.String)">
            <summary>Returns the spacing used by header rendering</summary>
            <param name="headerText">Header text to be rendered</param>
            <returns>Margin used (note: only top and left are respected)</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.PropertySheetHeaderRenderer.RenderHeader(System.Windows.Media.DrawingContext,System.Double,System.Double,System.String,System.Boolean)">
            <summary>Performs the actual header rendering</summary>
            <param name="dc">DrawingContext</param>
            <param name="top">Indicates the current top render position</param>
            <param name="actualWidth">Maximum actual width of the render area</param>
            <param name="headerText">Header text that is to be rendered</param>
            <param name="isExpanded">Indicates whether the header is expanded (or collapsed)</param>
        </member>
        <member name="T:CODE.Framework.Wpf.Layout.ScrollAwareItemsPresenter">
            <summary>
            Special items presenter class that can natively scroll its own content
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.ScrollAwareItemsPresenter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Wpf.Layout.ScrollAwareItemsPresenter"/> class.
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.ScrollAwareItemsPresenter.MeasureOverride(System.Windows.Size)">
            <summary>
            Overrides the base class implementation of <see cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" /> to measure the size of the <see cref="T:System.Windows.Controls.ItemsPresenter" /> object and return proper sizes to the layout engine.
            </summary>
            <param name="constraint">Constraint size is an "upper limit." The return value should not exceed this size.</param>
            <returns>The desired size.</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.ScrollAwareItemsPresenter.LineUp">
            <summary>
            Scrolls up within content by one logical unit.
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.ScrollAwareItemsPresenter.LineDown">
            <summary>
            Scrolls down within content by one logical unit.
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.ScrollAwareItemsPresenter.LineLeft">
            <summary>
            Scrolls left within content by one logical unit.
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.ScrollAwareItemsPresenter.LineRight">
            <summary>
            Scrolls right within content by one logical unit.
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.ScrollAwareItemsPresenter.PageUp">
            <summary>
            Scrolls up within content by one page.
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.ScrollAwareItemsPresenter.PageDown">
            <summary>
            Scrolls down within content by one page.
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.ScrollAwareItemsPresenter.PageLeft">
            <summary>
            Scrolls left within content by one page.
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.ScrollAwareItemsPresenter.PageRight">
            <summary>
            Scrolls right within content by one page.
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.ScrollAwareItemsPresenter.MouseWheelUp">
            <summary>
            Scrolls up within content after a user clicks the wheel button on a mouse.
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.ScrollAwareItemsPresenter.MouseWheelDown">
            <summary>
            Scrolls down within content after a user clicks the wheel button on a mouse.
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.ScrollAwareItemsPresenter.MouseWheelLeft">
            <summary>
            Scrolls left within content after a user clicks the wheel button on a mouse.
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.ScrollAwareItemsPresenter.MouseWheelRight">
            <summary>
            Scrolls right within content after a user clicks the wheel button on a mouse.
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.ScrollAwareItemsPresenter.SetHorizontalOffset(System.Double)">
            <summary>
            Sets the amount of horizontal offset.
            </summary>
            <param name="offset">The degree to which content is horizontally offset from the containing viewport.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.ScrollAwareItemsPresenter.SetVerticalOffset(System.Double)">
            <summary>
            Sets the amount of vertical offset.
            </summary>
            <param name="offset">The degree to which content is vertically offset from the containing viewport.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.ScrollAwareItemsPresenter.MakeVisible(System.Windows.Media.Visual,System.Windows.Rect)">
            <summary>
            Forces content to scroll until the coordinate space of a <see cref="T:System.Windows.Media.Visual" /> object is visible.
            </summary>
            <param name="visual">A <see cref="T:System.Windows.Media.Visual" /> that becomes visible.</param>
            <param name="rectangle">A bounding rectangle that identifies the coordinate space to make visible.</param>
            <returns>A <see cref="T:System.Windows.Rect" /> that is visible.</returns>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.ScrollAwareItemsPresenter.CanVerticallyScroll">
            <summary>
            Gets or sets a value that indicates whether scrolling on the vertical axis is possible.
            </summary>
            <value><c>true</c> if this instance can vertically scroll; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.ScrollAwareItemsPresenter.CanHorizontallyScroll">
            <summary>
            Gets or sets a value that indicates whether scrolling on the horizontal axis is possible.
            </summary>
            <value><c>true</c> if this instance can horizontally scroll; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.ScrollAwareItemsPresenter.ExtentWidth">
            <summary>
            Gets the horizontal size of the extent.
            </summary>
            <value>The width of the extent.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.ScrollAwareItemsPresenter.ExtentHeight">
            <summary>
            Gets the vertical size of the extent.
            </summary>
            <value>The height of the extent.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.ScrollAwareItemsPresenter.ViewportWidth">
            <summary>
            Gets the horizontal size of the viewport for this content.
            </summary>
            <value>The width of the viewport.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.ScrollAwareItemsPresenter.ViewportHeight">
            <summary>
            Gets the vertical size of the viewport for this content.
            </summary>
            <value>The height of the viewport.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.ScrollAwareItemsPresenter.HorizontalOffset">
            <summary>
            Gets the horizontal offset of the scrolled content.
            </summary>
            <value>The horizontal offset.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.ScrollAwareItemsPresenter.VerticalOffset">
            <summary>
            Gets the vertical offset of the scrolled content.
            </summary>
            <value>The vertical offset.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.ScrollAwareItemsPresenter.ScrollOwner">
            <summary>
            Gets or sets a <see cref="T:System.Windows.Controls.ScrollViewer" /> element that controls scrolling behavior.
            </summary>
            <value>The scroll owner.</value>
        </member>
        <member name="T:CODE.Framework.Wpf.Layout.SimpleView">
            <summary>
            Base class for views (can be used instead of UserControl)
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.SimpleView.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.SimpleView.WidthExProperty">
            <summary>Attached property to set an element's logical width ("1" usually represents the width of about 1 character, but exact dimensions are up to the current style)</summary>
            <remarks>This attached property can be attached to any UI Element to define an element's logical width. The width is typically calculated on the current font's width based on the letter 'N'. So a width of 10 can typically accomodate 10 'N' letters. Note that this may vary with different skins.</remarks>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.SimpleView.GetWidthEx(System.Windows.DependencyObject)">
            <summary>Attached property to set an element's logical width ("1" usually represents the width of about 1 character, but exact dimensions are up to the current style)</summary>
            <param name="obj">Object to set the size on</param>
            <returns>Width</returns>
            <remarks>This attached property can be attached to any UI Element to define a width</remarks>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.SimpleView.SetWidthEx(System.Windows.DependencyObject,System.Double)">
            <summary>Attached property to set an element's logical width ("1" usually represents the width of about 1 character, but exact dimensions are up to the current style)</summary>
            <param name="obj">Object to set the size on</param>
            <param name="value">Value to set</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.SimpleView.OnWidthExChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>Attached behavior changed handler</summary>
            <param name="obj">Object to attach to</param>
            <param name="args">Event arguments</param>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.SimpleView.MinWidthExProperty">
            <summary>Attached property to set an element's logical minimum width ("1" usually represents the width of about 1 character, but exact dimensions are up to the current style)</summary>
            <remarks>This attached property can be attached to any UI Element to define an element's logical minimum width. The width is typically calculated on the current font's width based on the letter 'N'. So a width of 10 can typically accomodate 10 'N' letters. Note that this may vary with different skins.</remarks>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.SimpleView.GetMinWidthEx(System.Windows.DependencyObject)">
            <summary>Attached property to set an element's logical minimum width ("1" usually represents the width of about 1 character, but exact dimensions are up to the current style)</summary>
            <param name="obj">Object to set the size on</param>
            <returns>Minimum Width</returns>
            <remarks>This attached property can be attached to any UI Element to define a minimum width</remarks>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.SimpleView.SetMinWidthEx(System.Windows.DependencyObject,System.Double)">
            <summary>Attached property to set an element's logical minimum width ("1" usually represents the width of about 1 character, but exact dimensions are up to the current style)</summary>
            <param name="obj">Object to set the size on</param>
            <param name="value">Value to set</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.SimpleView.OnMinWidthExChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>Fires when the logical minimum width changes</summary>
            <param name="obj">Object to attach to</param>
            <param name="args">Event arguments</param>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.SimpleView.MaxWidthExProperty">
            <summary>Attached property to set an element's logical maximum width ("1" usually represents the width of about 1 character, but exact dimensions are up to the current style)</summary>
            <remarks>This attached property can be attached to any UI Element to define an element's logical maximum width. The width is typically calculated on the current font's width based on the letter 'N'. So a width of 10 can typically accomodate 10 'N' letters. Note that this may vary with different skins.</remarks>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.SimpleView.GetMaxWidthEx(System.Windows.DependencyObject)">
            <summary>Attached property to set an element's logical maximum width ("1" usually represents the width of about 1 character, but exact dimensions are up to the current style)</summary>
            <param name="obj">Object to set the size on</param>
            <returns>Minimum Width</returns>
            <remarks>This attached property can be attached to any UI Element to define a maximum width</remarks>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.SimpleView.SetMaxWidthEx(System.Windows.DependencyObject,System.Double)">
            <summary>Attached property to set an element's logical maximum width ("1" usually represents the width of about 1 character, but exact dimensions are up to the current style)</summary>
            <param name="obj">Object to set the size on</param>
            <param name="value">Value to set</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.SimpleView.OnMaxWidthExChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>Fires when the logical maximum width changes</summary>
            <param name="obj">Object to attach to</param>
            <param name="args">Event arguments</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.SimpleView.GetAbstractWidth(System.Windows.DependencyObject,System.Double)">
            <summary>
            Calculates the concrete width for an abstract width value based on font metrics
            </summary>
            <param name="element">The element.</param>
            <param name="width">The abstract width.</param>
            <returns>Concrete width</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.SimpleView.GetAbstractHeight(System.Windows.DependencyObject,System.Double)">
            <summary>
            Calculates the concrete height for an abstract height value based on font metrics
            </summary>
            <param name="element">The element.</param>
            <param name="height">The abstract height.</param>
            <returns>Concrete height</returns>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.SimpleView.HeightExProperty">
            <summary>Attached property to set an element's logical height ("1" usually represents the height of about 1 character, but exact dimensions are up to the current style)</summary>
            <remarks>This attached property can be attached to any UI Element to define an element's logical height.</remarks>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.SimpleView.GetHeightEx(System.Windows.DependencyObject)">
            <summary>Attached property to set an element's logical height ("1" usually represents the height of about 1 character, but exact dimensions are up to the current style)</summary>
            <param name="obj">Object to set the size on</param>
            <returns>Width</returns>
            <remarks>This attached property can be attached to any UI Element to define a height</remarks>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.SimpleView.SetHeightEx(System.Windows.DependencyObject,System.Double)">
            <summary>Attached property to set an element's logical height ("1" usually represents the height of about 1 character, but exact dimensions are up to the current style)</summary>
            <param name="obj">Object to set the size on</param>
            <param name="value">Value to set</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.SimpleView.OnHeightExChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>Fires when HeightEx changes</summary>
            <param name="obj">Object to attach to</param>
            <param name="args">Event arguments</param>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.SimpleView.MinHeightExProperty">
            <summary>Attached property to set an element's logical minimum height ("1" usually represents the height of about 1 character, but exact dimensions are up to the current style)</summary>
            <remarks>This attached property can be attached to any UI Element to define an element's logical minimum height.</remarks>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.SimpleView.GetMinHeightEx(System.Windows.DependencyObject)">
            <summary>Attached property to set an element's logical minimum height ("1" usually represents the height of about 1 character, but exact dimensions are up to the current style)</summary>
            <param name="obj">Object to set the size on</param>
            <returns>Width</returns>
            <remarks>This attached property can be attached to any UI Element to define a minimum height</remarks>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.SimpleView.SetMinHeightEx(System.Windows.DependencyObject,System.Double)">
            <summary>Attached property to set an element's logical minimum height ("1" usually represents the width of about 1 character, but exact dimensions are up to the current style)</summary>
            <param name="obj">Object to set the size on</param>
            <param name="value">Value to set</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.SimpleView.OnMinHeightExChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>Fires when MinHeightEx changes</summary>
            <param name="obj">Object to attach to</param>
            <param name="args">Event arguments</param>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.SimpleView.MaxHeightExProperty">
            <summary>Attached property to set an element's logical maximum height ("1" usually represents the height of about 1 character, but exact dimensions are up to the current style)</summary>
            <remarks>This attached property can be attached to any UI Element to define an element's logical minimum height.</remarks>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.SimpleView.GetMaxHeightEx(System.Windows.DependencyObject)">
            <summary>Attached property to set an element's logical maximum height ("1" usually represents the height of about 1 character, but exact dimensions are up to the current style)</summary>
            <param name="obj">Object to set the size on</param>
            <returns>Width</returns>
            <remarks>This attached property can be attached to any UI Element to define a maximum height</remarks>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.SimpleView.SetMaxHeightEx(System.Windows.DependencyObject,System.Double)">
            <summary>Attached property to set an element's logical maximum height ("1" usually represents the height of about 1 character, but exact dimensions are up to the current style)</summary>
            <param name="obj">Object to set the size on</param>
            <param name="value">Value to set</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.SimpleView.OnMaxHeightExChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>Fires when MaxHeightEx changes</summary>
            <param name="obj">Object to attach to</param>
            <param name="args">Event arguments</param>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.SimpleView.LabelProperty">
            <summary>An abstract label property that can be used to assign labels to arbitrary controls</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.SimpleView.GetLabel(System.Windows.DependencyObject)">
            <summary>Returns the value of the attached label property</summary>
            <param name="obj">Dependency object</param>
            <returns>Label</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.SimpleView.SetLabel(System.Windows.DependencyObject,System.String)">
            <summary>Sets the value of the attached label property</summary>
            <param name="obj">Dependency object</param>
            <param name="value">The value.</param>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.SimpleView.LabelFontFamilyProperty">
            <summary>Font family for the abstract label</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.SimpleView.GetLabelFontFamily(System.Windows.DependencyObject)">
            <summary>Font family for the abstract label</summary>
            <param name="obj">Dependency object</param>
            <returns>Font family</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.SimpleView.SetLabelFontFamily(System.Windows.DependencyObject,System.Windows.Media.FontFamily)">
            <summary>Font family for the abstract label</summary>
            <param name="obj">Dependency object</param>
            <param name="value">The value.</param>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.SimpleView.LabelFontStyleProperty">
            <summary>Font style for the abstract label</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.SimpleView.GetLabelFontStyle(System.Windows.DependencyObject)">
            <summary>Font style for the abstract label</summary>
            <param name="obj">Dependency object</param>
            <returns>Font size</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.SimpleView.SetLabelFontStyle(System.Windows.DependencyObject,System.Windows.FontStyle)">
            <summary>Font style for the abstract label</summary>
            <param name="obj">Dependency object</param>
            <param name="value">The value.</param>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.SimpleView.LabelFontWeightProperty">
            <summary>Font weight for the abstract label</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.SimpleView.GetLabelFontWeight(System.Windows.DependencyObject)">
            <summary>Font weight for the abstract label</summary>
            <param name="obj">Dependency object</param>
            <returns>Font size</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.SimpleView.SetLabelFontWeight(System.Windows.DependencyObject,System.Windows.FontWeight)">
            <summary>Font weight for the abstract label</summary>
            <param name="obj">Dependency object</param>
            <param name="value">The value.</param>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.SimpleView.LabelFontSizeProperty">
            <summary>Font size for the abstract label</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.SimpleView.GetLabelFontSize(System.Windows.DependencyObject)">
            <summary>Font size for the abstract label</summary>
            <param name="obj">Dependency object</param>
            <returns>Font size</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.SimpleView.SetLabelFontSize(System.Windows.DependencyObject,System.Double)">
            <summary>Font size for the abstract label</summary>
            <param name="obj">Dependency object</param>
            <param name="value">The value.</param>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.SimpleView.LabelForegroundBrushProperty">
            <summary>Font color for the abstract label</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.SimpleView.GetLabelForegroundBrush(System.Windows.DependencyObject)">
            <summary>Font color for the abstract label</summary>
            <param name="obj">Dependency object</param>
            <returns>Font size</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.SimpleView.SetLabelForegroundBrush(System.Windows.DependencyObject,System.Windows.Media.Brush)">
            <summary>Font color for the abstract label</summary>
            <param name="obj">Dependency object</param>
            <param name="value">The value.</param>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.SimpleView.IconResourceKeyProperty">
            <summary>Attached property to set any view's icon resource key</summary>
            <remarks>This attached property can be attached to any UI Element to define a view icon resource key</remarks>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.SimpleView.GetIconResourceKey(System.Windows.DependencyObject)">
            <summary>View icon resource key</summary>
            <param name="obj">Object to set the icon resource key on</param>
            <returns>Icon resource key</returns>
            <remarks>This attached property can be attached to any UI Element to define an icon resource key</remarks>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.SimpleView.SetIconResourceKey(System.Windows.DependencyObject,System.String)">
            <summary>View icon resource key</summary>
            <param name="obj">Object to set the icon resource key on</param>
            <param name="value">Value to set</param>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.SimpleView.ViewThemeColorProperty">
            <summary>
            Theme color used by the view (utilized by some themes to create color schemes)
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.SimpleView.SetViewThemeColor(System.Windows.DependencyObject,System.Windows.Media.Color)">
            <summary>
            Theme color used by the view (utilized by some themes to create color schemes)
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.SimpleView.GetViewThemeColor(System.Windows.DependencyObject)">
            <summary>
            Theme color used by the view (utilized by some themes to create color schemes)
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.SimpleView.TitleProperty">
            <summary>Attached property to set any view's title</summary>
            <remarks>This attached property can be attached to any UI Element to define a view title</remarks>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.SimpleView.GetTitle(System.Windows.DependencyObject)">
            <summary>View title</summary>
            <param name="obj">Object to set the title on</param>
            <returns>Title</returns>
            <remarks>This attached property can be attached to any UI Element to define a view title</remarks>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.SimpleView.SetTitle(System.Windows.DependencyObject,System.String)">
            <summary>View title</summary>
            <param name="obj">Object to set the title on</param>
            <param name="value">Value to set</param>
        </member>
        <member name="E:CODE.Framework.Wpf.Layout.SimpleView.TitleChanged">
            <summary>
            Fires when the view title changes
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.SimpleView.TitleColorProperty">
            <summary>
            Color associated with the Title. (Note: Not all elements that respect the Title also respect the color. It's an optional setting)
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.SimpleView.GetTitleColor(System.Windows.DependencyObject)">
            <summary>
            Gets the color of the title.
            </summary>
            <param name="obj">The object to get the color for.</param>
            <returns>Title color (brush)</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.SimpleView.SetTitleColor(System.Windows.DependencyObject,System.Windows.Media.Brush)">
            <summary>
            Sets the color of the title.
            </summary>
            <param name="obj">The object to set the value on.</param>
            <param name="value">The color (Brush).</param>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.SimpleView.GroupProperty">
            <summary>Attached property to set any view's group</summary>
            <remarks>This attached property can be attached to any UI Element to define a view group</remarks>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.SimpleView.GetGroup(System.Windows.DependencyObject)">
            <summary>View group</summary>
            <param name="obj">Object to set the group on</param>
            <returns>Group</returns>
            <remarks>This attached property can be attached to any UI Element to define a view group</remarks>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.SimpleView.SetGroup(System.Windows.DependencyObject,System.String)">
            <summary>View group</summary>
            <param name="obj">Object to set the group on</param>
            <param name="value">Value to set</param>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.SimpleView.SizeStrategyProperty">
            <summary>Attached property to set the view's desired sizing strategy</summary>
            <remarks>This attached property can be attached to any UI Element to define a view size strategy</remarks>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.SimpleView.GetSizeStrategy(System.Windows.DependencyObject)">
            <summary>View sizing strategy</summary>
            <param name="obj">Object to set the sizing strategy on</param>
            <returns>Sizing strategy</returns>
            <remarks>This attached property can be attached to any UI Element to define a sizing strategy</remarks>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.SimpleView.SetSizeStrategy(System.Windows.DependencyObject,CODE.Framework.Wpf.Layout.ViewSizeStrategies)">
            <summary>View size strategy</summary>
            <param name="obj">Object to set the size strategy on</param>
            <param name="value">Value to set</param>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.SimpleView.SuggestedHeightProperty">
            <summary>Suggested view height</summary>
            <remarks>
            Only applicable if SizeStrategy = UseSuggestedSize and if the skin and type of view supports explicit sizing. 
            Otherwise, the view is handled as if the strategy is set to use maximum size.
            </remarks>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.SimpleView.GetSuggestedHeight(System.Windows.DependencyObject)">
            <summary>Suggested view height</summary>
            <remarks>
            Only applicable if SizeStrategy = UseSuggestedSize and if the skin and type of view supports explicit sizing. 
            Otherwise, the view is handled as if the strategy is set to use maximum size.
            </remarks>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.SimpleView.SetSuggestedHeight(System.Windows.DependencyObject,System.Double)">
            <summary>Suggested view height</summary>
            <remarks>
            Only applicable if SizeStrategy = UseSuggestedSize and if the skin and type of view supports explicit sizing. 
            Otherwise, the view is handled as if the strategy is set to use maximum size.
            </remarks>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.SimpleView.SuggestedWidthProperty">
            <summary>Suggested view width</summary>
            <remarks>
            Only applicable if SizeStrategy = UseSuggestedSize and if the skin and type of view supports explicit sizing. 
            Otherwise, the view is handled as if the strategy is set to use maximum size.
            </remarks>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.SimpleView.GetSuggestedWidth(System.Windows.DependencyObject)">
            <summary>Suggested view width</summary>
            <remarks>
            Only applicable if SizeStrategy = UseSuggestedSize and if the skin and type of view supports explicit sizing. 
            Otherwise, the view is handled as if the strategy is set to use maximum size.
            </remarks>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.SimpleView.SetSuggestedWidth(System.Windows.DependencyObject,System.Double)">
            <summary>Suggested view width</summary>
            <remarks>
            Only applicable if SizeStrategy = UseSuggestedSize and if the skin and type of view supports explicit sizing. 
            Otherwise, the view is handled as if the strategy is set to use maximum size.
            </remarks>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.SimpleView.ColumnBreakProperty">
            <summary>Attached property used to define column breaks</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.SimpleView.GetColumnBreak(System.Windows.DependencyObject)">
            <summary>Column break indicator</summary><param name="obj">Object to set the value on</param><returns>Value</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.SimpleView.SetColumnBreak(System.Windows.DependencyObject,System.Boolean)">
            <summary>Column break indicator</summary><param name="obj">Object to get the value for</param><param name="value">Value</param>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.SimpleView.GroupBreakProperty">
            <summary>Property used to detirmine group break (adds a space between elements)</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.SimpleView.GetGroupBreak(System.Windows.DependencyObject)">
            <summary>Group break indicator</summary><param name="obj">Object to set the value on</param><returns>Value</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.SimpleView.SetGroupBreak(System.Windows.DependencyObject,System.Boolean)">
            <summary>Group break indicator</summary><param name="obj">Object to get the value for</param><param name="value">Value</param>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.SimpleView.GroupTitleProperty">
            <summary>Group caption/title</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.SimpleView.GetGroupTitle(System.Windows.DependencyObject)">
            <summary>Group caption/title</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.SimpleView.SetGroupTitle(System.Windows.DependencyObject,System.String)">
            <summary>Group caption/title</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.SimpleView.FlowsWithPreviousProperty">
            <summary>Property used to detirmine whether the control is to be seen as a standard flow element, or whether it is to be put together with the previous element</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.SimpleView.GetFlowsWithPrevious(System.Windows.DependencyObject)">
            <summary>Property used to detirmine whether the control is to be seen as a standard flow element, or whether it is to be put together with the previous element</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.SimpleView.SetFlowsWithPrevious(System.Windows.DependencyObject,System.Boolean)">
            <summary>Property used to detirmine whether the control is to be seen as a standard flow element, or whether it is to be put together with the previous element</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.SimpleView.LineBreakProperty">
            <summary>Property used to detirmine whether a line break shall be forced before the control</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.SimpleView.GetLineBreak(System.Windows.DependencyObject)">
            <summary>Property used to detirmine whether a line break shall be forced before the control</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.SimpleView.SetLineBreak(System.Windows.DependencyObject,System.Boolean)">
            <summary>Property used to detirmine whether a line break shall be forced before the control</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.SimpleView.SpanFullWidthProperty">
            <summary>Property used to detirmine whether the control shall span the complete available width</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.SimpleView.GetSpanFullWidth(System.Windows.DependencyObject)">
            <summary>Property used to detirmine whether the control shall span the complete available width</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.SimpleView.SetSpanFullWidth(System.Windows.DependencyObject,System.Boolean)">
            <summary>Property used to detirmine whether the control shall span the complete available width</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.SimpleView.UIElementTypeProperty">
            <summary>Property used to detirmine group break (adds a space between elements)</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.SimpleView.GetUIElementType(System.Windows.DependencyObject)">
            <summary>Group break indicator</summary><param name="obj">Object to set the value on</param><returns>Value</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.SimpleView.SetUIElementType(System.Windows.DependencyObject,CODE.Framework.Wpf.Layout.UIElementTypes)">
            <summary>Group break indicator</summary><param name="obj">Object to get the value for</param><param name="value">Value</param>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.SimpleView.UIElementTitleProperty">
            <summary>Defines the title of the UI element</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.SimpleView.GetUIElementTitle(System.Windows.DependencyObject)">
            <summary>Defines the title of the UI element</summary><param name="obj">Object to set the value on</param><returns>Value</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.SimpleView.SetUIElementTitle(System.Windows.DependencyObject,System.String)">
            <summary>Defines the title of the UI element</summary><param name="obj">Object to get the value for</param><param name="value">Value</param>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.SimpleView.IsStandAloneLabelProperty">
            <summary>Defines whether a control is a stand-alone label in an automatic layout (next control is NOT considered the edit control but a new group of controls altogether)</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.SimpleView.GetIsStandAloneLabel(System.Windows.DependencyObject)">
            <summary>Stand alone label indicator</summary><param name="obj">Object to set the value on</param><returns>Value</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.SimpleView.SetIsStandAloneLabel(System.Windows.DependencyObject,System.Boolean)">
            <summary>Stand alone label indicator</summary><param name="obj">Object to get the value for</param><param name="value">Value</param>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.SimpleView.IsStandAloneEditControlProperty">
            <summary>Defines whether a control is a stand-alone edit control in an automatic layout (this control is NOT considered to be a label but the edit control instead and the next control is NOT considered the edit control but a new group of controls altogether)</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.SimpleView.GetIsStandAloneEditControl(System.Windows.DependencyObject)">
            <summary>Stand alone edit control indicator</summary><param name="obj">Object to set the value on</param><returns>Value</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.SimpleView.SetIsStandAloneEditControl(System.Windows.DependencyObject,System.Boolean)">
            <summary>Stand alone edit control indicator</summary><param name="obj">Object to get the value for</param><param name="value">Value</param>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.SimpleView.BehaviorProperty">
            <summary>Attached behavior</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.SimpleView.OnBehaviorChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>Attached behavior changed handler</summary>
            <param name="obj">Object to attach to</param>
            <param name="args">Event arguments</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.SimpleView.SetBehavior(System.Windows.UIElement,System.String)">
            <summary>
            Sets the attached behavior class name
            </summary>
            <param name="element">Element the property is to be set for.</param>
            <param name="value">Value of the property</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.SimpleView.GetBehavior(System.Windows.UIElement)">
            <summary>
            Gets the value of the Behavior property
            </summary>
            <param name="element">Element to get the property value for.</param>
            <returns>Name of the associated behavior class</returns>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.SimpleView.FocusForwardingTargetProperty">
            <summary>This property can be bound to a property in a view model (or other data context) to update the property with a reference to whatever object currently has focus.</summary>
            <remarks>This feature is meant for very specialized uses only. If you are unsure of what this does exactly, this is probably not a feature you want to use.</remarks>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.SimpleView.GetFocusForwardingTarget(System.Windows.DependencyObject)">
            <summary>Focus forwarding getter</summary>
            <param name="obj">The object the property is set on.</param>
            <returns>UIElement or null</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.SimpleView.SetFocusForwardingTarget(System.Windows.DependencyObject,System.Windows.UIElement)">
            <summary>Focus forwarding setter</summary>
            <param name="obj">The object the property is set on.</param>
            <param name="value">UIElement or null</param>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.SimpleView.FocusForwardingIsEnabledProperty">
            <summary>Indicates whether focus forwarding is enabled</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.SimpleView.GetFocusForwardingIsEnabled(System.Windows.DependencyObject)">
            <summary>Focus forwarding is enabled getter</summary>
            <param name="obj">The object the property is set on.</param>
            <returns>UIElement or null</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.SimpleView.SetFocusForwardingIsEnabled(System.Windows.DependencyObject,System.Boolean)">
            <summary>Focus forwarding is enabled setter</summary>
            <param name="obj">The object the property is set on.</param>
            <param name="value">UIElement or null</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.SimpleView.OnFocusForwardingIsEnabledChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>Callback for changes in the focus element forwarding is enabled property</summary>
            <param name="o">The object the property is set on.</param>
            <param name="args">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.SimpleView.DockedProperty">
            <summary>Indicates whether a view element is "docked" into the main object or not.</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.SimpleView.GetDocked(System.Windows.DependencyObject)">
            <summary>Indicates whether a view element is "docked" into the main object or not.</summary>
            <param name="obj">The object the property is set on.</param>
            <returns>True or false</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.SimpleView.SetDocked(System.Windows.DependencyObject,System.Boolean)">
            <summary>Indicates whether a view element is "docked" into the main object or not.</summary>
            <param name="obj">The object the property is set on.</param>
            <param name="value">True or false</param>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.SimpleView.SupportsDockingProperty">
            <summary>Indicates whether an element can be docked and undocked</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.SimpleView.GetSupportsDocking(System.Windows.DependencyObject)">
            <summary>Indicates whether an element can be docked and undocked</summary>
            <param name="obj">The object the property is set on.</param>
            <returns>True or false</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.SimpleView.SetSupportsDocking(System.Windows.DependencyObject,System.Boolean)">
            <summary>Indicates whether an element can be docked and undocked</summary>
            <param name="obj">The object the property is set on.</param>
            <param name="value">True or false</param>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.SimpleView.ClosableProperty">
            <summary>Indicates whether an element can be independenty closed</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.SimpleView.GetClosable(System.Windows.DependencyObject)">
            <summary>Indicates whether an element can be independenty closed</summary>
            <param name="obj">The object the property is set on.</param>
            <returns>True or false</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.SimpleView.SetClosable(System.Windows.DependencyObject,System.Boolean)">
            <summary>Indicates whether an element can be independenty closed</summary>
            <param name="obj">The object the property is set on.</param>
            <param name="value">True or false</param>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.SimpleView.CloseActionProperty">
            <summary>Command to be triggered when a view (element) is closed</summary>
            <remarks>
            Only applies to objects that have the Closable attached property set to true.
            In most cases, this command/action is optional. When no special action is provided, the element's visibility is simply set to collapsed.
            </remarks>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.SimpleView.GetCloseAction(System.Windows.DependencyObject)">
            <summary>Command to be triggered when a view (element) is closed</summary>
            <param name="obj">The object the property is set on.</param>
            <returns>Command or view action</returns>
            <remarks>
            Only applies to objects that have the Closable attached property set to true.
            In most cases, this command/action is optional. When no special action is provided, the element's visibility is simply set to collapsed.
            </remarks>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.SimpleView.SetCloseAction(System.Windows.DependencyObject,System.Windows.Input.ICommand)">
            <summary>Command to be triggered when a view (element) is closed</summary>
            <param name="obj">The object the property is set on.</param>
            <param name="value">Command or view action</param>
            <remarks>
            Only applies to objects that have the Closable attached property set to true.
            In most cases, this command/action is optional. When no special action is provided, the element's visibility is simply set to collapsed.
            </remarks>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.SimpleView.InvalidateAllVisuals(System.Windows.DependencyObject)">
            <summary>Invalidates everything in the UI and forces a refresh</summary>
            <param name="source">Reference to an instance of the form itself</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.SimpleView.CreateObject(System.String,System.Reflection.Assembly)">
            <summary>
            Instantiates the specified class defined in the passed assembly, assuming that assembly has that class.
            Otherwise, null is returned.
            </summary>
            <param name="className">Name of the class (type) to instantiate.</param>
            <param name="assembly">Assembly containing the class.</param>
            <returns>Object instance or null</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.SimpleView.CreateObject(System.String)">
            <summary>
            Loads a named type from an assembly
            </summary>
            <param name="className">Fully qualified name of the class</param>
            <returns>Newly instantiated object</returns>
        </member>
        <member name="P:CODE.Framework.Wpf.Layout.SimpleView.OriginalViewLoadLocation">
            <summary>
            Location this view was originally loaded from
            </summary>
            <value></value>
        </member>
        <member name="E:CODE.Framework.Wpf.Layout.SimpleView.Activated">
            <summary>
            Occurs when the user interface got activated
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Layout.SimpleView.RaiseActivated">
            <summary>
            Raises the activated events.
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:CODE.Framework.Wpf.Layout.UIElementTypes">
            <summary>Identifies various types of UI elements and their significance/type</summary>
            <remarks>This is used in different ways by different UI styles</remarks>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.UIElementTypes.Primary">
            <summary>Primary UI element (often used as the element that uses up the majority of space</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.UIElementTypes.Secondary">
            <summary>Secondary UI element (often positioned at the side of the primary content)</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.UIElementTypes.Auxiliary">
            <summary>Auxiliary UI element (often hidden by default)</summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Layout.ViewSizeStrategies">
            <summary>Defines the overall sizing trategies for views</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.ViewSizeStrategies.UseMinimumSizeRequired">
            <summary>View uses the minimum size required (auto-sizes to content)</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.ViewSizeStrategies.UseMaximumSizeAvailable">
            <summary>Uses all the space the view host will give it</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Layout.ViewSizeStrategies.UseSuggestedSize">
            <summary>Use the suggested size of possible, otherwise, use maximum size</summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Utilities.AutoLayoutHeaderRenderer">
            <summary>
            This class is a utility class used to render headers in edit forms
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Utilities.AutoLayoutHeaderRenderer.RenderHeader(System.Windows.Media.DrawingContext,CODE.Framework.Wpf.Utilities.AutoHeaderTextRenderInfo,System.Double,System.Windows.Point)">
            <summary>This method performs the actual render operation to show a text label</summary>
            <param name="dc">Drawing context</param>
            <param name="info">Render info</param>
            <param name="scale">The scale.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Utilities.AutoLayoutHeaderRenderer.RenderBackground(System.Windows.Media.DrawingContext,CODE.Framework.Wpf.Utilities.GroupBackgroundRenderInfo,System.Double,System.Windows.Point)">
            <summary>This method draws a rectangular background around a group of elements</summary>
            <param name="dc">The drawing context.</param>
            <param name="info">Render info</param>
            <param name="scale">The scale.</param>
            <param name="offset">The offset.</param>
        </member>
        <member name="T:CODE.Framework.Wpf.Utilities.AutoHeaderTextRenderInfo">
            <summary>Internal utility class used to convey header rendering information</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Utilities.AutoHeaderTextRenderInfo.Text">
            <summary>Gets or sets the text.</summary>
            <value>The text.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Utilities.AutoHeaderTextRenderInfo.RenderRect">
            <summary>Gets or sets the render rectangle.</summary>
            <value>The render rectangle.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Utilities.AutoHeaderTextRenderInfo.FormattedText">
            <summary>Gets or sets the formatted text.</summary>
            <value>The formatted text.</value>
        </member>
        <member name="T:CODE.Framework.Wpf.Utilities.GroupBackgroundRenderInfo">
            <summary>Internal utility class used to convey group background render information</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Utilities.GroupBackgroundRenderInfo.RenderRect">
            <summary>Gets or sets the render rectangle.</summary>
            <value>The render rectangle.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Utilities.GroupBackgroundRenderInfo.Background">
            <summary>Background brush</summary>
            <value>The background.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Utilities.GroupBackgroundRenderInfo.Border">
            <summary>Border brush</summary>
            <value>The border.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Utilities.GroupBackgroundRenderInfo.BorderWidth">
            <summary>Border width</summary>
            <value>The width of the border.</value>
        </member>
        <member name="T:CODE.Framework.Wpf.Utilities.ElementHelper">
            <summary>
            This class provides utility features related to WPF elements
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Utilities.ElementHelper.FindParent``1(System.Windows.FrameworkElement)">
            <summary>
            Finds the parent by walking parentElement.Parent until a parent of a certain type is found, or the end of the chain is reached
            </summary>
            <typeparam name="TType">The type of the parent parentElement that is to be found.</typeparam>
            <param name="element">The parentElement.</param>
            <returns>FrameworkElement.</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Utilities.ElementHelper.FindVisualTreeParent``1(System.Windows.FrameworkElement)">
            <summary>
            Finds the parent by walking the complete visual tree until a parent of a certain type is found, or the end of the chain is reached
            </summary>
            <typeparam name="TType">The type of the parent parentElement that is to be found.</typeparam>
            <param name="element">The parentElement.</param>
            <returns>FrameworkElement.</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Utilities.ElementHelper.DetachElementFromParent(System.Windows.UIElement,System.Windows.DependencyObject)">
            <summary>
            Detaches an element from its current parrent
            </summary>
            <param name="elementToDetach">The element to detach.</param>
            <param name="parentElement">The parent element.</param>
            <exception cref="T:System.NotSupportedException">Can't remove element from current parent control of type  + parentElement.GetType()</exception>
            <remarks>
            Supports various ways of removing an element from its parent, such as content controls, child elements, and more.
            </remarks>
        </member>
        <member name="M:CODE.Framework.Wpf.Utilities.ElementHelper.DetachElementFromParent(System.Windows.FrameworkElement)">
            <summary>
            Finds the parentElement's parent and detaches it
            </summary>
            <param name="element">The parentElement.</param>
            <remarks>
            Looks for different types of parent objects in different types of containers
            </remarks>
        </member>
        <member name="T:CODE.Framework.Wpf.Utilities.FocusHelper">
            <summary>This class provides helpful features for focus management</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Utilities.FocusHelper.FocusFirstControlDelayed(System.Windows.UIElement,System.Int32)">
            <summary>
            Can move the focus to a true control within a hierarchy of items. 
            For instance, this method can be called by passing a Grid which in turn contains a Panel
            which in turn contains a TextBox. The TextBox will receive focus.
            </summary>
            <param name="parent">Root element that is to receive focus.</param>
            <param name="delay">The delay in milliseconds before the focus is moved (100ms is the default).</param>
            <returns>True if a focusable element was found</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Utilities.FocusHelper.FocusDelayed(System.Windows.UIElement,System.Windows.UIElement,System.Windows.UIElement,System.Windows.UIElement,System.Int32)">
            <summary>
            Sets the focus to the specified control(s) but after a slight delay to allow the calling method to finish before the focus is moved (by routing through a background thread and the message pump)
            </summary>
            <param name="focusElement1">The element to set the focus to.</param>
            <param name="focusElement2">An (optional) next element to set the focus to (typically a parent of the prior element).</param>
            <param name="focusElement3">An (optional) next element to set the focus to (typically a parent of the prior element).</param>
            <param name="focusElement4">An (optional) next element to set the focus to (typically a parent of the prior element).</param>
            <param name="delay">The delay in milliseconds before the focus is moved (100ms is the default).</param>
        </member>
        <member name="T:CODE.Framework.Wpf.Utilities.ImageHelper">
            <summary>
            This class provides various useful utility functions related to images and bitmaps
            </summary>
            <remarks>
            This image helper is specific to WPF image features. For GDI+ image features see the 
            ImageHelper class in the CODE.Framework.Core.Utilities namespace
            </remarks>
        </member>
        <member name="M:CODE.Framework.Wpf.Utilities.ImageHelper.BitmapToImageSource(System.Drawing.Image)">
            <summary>
            Converts a GDI+ image/bitmap to a WPF Image Source
            </summary>
            <param name="bitmap">The bitmap.</param>
            <returns>ImageSource.</returns>
        </member>
        <member name="T:CODE.Framework.Wpf.Utilities.ResourceHelper">
            <summary>
            This class provides useful helper methods for dealing with XAML resources
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Utilities.ResourceHelper.ReplaceDynamicDrawingBrushResources(System.Windows.Media.DrawingBrush,System.Collections.Generic.Dictionary{System.Object,System.Windows.Media.Brush})">
            <summary>Inspects a drawing brush and replaces dynamically bound Brush resources with the provided ones</summary>
            <param name="drawing">Drawing Brush</param>
            <param name="replacementBrushes">Dictionary of replacement brushes</param>
            <remarks>This helper function is useful for loading assets such as icons and make them take on the local brushes</remarks>
        </member>
        <member name="M:CODE.Framework.Wpf.Utilities.ResourceHelper.InspectDrawingGroup(System.Windows.Media.DrawingGroup,System.Collections.Generic.IDictionary{System.Object,System.Windows.Media.Brush})">
            <summary>Iterates over a drawing group and replaces brush resources</summary>
            <param name="group">Group to inspect</param>
            <param name="replacementBrushes">Replacement brushes</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Utilities.ResourceHelper.GetBrushResources(System.Windows.FrameworkElement,System.Collections.Generic.Dictionary{System.Object,System.Windows.Media.Brush},System.Boolean)">
            <summary>Returns all the brush resources in an element's resource collection</summary>
            <param name="element">The element that defines the resources</param>
            <param name="existingCollection">A collection of resources that are already known</param>
            <param name="clone">If true, the brushes will be cloned, so they can be manipulated at will without impacting other uses of the same brush</param>
            <returns>Collection of brush resources</returns>
        </member>
        <member name="T:CODE.Framework.Wpf.Utilities.SpellCheckHelper">
            <summary>
            Spell check helper class
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Utilities.SpellCheckHelper.GetCustomDictionaryPath">
            <summary>Typically \My Documents\Custom Dictionaries\. Can be overridden in app.Config with CustomDictionaryPath appSetting</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Utilities.SpellCheckHelper.GetCustomDictionaryFile(System.String)">
            <summary>Returns the fully qualified file name of the UserDictionary.lex file</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Utilities.SpellCheckHelper.GetIgnoreAllDictionaryFile(System.String)">
            <summary>Returns the fully qualified file name of the IgnoreAllDictionary.lex file</summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Utilities.VisualHelper">
            <summary>
            Various helper methods for visual elements
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Utilities.VisualHelper.ToImageSource(System.Windows.Media.Visual,System.Int32,System.Int32,CODE.Framework.Wpf.Utilities.RenderedImageFormat)">
            <summary>Converts a Visual to an ImageSource</summary>
            <param name="surface">The surface.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="format">The format.</param>
            <returns></returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Utilities.VisualHelper.ToIconSource(System.Windows.Media.Visual)">
            <summary>Converts a Visual to an ImageSource</summary>
            <param name="surface">The surface.</param>
            <returns></returns>
        </member>
        <member name="T:CODE.Framework.Wpf.Utilities.RenderedImageFormat">
            <summary>
            Image formats the utilities can render
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Utilities.RenderedImageFormat.Png">
            <summary>
            PNG
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Utilities.RenderedImageFormat.Jpeg">
            <summary>
            JPEG
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Utilities.RenderedImageFormat.Tiff">
            <summary>
            TIFF
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Utilities.RenderedImageFormat.Bmp">
            <summary>
            BMP
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Utilities.RenderedImageFormat.Gif">
            <summary>
            GIF
            </summary>
        </member>
    </members>
</doc>
