<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CODE.Framework.Wpf.Mvvm</name>
    </assembly>
    <members>
        <member name="T:CODE.Framework.Wpf.Mvvm.ActionGrid">
            <summary>
            Grid UI element that is automatically made visible and invisible depending on whether the current model implements IHaveActions
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.ActionGrid.ModelProperty">
            <summary>
            Model dependency property
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ActionGrid.ModelChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Change handler for model property
            </summary>
            <param name="d">The dependency object that triggered this change.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ActionGrid.Model">
            <summary>
            Model used as the data context
            </summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.ActionItemsControl">
            <summary>
            Provides a control that can be bound to an arbitrary object and if that object implements IHaveActions, it uses the collection of actions as its data source.
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.ActionItemsControl.ModelProperty">
            <summary>
            Model dependency property
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ActionItemsControl.ModelChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Change handler for model property
            </summary>
            <param name="d">The dependency object that triggered this change.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ActionItemsControl.OnRepopulateItems(System.Collections.Generic.List{CODE.Framework.Wpf.Mvvm.IViewAction})">
            <summary>
            This method is designed to be overridden in subclasses
            </summary>
            <param name="actions"></param>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ActionItemsControl.Model">
            <summary>
            Model used as the data context
            </summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.ViewResultHeaderGrid">
            <summary>
            Grid UI element that is automatically made visible and invisible depending on whether it's ViewResult property is in fact of type ViewResult and view result header information is attached to the view result
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.ViewResultHeaderGrid.TitleIconBrushProperty">
            <summary>
            Icon brush
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.ViewResultHeaderGrid.ViewTitleProperty">
            <summary>
            Document result title
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.ViewResultHeaderGrid.ViewResultProperty">
            <summary>
            Model dependency property
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ViewResultHeaderGrid.ViewResultChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Change handler for model property
            </summary>
            <param name="d">The dependency object that triggered this change.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewResultHeaderGrid.TitleIconBrush">
            <summary>
            Icon brush
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewResultHeaderGrid.ViewTitle">
            <summary>
            Document result title
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewResultHeaderGrid.ViewResult">
            <summary>
            ViewResult used as the data context
            </summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.IHaveActions">
            <summary>
            Interface used to indicate that a view model supports a list of available actions
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.IHaveActions.Actions">
            <summary>
            Collection of actions
            </summary>
        </member>
        <member name="E:CODE.Framework.Wpf.Mvvm.IHaveActions.ActionsChanged">
            <summary>
            Fires when the list of actions changed (assuming change notification is active)
            </summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.ViewActionsCollection">
            <summary>
            Collection of view actions
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewActionsCollection.Item(System.String)">
            <summary>Returns the view action specified by Id</summary>
            <param name="id">The view action id.</param>
            <returns>IViewAction</returns>
            <exception cref="T:CODE.Framework.Core.Exceptions.IndexOutOfBoundsException">ViewAction with Id ' + id + ' not found in collection.</exception>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.IViewAction">
            <summary>
            Interface defining action features beyond basic command features
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.IViewAction.InvalidateCanExecute">
            <summary>Indicates that previous CanExecute() results have become invalid and need to be re-evaluated.</summary>
            <remarks>This method should simply fire the CanExecuteChanged event.</remarks>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.IViewAction.Id">
            <summary>
            String identifier to identify an action independent of its caption (and independent of the locale)
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.IViewAction.Caption">
            <summary>
            Caption (can be used to display in the UI)
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.IViewAction.BeginGroup">
            <summary>
            Indicates whether this action starts a new group
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.IViewAction.GroupTitle">
            <summary>
            Indicates the group title for items that start a new group
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.IViewAction.IsDefault">
            <summary>
            Is this the default action?
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.IViewAction.IsCancel">
            <summary>
            Is this the cancel action?
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.IViewAction.IsPinned">
            <summary>
            Indicates whether an action is pinned (which is used for different things in different themes)
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.IViewAction.IsChecked">
            <summary>
            Indicates whether the action is to be considered "checked"
            </summary>
            <remarks>
            Cecked actions may be presented in various ways in different themes, such as having a check-mark in menus
            Most themes will only respect this property when ViewActionType = Toggle
            </remarks>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.IViewAction.ViewActionType">
            <summary>
            Indicates the type of the view action
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.IViewAction.IsDefaultSelection">
            <summary>
            Indicates that this view action is selected by default if the theme supports pre-selecting actions in some way (such as showing the page of the ribbon the action is in, or triggering the action in a special Office-style file menu).
            </summary>
            <remarks>If more than one action is flagged as the default selection, then the last one (in instantiation order) 'wins'</remarks>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.IViewAction.Availability">
            <summary>
            Indicates whether or not this action is at all available (often translates directly to being visible or invisible)
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.IViewAction.Visibility">
            <summary>
            Defines view action visibility (collapsed or hidden items are may be removed from menus or ribbons independent of their availability or can-execute state)
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.IViewAction.Significance">
            <summary>
            Significance of the action
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.IViewAction.Categories">
            <summary>
            Logical list of categories
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.IViewAction.CategoryOrder">
            <summary>
            Sort order for the category
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.IViewAction.Order">
            <summary>
            Sort order for the action (within a group)
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.IViewAction.FirstCategoryId">
            <summary>
            Returns the ID of the first category or an empty string if no categories have been added
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.IViewAction.ActionViewModel">
            <summary>
            A view model dedicated to this action
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.IViewAction.ActionView">
            <summary>
            A view specific to this action
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.IViewAction.UserRoles">
            <summary>
            List of roles with access to this action
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.IViewAction.AccessKey">
            <summary>
            Defines the access key of the action (such as the underlined key in the menu)
            </summary>
            <remarks>Not all themes will pick this setting up</remarks>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.IViewAction.ShortcutKey">
            <summary>
            Shortcut key
            </summary>
            <value>The shortcut key.</value>
            <remarks>Not all themes will pick this setting up</remarks>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.IViewAction.ShortcutModifiers">
            <summary>
            Modifier for the shortcut key
            </summary>
            <value>The shortcut modifier keys.</value>
            <remarks>Not all themes will pick this setting up</remarks>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.ViewActionTypes">
            <summary>
            Types of view actions
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.ViewActionTypes.Standard">
            <summary>
            Standard (triggers an action)
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.ViewActionTypes.Toggle">
            <summary>
            Toggle (triggers actions that can be considered to 'toggle' something - these types of actions respect the IsChecked flag)
            </summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.ViewActionAvailabilities">
            <summary>
            Indicates the availability state of a view action
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.ViewActionAvailabilities.Unknown">
            <summary>
            Document action availability is unknown (has not yet een evaluated)
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.ViewActionAvailabilities.Available">
            <summary>
            Document action is available
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.ViewActionAvailabilities.Unavailable">
            <summary>
            Document action is currently not available
            </summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.ViewActionCategory">
            <summary>
            Document action category
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ViewActionCategory.#ctor(System.String,System.String,System.Char)">
            <summary>
            Constructor
            </summary>
            <param name="id">The unique and culturally invariant identifier of the category.</param>
            <param name="caption">The caption (if not provides, the id is used as the caption).</param>
            <param name="accessKey">The keyboard access key for the category.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ViewActionCategory.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance is less than <paramref name="obj"/>. Zero This instance is equal to <paramref name="obj"/>. Greater than zero This instance is greater than <paramref name="obj"/>.
            </returns>
            <exception cref="T:System.ArgumentException">
              <paramref name="obj"/> is not the same type as this instance. </exception>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewActionCategory.Id">
            <summary>
            Language independent ID
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewActionCategory.Caption">
            <summary>
            Caption
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewActionCategory.IsLocalCategory">
            <summary>
            Indicates whether the category belongs to local views
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewActionCategory.Order">
            <summary>
            Category order
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewActionCategory.AccessKey">
            <summary>
            Access key for this category
            </summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.ViewActionSignificance">
            <summary>
            Significance of a view action
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.ViewActionSignificance.Normal">
            <summary>
            Normal
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.ViewActionSignificance.AboveNormal">
            <summary>
            Higher than normal
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.ViewActionSignificance.BelowNormal">
            <summary>
            Lower than normal
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.ViewActionSignificance.Highest">
            <summary>
            Highest
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.ViewActionSignificance.Lowest">
            <summary>
            Lowest
            </summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.ViewAction">
            <summary>
            Fundamental implementation of an action
            </summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.IStandardViewModel">
            <summary>Standard view model interface, which can be used with all the standard data templates</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.IStandardViewModel.Text1">
            <summary>Text Element 1</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.IStandardViewModel.Text2">
            <summary>Text Element 2</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.IStandardViewModel.Text3">
            <summary>Text Element 3</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.IStandardViewModel.Text4">
            <summary>Text Element 4</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.IStandardViewModel.Text5">
            <summary>Text Element 5</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.IStandardViewModel.Text6">
            <summary>Text Element 6</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.IStandardViewModel.Text7">
            <summary>Text Element 7</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.IStandardViewModel.Text8">
            <summary>Text Element 8</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.IStandardViewModel.Text9">
            <summary>Text Element 9</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.IStandardViewModel.Text10">
            <summary>Text Element 10</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.IStandardViewModel.Identifier1">
            <summary>Identifier Text Element 1</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.IStandardViewModel.Identifier2">
            <summary>Identifier Text Element 2</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.IStandardViewModel.Number1">
            <summary>Text Element representing a number (such as an item count)</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.IStandardViewModel.Number2">
            <summary>Second Text Element representing a number (such as an item count)</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.IStandardViewModel.ToolTipText">
            <summary>The text to display on the tool tip when this item is hovered over with the mouse</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.IStandardViewModel.Image1">
            <summary>Image Element 1</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.IStandardViewModel.Image2">
            <summary>Image Element 2</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.IStandardViewModel.Image3">
            <summary>Image Element 3</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.IStandardViewModel.Image4">
            <summary>Image Element 4</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.IStandardViewModel.Image5">
            <summary>Image Element 5</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.IStandardViewModel.Logo1">
            <summary>Logo Element 1</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.IStandardViewModel.Logo2">
            <summary>Logo Element 2</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ViewAction.#ctor(System.String,System.Boolean,System.Action{CODE.Framework.Wpf.Mvvm.IViewAction,System.Object},System.Func{CODE.Framework.Wpf.Mvvm.IViewAction,System.Object,System.Boolean},System.String,System.String,System.String,System.Int32,System.Boolean,System.Boolean,CODE.Framework.Wpf.Mvvm.ViewActionSignificance,System.String[],System.String,System.String,System.String,System.Int32,System.Char,System.Windows.Input.Key,System.Windows.Input.ModifierKeys,System.Char,System.Boolean,System.Boolean,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="caption">Caption</param>
            <param name="beginGroup">Group indicator</param>
            <param name="execute">Execution method (delegate)</param>
            <param name="canExecute">Can-Execute delegate</param>
            <param name="visualResourceKey">Key for XAML resource used for visual representation</param>
            <param name="category">Top level category (ID) assigned to this item</param>
            <param name="categoryCaption">Display text assigned to the top level category</param>
            <param name="categoryOrder">The display order of the category (used for sorting)</param>
            <param name="isDefault">Indicates if this is the default action</param>
            <param name="isCancel">Indicates if this is the action triggered if the user hits ESC</param>
            <param name="significance">General significance of the action.</param>
            <param name="userRoles">User roles with access to this action</param>
            <param name="brushResourceKey">Resource key for a visual derrived from a brush.</param>
            <param name="logoBrushResourceKey">Resource key for a visual (used for Logo1) derrived from a brush.</param>
            <param name="groupTitle">The group title.</param>
            <param name="order">The order of the view action (within a group)</param>
            <param name="accessKey">The access key for this action (such as the underlined character in a menu if the action is linked to a menu).</param>
            <param name="shortcutKey">The shortcut key for the action (usually a hot key that can be pressed without a menu being opened or anything along those lines).</param>
            <param name="shortcutKeyModifiers">Modifier for the shortcut key (typically CTRL).</param>
            <param name="categoryAccessKey">Access key for the category (only used if a category is assigned).</param>
            <param name="isDefaultSelection">Indicates whether this action shall be selected by default</param>
            <param name="isPinned">Indicates whether this action is considered to be pinned</param>
            <param name="id">Optional unique identifier for the view action (caption is assumed as the ID if no ID is provided)</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ViewAction.ToString">
            <summary>
            To the string.
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ViewAction.GetBrushFromResource(System.String)">
            <summary>Tries to find a named XAML resource of type brush and returns it.</summary>
            <param name="resourceName">Name of the resource.</param>
            <returns>Brush or null</returns>
            <remarks>The returned brush is a clone, so it can be manipulated at will without impacting other users of the same brush.</remarks>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ViewAction.CanExecute(System.Object)">
            <summary>
            Indicates whether the current action can execute (belongs to the ICommand interface)
            </summary>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ViewAction.InvalidateCanExecute">
            <summary>
            Indicates that previous CanExecute() results have become invalid and need to be re-evaluated.
            </summary>
            <remarks>This method should simply fire the CanExecuteChanged event.</remarks>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ViewAction.SetExecutionDelegate(System.Action{CODE.Framework.Wpf.Mvvm.IViewAction,System.Object})">
            <summary>
            Sets a method as the delegate for execution
            </summary>
            <param name="method"></param>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ViewAction.SetCanExecuteDelegate(System.Func{CODE.Framework.Wpf.Mvvm.IViewAction,System.Object,System.Boolean})">
            <summary>
            Sets a method as the delegate for can execute
            </summary>
            <param name="method"></param>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ViewAction.Execute(System.Object)">
            <summary>
            Method used to execute an action
            </summary>
            <param name="parameter"></param>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ViewAction.NotifyChanged(System.String)">
            <summary>
            Notifies the changed.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewAction.Id">
            <summary>
            String identifier to identify an action independent of its caption (and independent of the locale)
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewAction.Caption">
            <summary>Caption associated with this action</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewAction.VisualResourceKey">
            <summary>Key of a visual XAML resource associated with this action (such as an icon)</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewAction.BrushResourceKey">
            <summary>Key of a visual XAML resource associated with this action (such as an icon)</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewAction.LogoBrushResourceKey">
            <summary>Key of a visual XAML resource for Logo1 associated with this action (such as an icon)</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewAction.BeginGroup">
            <summary>Indicates whether this is a new group of actions</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewAction.GroupTitle">
            <summary>Indicates the group title for items that start a new group</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewAction.SingleExecute">
            <summary>Indicates that this action shall only be executed once (only supported by some themes)</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewAction.FirstCategoryId">
            <summary>Returns the ID of the first category or an empty string if no categories have been created</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewAction.IsLocalAction">
            <summary>
            If true, this indicates that the action is part of an individual view rather than an app-global action.
            </summary>
            <value><c>true</c> if this instance is local action; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewAction.Visual">
            <summary>
            Actual visual associated with an action (such as an icon). This visual is set (identified) by the VisualResourceKey property
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewAction.PopulatedVisual">
            <summary>
            Like Visual, but when no visual resource is found, it attempts to load a standard icon
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewAction.Brush">
            <summary>
            Returns a brush of a brush resource is defined.
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewAction.HasBrush">
            <summary>Indicates whether this action has an assigned brush</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewAction.PopulatedBrush">
            <summary>
            Returns a brush if defined, otherwise loads a default brush
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewAction.ResourceContextObject">
            <summary>This property is mostly userd internally only. It can be used to set objects that provide resource dictionaries which can then be considered for brush resources</summary>
            <value>The resource context object.</value>
        </member>
        <member name="E:CODE.Framework.Wpf.Mvvm.ViewAction.CanExecuteChanged">
            <summary>Event that fires when the CanExecute state changed</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewAction.HasExecuteDelegate">
            <summary>Indicates whether the current action has an execute delegate assigned</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewAction.IsDefault">
            <summary>
            Is this the default action?
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewAction.IsCancel">
            <summary>
            Is this the cancel action?
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewAction.IsDefaultSelection">
            <summary>
            Indicates that this view action is selected by default if the theme supports pre-selecting actions in some way (such as showing the page of the ribbon the action is in, or triggering the action in a special Office-style file menu).
            </summary>
            <remarks>If more than one action is flagged as the default selection, then the last one (in instantiation order) 'wins'</remarks>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewAction.IsPinned">
            <summary>Indicates whether an action is pinned (which is used for different things in different themes)</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewAction.IsChecked">
            <summary>
            Indicates whether the action is to be considered "checked"
            </summary>
            <remarks>
            Cecked actions may be presented in various ways in different themes, such as having a check-mark in menus
            Most themes will only respect this property when ViewActionType = Toggle
            </remarks>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewAction.IsChecked_Visible">
            <summary>
            Returns Visible if IsChecked and Collapsed otherwise
            </summary>
            <value>The is checked_ visible.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewAction.ViewActionType">
            <summary>
            Indicates the type of the view action
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewAction.Availability">
            <summary>
            Indicates whether or not this action is at all available (often translates directly to being visible or invisible)
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewAction.Visibility">
            <summary>
            Defines view action visibility (collapsed or hidden items are may be removed from menus or ribbons independent of their availability or can-execute state)
            </summary>
            <value>The visibility.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewAction.Significance">
            <summary>
            Significance of the action
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewAction.Categories">
            <summary>
            Logical list of categories
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewAction.CategoryOrder">
            <summary>
            Sort order for the category
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewAction.Order">
            <summary>
            Sort order for the action (within a group)
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewAction.ActionViewModel">
            <summary>
            A view model dedicated to this action
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewAction.ActionView">
            <summary>
            A view specific to this action
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewAction.UserRoles">
            <summary>
            List of roles with access to this action
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewAction.AccessKey">
            <summary>
            Defines the access key of the action (such as the underlined key in the menu)
            </summary>
            <value>The access key.</value>
            <remarks>Not all themes will pick this setting up</remarks>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewAction.ShortcutKey">
            <summary>
            Shortcut key
            </summary>
            <value>The shortcut key.</value>
            <remarks>Not all themes will pick this setting up</remarks>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewAction.ShortcutModifiers">
            <summary>
            Modifier for the shortcut key
            </summary>
            <value>The shortcut modifier keys.</value>
            <remarks>Not all themes will pick this setting up</remarks>
        </member>
        <member name="E:CODE.Framework.Wpf.Mvvm.ViewAction.PropertyChanged">
            <summary>Occurs when a property value changes.</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewAction.Text1">
            <summary>Text Element 1</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewAction.Text2">
            <summary>Text Element 2</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewAction.Text3">
            <summary>Text Element 3</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewAction.Text4">
            <summary>Text Element 4</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewAction.Text5">
            <summary>Text Element 5</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewAction.Text6">
            <summary>Text Element 6</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewAction.Text7">
            <summary>Text Element 7</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewAction.Text8">
            <summary>Text Element 8</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewAction.Text9">
            <summary>Text Element 9</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewAction.Text10">
            <summary>Text Element 10</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewAction.Identifier1">
            <summary>Identifier Text Element 1</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewAction.Identifier2">
            <summary>Identifier Text Element 2</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewAction.Number1">
            <summary>Text Element representing a number (such as an item count)</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewAction.Number2">
            <summary>Second Text Element representing a number (such as an item count)</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewAction.ToolTipText">
            <summary>The text to display on the tool tip when this item is hovered over with the mouse</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewAction.Image1">
            <summary>Image Element 1</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewAction.Image2">
            <summary>Image Element 2</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewAction.Image3">
            <summary>Image Element 3</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewAction.Image4">
            <summary>Image Element 4</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewAction.Image5">
            <summary>Image Element 5</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewAction.Logo1">
            <summary>Logo Element 1</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewAction.Logo2">
            <summary>Logo Element 2</summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.DependencyViewActionWrapper">
            <summary>
            View action wrapper based on a DependencyObject (and thus can be used for better binding)
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.DependencyViewActionWrapper._wrappedAction">
            <summary>
            Wrapped action
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.DependencyViewActionWrapper.#ctor(CODE.Framework.Wpf.Mvvm.IViewAction)">
            <summary>
            Constructor
            </summary>
            <param name="wrappedAction">Real action that has been wrapped</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.DependencyViewActionWrapper.PopulateLocalPropertiesFromRealViewAction(System.String)">
            <summary>
            Populates the local properties from the real view action.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.DependencyViewActionWrapper.UpdateViewActionFromLocalProperties(System.Windows.DependencyObject,System.String)">
            <summary>
            Updates the view action from local properties.
            </summary>
            <param name="o">The o.</param>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.DependencyViewActionWrapper.UpdateViewActionFromLocalProperties(System.String)">
            <summary>
            Updates the view action from local properties.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.DependencyViewActionWrapper.Text1Property">
            <summary>
            Text Element 1
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.DependencyViewActionWrapper.Text2Property">
            <summary>
            Text Element 2
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.DependencyViewActionWrapper.Text3Property">
            <summary>
            Text Element 3
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.DependencyViewActionWrapper.Text4Property">
            <summary>
            Text Element 4
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.DependencyViewActionWrapper.Text5Property">
            <summary>
            Text Element 5
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.DependencyViewActionWrapper.Text6Property">
            <summary>
            Text Element 6
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.DependencyViewActionWrapper.Text7Property">
            <summary>
            Text Element 7
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.DependencyViewActionWrapper.Text8Property">
            <summary>
            Text Element 8
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.DependencyViewActionWrapper.Text9Property">
            <summary>
            Text Element 9
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.DependencyViewActionWrapper.Text10Property">
            <summary>
            Text Element 10
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.DependencyViewActionWrapper.Identifier1Property">
            <summary>
            Identifier Text Element 1
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.DependencyViewActionWrapper.Identifier2Property">
            <summary>
            Identifier Text Element 2
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.DependencyViewActionWrapper.Number1Property">
            <summary>
            Text Element representing a number (such as an item count)
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.DependencyViewActionWrapper.Number2Property">
            <summary>
            Second Text Element representing a number (such as an item count)
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.DependencyViewActionWrapper.ToolTipTextProperty">
            <summary>
            The text to display on the tool tip when this item is hovered over with the mouse
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.DependencyViewActionWrapper.Image1Property">
            <summary>
            Image Element 1
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.DependencyViewActionWrapper.Image2Property">
            <summary>
            Image Element 2
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.DependencyViewActionWrapper.Image3Property">
            <summary>
            Image Element 3
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.DependencyViewActionWrapper.Image4Property">
            <summary>
            Image Element 4
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.DependencyViewActionWrapper.Image5Property">
            <summary>
            Image Element 5
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.DependencyViewActionWrapper.Logo1Property">
            <summary>
            Logo Element 1
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.DependencyViewActionWrapper.Logo2Property">
            <summary>
            Logo Element 2
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.DependencyViewActionWrapper.IdProperty">
            <summary>
            String identifier to identify an action independent of its caption (and independent of the locale)
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.DependencyViewActionWrapper.CaptionProperty">
            <summary>
            Caption (can be used to display in the UI)
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.DependencyViewActionWrapper.BeginGroupProperty">
            <summary>
            Indicates whether this action starts a new group
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.DependencyViewActionWrapper.GroupTitleProperty">
            <summary>
            Indicates the group title for items that start a new group
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.DependencyViewActionWrapper.IsDefaultProperty">
            <summary>
            Is this the default action?
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.DependencyViewActionWrapper.IsCancelProperty">
            <summary>
            Is this the cancel action?
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.DependencyViewActionWrapper.IsPinnedProperty">
            <summary>
            Indicates whether an action is pinned (which is used for different things in different themes)
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.DependencyViewActionWrapper.IsCheckedProperty">
            <summary>
            Indicates whether the action is to be considered "checked"
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.DependencyViewActionWrapper.IsDefaultSelectionProperty">
            <summary>
            Indicates that this view action is selected by default if the theme supports pre-selecting actions in some way (such as showing the page of the ribbon the action is in, or triggering the action in a special Office-style file menu).
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.DependencyViewActionWrapper.IsLocalActionProperty">
            <summary>
            Gets or sets a value indicating whether this instance is local action.
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.DependencyViewActionWrapper.ViewActionTypeProperty">
            <summary>
            Indicates the type of the view action
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.DependencyViewActionWrapper.AvailabilityProperty">
            <summary>
            Indicates whether or not this action is at all available (often translates directly to being visible or invisible)
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.DependencyViewActionWrapper.VisibilityProperty">
            <summary>
            Defines view action visibility (collapsed or hidden items are may be removed from menus or ribbons independent of their availability or can-execute state)
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.DependencyViewActionWrapper.IsChecked_VisibleProperty">
            <summary>
            Visible if IsChecked = true
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.DependencyViewActionWrapper.SignificanceProperty">
            <summary>
            Significance of the action
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.DependencyViewActionWrapper.CategoriesProperty">
            <summary>
            Logical list of categories
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.DependencyViewActionWrapper.CategoryOrderProperty">
            <summary>
            Sort order for the category
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.DependencyViewActionWrapper.OrderProperty">
            <summary>
            Sort order for the action (within a group)
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.DependencyViewActionWrapper.FirstCategoryIdProperty">
            <summary>
            Returns the ID of the first category or an empty string if no categories have been added
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.DependencyViewActionWrapper.ActionViewModelProperty">
            <summary>
            A view model dedicated to this action
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.DependencyViewActionWrapper.ActionViewProperty">
            <summary>
            A view specific to this action
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.DependencyViewActionWrapper.UserRolesProperty">
            <summary>
            List of roles with access to this action
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.DependencyViewActionWrapper.AccessKeyProperty">
            <summary>
            Defines the access key of the action (such as the underlined key in the menu)
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.DependencyViewActionWrapper.ShortcutKeyProperty">
            <summary>
            Shortcut key
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.DependencyViewActionWrapper.ShortcutModifiersProperty">
            <summary>
            Modifier for the shortcut key
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.DependencyViewActionWrapper.InvalidateCanExecute">
            <summary>
            Indicates that previous CanExecute() results have become invalid and need to be re-evaluated.
            </summary>
            <remarks>This method should simply fire the CanExecuteChanged event.</remarks>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.DependencyViewActionWrapper.CanExecute(System.Object)">
            <summary>
            Defines the method that determines whether the command can execute in its current state.
            </summary>
            <param name="parameter">Data used by the command.  If the command does not require data to be passed, this object can be set to null.</param>
            <returns>true if this command can be executed; otherwise, false.</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.DependencyViewActionWrapper.Execute(System.Object)">
            <summary>
            Defines the method to be called when the command is invoked.
            </summary>
            <param name="parameter">Data used by the command.  If the command does not require data to be passed, this object can be set to null.</param>
        </member>
        <member name="E:CODE.Framework.Wpf.Mvvm.DependencyViewActionWrapper.PropertyChanged">
            <summary>
            Property changed event
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.DependencyViewActionWrapper.Text1">
            <summary>
            Text Element 1
            </summary>
            <value>The text1.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.DependencyViewActionWrapper.Text2">
            <summary>
            Text Element 2
            </summary>
            <value>The text2.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.DependencyViewActionWrapper.Text3">
            <summary>
            Text Element 3
            </summary>
            <value>The text3.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.DependencyViewActionWrapper.Text4">
            <summary>
            Text Element 4
            </summary>
            <value>The text4.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.DependencyViewActionWrapper.Text5">
            <summary>
            Text Element 5
            </summary>
            <value>The text5.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.DependencyViewActionWrapper.Text6">
            <summary>
            Text Element 6
            </summary>
            <value>The text6.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.DependencyViewActionWrapper.Text7">
            <summary>
            Text Element 7
            </summary>
            <value>The text7.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.DependencyViewActionWrapper.Text8">
            <summary>
            Text Element 8
            </summary>
            <value>The text8.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.DependencyViewActionWrapper.Text9">
            <summary>
            Text Element 9
            </summary>
            <value>The text9.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.DependencyViewActionWrapper.Text10">
            <summary>
            Text Element 10
            </summary>
            <value>The text10.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.DependencyViewActionWrapper.Identifier1">
            <summary>
            Identifier Text Element 1
            </summary>
            <value>The identifier1.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.DependencyViewActionWrapper.Identifier2">
            <summary>
            Identifier Text Element 2
            </summary>
            <value>The identifier2.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.DependencyViewActionWrapper.Number1">
            <summary>
            Text Element representing a number (such as an item count)
            </summary>
            <value>The number1.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.DependencyViewActionWrapper.Number2">
            <summary>
            Second Text Element representing a number (such as an item count)
            </summary>
            <value>The number2.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.DependencyViewActionWrapper.ToolTipText">
            <summary>
            The text to display on the tool tip when this item is hovered over with the mouse
            </summary>
            <value>The tool tip text.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.DependencyViewActionWrapper.Image1">
            <summary>
            Image Element 1
            </summary>
            <value>The image1.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.DependencyViewActionWrapper.Image2">
            <summary>
            Image Element 2
            </summary>
            <value>The image2.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.DependencyViewActionWrapper.Image3">
            <summary>
            Image Element 3
            </summary>
            <value>The image3.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.DependencyViewActionWrapper.Image4">
            <summary>
            Image Element 4
            </summary>
            <value>The image4.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.DependencyViewActionWrapper.Image5">
            <summary>
            Image Element 5
            </summary>
            <value>The image5.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.DependencyViewActionWrapper.Logo1">
            <summary>
            Logo Element 1
            </summary>
            <value>The logo1.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.DependencyViewActionWrapper.Logo2">
            <summary>
            Logo Element 2
            </summary>
            <value>The logo2.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.DependencyViewActionWrapper.Id">
            <summary>
            String identifier to identify an action independent of its caption (and independent of the locale)
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.DependencyViewActionWrapper.Caption">
            <summary>
            Caption (can be used to display in the UI)
            </summary>
            <value>The caption.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.DependencyViewActionWrapper.BeginGroup">
            <summary>
            Indicates whether this action starts a new group
            </summary>
            <value><c>true</c> if [begin group]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.DependencyViewActionWrapper.GroupTitle">
            <summary>
            Indicates the group title for items that start a new group
            </summary>
            <value>The group title.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.DependencyViewActionWrapper.IsDefault">
            <summary>
            Is this the default action?
            </summary>
            <value><c>true</c> if this instance is default; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.DependencyViewActionWrapper.IsCancel">
            <summary>
            Is this the cancel action?
            </summary>
            <value><c>true</c> if this instance is cancel; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.DependencyViewActionWrapper.IsPinned">
            <summary>
            Indicates whether an action is pinned (which is used for different things in different themes)
            </summary>
            <value><c>true</c> if this instance is pinned; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.DependencyViewActionWrapper.IsChecked">
            <summary>
            Indicates whether the action is to be considered "checked"
            </summary>
            <value><c>true</c> if this instance is checked; otherwise, <c>false</c>.</value>
            <remarks>Cecked actions may be presented in various ways in different themes, such as having a check-mark in menus
            Most themes will only respect this property when ViewActionType = Toggle</remarks>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.DependencyViewActionWrapper.IsDefaultSelection">
            <summary>
            Indicates that this view action is selected by default if the theme supports pre-selecting actions in some way (such as showing the page of the ribbon the action is in, or triggering the action in a special Office-style file menu).
            </summary>
            <value><c>true</c> if this instance is default selection; otherwise, <c>false</c>.</value>
            <remarks>If more than one action is flagged as the default selection, then the last one (in instantiation order) 'wins'</remarks>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.DependencyViewActionWrapper.IsLocalAction">
            <summary>
            Gets or sets a value indicating whether this instance is local action.
            </summary>
            <value><c>true</c> if this instance is local action; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.DependencyViewActionWrapper.ViewActionType">
            <summary>
            Indicates the type of the view action
            </summary>
            <value>The type of the view action.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.DependencyViewActionWrapper.Availability">
            <summary>
            Indicates whether or not this action is at all available (often translates directly to being visible or invisible)
            </summary>
            <value>The availability.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.DependencyViewActionWrapper.Visibility">
            <summary>
            Defines view action visibility (collapsed or hidden items are may be removed from menus or ribbons independent of their availability or can-execute state)
            </summary>
            <value>The visibility.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.DependencyViewActionWrapper.IsChecked_Visible">
            <summary>
            Visible if IsChecked = true
            </summary>
            <value>The IsChecked visibility.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.DependencyViewActionWrapper.Significance">
            <summary>
            Significance of the action
            </summary>
            <value>The significance.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.DependencyViewActionWrapper.Categories">
            <summary>
            Logical list of categories
            </summary>
            <value>The categories.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.DependencyViewActionWrapper.CategoryOrder">
            <summary>
            Sort order for the category
            </summary>
            <value>The category order.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.DependencyViewActionWrapper.Order">
            <summary>
            Sort order for the action (within a group)
            </summary>
            <value>The order.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.DependencyViewActionWrapper.FirstCategoryId">
            <summary>
            Returns the ID of the first category or an empty string if no categories have been added
            </summary>
            <value>The first category identifier.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.DependencyViewActionWrapper.ActionViewModel">
            <summary>
            A view model dedicated to this action
            </summary>
            <value>The action view model.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.DependencyViewActionWrapper.ActionView">
            <summary>
            A view specific to this action
            </summary>
            <value>The action view.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.DependencyViewActionWrapper.UserRoles">
            <summary>
            List of roles with access to this action
            </summary>
            <value>The user roles.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.DependencyViewActionWrapper.AccessKey">
            <summary>
            Defines the access key of the action (such as the underlined key in the menu)
            </summary>
            <value>The access key.</value>
            <remarks>Not all themes will pick this setting up</remarks>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.DependencyViewActionWrapper.ShortcutKey">
            <summary>
            Shortcut key
            </summary>
            <value>The shortcut key.</value>
            <remarks>Not all themes will pick this setting up</remarks>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.DependencyViewActionWrapper.ShortcutModifiers">
            <summary>
            Modifier for the shortcut key
            </summary>
            <value>The shortcut modifier keys.</value>
            <remarks>Not all themes will pick this setting up</remarks>
        </member>
        <member name="E:CODE.Framework.Wpf.Mvvm.DependencyViewActionWrapper.CanExecuteChanged">
            <summary>
            Occurs when changes occur that affect whether or not the command should execute.
            </summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.IClosable">
            <summary>Interface that can be implemented by objects that support explicit close events</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.IClosable.RaiseClosingEvent">
            <summary>This method can be used to raise the closing event</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.IClosable.RaiseClosedEvent">
            <summary>This method can be used to raise the closed event</summary>
        </member>
        <member name="E:CODE.Framework.Wpf.Mvvm.IClosable.Closing">
            <summary>Occurs when the object is closing (has not closed yet)</summary>
        </member>
        <member name="E:CODE.Framework.Wpf.Mvvm.IClosable.Closed">
            <summary>Occurs when the object has closed (has finished closing)</summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.IOpenable">
            <summary>Interface that can be implemented by objects that support explicit open events</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.IOpenable.RaiseOpeningEvent">
            <summary>This method can be used to raise the opening event</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.IOpenable.RaiseOpenedEvent">
            <summary>This method can be used to raise the open event</summary>
        </member>
        <member name="E:CODE.Framework.Wpf.Mvvm.IOpenable.Opening">
            <summary>Occurs when the object is opening (has not opened yet)</summary>
        </member>
        <member name="E:CODE.Framework.Wpf.Mvvm.IOpenable.Opened">
            <summary>Occurs when the object has opened (has finished opening)</summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.MessageBoxViewAction">
            <summary>Special view action used by message boxes</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.MessageBoxViewAction.#ctor(System.String,System.Boolean,System.Action{CODE.Framework.Wpf.Mvvm.IViewAction,System.Object},System.Func{CODE.Framework.Wpf.Mvvm.IViewAction,System.Object,System.Boolean},System.String,System.String,System.String,System.Int32,System.Boolean,System.Boolean,CODE.Framework.Wpf.Mvvm.ViewActionSignificance,System.String[])">
            <summary>Constructor</summary>
            <param name="caption">Caption</param>
            <param name="beginGroup">Group indicator</param>
            <param name="execute">Execution method (delegate)</param>
            <param name="canExecute">Can-Execute delegate</param>
            <param name="visualResourceKey">Key for XAML resource used for visual representation</param>
            <param name="category">Top level category (ID) assigned to this item</param>
            <param name="categoryCaption">Display text assigned to the top level category</param>
            <param name="categoryOrder">The display order of the category (used for sorting)</param>
            <param name="isDefault">Indicates if this is the default action</param>
            <param name="isCancel">Indicates if this is the action triggered if the user hits ESC</param>
            <param name="significance">General significance of the action.</param>
            <param name="userRoles">User roles with access to this action</param>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.MessageBoxViewAction.Model">
            <summary>
            Reference to the utilized message box view model
            </summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.ApplicationEx">
            <summary>
            Extended version of the windows application object
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ApplicationEx.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ApplicationEx.LoadTheme">
            <summary>
            Forces a re-load of the current theme
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ApplicationEx.TryLoadAndMergeResourceDictionary(System.String)">
            <summary>
            Attempts to load the specified resource dictionary from the specified location
            </summary>
            <param name="searchPath">Search path</param>
            <returns>True if found</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ApplicationEx.GetStandardThemeFeatures">
            <summary>Returns a theme feature object for internal use</summary>
            <returns>IThemeStandardFeatures implementation specific to the provided theme</returns>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.ApplicationEx.SecondaryAssemblies">
            <summary>
            List of secondary assemblies the current app references.
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ApplicationEx.RegisterSecondaryAssembly(System.String)">
            <summary>
            Registers a secondary assembly so the elements within that assembly are found as if they were in the local assembly
            </summary>
            <param name="assemblyString">The assembly string (assembly name).</param>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ApplicationEx.Theme">
            <summary>Attached property to set application theme</summary>
            <remarks>
            Setting an application theme has a number of consequences. For one, the system tried to load built-in themes the CODE Framework is aware of. Currently supported are: "Metro", "Battleship".
            In addition, the system will try to load resource dictionaries in Theme folders. For instance, if the theme is set to "MyTheme", the system will try to load Themes/MyTheme/MyTheme.xaml resource dictionaries. It will also search in Theme/MyTheme, Style/MyTheme, and Styles/MyTheme for MyTheme.xaml.
            </remarks>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.AsyncWorker">
            <summary>
            This class provides async loading behavior useful to view models
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.AsyncWorker.#cctor">
            <summary>
            Initializes static members of the <see cref="T:CODE.Framework.Wpf.Mvvm.AsyncWorker"/> class.
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.AsyncWorker.Execute``1(System.Func{``0},System.Action{``0},CODE.Framework.Wpf.Mvvm.IModelStatus,CODE.Framework.Wpf.Mvvm.ModelStatus)">
            <summary>
            Executes the method provided by the first parameter (on a background thread) and passes the result to the second method (on the current thread)
            </summary>
            <typeparam name="TResult">The result produced by the first method, which is to be passed to the second method</typeparam>
            <param name="worker">The method used to perform the operation</param>
            <param name="completeMethod">The load complete method.</param>
            <param name="statusObject">(Optional) status object that can have its status automatically updated (on the foreground thread)</param>
            <param name="operationStatus">The status the optional loader is set to while the operation is in progress</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.AsyncWorker.Execute``2(System.Func{``0},System.Func{``1},System.Action{``0,``1},CODE.Framework.Wpf.Mvvm.IModelStatus,CODE.Framework.Wpf.Mvvm.ModelStatus)">
            <summary>
            Executes all the worker delegates on a background thread, waits for them all to complete, and then  passes the result to the complete method (on the original foreground thread)
            </summary>
            <typeparam name="TResult">The result produced by the first worker method, which is to be passed to the complete method as the first parameter</typeparam>
            <typeparam name="TResult2">The result produced by the second worker method, which is to be passed to the complete method as the second parameter</typeparam>
            <param name="worker">The first method used to perform the operation</param>
            <param name="worker2">The second method used to perform the operation</param>
            <param name="completeMethod">Method to fire when all workers have completed.</param>
            <param name="statusObject">(Optional) status object that can have its status automatically updated (on the foreground thread)</param>
            <param name="operationStatus">The status the optional loader is set to while the operation is in progress</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.AsyncWorker.Execute``3(System.Func{``0},System.Func{``1},System.Func{``2},System.Action{``0,``1,``2},CODE.Framework.Wpf.Mvvm.IModelStatus,CODE.Framework.Wpf.Mvvm.ModelStatus)">
            <summary>
            Executes all the worker delegates on a background thread, waits for them all to complete, and then  passes the result to the complete method (on the original foreground thread)
            </summary>
            <typeparam name="TResult">The result produced by the first worker method, which is to be passed to the complete method as the first parameter</typeparam>
            <typeparam name="TResult2">The result produced by the second worker method, which is to be passed to the complete method as the second parameter</typeparam>
            <typeparam name="TResult3">The result produced by the third worker method, which is to be passed to the complete method as the third parameter</typeparam>
            <param name="worker">The first method used to perform the operation</param>
            <param name="worker2">The second method used to perform the operation</param>
            <param name="worker3">The third method used to perform the operation</param>
            <param name="completeMethod">Method to fire when all workers have completed.</param>
            <param name="statusObject">(Optional) status object that can have its status automatically updated (on the foreground thread)</param>
            <param name="operationStatus">The status the optional loader is set to while the operation is in progress</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.AsyncWorker.Execute``4(System.Func{``0},System.Func{``1},System.Func{``2},System.Func{``3},System.Action{``0,``1,``2,``3},CODE.Framework.Wpf.Mvvm.IModelStatus,CODE.Framework.Wpf.Mvvm.ModelStatus)">
            <summary>
            Executes all the worker delegates on a background thread, waits for them all to complete, and then  passes the result to the complete method (on the original foreground thread)
            </summary>
            <typeparam name="TResult">The result produced by the first worker method, which is to be passed to the complete method as the first parameter</typeparam>
            <typeparam name="TResult2">The result produced by the second worker method, which is to be passed to the complete method as the second parameter</typeparam>
            <typeparam name="TResult3">The result produced by the third worker method, which is to be passed to the complete method as the third parameter</typeparam>
            <typeparam name="TResult4">The result produced by the fourth worker method, which is to be passed to the complete method as the fourth parameter</typeparam>
            <param name="worker">The first method used to perform the operation</param>
            <param name="worker2">The second method used to perform the operation</param>
            <param name="worker3">The third method used to perform the operation</param>
            <param name="worker4">The fourth method used to perform the operation</param>
            <param name="completeMethod">Method to fire when all workers have completed.</param>
            <param name="statusObject">(Optional) status object that can have its status automatically updated (on the foreground thread)</param>
            <param name="operationStatus">The status the optional loader is set to while the operation is in progress</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.AsyncWorker.Execute``5(System.Func{``0},System.Func{``1},System.Func{``2},System.Func{``3},System.Func{``4},System.Action{``0,``1,``2,``3,``4},CODE.Framework.Wpf.Mvvm.IModelStatus,CODE.Framework.Wpf.Mvvm.ModelStatus)">
            <summary>
            Executes all the worker delegates on a background thread, waits for them all to complete, and then  passes the result to the complete method (on the original foreground thread)
            </summary>
            <typeparam name="TResult">The result produced by the first worker method, which is to be passed to the complete method as the first parameter</typeparam>
            <typeparam name="TResult2">The result produced by the second worker method, which is to be passed to the complete method as the second parameter</typeparam>
            <typeparam name="TResult3">The result produced by the third worker method, which is to be passed to the complete method as the third parameter</typeparam>
            <typeparam name="TResult4">The result produced by the fourth worker method, which is to be passed to the complete method as the fourth parameter</typeparam>
            <typeparam name="TResult5">The result produced by the fourth worker method, which is to be passed to the complete method as the fourth parameter</typeparam>
            <param name="worker">The first method used to perform the operation</param>
            <param name="worker2">The second method used to perform the operation</param>
            <param name="worker3">The third method used to perform the operation</param>
            <param name="worker4">The fourth method used to perform the operation</param>
            <param name="worker5">The fourth method used to perform the operation</param>
            <param name="completeMethod">Method to fire when all workers have completed.</param>
            <param name="statusObject">(Optional) status object that can have its status automatically updated (on the foreground thread)</param>
            <param name="operationStatus">The status the optional loader is set to while the operation is in progress</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.AsyncWorker.ExecuteDispatch``1(System.Action{``0},``0,CODE.Framework.Wpf.Mvvm.IModelStatus)">
            <summary>Performs exacution of the loaded method back on the main thread and resets the status if need be</summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="completeMethod">The complete method.</param>
            <param name="parameter">The parameter.</param>
            <param name="statusObject">The status object.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.AsyncWorker.PauseContinuousProcess(System.Guid)">
            <summary>Pauses an existing continuous process</summary>
            <param name="processId">The ID of the process that is to be paused</param>
            <returns>True if a previously running process is paused</returns>
            <remarks>Also returns true of the process has been previously paused</remarks>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.AsyncWorker.ResumeContinuousProcess(System.Guid)">
            <summary>Pauses an existing continuous process</summary>
            <param name="processId">The ID of the process that is to be resumed</param>
            <returns>True if the process is resumed</returns>
            <remarks>Also returns true of the process has previously been running</remarks>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.AsyncWorker.TriggerContinuousProcess(System.Guid)">
            <summary>Queues an existing continuous process to run immediately</summary>
            <param name="processId">The ID of the process that is to be triggered immediately</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.AsyncWorker.StopContinuousProcess(System.Guid)">
            <summary>Stops (removes) an existing continuous process</summary>
            <param name="processId">The ID of the process that is to be stopped</param>
            <returns>True if a previously running process is stopped</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.AsyncWorker.Execute``1(System.Func{``0},System.Action{``0},System.TimeSpan,CODE.Framework.Wpf.Mvvm.IModelStatus,CODE.Framework.Wpf.Mvvm.ModelStatus,System.Guid,System.Threading.ThreadPriority)">
            <summary>
            Continuously executes the specified worker on the scheduled interval
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="worker">The method executed on a background thread.</param>
            <param name="completeMethod">The method executed on the UI thread</param>
            <param name="interval">The interval at which the method runs (should not be smaller than 250ms)</param>
            <param name="statusObject">An object that has its status updated every time the process runs (typically a view model or similar object)</param>
            <param name="operationStatus">The status that is to be set on the status object while the method runs.</param>
            <param name="processId">The ID of the continuously running process (can be used to later to pause, resume, or stop a process)</param>
            <param name="threadPriority">The thread priority for the background thread (default == BelowNormal).</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.AsyncWorker.SetModelStatusThreadSafe(CODE.Framework.Wpf.Mvvm.IModelStatus,CODE.Framework.Wpf.Mvvm.ModelStatus,System.Int32,System.Boolean)">
            <summary>
            Sets the model status in a thread safe fashion on the UI thread.
            </summary>
            <param name="statusObject">The status object.</param>
            <param name="status">The status.</param>
            <param name="operationCount">The operation count (usually -1, 0, or 1 depending on whether the count is to be increased, decreased, or left alone).</param>
            <param name="autoSetReadyStatus">if set to <c>true</c> the status is automatically set to Ready whenever the operation count reaches 0.</param>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.AsyncWorker.AttemptToHandleBackgroundExceptions">
            <summary>
            If set to true, the async worker tries to automatically handle exceptions thrown 
            by the background operation, and returns a default object to the foreground method
            </summary>
            <value><c>true</c> if [attempt to handle background exceptions]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.AsyncWorker.AssignDefaultValuesToDefaultObjectByConvention">
            <summary>
            Defines whether a default object created by automatic background exception handling 
            is populated with Success = false, and FailureInformation = ex.Message
            </summary>
            <remarks>Only applicable if AttemptToHandleBackgroundExceptions = true</remarks>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.MultiExecuteState`1">
            <summary>
            For internal use only
            </summary>
            <typeparam name="TResult">The type of the t result.</typeparam>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.MultiExecuteState`1.#ctor(System.Func{`0},System.Threading.ManualResetEvent)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Wpf.Mvvm.MultiExecuteState`1"/> class.
            </summary>
            <param name="worker">The worker.</param>
            <param name="manualResetEvent">The manual reset event.</param>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.MultiExecuteState`1.Worker">
            <summary>
            Background worker delegate.
            </summary>
            <value>The worker.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.MultiExecuteState`1.ResetEvent">
            <summary>
            Manual reset event to enable wait-all
            </summary>
            <value>The reset event.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.MultiExecuteState`1.Result">
            <summary>
            Result produced by the worker
            </summary>
            <value>The result.</value>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.Controller">
            <summary>
            Base class for controllers
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.Controller.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.Controller.RegisterViewHandler(CODE.Framework.Wpf.Mvvm.IViewHandler,System.String,System.Boolean)">
            <summary>
            Registers a view handler
            </summary>
            <param name="handler">Handler to register</param>
            <param name="viewHandlerId">Optional ID, so the handler can later be re-identified if needed</param>
            <param name="replaceHandlersWithMatchingId">If true (default) then current registered handlers with identical ID will be replaced</param>
            <remarks>Document handlers are objects that are given a chance to handle views when they need launching.</remarks>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.Controller.GetShellLauncher">
            <summary>
            Returns the shell launcher view handler (if one is registered)
            </summary>
            <returns>IViewHandler.</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.Controller.GetRegisteredViewHandlers">
            <summary>
            Returns a list of all registered view handlers
            </summary>
            <returns>List of view handlers</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.Controller.UnregisterViewHandler(System.String)">
            <summary>
            Unregisters a previously registered view handler by ID
            </summary>
            <param name="viewHandlerId">Document handler ID</param>
            <returns>True if successful</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.Controller.ClearViewHandlers">
            <summary>
            Unregisters all registered view handlers
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.Controller.Action(System.String,System.String,System.Object,CODE.Framework.Wpf.Mvvm.ViewResultEventSinks)">
            <summary>
            Triggers an action on the specified controller
            </summary>
            <param name="controller">Controller the action is to be triggered on</param>
            <param name="action">Action to be called on the controller</param>
            <param name="routeValues">Additional parameters passed to the controller</param>
            <param name="eventSinks">Object containing the event handlers that are to be attached to the view result (if the result is in fact a view result)</param>
            <returns>Request context (can be ignored except for special cases)</returns>
            <example>
            Controller.Action("Customer", "List"); // Invokes CustomerController.List
            var context = Controller.Action("Customer", "List"); // Invokes CustomerController.List and retrieves the context
            Controller.Action("Customer", "Detail", new {id = x}); // Invokes CustomerController.Detail(id) and passes a parameter called "id")
            </example>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.Controller.ExecuteAfterNextViewOpen(System.Action{CODE.Framework.Wpf.Mvvm.ViewResult})">
            <summary>Schedules an action to be execute after the next view-open operation has completed</summary>
            <param name="action">Action to be executed</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.Controller.ExecuteViewHandlers(CODE.Framework.Wpf.Mvvm.RequestContext)">
            <summary>
            Executes all the registered view handlers based on the current context
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.Controller.ViewOnly(System.String,System.String)">
            <summary>Finds a view within the context of the specified controller</summary>
            <param name="controller">Controller the action is to be triggered on</param>
            <param name="view">Name of the view that is to be found</param>
            <returns>Request context (can be ignored except for special cases)</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.Controller.CloseViewForModel(System.Object)">
            <summary>Closes the view associated with the provided model.</summary>
            <param name="model">Model associated with the view that is to be closed</param>
            <remarks>This only works if the model is only used with a single view. This will not work (or work unpredictably) for models that are shared across views.</remarks>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.Controller.CloseAllViews">
            <summary>
            Closes all currently open views.
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.Controller.GetViewForModel(System.Object)">
            <summary>Attempts to find the view associated with the provided model.</summary>
            <param name="model">The view model.</param>
            <returns>Document if found (null otherwise)</returns>
            <remarks>This only works if the model is only used with a single view. This will not work (or work unpredictably) for models that are shared across views.</remarks>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.Controller.GetDocumentForModel(System.Object)">
            <summary>Attempts to find the flow document that's part of a view associated with the provided model.</summary>
            <param name="model">The model.</param>
            <returns>FlowDocument if found, otherwise null.</returns>
            <remarks>This only works if the model is only used with a single view. This will not work (or work unpredictably) for models that are shared across views.</remarks>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.Controller.Execute(CODE.Framework.Wpf.Mvvm.RequestContext)">
            <summary>
            Internal method that performs execution of actions on controllers (usually triggered by Controller.Action())
            </summary>
            <param name="requestContext">Executing request context</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.Controller.View">
            <summary>
            Returns the default view associated with the current action
            </summary>
            <returns>A view result</returns>
            <example>
            public ActionResult ShowDetails()
            {
                return Document();
            }
            </example>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.Controller.PartialView">
            <summary>
            Returns the default view associated with the current action as a partial view
            </summary>
            <returns>A view result</returns>
            <example>
            public ActionResult ShowDetails()
            {
                return PartialView();
            }
            </example>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.Controller.View(System.Object,System.Boolean)">
            <summary>
            Returns the default view associated with the current action and passes a view model
            </summary>
            <param name="model">The model that is to be passed to the view</param>
            <param name="forceNewShell">Indicates whether it is desired to launch this view in a new shell (may or may not be respected by each theme)</param>
            <returns>A view result</returns>
            <example>
            public ActionResult ShowDetails()
            {
                var model = new MyModel();
                return Document(model);
            }
            </example>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.Controller.PartialView(System.Object)">
            <summary>
            Returns the default view associated with the current action as a partial view and passes a view model
            </summary>
            <param name="model">The model that is to be passed to the view</param>
            <returns>A view result</returns>
            <example>
            public ActionResult ShowDetails()
            {
                var model = new MyModel();
                return PartialView(model);
            }
            </example>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.Controller.View(System.Object,CODE.Framework.Wpf.Mvvm.ViewLevel,System.Boolean)">
            <summary>
            Returns the default view associated with the current action and passes a view model
            </summary>
            <param name="model">The model that is to be passed to the view</param>
            <param name="level">The level the view desires to be</param>
            <param name="forceNewShell">Indicates whether it is desired to launch this view in a new shell (may or may not be respected by each theme)</param>
            <returns>A view result</returns>
            <example>
            public ActionResult ShowDetails()
            {
                var model = new MyModel();
                return Document(model, ViewLevel.StandAlone);
            }
            </example>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.Controller.PartialView(System.String,System.Object)">
            <summary>
            Returns a named view associated with the current action and passes a view model
            </summary>
            <param name="viewName">The name of the view that is to be returned</param>
            <param name="model">The model that is to be passed to the view</param>
            <returns>A view result</returns>
            <example>
            public ActionResult ShowDetails()
            {
                var model = new MyModel();
                return Document("SomeView", model, ViewLevel.Popup);
            }
            </example>        
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.Controller.View(System.String,System.Object,CODE.Framework.Wpf.Mvvm.ViewLevel,System.Boolean)">
            <summary>
            Returns a named view associated with the current action and passes a view model
            </summary>
            <param name="viewName">The name of the view that is to be returned</param>
            <param name="model">The model that is to be passed to the view</param>
            <param name="level">The level the view desires to be</param>
            <param name="forceNewShell">Indicates whether it is desired to launch this view in a new shell (may or may not be respected by each theme)</param>
            <returns>A view result</returns>
            <exception cref="T:CODE.Framework.Wpf.Mvvm.ViewNotFoundException"></exception>
            <example>
            public ActionResult ShowDetails()
            {
               var model = new MyModel();
               return Document("SomeView", model, ViewLevel.Popup);
            }
              </example>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.Controller.View(CODE.Framework.Wpf.Mvvm.StandardViews,System.Object,CODE.Framework.Wpf.Mvvm.ViewLevel,System.Boolean)">
            <summary>Returns a standard view associated with the current action and passes a view model</summary>
            <param name="standardView">Standard view supported by all themes</param>
            <param name="model">The model that is to be passed to the view</param>
            <param name="level">The level the view desires to be</param>
            <param name="forceNewShell">Indicates whether it is desired to launch this view in a new shell (may or may not be respected by each theme)</param>
            <returns>A view result</returns>
            <example>
            public ActionResult ShowDetails()
            {
                var model = new MyModel();
                return Document(StandardViews.Block, model, ViewLevel.Popup);
            }
            </example>        
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.Controller.Document(System.String,System.Object)">
            <summary>Returns a named document (view) associated with the current action and assigns the model</summary>
            <param name="documentName">Name of the document.</param>
            <param name="model">The model.</param>
            <returns>Document Result.</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.Controller.Document(System.Object)">
            <summary>Returns a named document (view) associated with the current action and assigns the model</summary>
            <param name="model">The model.</param>
            <returns>Document Result.</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.Controller.DocumentAsView(System.String,System.Object)">
            <summary>
            Returns a named document associated with the current action and assigns the model and wraps it in a view to it can be loaded in preview mode
            </summary>
            <param name="documentName">Name of the document.</param>
            <param name="model">The model.</param>
            <returns>Document Result.</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.Controller.DocumentAsView(System.Object)">
            <summary>
            Returns a named document associated with the current action and assigns the model and wraps it in a view to it can be loaded in preview mode
            </summary>
            <param name="model">The model.</param>
            <returns>Document Result.</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.Controller.FindView(System.String,CODE.Framework.Wpf.Mvvm.ViewLevel,CODE.Framework.Wpf.Mvvm.ViewResult,System.Collections.Generic.List{System.String})">
            <summary>Attempts to find the view using all currently registered view engines.</summary>
            <param name="viewName">Name of the view to be found</param>
            <param name="level">Display level of the view (such as top-level)</param>
            <param name="result">The view result object.</param>
            <param name="locationsSearchedUnsuccessfully">A list of locations the engines searched unsuccessfully (can be used by callers to display error messages and the like)</param>
            <returns>Success indicator (false if no view was found)</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.Controller.FindDocument(System.String,CODE.Framework.Wpf.Mvvm.DocumentResult,System.Collections.Generic.List{System.String})">
            <summary>
            Attempts to find the document (view) using all currently registered view engines.
            </summary>
            <param name="documentName">Name of the view to be found</param>
            <param name="result">The view result object.</param>
            <param name="locationsSearchedUnsuccessfully">A list of locations the engines searched unsuccessfully (can be used by callers to display error messages and the like)</param>
            <returns>Success indicator (false if no view was found)</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.Controller.ViewModal(System.String,System.Object,CODE.Framework.Wpf.Mvvm.ViewLevel,CODE.Framework.Wpf.Mvvm.ViewScope)">
            <summary>
            Returns a model named view associated with the current action and passes a view model
            </summary>
            <param name="viewName">The name of the view that is to be returned</param>
            <param name="model">The model that is to be passed to the view</param>
            <param name="level">The level the view desires to be</param>
            <param name="scope">The scope of the view (global or local/child).</param>
            <returns>A view result</returns>
            <example>
            public ActionResult ShowDetails()
            {
            var model = new MyModel();
            return ViewModal("SomeView", model, ViewLevel.Popup);
            }
            </example>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.Controller.ViewModal(System.Object,CODE.Framework.Wpf.Mvvm.ViewLevel,CODE.Framework.Wpf.Mvvm.ViewScope)">
            <summary>
            Returns a modal default view associated with the current action and passes a view model
            </summary>
            <param name="model">The model that is to be passed to the view</param>
            <param name="level">The level the view desires to be</param>
            <param name="scope">The scope of the view (global or local/child).</param>
            <returns>A view result</returns>
            <example>
            public ActionResult ShowDetails()
            {
            var model = new MyModel();
            return ViewModal(model, ViewLevel.Popup);
            }
            </example>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.Controller.Shell(System.Object,System.String)">
            <summary>
            Returns a new shell window
            </summary>
            <param name="model">Model for the shell</param>
            <param name="title">Shell window title</param>
            <returns>Shell result</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.Controller.MessageBox(CODE.Framework.Wpf.Mvvm.MessageBoxViewModel)">
            <summary>Returns a message box result with an attached model (and potentially an optional view)</summary>
            <param name="model">Message box specific view model</param>
            <returns>Message box result</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.Controller.MessageBox(CODE.Framework.Wpf.Mvvm.MessageBoxViewModel,System.String)">
            <summary>Returns a message box result with an attached model (and potentially an optional view)</summary>
            <param name="model">Message box specific view model</param>
            <param name="viewName">Name of the view (ignored if no custom view is found)</param>
            <returns>Message box result</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.Controller.QueueMessageBoxResult(CODE.Framework.Wpf.Mvvm.MessageBoxResults,System.Action{CODE.Framework.Wpf.Mvvm.MessageBoxViewModel})">
            <summary>Queues a message box result that is to be automatically provided for the next message box request.</summary>
            <param name="result">The message box result.</param>
            <param name="customAction">An optional custom action that is to be executed after the result is set.</param>
            <note>This is a useful feature for testing. Results can be queued up ahead of time causing the message box to not be displayed but to immediately call onComplete with the specified result set.</note>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.Controller.MessageBox(System.String,System.String,CODE.Framework.Wpf.Mvvm.MessageBoxButtons,CODE.Framework.Wpf.Mvvm.MessageBoxImages,CODE.Framework.Wpf.Mvvm.MessageBoxResults)">
            <summary>Returns a message box result</summary>
            <param name="messageBoxText">Message box text message (plain text)</param>
            <param name="caption">Message box caption (title)</param>
            <param name="buttons">Standard buttons displayed by the message box</param>
            <param name="icon">Standard icon displayed by the message box.</param>
            <param name="defaultResult">Default standard button</param>
            <returns>Message box result</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.Controller.NotificationMessage(System.String,System.String,System.String,System.String,System.String,System.Windows.Media.Brush,CODE.Framework.Wpf.Mvvm.NotificationViewModel,System.Nullable{System.TimeSpan})">
            <summary>Displays the specified notification</summary>
            <param name="viewName">Name of a custom view to be used by the status.</param>
            <param name="text">Main text</param>
            <param name="text2">Secondary text</param>
            <param name="number">Numeric information (such as an item count) passed as a string</param>
            <param name="imageResource">Generic image resource to load a brush from (if this parameter is passed an the resource is found the image parameter is ignored)</param>
            <param name="image">A logo image (passed as a brush).</param>
            <param name="model">Notification view model (if passed, text, number, image and overrideTimeout parameters are ignored)</param>
            <param name="overrideTimeout">Overrides the theme's default notification timeout. If model is passed, set this property in model.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.Controller.StatusMessage(System.String,System.String,CODE.Framework.Wpf.Mvvm.ApplicationStatus,CODE.Framework.Wpf.Mvvm.StatusViewModel)">
            <summary>Creates a specific status message</summary>
            <param name="viewName">Name of the view.</param>
            <param name="message">The message to be displayed.</param>
            <param name="status">The general status that is to be set.</param>
            <param name="model">A custom view model that is to be used.</param>
            <remarks>The message and status is ignored if a custom model is passed.</remarks>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.Controller.MessageBox(System.String,System.String,System.String,CODE.Framework.Wpf.Mvvm.MessageBoxButtons,CODE.Framework.Wpf.Mvvm.MessageBoxImages,CODE.Framework.Wpf.Mvvm.MessageBoxResults,System.Collections.Generic.IEnumerable{CODE.Framework.Wpf.Mvvm.IViewAction},CODE.Framework.Wpf.Mvvm.MessageBoxViewModel)">
            <summary>Returns a message box result</summary>
            <param name="viewName">Name of the view (ignored if the view is not found).</param>
            <param name="messageBoxText">Message box text message (plain text)</param>
            <param name="caption">Message box caption (title)</param>
            <param name="buttons">Standard buttons displayed by the message box</param>
            <param name="icon">Standard icon displayed by the message box.</param>
            <param name="defaultResult">Default standard button</param>
            <param name="actions">Custom actions to be added to the message box as buttons. (Note: If this parameter is not null, the 'buttons' parameter is ignored)</param>
            <param name="model">Custom message box view model. (Note: Only used in exceptional scenarios where the standard view model .</param>
            <returns>Message box result</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.Controller.LoadView(System.String,System.Type)">
            <summary>This helper method finds the specified view which can often be useful in special cases, such as associating custom views with actions</summary>
            <param name="viewName">Name of the view.</param>
            <param name="controllerType">Type of the controller (used as a context to find views)</param>
            <returns>Document as UIElement, or null if not found.</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.Controller.LoadView(System.String,System.String)">
            <summary>This helper method finds the specified view which can often be useful in special cases, such as associating custom views with actions</summary>
            <param name="viewName">Name of the view.</param>
            <param name="controller">The controller name.</param>
            <returns>Document as UIElement, or null if not found.</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.Controller.LoadView(CODE.Framework.Wpf.Mvvm.StandardViews,System.Type)">
            <summary>This helper method finds the specified view which can often be useful in special cases, such as associating custom views with actions</summary>
            <param name="standardView">Standard view identifier</param>
            <param name="controllerType">Type of the controller (used as a context to find views)</param>
            <returns>Document as UIElement, or null if not found.</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.Controller.Notification(CODE.Framework.Wpf.Mvvm.StandardViews,System.String,System.String,System.String,System.String,System.Windows.Media.Brush,CODE.Framework.Wpf.Mvvm.NotificationViewModel,System.Type,System.Nullable{System.TimeSpan})">
            <summary>Displays the specified notification</summary>
            <param name="text">Main text</param>
            <param name="text2">Secondary text</param>
            <param name="number">Numeric information (such as an item count) passed as a string</param>
            <param name="imageResource">Generic image resource to load a brush from (if this parameter is passed an the resource is found the image parameter is ignored)</param>
            <param name="image">A logo image (passed as a brush).</param>
            <param name="model">Notification view model (if passed, text, number, image and overrideTimeout parameters are ignored)</param>
            <param name="standardView">Standard view to display</param>
            <param name="controllerType">Type of the controller (used as a context to find views)</param>
            <param name="overrideTimeout">Overrides the theme's default notification timeout. If model is passed, set this property in model.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.Controller.Notification(System.String,System.String,System.String,System.String,System.Windows.Media.Brush,CODE.Framework.Wpf.Mvvm.NotificationViewModel,System.String,System.Type,System.Nullable{System.TimeSpan})">
            <summary>Displays the specified notification</summary>
            <param name="text">Main text</param>
            <param name="text2">Secondary text</param>
            <param name="number">Numeric information (such as an item count) passed as a string</param>
            <param name="imageResource">Generic image resource to load a brush from (if this parameter is passed an the resource is found the image parameter is ignored)</param>
            <param name="image">A logo image (passed as a brush).</param>
            <param name="model">Notification view model (if passed, text, number, image and overrideTimeout parameters are ignored)</param>
            <param name="viewName">Name of a custom view to be used by the status.</param>
            <param name="controllerType">Type of the controller (used as a context to find views)</param>
            <param name="overrideTimeout">Overrides the theme's default notification timeout. If model is passed, set this property in model.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.Controller.Status(System.String,CODE.Framework.Wpf.Mvvm.ApplicationStatus,CODE.Framework.Wpf.Mvvm.StatusViewModel,System.String,System.Type)">
            <summary>Sets the application status (typically displayed in a status bar).</summary>
            <param name="message">Message that is to be displayed</param>
            <param name="status">Application status</param>
            <param name="model">Application status view model</param>
            <param name="viewName">Name of a custom view to be used by the status.</param>
            <param name="controllerType">Type of the controller (used as a context to find views)</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.Controller.Message(System.String,System.String,CODE.Framework.Wpf.Mvvm.MessageBoxButtons,CODE.Framework.Wpf.Mvvm.MessageBoxImages,CODE.Framework.Wpf.Mvvm.MessageBoxResults,System.Action{CODE.Framework.Wpf.Mvvm.MessageBoxResult},System.Collections.Generic.IEnumerable{CODE.Framework.Wpf.Mvvm.IViewAction},CODE.Framework.Wpf.Mvvm.MessageBoxViewModel,System.String,System.Type)">
            <summary>Displays a message box</summary>
            <param name="messageBoxText">Message box text message (plain text)</param>
            <param name="caption">Message box caption (title)</param>
            <param name="buttons">Standard buttons displayed by the message box</param>
            <param name="icon">Standard icon displayed by the message box.</param>
            <param name="defaultResult">Default standard button</param>
            <param name="onComplete">Code to run when the message box closes.</param>
            <param name="actions">Custom actions to be added to the message box as buttons. (Note: If this parameter is not null, the 'buttons' parameter is ignored)</param>
            <param name="model">Custom message box view model. (Note: Only used in exceptional scenarios where the standard view model .</param>
            <param name="viewName">Name of a custom view to be used by the message box (optional).</param>
            <param name="controllerType">Type of the controller (used as a context to find views)</param>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Controller.RequestContext">
            <summary>
            Current request context (used from within controller methods if needed)
            </summary>
            <example>>
            public ActionResult ShowDetails()
            {
               if (RequestContext....)
               // more code here...
            }
            </example>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Controller.RegisteredViewEngines">
            <summary>
            Collection of view engines registerd and ready to provide views if called upon
            </summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.ViewNotFoundException">
            <summary>Document not found exception</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ViewNotFoundException.#ctor(System.String)">
            <summary>Constructor</summary>
            <param name="message">Exception message</param>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.DocumentNotFoundException">
            <summary>Document not found exception</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.DocumentNotFoundException.#ctor(System.String)">
            <summary>Constructor</summary>
            <param name="message">Exception message</param>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.RequestContext">
            <summary>
            Request context passed to controllers
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.RequestContext.#ctor(CODE.Framework.Wpf.Mvvm.RouteData)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Wpf.Mvvm.RequestContext"/> class.
            </summary>
            <param name="routeData">The route data.</param>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.RequestContext.RouteData">
            <summary>Gets or sets the route data.</summary>
            <value>The route data.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.RequestContext.Result">
            <summary>Result produced by the request</summary>
            <value>The result.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.RequestContext.ProcessingController">
            <summary>
            Reference to the controller that ended up processing this request
            </summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.RouteData">
            <summary>
            Container class for route data (information passed to a controller)
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.RouteData.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.RouteData.#ctor(System.String,System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="action">Action to be called</param>
            <param name="data">Additional data (parameters)</param>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.RouteData.Data">
            <summary>Route data collection</summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.ActionResult">
            <summary>Action result base class</summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.ViewResult">
            <summary>Action results specific to views</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ViewResult.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ViewResult.RaiseViewClosed">
            <summary>
            Method used to raise the ViewClosed event
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ViewResult.RaiseViewOpened">
            <summary>
            Method used to raise the ViewClosed event
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ViewResult.OnPropertyChanged(System.String)">
            <summary>
            Called when properties change
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewResult.View">
            <summary>Document object</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewResult.Model">
            <summary>Model object</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewResult.ViewSource">
            <summary>Source the view originated with</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewResult.ViewTitle">
            <summary>Display title for the view</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewResult.ViewIconResourceKey">
            <summary>XAML resource key (x:Key) for a brush used as the visual representation of this view</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewResult.IsModal">
            <summary>Defines whether the view is a modal view</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewResult.IsPartial">
            <summary>Defines whether the view is a modal view</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewResult.ViewLevel">
            <summary>Defines the type of UI the view wants to be</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewResult.ViewScope">
            <summary>Defines the scope of the view (whether it is stand-alone or belongs to some other view in hierarchical fashion)</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewResult.TopLevelWindow">
            <summary>In cases where the view is launched in a top-level window, this property may hold a reference to the window</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewResult.MakeViewVisibleOnLaunch">
            <summary>Indicates whether the view handler is supposed to immediately bring the view to the foreground when it launches (default = true</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewResult.ForceNewShell">
            <summary>Can be used to indicate the desire for the view to launch in a new shell window</summary>
            <remarks>It is up to each theme to respect this indicator. Most themes only respect this setting for normal views.</remarks>
        </member>
        <member name="E:CODE.Framework.Wpf.Mvvm.ViewResult.ViewClosed">
            <summary>
            Occurs when the view has been closed
            </summary>
        </member>
        <member name="E:CODE.Framework.Wpf.Mvvm.ViewResult.ViewOpened">
            <summary>
            Occurs when the view has been opened
            </summary>
        </member>
        <member name="E:CODE.Framework.Wpf.Mvvm.ViewResult.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewResult.LocalViews">
            <summary>
            Hierarchical child views (potentially shown as popup dialogs)
            </summary>
            <remarks>Not used by all themes</remarks>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewResult.SelectedLocalViewIndex">
            <summary>
            Index of the currently selected local view
            </summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.DocumentResult">
            <summary>Action results specific to documents</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.DocumentResult.Document">
            <summary>Document object</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.DocumentResult.Model">
            <summary>Model object</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.DocumentResult.ViewSource">
            <summary>Source the view originated with</summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.ViewResultEventSinks">
            <summary>This class can be used to provide event handlers/sinks that are later attached to view results</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewResultEventSinks.ViewOpened">
            <summary>Event handler to be attached to the ViewOpened event</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewResultEventSinks.ViewClosed">
            <summary>Event handler to be attached to the ViewClosed event</summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.StatusMessageResult">
            <summary>
            Special result for status messages
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.StatusMessageResult.Model">
            <summary>Document model specific to status information</summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.NotificationMessageResult">
            <summary>
            Special result for notification messages
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.NotificationMessageResult.Model">
            <summary>Document model specific to notification information</summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.MessageBoxResult">
            <summary>Action result specific to message boxes</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.MessageBoxResult.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.MessageBoxResult.ModelMessageBox">
            <summary>Document model specific to message boxes</summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.StatusViewModel">
            <summary>Special view model used for status information</summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.ViewModel">
            <summary>
            This class is designed to be a base class for view models.
            </summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.IModelStatus">
            <summary>
            This interface is used to indicate the load status (for instance on a view model)
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.IModelStatus.ModelStatus">
            <summary>
            Indicates the load status of the model
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.IModelStatus.OperationsInProgress">
            <summary>Indicates the number of operations of any kind currently in progress</summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.IHaveViewInformation">
            <summary>Indicates that the object implementing this interface can provide a reference to an associated view</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.IHaveViewInformation.AssociatedView">
            <summary>Reference to the associated view object</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ViewModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Wpf.Mvvm.ViewModel"/> class.
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ViewModel.NotifyChanged(System.String)">
            <summary>
            Can be used to indicate a property changed
            </summary>
            <param name="propertyName">Name of the changed property (or empty string to indicate a refresh of all properties)</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ViewModel.InvalidateAllActions">
            <summary>Causes the canExecute() method of all actions in the Actions collection to be re-evaluated</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ViewModel.RaiseClosingEvent">
            <summary>This method can be used to raise the closing event</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ViewModel.RaiseClosedEvent">
            <summary>This method can be used to raise the closed event</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ViewModel.RaiseOpeningEvent">
            <summary>This method can be used to raise the opening event</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ViewModel.RaiseOpenedEvent">
            <summary>This method can be used to raise the open event</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewModel.ActionChangeNotificationActive">
            <summary>Defines whether the action changed event fires</summary>
        </member>
        <member name="E:CODE.Framework.Wpf.Mvvm.ViewModel.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewModel.Actions">
            <summary>
            Collection of actions
            </summary>
        </member>
        <member name="E:CODE.Framework.Wpf.Mvvm.ViewModel.ActionsChanged">
            <summary>
            Fires when the list of actions changed (assuming change notification is active)
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewModel.ModelStatus">
            <summary>
            Indicates the load status of the model
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewModel.OperationsInProgress">
            <summary>
            Indicates the number of operations of any kind currently in progress
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewModel.AssociatedView">
            <summary>Reference to the associated view object</summary>
        </member>
        <member name="E:CODE.Framework.Wpf.Mvvm.ViewModel.Closing">
            <summary>Occurs when the object is closing (has not closed yet)</summary>
            <remarks>The Closing event occurs when the view is closed using the controller or when themes support implicit view closing (which may or may not work for some views)</remarks>
        </member>
        <member name="E:CODE.Framework.Wpf.Mvvm.ViewModel.Closed">
            <summary>Occurs when the object has closed (has finished closing)</summary>
            <remarks>The Close event occurs when the view is closed using the controller or when themes support implicit view closing (which may or may not work for some views)</remarks>
        </member>
        <member name="E:CODE.Framework.Wpf.Mvvm.ViewModel.Opening">
            <summary>Occurs when the object is opening (has not opened yet)</summary>
        </member>
        <member name="E:CODE.Framework.Wpf.Mvvm.ViewModel.Opened">
            <summary>Occurs when the object has opened (has finished opening)</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.StatusViewModel.Message">
            <summary>Message to be displayed</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.StatusViewModel.Status">
            <summary>General status to set</summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.NotificationViewModel">
            <summary>Document model class used for notifications</summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.StandardViewModel">
            <summary>Standard view model class based on IStandardViewModel</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.StandardViewModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Wpf.Mvvm.StandardViewModel"/> class.
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.StandardViewModel.GetBrushFromResource(System.String)">
            <summary>Tries to find a named XAML resource of type brush and returns it.</summary>
            <param name="resourceName">Name of the resource.</param>
            <returns>Brush or null</returns>
            <remarks>The returned brush is a clone, so it can be manipulated at will without impacting other users of the same brush.</remarks>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.StandardViewModel.LoadSharedImage1FromBrushResource(System.String,System.Collections.Generic.Dictionary{System.String,System.Windows.Media.Brush})">
            <summary>Loads a resource brush to be shared across all instances of this view model and assigns it to Image1</summary>
            <param name="resourceName">Name of the resource (brush).</param>
            <param name="sharingContextCollection">Sharing context collection (can be used to differentiate brush context between different subclasses of standard view models).</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.StandardViewModel.LoadSharedImage2FromBrushResource(System.String,System.Collections.Generic.Dictionary{System.String,System.Windows.Media.Brush})">
            <summary>Loads a resource brush to be shared across all instances of this view model and assigns it to Image2</summary>
            <param name="resourceName">Name of the resource (brush).</param>
            <param name="sharingContextCollection">Sharing context collection (can be used to differentiate brush context between different subclasses of standard view models).</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.StandardViewModel.LoadSharedImage3FromBrushResource(System.String,System.Collections.Generic.Dictionary{System.String,System.Windows.Media.Brush})">
            <summary>Loads a resource brush to be shared across all instances of this view model and assigns it to Image3</summary>
            <param name="resourceName">Name of the resource (brush).</param>
            <param name="sharingContextCollection">Sharing context collection (can be used to differentiate brush context between different subclasses of standard view models).</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.StandardViewModel.LoadSharedImage4FromBrushResource(System.String,System.Collections.Generic.Dictionary{System.String,System.Windows.Media.Brush})">
            <summary>Loads a resource brush to be shared across all instances of this view model and assigns it to Image4</summary>
            <param name="resourceName">Name of the resource (brush).</param>
            <param name="sharingContextCollection">Sharing context collection (can be used to differentiate brush context between different subclasses of standard view models).</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.StandardViewModel.LoadSharedImage5FromBrushResource(System.String,System.Collections.Generic.Dictionary{System.String,System.Windows.Media.Brush})">
            <summary>Loads a resource brush to be shared across all instances of this view model and assigns it to Image5</summary>
            <param name="resourceName">Name of the resource (brush).</param>
            <param name="sharingContextCollection">Sharing context collection (can be used to differentiate brush context between different subclasses of standard view models).</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.StandardViewModel.LoadSharedLogo1FromBrushResource(System.String,System.Collections.Generic.Dictionary{System.String,System.Windows.Media.Brush})">
            <summary>Loads a resource brush to be shared across all instances of this view model and assigns it to Logo1</summary>
            <param name="resourceName">Name of the resource (brush).</param>
            <param name="sharingContextCollection">Sharing context collection (can be used to differentiate brush context between different subclasses of standard view models).</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.StandardViewModel.LoadSharedLogo2FromBrushResource(System.String,System.Collections.Generic.Dictionary{System.String,System.Windows.Media.Brush})">
            <summary>Loads a resource brush to be shared across all instances of this view model and assigns it to Logo1</summary>
            <param name="resourceName">Name of the resource (brush).</param>
            <param name="sharingContextCollection">Sharing context collection (can be used to differentiate brush context between different subclasses of standard view models).</param>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.StandardViewModel.DefaultBrushSharingContextCollection">
            <summary>Default sharing context collection</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.StandardViewModel.Key1">
            <summary>Key 1 (not used for display but can be used as an internal identifier)</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.StandardViewModel.Key2">
            <summary>Key 2 (not used for display but can be used as an internal identifier)</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.StandardViewModel.Key3">
            <summary>Key 3 (not used for display but can be used as an internal identifier)</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.StandardViewModel.Key4">
            <summary>Key 4 (not used for display but can be used as an internal identifier)</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.StandardViewModel.Key5">
            <summary>Key 5 (not used for display but can be used as an internal identifier)</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.StandardViewModel.Text1">
            <summary>Text Element 1</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.StandardViewModel.Text2">
            <summary>Text Element 2</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.StandardViewModel.Text3">
            <summary>Text Element 3</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.StandardViewModel.Text4">
            <summary>Text Element 4</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.StandardViewModel.Text5">
            <summary>Text Element 5</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.StandardViewModel.Text6">
            <summary>Text Element 6</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.StandardViewModel.Text7">
            <summary>Text Element 7</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.StandardViewModel.Text8">
            <summary>Text Element 8</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.StandardViewModel.Text9">
            <summary>Text Element 9</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.StandardViewModel.Text10">
            <summary>Text Element 10</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.StandardViewModel.Identifier1">
            <summary>Identifier Text Element 1</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.StandardViewModel.Identifier2">
            <summary>Identifier Text Element 2</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.StandardViewModel.Number1">
            <summary>Text Element representing a number (such as an item count)</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.StandardViewModel.Number2">
            <summary>Second Text Element representing a number (such as an item count)</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.StandardViewModel.ToolTipText">
            <summary>The text to display on the tool tip when this item is hovered over with the mouse</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.StandardViewModel.Image1">
            <summary>Image Element 1</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.StandardViewModel.Image2">
            <summary>Image Element 2</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.StandardViewModel.Image3">
            <summary>Image Element 3</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.StandardViewModel.Image4">
            <summary>Image Element 4</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.StandardViewModel.Image5">
            <summary>Image Element 5</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.StandardViewModel.Logo1">
            <summary>Logo Element 1</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.StandardViewModel.Logo2">
            <summary>Logo Element 2</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.StandardViewModel.ResourceContextObject">
            <summary>
            Internal resource context (used to resolve XAML resources for icons)
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.NotificationViewModel.OverrideTimeout">
            <summary>If not null, overrides the theme's default notification timeout</summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.MessageBoxViewModel">
            <summary>Document model specific to message box results</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.MessageBoxViewModel.Result">
            <summary>Result (indicating which button was pressed in the message box)</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.MessageBoxViewModel.Text">
            <summary>Text value of the message box (the actual message)</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.MessageBoxViewModel.Caption">
            <summary>Caption (header/title) of the message box</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.MessageBoxViewModel.Icon">
            <summary>Icon used by the message box</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.MessageBoxViewModel.OnComplete">
            <summary>Method to be called when the message box is done</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.MessageBoxViewModel.IconResourceKey">
            <summary>Icon resource used by the message box</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.MessageBoxViewModel.IconBrush">
            <summary>Brush to be used for the icon</summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.ViewResultEventArgs">
            <summary>
            Event args class used for events associated with view results
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewResultEventArgs.ViewResult">
            <summary>
            Document result associated with this event
            </summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.ShellResult">
            <summary>Action results specific to views</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ShellResult.#ctor">
            <summary>Initializes a new instance of the <see cref="T:CODE.Framework.Wpf.Mvvm.ShellResult"/> class.</summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.ViewLevel">
            <summary>Defines how a view is intended to be displayed</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.ViewLevel.Normal">
            <summary>Standard view within the current application</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.ViewLevel.Popup">
            <summary>The view desires to be considered a popup 'window'</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.ViewLevel.TopLevel">
            <summary>The view desires to be a new top-level window</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.ViewLevel.StandAlone">
            <summary>The view desires to be a new stand-alone form</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.ViewLevel.Shell">
            <summary>Shell level view ('application window')</summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.ViewScope">
            <summary>
            Scope of the current view (defines whether the view is to be considered a stand-along view (global) or
            whehter it conceptually belongs to some other view in a hierarchical relationship (local).
            </summary>
            <remarks>Not every theme will use this information</remarks>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.ViewScope.Global">
            <summary>
            Global view (stand-alone)
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.ViewScope.Local">
            <summary>
            Local view (hierarchical child of other views)
            </summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.IViewHandler">
            <summary>Document handler interface</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.IViewHandler.OpenView(CODE.Framework.Wpf.Mvvm.RequestContext)">
            <summary>This method is invoked when a view is opened</summary>
            <param name="context">Request context (contains information about the view)</param>
            <returns>True if handled successfully</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.IViewHandler.CloseViewForModel(System.Object)">
            <summary>This method is invoked when a view that is associated with a certain model should be closed</summary>
            <param name="model">Model</param>
            <returns>True if successful</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.IViewHandler.CloseAllViews">
            <summary>
            This method closes all currently open views
            </summary>
            <returns>True if the handler successfully closed all views. False if it didn't close all views or generally does not handle view closing</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.IViewHandler.GetViewForModel(System.Object)">
            <summary>This method is used to retrieve a view associated with the specified model</summary>
            <param name="model">Model</param>
            <returns>Document if found (null otherwise)</returns>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.MessageBoxButtons">
            <summary>MessageBox button options</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.MessageBoxButtons.OK">
            <summary>OK button only</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.MessageBoxButtons.OKCancel">
            <summary>OK and Cancel buttons</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.MessageBoxButtons.YesNoCancel">
            <summary>Yes, No, and Cancel buttons</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.MessageBoxButtons.YesNo">
            <summary>Yes and No buttons</summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.MessageBoxResults">
            <summary>MessageBox results</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.MessageBoxResults.None">
            <summary>No result was determined</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.MessageBoxResults.OK">
            <summary>The OK button was pressed</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.MessageBoxResults.Cancel">
            <summary>The Cancel button was pressed</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.MessageBoxResults.Yes">
            <summary>The Yes button was pressed</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.MessageBoxResults.No">
            <summary>The No button was pressed</summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.MessageBoxImages">
            <summary>Images supported as default images in message boxes</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.MessageBoxImages.None">
            <summary>No image</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.MessageBoxImages.Error">
            <summary>Error image</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.MessageBoxImages.Hand">
            <summary>Hand image</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.MessageBoxImages.Stop">
            <summary>Stop sign image</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.MessageBoxImages.Question">
            <summary>Question mark image</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.MessageBoxImages.Exclamation">
            <summary>Exclamation point image</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.MessageBoxImages.Warning">
            <summary>Warning image</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.MessageBoxImages.Asterisk">
            <summary>Asterisk image</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.MessageBoxImages.Information">
            <summary>Information image</summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.ApplicationStatus">
            <summary>List of standard application stati</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.ApplicationStatus.Ready">
            <summary>
            Application is ready
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.ApplicationStatus.Processing">
            <summary>
            Application is processing
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.ApplicationStatus.Error">
            <summary>
            An error occured
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.ApplicationStatus.Warning">
            <summary>
            A warning needs to be displayed
            </summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.StandardViews">
            <summary>Standard views provided by all styles</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.StandardViews.None">
            <summary>No standard view</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.StandardViews.Block">
            <summary>Block</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.StandardViews.Image">
            <summary>Image</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.StandardViews.LargeImage">
            <summary>Large Image</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.StandardViews.LargeImageAndText01">
            <summary>Large Image and Text 01</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.StandardViews.LargeImageAndText02">
            <summary>Large Image and Text 02</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.StandardViews.LargeImageCollection">
            <summary>Large Image Collection</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.StandardViews.PeekImageAndText01">
            <summary>Peek Image and Text 01</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.StandardViews.PeekImageAndText02">
            <summary>Peek Image and Text 02</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.StandardViews.PeekImageAndText03">
            <summary>Peek Image and Text 03</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.StandardViews.PeekImageAndText04">
            <summary>Peek Image and Text 04</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.StandardViews.PeekImageAndText05">
            <summary>Peek Image and Text 05</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.StandardViews.Text01">
            <summary>Text 01</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.StandardViews.Text02">
            <summary>Text 02</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.StandardViews.Text03">
            <summary>Text 03</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.StandardViews.Text04">
            <summary>Text 04</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.StandardViews.Text05">
            <summary>Text 05</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.StandardViews.LargeBlockAndText01">
            <summary>Large Block and Text 01</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.StandardViews.LargeBlockAndText02">
            <summary>Large Block and Text 02</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.StandardViews.LargeSmallImageAndText01">
            <summary>Large template with a small image and text 01</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.StandardViews.LargeSmallImageAndText02">
            <summary>Large template with a small image and text 02</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.StandardViews.LargeSmallImageAndText03">
            <summary>Large template with a small image and text 03</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.StandardViews.LargeSmallImageAndText04">
            <summary>Large template with a small image and text 04</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.StandardViews.LargeSmallImageAndText05">
            <summary>Large template with a small image and text 05</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.StandardViews.LargeSmallImageAndText06">
            <summary>Large template with a small image and text 06</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.StandardViews.LargeSmallImageAndText07">
            <summary>Large template with a small image and text 07</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.StandardViews.LargeText01">
            <summary>Large Text 01</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.StandardViews.LargeText02">
            <summary>Large Text 02</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.StandardViews.LargeText03">
            <summary>Large Text 03</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.StandardViews.LargeText04">
            <summary>Large Text 04</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.StandardViews.LargeText05">
            <summary>Large Text 05</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.StandardViews.LargeText06">
            <summary>Large Text 06</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.StandardViews.LargeText07">
            <summary>Large Text 07</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.StandardViews.LargeText08">
            <summary>Large Text 08</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.StandardViews.LargeText09">
            <summary>Large Text 09</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.StandardViews.LargeText10">
            <summary>Large Text 10</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.StandardViews.LargeText11">
            <summary>Large Text 11</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.StandardViews.LargePeekImageCollection01">
            <summary>Large Peek Image Collection 01</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.StandardViews.LargePeekImageCollection02">
            <summary>Large Peek Image Collection 02</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.StandardViews.LargePeekImageCollection03">
            <summary>Large Peek Image Collection 03</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.StandardViews.LargePeekImageCollection04">
            <summary>Large Peek Image Collection 04</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.StandardViews.LargePeekImageCollection05">
            <summary>Large Peek Image Collection 04</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.StandardViews.LargePeekImageCollection06">
            <summary>Large Peek Image Collection 04</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.StandardViews.LargePeekImageAndText01">
            <summary>Large Peek Image and Text 01</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.StandardViews.LargePeekImageAndText02">
            <summary>Large Peek Image and Text 02</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.StandardViews.LargePeekImageAndText03">
            <summary>Large Peek Image and Text 03</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.StandardViews.LargePeekImageAndText04">
            <summary>Large Peek Image and Text 04</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.StandardViews.LargePeekImageAndText05">
            <summary>Large Peek Image and Text 05</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.StandardViews.LargePeekImageAndText06">
            <summary>Large Peek Image and Text 06</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.StandardViews.Data01">
            <summary>Document optimized for data display 01</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.StandardViews.Data02">
            <summary>Document optimized for data display 02</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.StandardViews.Data03">
            <summary>Document optimized for data display 03</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.StandardViews.DataAndImage01">
            <summary>Document optimized for data and image display 01</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.StandardViews.DataAndImage02">
            <summary>Document optimized for data and image display 02</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.StandardViews.DataAndImage03">
            <summary>Document optimized for data and image display 03</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.StandardViews.DataRowAndImage01">
            <summary>Document optimized for data and image display in a row 01</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.StandardViews.DataSmall01">
            <summary>Small data view 01</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.StandardViews.DataSmall02">
            <summary>Small data view 02</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.StandardViews.DataSmall03">
            <summary>Small data view 03</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.StandardViews.Notification">
            <summary>Template used to display notifications</summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.ActionNotFoundException">
            <summary>
            Exception raised whenever a controller action cannot be found
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ActionNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Wpf.Mvvm.ActionNotFoundException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.ModelStatus">
            <summary>Indicates model load status</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.ModelStatus.Unknown">
            <summary>Unknown (not yet set)</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.ModelStatus.Ready">
            <summary>Ready (load or save complete)</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.ModelStatus.Loading">
            <summary>Load operation in progress</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.ModelStatus.Saving">
            <summary>Save operation in progress</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.ModelStatus.NotApplicable">
            <summary>N/a status (usually used to indicate that no status change is desired)</summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.IThemeStandardFeatures">
            <summary>This interface defines standard features defined in a theme</summary>
            <remarks>
            When a theme implements this interface, it not only must implement the interface, but the resulting
            class name must be configured in the resources as a string resource called ThemeStandardFeaturesType
            </remarks>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.IThemeStandardFeatures.StandardViewFactory">
            <summary>Reference to the standard view factory (if supported)</summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.IStandardViewFactory">
            <summary>This interface can be implemented to create a standard theme factory (and object that can create instances of standard themes</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.IStandardViewFactory.GetStandardView(System.String)">
            <summary>Returns a standard view based on the view name as a string</summary>
            <param name="viewName">Standard view name</param>
            <returns>Standard view or null</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.IStandardViewFactory.GetStandardView(CODE.Framework.Wpf.Mvvm.StandardViews)">
            <summary>Returns a standard view based on the standard view enumeration</summary>
            <param name="standardView">Standard view identifier</param>
            <returns>Standard view or null</returns>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.IViewInformation">
            <summary>
            Provides information about a launched view
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.IViewInformation.OriginalViewLoadLocation">
            <summary>
            Location this view was originally loaded from
            </summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.ModelStatusGrid">
            <summary>
            Grid UI element that is automatically made visible and invisible depending on whether the current model implements IModelStatus
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.ModelStatusGrid.ModelProperty">
            <summary>
            Model dependency property
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ModelStatusGrid.ModelChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Change handler for model property
            </summary>
            <param name="d">The dependency object that triggered this change.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.ModelStatusGrid.ModelStatusProperty">
            <summary>Indicates the model status of the bound model object</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ModelStatusGrid.Model">
            <summary>
            Model used as the data context
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ModelStatusGrid.ModelStatus">
            <summary>Indicates the model status of the bound model object</summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.ModelStatusToVisibleConverter">
            <summary>
            Converts a model status to visibility
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ModelStatusToVisibleConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ModelStatusToVisibleConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.ObservableCollectionHelper">
            <summary>
            Helper functions for observable collections
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ObservableCollectionHelper.AddRange``1(System.Collections.ObjectModel.ObservableCollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds a range of object. Only fires the collection changed event once after all objects have been added
            </summary>
            <typeparam name="T">Item type</typeparam>
            <param name="collection">The collection.</param>
            <param name="itemsToAdd">The items to add.</param>
            <exception cref="T:System.NullReferenceException">Unable to find Add method for observable collection.
            or
            Unable to find items collection for observable collection.</exception>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ObservableCollectionHelper.AddRange``1(System.Collections.ObjectModel.ObservableCollection{``0},System.Linq.IQueryable{``0})">
            <summary>
            Adds a range of object. Only fires the collection changed event once after all objects have been added
            </summary>
            <typeparam name="T">Item type</typeparam>
            <param name="collection">The collection.</param>
            <param name="itemsToAdd">The items to add.</param>
            <exception cref="T:System.NullReferenceException">Unable to find Add method for observable collection.
            or
            Unable to find items collection for observable collection.</exception>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ObservableCollectionHelper.AddRange``1(System.Collections.ObjectModel.ObservableCollection{``0},System.Collections.Generic.IList{``0})">
            <summary>
            Adds a range of object. Only fires the collection changed event once after all objects have been added
            </summary>
            <typeparam name="T">Item type</typeparam>
            <param name="collection">The collection.</param>
            <param name="itemsToAdd">The items to add.</param>
            <exception cref="T:System.NullReferenceException">
            Unable to find Add method for observable collection.
            or
            Unable to find items collection for observable collection.
            </exception>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ObservableCollectionHelper.GetCollectionChangedMethod``1">
            <summary>Returns collection changed method for a specific item in a cached fashion</summary>
            <typeparam name="T"></typeparam>
            <returns>MethodInfo.</returns>
            <exception cref="T:System.ArgumentNullException">OnCollectionChanged method not found on observable collection!</exception>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ObservableCollectionHelper.Sync``2(System.Collections.ObjectModel.ObservableCollection{``0},System.Collections.ObjectModel.ObservableCollection{``1})">
            <summary>
            Synchronizes the items of two different observable collections of different item types
            </summary>
            <remarks>The types of both collections must be castable (TSource must be a TTarget)</remarks>
            <typeparam name="TSource">The type of the t source.</typeparam>
            <typeparam name="TTarget">The type of the t target.</typeparam>
            <param name="sourceCollection">The source collection.</param>
            <param name="targetCollection">The target collection.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ObservableCollectionHelper.RemoveSync``2(System.Collections.ObjectModel.ObservableCollection{``0},System.Collections.ObjectModel.ObservableCollection{``1})">
            <summary>
            Removes a previously configured sync between collections
            </summary>
            <typeparam name="TSource">The type of the t source.</typeparam>
            <typeparam name="TTarget">The type of the t target.</typeparam>
            <param name="sourceCollection">The source collection.</param>
            <param name="targetCollection">The target collection.</param>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.PartialView">
            <summary>
            Placeholder control used to host partial view information
            </summary>
            <example>
            // Call CustomerController.Detail() and use the result to populate the partial view
            *lt;PartialView Controller="Customer" Action="Detail" /&gt;
            // Call CustomerController.Detail(id) and use the result to populate the partial view
            *lt;PartialView Controller="Customer" Action="Detail" Parameters="{Binding CustomerId}" /&gt;
            </example>
            <remarks>If there is no special model returned by the controller associated with this partial view, then the partial view runs within the current default data context.</remarks>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.PartialView.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Wpf.Mvvm.PartialView"/> class.
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.PartialView.ControllerProperty">
            <summary>Controller associated with this partial view</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.PartialView.ActionProperty">
            <summary>Controller action associated with this partial view</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.PartialView.ViewProperty">
            <summary>Controller action associated with this partial view</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.PartialView.ModelProperty">
            <summary>Explicitly set model for the partial view</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.PartialView.ParameterProperty">
            <summary>
            Parameter to be passed to the view action that is called to load the partial view
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.PartialView.LoadView">
            <summary>Method used internally to load the view based on the provided information</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.PartialView.Controller">
            <summary>Controller associated with this partial view</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.PartialView.Action">
            <summary>Controller action associated with this partial view</summary>
            <remarks>Actions always have to be specified for partial views, even when the action name is a default.</remarks>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.PartialView.View">
            <summary>Name of the view that is to be loaded</summary>
            <remarks>This property is only respected if no action is set, which would overrule the view name</remarks>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.PartialView.Model">
            <summary>Explicitly set model for the partial view</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.PartialView.Parameter">
            <summary>
            Parameter to be passed to the view action that is called to load the partial view
            </summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Properties.Resources.MessageBox_Cancel">
            <summary>
              Looks up a localized string similar to Cancel.
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Properties.Resources.MessageBox_No">
            <summary>
              Looks up a localized string similar to No.
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Properties.Resources.MessageBox_OK">
            <summary>
              Looks up a localized string similar to OK.
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Properties.Resources.MessageBox_Yes">
            <summary>
              Looks up a localized string similar to Yes.
            </summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.Shell">
            <summary>
            Default top level shell
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.Shell.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Wpf.Mvvm.Shell"/> class.
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.Shell.TopLevelViewsProperty">
            <summary>
            Dependency property for all modal views
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.Shell.TopLevelViewLaunchModeProperty">
            <summary>Defines the launch mode (in-place or popup) for top level views</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.Shell.MaximumTopLevelViewCountProperty">
            <summary>Maximum number of concurrently opened top level views (-1 = unlimited)</summary>
            <remarks>
            Only counts in-place activated top level views. This does not limit the number of potentially launched windows.
            When the Shell tries to open more views than allowed, the oldest view in the list will be closed.
            </remarks>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.Shell.NormalViewsProperty">
            <summary>
            Dependency property for all normal views
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.Shell.NormalViewLaunchModeProperty">
            <summary>Defines the launch mode (in-place or popup) for top level views</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.Shell.MaximumNormalViewCountProperty">
            <summary>Maximum number of concurrently opened normal views (-1 = unlimited)</summary>
            <remarks>When the Shell tries to open more views than allowed, the oldest view in the list will be closed.</remarks>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.Shell.SelectedNormalViewProperty">
            <summary>Index of the currently selected normal view (-1 if no view is selected)</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.Shell.DesiredContentZoomFactorProperty">
            <summary>Desired zoom factor for hosted views (may or may not be supported by individual themes)</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.Shell.OnSelectedNormalViewChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the selected normal view changes
            </summary>
            <param name="source">The dependency object.</param>
            <param name="args">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.Shell.SelectedNormalViewResultProperty">
            <summary>Complete view result for the currently selected normal view (null if no view is selected)</summary>
            <remarks>Can be used to bind the current view into a content control using {Binding SelectedNormalViewResult.Document}</remarks>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.Shell.NormalViewCountProperty">
            <summary>Number of open normal views</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.Shell.SelectedTopLevelViewProperty">
            <summary>Index of the currently selected top-level view (-1 if no view is selected)</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.Shell.OnSelectedTopLevelViewChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Fires when the selected top leve view changes
            </summary>
            <param name="source">The source.</param>
            <param name="args">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.Shell.SelectedTopLevelViewResultProperty">
            <summary>Complete view result for the currently selected top-level view (null if no view is selected)</summary>
            <remarks>Can be used to bind the current view into a content control using {Binding SelectedTopLevelViewResult.Document}</remarks>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.Shell.TopLevelViewCountProperty">
            <summary>Number of open top level views</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.Shell.StatusProperty">
            <summary>Current application/shell status</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.Shell.CurrentStatusViewProperty">
            <summary>Current status view</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.Shell.CurrentApplicationStatusProperty">
            <summary>Overall application status (based on status message updates)</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.Shell.StatusChangedEvent">
            <summary>This event fires whenever a new status is set</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.Shell.NotificationChangedEvent">
            <summary>This event fires whenever a new notification is set</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.Shell.MaximumNotificationCountProperty">
            <summary>Defines the maximum number of notifications the Shell displays at any time</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.Shell.NotificationTimeoutProperty">
            <summary>Timeout (time span) notifications are shown</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.Shell.CurrentNotificationsProperty">
            <summary>List of currently open notifications</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.Shell.CurrentNotificationsCountProperty">
            <summary>Indicates number of currently displayed notifications</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.Shell.NotificationSortProperty">
            <summary>Defines how notifications are sorted</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.Shell.TitleModeProperty">
            <summary>Defines what should show in the title bar of the shell window</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.Shell.HandleLocalViewsSpecialProperty">
            <summary>If set to true, the current shell can handle views with a local scope special by adding it to the TopLevelViewsLocal collection</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.Shell.HandleStatusMessage(CODE.Framework.Wpf.Mvvm.RequestContext)">
            <summary>Handles opening of views that are status messages</summary>
            <param name="context">The request context.</param>
            <returns>True of view was handled</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.Shell.HandleNotificationMessage(CODE.Framework.Wpf.Mvvm.RequestContext,System.Nullable{System.TimeSpan})">
            <summary>Handles opening of views that are notification messages</summary>
            <param name="context">The request context.</param>
            <param name="overrideTimeout">Overrides the theme's default notification timeout.</param>
            <returns>True of view was handled</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.Shell.ClearNotifications">
            <summary>
            Clears all notifications
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.Shell.OpenView(CODE.Framework.Wpf.Mvvm.RequestContext)">
            <summary>
            This method is invoked when a view is opened
            </summary>
            <param name="context">Request context (contains information about the view)</param>
            <returns>
            True if handled successfully
            </returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.Shell.OpenNormalViewInWindow(CODE.Framework.Wpf.Mvvm.RequestContext,CODE.Framework.Wpf.Mvvm.ViewResult)">
            <summary>
            Opens a normal view in a separate window.
            </summary>
            <param name="context">The context.</param>
            <param name="viewResult">The view result.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.Shell.OpenTopLevelView(CODE.Framework.Wpf.Mvvm.RequestContext,CODE.Framework.Wpf.Mvvm.MessageBoxResult,CODE.Framework.Wpf.Mvvm.ViewResult)">
            <summary>
            Opens the top level view in a separate window.
            </summary>
            <param name="context">The context.</param>
            <param name="messageBoxResult">The message box result.</param>
            <param name="viewResult">The view result.</param>
            <returns>True if successfully opened</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.Shell.CloseViewForModel(System.Object)">
            <summary>
            This method is invoked when a view that is associated with a certain model should be closed
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.Shell.CloseAllViews">
            <summary>
            This method closes all currently open views
            </summary>
            <returns>True if the handler successfully closed all views. False if it didn't close all views or generally does not handle view closing</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.Shell.GetViewForModel(System.Object)">
            <summary>
            This method is used to retrieve a view associated with the specified model
            </summary>
            <param name="model">Model</param>
            <returns>
            Document if found (null otherwise)
            </returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.Shell.SetOriginalTitle(System.String)">
            <summary>
            Sets the original version of the title (which can be used later to reset the title)
            </summary>
            <param name="originalTitle">The original title.</param>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Shell.Current">
            <summary>
            Reference to the current (last loaded) Shell
            </summary>
            <value>The current Shell.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Shell.TopLevelViews">
            <summary>
            Currently open top-level views
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Shell.TopLevelViewLaunchMode">
            <summary>Defines the launch mode (in-place or popup) for top level views</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Shell.MaximumTopLevelViewCount">
            <summary>Maximum number of concurrently opened top level views (-1 = unlimited)</summary>
            <remarks>
            Only counts in-place activated top level views. This does not limit the number of potentially launched windows.
            When the Shell tries to open more views than allowed, the oldest view in the list will be closed.
            </remarks>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Shell.NormalViews">
            <summary>
            Currently open standard views
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Shell.NormalViewLaunchMode">
            <summary>Defines the launch mode (in-place or popup) for top level views</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Shell.MaximumNormalViewCount">
            <summary>Maximum number of concurrently opened top level views (-1 = unlimited)</summary>
            <remarks>When the Shell tries to open more views than allowed, the oldest view in the list will be closed.</remarks>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Shell.SelectedNormalView">
            <summary>Index of the currently selected normal view (-1 if no view is selected)</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Shell.DesiredContentZoomFactor">
            <summary>Desired zoom factor for hosted views (may or may not be supported by individual themes)</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Shell.SelectedNormalViewResult">
            <summary>Complete view result for the currently selected normal view (null if no view is selected)</summary>
            <remarks>Can be used to bind the current view into a content control using {Binding SelectedNormalViewResult.Document}</remarks>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Shell.NormalViewCount">
            <summary>Number of open normal views</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Shell.SelectedTopLevelView">
            <summary>Index of the currently selected top-level view (-1 if no view is selected)</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Shell.SelectedTopLevelViewResult">
            <summary>Complete view result for the currently selected top-level view (null if no view is selected)</summary>
            <remarks>Can be used to bind the current view into a content control using {Binding SelectedTopLevelViewResult.Document}</remarks>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Shell.TopLevelViewCount">
            <summary>Number of open top level views</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Shell.Status">
            <summary>Current application/shell status</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Shell.CurrentStatusView">
            <summary>Current status view</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Shell.CurrentApplicationStatus">
            <summary>Overall application status (based on status message updates)</summary>
        </member>
        <member name="E:CODE.Framework.Wpf.Mvvm.Shell.StatusChanged">
            <summary>This event fires whenever a new status is set</summary>
        </member>
        <member name="E:CODE.Framework.Wpf.Mvvm.Shell.NotificationChanged">
            <summary>This event fires whenever a new notification is set</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Shell.MaximumNotificationCount">
            <summary>Defines the maximum number of notifications the Shell displays at any time</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Shell.NotificationTimeout">
            <summary>Timeout (time span) notifications are shown</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Shell.CurrentNotifications">
            <summary>List of currently open notifications</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Shell.CurrentNotificationsCount">
            <summary>Indicates number of currently displayed notifications</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Shell.NotificationSort">
            <summary>Defines how notifications are sorted</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Shell.TitleMode">
            <summary>Defines what should show in the title bar of the shell window</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Shell.HandleLocalViewsSpecial">
            <summary>If set to true, the current shell can handle views with a local scope special by adding it to the TopLevelViewsLocal collection</summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.NotificationSort">
            <summary>
            Defines how notifications are to be sorted
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.NotificationSort.NewestFirst">
            <summary>
            Newest notification first (default)
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.NotificationSort.OldestFirst">
            <summary>
            Oldest notification first
            </summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.ViewLaunchMode">
            <summary>
            Different view launch modes
            </summary>
            <remarks>Note that each theme is free to interpret these settings differently.</remarks>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.ViewLaunchMode.InPlace">
            <summary>
            Activates a view in-place (typically in a tab control)
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.ViewLaunchMode.Popup">
            <summary>
            Activates a view as a top level view (typically a new window)
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.ViewLaunchMode.InPlaceExceptPopups">
            <summary>
            Activates a view in-place except when they are specifically flagged as pop ups
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.ViewLaunchMode.InPlaceStandAlone">
            <summary>
            Activates a view in-place in the main shell, but will create a new shell window for each view
            </summary>
            <remarks>Typically only applies for normal views</remarks>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.StatusViewResultWrapper">
            <summary>Wraper used to encapsulate the status view model</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.StatusViewResultWrapper.Model">
            <summary>
            Status view model
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.StatusViewResultWrapper.View">
            <summary>Document</summary>
        </member>
        <member name="E:CODE.Framework.Wpf.Mvvm.StatusViewResultWrapper.PropertyChanged">
            <summary>Occurs when a property value changes.</summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.NotificationViewResultWrapper">
            <summary>Wraper used to encapsulate the notification view model</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.NotificationViewResultWrapper.Model">
            <summary>
            Notification view model
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.NotificationViewResultWrapper.View">
            <summary>Document</summary>
        </member>
        <member name="E:CODE.Framework.Wpf.Mvvm.NotificationViewResultWrapper.PropertyChanged">
            <summary>Occurs when a property value changes.</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.NotificationViewResultWrapper.InternalTimer">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.ShellTitleMode">
            <summary>
            Defines the title mode for the shell window
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.ShellTitleMode.OriginalTitleOnly">
            <summary>
            Shows the original title of the shell only (such as "Word")
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.ShellTitleMode.ViewTitleDashOriginalTitle">
            <summary>
            Shows the current view title plus the original title (such as "ReadMe.doc - Word")
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.ShellTitleMode.OriginalTitleDashViewTitle">
            <summary>
            Shows the original title plus the current view title (such as "Word - ReadMe.doc")
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.ShellTitleMode.ViewTitleOnly">
            <summary>
            Shows only the title of the current view (except when there is no open view, then the original title is shown)
            </summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.WindowShellLauncher`1">
            <summary>
            Default shell view handler
            </summary>
            <typeparam name="TViewHandler">The shell class that is to be used to launch shell level views</typeparam>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.WindowShellLauncher`1.OpenView(CODE.Framework.Wpf.Mvvm.RequestContext)">
            <summary>
            This method is invoked when a view is opened
            </summary>
            <param name="context">Request context (contains information about the view)</param>
            <returns>True if handled successfully</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.WindowShellLauncher`1.CloseViewForModel(System.Object)">
            <summary>
            This method is invoked when a view that is associated with a certain model should be closed
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.WindowShellLauncher`1.CloseAllViews">
            <summary>
            This method closes all currently open views
            </summary>
            <returns>True if the handler successfully closed all views. False if it didn't close all views or generally does not handle view closing</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.WindowShellLauncher`1.GetViewForModel(System.Object)">
            <summary>
            This method is used to retrieve a view associated with the specified model
            </summary>
            <param name="model">Model</param>
            <returns>
            Document if found (null otherwise)
            </returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.WindowShellLauncher`1.OpenAnotherShellInstance">
            <summary>
            Attempts to launch another shell instance, using the same settings the first instance was launched with
            </summary>
            <remarks>
            This method simply fires the same controller action the last shell launch fired.
            This method will only work if that controller action does not require any additional parameters
            and can be called repeatedly without ill effect (HomeController.Start() usually is safe to call that way)
            </remarks>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise</returns>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.ApplicationShutdownViewAction">
            <summary>This action performs a shutdown of the current application</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ApplicationShutdownViewAction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Wpf.Mvvm.ApplicationShutdownViewAction"/> class.
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ApplicationShutdownViewAction.#ctor(System.String,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:CODE.Framework.Wpf.Mvvm.ApplicationShutdownViewAction"/> class.</summary>
            <param name="caption">The caption.</param>
            <param name="beginGroup">If represented visually, should this action be placed in a new group?</param>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.CloseCurrentViewAction">
            <summary>This action performs a shutdown of the current application</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.CloseCurrentViewAction.#ctor(System.Object,System.String,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Wpf.Mvvm.ApplicationShutdownViewAction"/> class.
            </summary>
            <param name="model">The model associated with the view.</param>
            <param name="caption">The caption.</param>
            <param name="beginGroup">If represented visually, should this action be placed in a new group?</param>
            <param name="category">The category.</param>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.MoveFocusViewAction">
            <summary>This action moves the keyboard focus to an associated element in the view</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.MoveFocusViewAction.#ctor(CODE.Framework.Wpf.Mvvm.IHaveViewInformation,System.String,System.String,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Wpf.Mvvm.ApplicationShutdownViewAction"/> class.
            </summary>
            <param name="model">The model associated with the view.</param>
            <param name="moveToElementName">Name of the element to move the cursor to.</param>
            <param name="caption">The caption.</param>
            <param name="beginGroup">If represented visually, should this action be placed in a new group?</param>
            <param name="category">The category.</param>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.SwitchThemeViewAction">
            <summary>
            Standard view action to switch themes
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.SwitchThemeViewAction.#ctor(System.String,System.String,System.Boolean,System.String,System.Char,System.Char)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Wpf.Mvvm.ApplicationShutdownViewAction"/> class.
            </summary>
            <param name="theme">The theme to switch to.</param>
            <param name="caption">The caption.</param>
            <param name="beginGroup">If represented visually, should this action be placed in a new group?</param>
            <param name="category">The category.</param>
            <param name="categoryAccessKey">The category access key.</param>
            <param name="accessKey">The access key.</param>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.ToggleViewAction">
            <summary>
            This view action automatically toggles its IsChecked state every time it executes.
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ToggleViewAction.#ctor(System.String,System.Boolean,System.Action{CODE.Framework.Wpf.Mvvm.IViewAction,System.Object},System.Func{CODE.Framework.Wpf.Mvvm.IViewAction,System.Object,System.Boolean},System.String,System.String,System.String,System.Int32,System.Boolean,System.Boolean,CODE.Framework.Wpf.Mvvm.ViewActionSignificance,System.String[],System.String,System.String,System.String,System.Int32,System.Char,System.Windows.Input.Key,System.Windows.Input.ModifierKeys,System.Char,System.Boolean,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Wpf.Mvvm.ToggleViewAction"/> class.
            </summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.StandardViewPlaceholder">
            <summary>Placeholder for a standard view that is to be loaded dynamically</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.StandardViewPlaceholder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Wpf.Mvvm.StandardViewPlaceholder"/> class.
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.StandardViewPlaceholder.StandardViewNameProperty">
            <summary>Name of the standard view that is to be loaded into this placeholder control</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.StandardViewPlaceholder.StandardViewNameChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>Fires when the standard view name changes</summary>
            <param name="s">Source</param>
            <param name="a">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.StandardViewPlaceholder.StandardViewProperty">
            <summary>Standard view (identifier) of the view that is to be loaded into this placeholder</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.StandardViewPlaceholder.StandardViewChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>Fires when the standard view changed</summary>
            <param name="s">Source</param>
            <param name="a">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.StandardViewPlaceholder.StandardViewName">
            <summary>Name of the standard view that is to be loaded into this placeholder control</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.StandardViewPlaceholder.StandardView">
            <summary>Standard view (identifier) of the view that is to be loaded into this placeholder</summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.Tools.ViewVisualizer">
            <summary>
            Interaction logic for ViewVisualizer.xaml
            </summary>
            <summary>
            ViewVisualizer
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.Tools.ViewVisualizer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Wpf.Mvvm.Tools.ViewVisualizer"/> class.
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.Tools.ViewVisualizer.CurrentVisualizer">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.Tools.ViewVisualizer.OpenView(CODE.Framework.Wpf.Mvvm.RequestContext)">
            <summary>
            This method is invoked when a view is opened
            </summary>
            <param name="context">Request context (contains information about the view)</param>
            <returns>True if handled successfully</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.Tools.ViewVisualizer.CloseViewForModel(System.Object)">
            <summary>
            This method is invoked when a view that is associated with a certain model should be closed
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.Tools.ViewVisualizer.CloseAllViews">
            <summary>
            This method closes all currently open views
            </summary>
            <returns>True if the handler successfully closed all views. False if it didn't close all views or generally does not handle view closing</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.Tools.ViewVisualizer.GetViewForModel(System.Object)">
            <summary>
            This method is used to retrieve a view associated with the specified model
            </summary>
            <param name="model">Model</param>
            <returns>
            Document if found (null otherwise)
            </returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.Tools.ViewVisualizer.ScaleSlider_MouseDoubleClick(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles the MouseDoubleClick event of the ScaleSlider control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.Tools.ViewVisualizer.CheckBox_Checked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the Checked event of the CheckBox control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.Tools.ViewVisualizer.ComboBox_SelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            Handles the SelectionChanged event of the ComboBox control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.Controls.SelectionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.Tools.ViewVisualizer.TreeView_SelectedItemChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            Handles the SelectedItemChanged event of the TreeView control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Object"/> instance containing the event data.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.Tools.ViewVisualizer.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Tools.ViewVisualizer.Views">
            <summary>
            Gets or sets the views.
            </summary>
            <value>
            The views.
            </value>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Tools.ViewVisualizer.CurrentItem">
            <summary>
            Currently selected view
            </summary>
        </member>
        <member name="E:CODE.Framework.Wpf.Mvvm.Tools.ViewVisualizer.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Tools.ViewVisualizer.ModelStatus">
            <summary>
            Status
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Tools.ViewVisualizer.LoadingVisibility">
            <summary>
            Indicates whether the loading indicator is visible
            </summary>
            <value>The loading visibility.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Tools.ViewVisualizer.OperationsInProgress">
            <summary>
            Counts the current number of operations in progress
            </summary>
            <value>The operations in progress.</value>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.Tools.ViewVisualizerItem">
            <summary>
            Document visualizer item
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.Tools.ViewVisualizerItem.AddElement(System.Windows.UIElement,System.Collections.ObjectModel.ObservableCollection{CODE.Framework.Wpf.Mvvm.Tools.UIElementViewModel},System.Windows.UIElement)">
            <summary>
            Inspects a specific element and adds it to the list
            </summary>
            <param name="element">The element.</param>
            <param name="collection">The collection.</param>
            <param name="rootView">The root view.</param>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Tools.ViewVisualizerItem.ViewSource">
            <summary>
            Document description
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Tools.ViewVisualizerItem.ViewSourceText">
            <summary>
            Bindable text for the view information
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Tools.ViewVisualizerItem.View">
            <summary>
            Visual brush representing the view
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Tools.ViewVisualizerItem.ViewObject">
            <summary>
            The actual view
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Tools.ViewVisualizerItem.Model">
            <summary>
            Model associated with the view
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Tools.ViewVisualizerItem.ModelProperties">
            <summary>
            Exposes the properties of the current model
            </summary>
            <value>The model properties.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Tools.ViewVisualizerItem.ModelClass">
            <summary>
            Class used for the view model
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Tools.ViewVisualizerItem.ModelText">
            <summary>
            Bindable text for the view information
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Tools.ViewVisualizerItem.Controller">
            <summary>
            Model associated with the view
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Tools.ViewVisualizerItem.ControllerClass">
            <summary>
            Class used for the controller
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Tools.ViewVisualizerItem.ControllerText">
            <summary>
            Bindable text for the controller information
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Tools.ViewVisualizerItem.Action">
            <summary>
            Controller Action
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Tools.ViewVisualizerItem.Title">
            <summary>
            Document title
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Tools.ViewVisualizerItem.AvailableResources">
            <summary>
            List of available resources for a view
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Tools.ViewVisualizerItem.Elements">
            <summary>Hierarchical list of UI elements</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Tools.ViewVisualizerItem.SelectedElement">
            <summary>Gets or sets the selected element from the view hierarchy tree.</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Tools.ViewVisualizerItem.CurrentElement">
            <summary>
            Current e
            </summary>
        </member>
        <member name="E:CODE.Framework.Wpf.Mvvm.Tools.ViewVisualizerItem.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.Tools.ViewModelProperty">
            <summary>
            View model for a view model property
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.Tools.ViewModelProperty.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Wpf.Mvvm.Tools.ViewModelProperty"/> class.
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.Tools.ViewModelProperty.GetText(System.String)">
            <summary>
            Gets a text representation for the current element.
            </summary>
            <param name="text">The text.</param>
            <returns>UIElement.</returns>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Tools.ViewModelProperty.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Tools.ViewModelProperty.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Tools.ViewModelProperty.RealValue">
            <summary>
            Gets or sets the real value.
            </summary>
            <value>The real value.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Tools.ViewModelProperty.Type">
            <summary>
            Gets or sets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Tools.ViewModelProperty.Property2">
            <summary>
            For internal use only
            </summary>
            <value>The property2.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Tools.ViewModelProperty.IsCollectionItem">
            <summary>
            Indicates whether this property is a collection item
            </summary>
            <value><c>true</c> if this instance is collection item; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Tools.ViewModelProperty.CollectionItemCount">
            <summary>
            Indicates the number of items in a collection
            </summary>
            <value>The collection item count.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Tools.ViewModelProperty.IsCollection">
            <summary>
            Indicates whether this item represents a collection
            </summary>
            <value><c>true</c> if this instance is collection; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Tools.ViewModelProperty.DisplayValue">
            <summary>
            Display value representing the current property
            </summary>
            <value>The display value.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Tools.ViewModelProperty.ModelProperties">
            <summary>
            Sub-properties of the current property
            </summary>
            <value>The model properties.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Tools.ViewModelProperty.IsAction">
            <summary>
            Indicates whether the current item is a view action
            </summary>
            <value><c>true</c> if this instance is action; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Tools.ViewModelProperty.Foreground">
            <summary>
            Display foreground color
            </summary>
            <value>The foreground.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Tools.ViewModelProperty.Tooltip">
            <summary>
            Display tooltip
            </summary>
            <value>The tooltip.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Tools.ViewModelProperty.Details">
            <summary>
            Contents of the detail pane
            </summary>
            <value>The details.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Tools.ViewModelProperty.StandardViewFactory">
            <summary>
            Returns a factor object for the current standard view theme
            </summary>
            <value>The standard view factory.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Tools.ViewModelProperty.IsStandardViewModel">
            <summary>
            Indicates whether the current item is a standard view model
            </summary>
            <value><c>true</c> if this instance is standard view model; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.Tools.ResourceItem">
            <summary>Resource item in visualizer</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Tools.ResourceItem.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.Tools.UIElementViewModel">
            <summary>Document model for individual UI elements</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.Tools.UIElementViewModel.#ctor(System.Windows.UIElement)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Wpf.Mvvm.Tools.UIElementViewModel"/> class.
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.Tools.UIElementViewModel.AddStyleInformation(System.Collections.Generic.IList{CODE.Framework.Wpf.Mvvm.Tools.ControlStyleViewModel},System.Windows.DependencyObject,System.Windows.Style,System.Boolean)">
            <summary>
            Adds style information to the provided collection
            </summary>
            <param name="styles">The styles.</param>
            <param name="currentElement">The current element.</param>
            <param name="style">The style.</param>
            <param name="inheritedStyle">if set to <c>true</c> [inherited style].</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.Tools.UIElementViewModel.AddDictionaries(System.Collections.ObjectModel.ObservableCollection{CODE.Framework.Wpf.Mvvm.Tools.ResourceDictionaryViewModel},System.Windows.ResourceDictionary)">
            <summary>Recursively populates resource dictionaries</summary>
            <param name="collection">The collection.</param>
            <param name="resourceDictionary">The resource dictionary.</param>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Tools.UIElementViewModel.Name">
            <summary>Object or instance name</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Tools.UIElementViewModel.Content">
            <summary>Additional information about the object, such as the value of a textbox, or the caption of a label</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Tools.UIElementViewModel.ContentDisplay">
            <summary>Display specific version of the content</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Tools.UIElementViewModel.Type">
            <summary>Type of the UI element (class)</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Tools.UIElementViewModel.UIElement">
            <summary>Actual UI element</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Tools.UIElementViewModel.Elements">
            <summary>Hierarchical list of UI elements</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Tools.UIElementViewModel.UIElementVisual">
            <summary>Actual visual of the UI element this item represents</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Tools.UIElementViewModel.ResourceDictionaries">
            <summary>List of associated resource dictionaries</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Tools.UIElementViewModel.ControlStyles">
            <summary>Collection of styles applying to the current control</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Tools.UIElementViewModel.ControlProperties">
            <summary>
            Properties of the current control.
            </summary>
            <value>The control properties.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Tools.UIElementViewModel.CurrentView">
            <summary>
            Document associated with this item (root view)
            </summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.Tools.ResourceDictionaryViewModel">
            <summary>
            Information about available view models
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.Tools.ResourceDictionaryViewModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Wpf.Mvvm.Tools.ResourceDictionaryViewModel"/> class.
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Tools.ResourceDictionaryViewModel.Source">
            <summary>
            Source from which the resource dictionary was loaded
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Tools.ResourceDictionaryViewModel.ResourceDictionary">
            <summary>
            Link to the actual resource dictionary
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Tools.ResourceDictionaryViewModel.ResourceDictionaries">
            <summary>
            Linked resource dictionaries
            </summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.Tools.ControlStyleViewModel">
            <summary>
            Information about available control styles
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.Tools.ControlStyleViewModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Wpf.Mvvm.Tools.ControlStyleViewModel"/> class.
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.Tools.ControlStyleViewModel.GetText(System.String)">
            <summary>
            Returns a text representation
            </summary>
            <param name="text">The text.</param>
            <returns>UIElement.</returns>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Tools.ControlStyleViewModel.Property">
            <summary>Property name that is to be set</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Tools.ControlStyleViewModel.Property2">
            <summary>
            Property with space
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Tools.ControlStyleViewModel.Value">
            <summary>Property value that is to be set</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Tools.ControlStyleViewModel.Key">
            <summary>Style key</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Tools.ControlStyleViewModel.TargetType">
            <summary>Target type</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Tools.ControlStyleViewModel.DisplayName">
            <summary>Display name for key or target type</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Tools.ControlStyleViewModel.Details">
            <summary>
            Detail about the current element
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Tools.ControlStyleViewModel.IsInheritedStyle">
            <summary>Indicates whether this style is based on the prior style</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Tools.ControlStyleViewModel.Style">
            <summary>Actual style</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Tools.ControlStyleViewModel.ControlStyles">
            <summary>Control style members</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Tools.ControlStyleViewModel.IsOverridden">
            <summary>Indicates whether the style is overridden by an inherited style</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Tools.ControlStyleViewModel.TextDecorations">
            <summary>
            Gets the text decorations.
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Tools.ControlStyleViewModel.Setter">
            <summary>
            Setter reference
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Tools.ControlStyleViewModel.DependencyObject">
            <summary>
            Actual dependency object this goes with
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Tools.ControlStyleViewModel.DependencyProperty">
            <summary>
            Actual dependency property this goes with
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Tools.ControlStyleViewModel.Foreground">
            <summary>
            Foreground color
            </summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.Tools.ControlPropertyViewModel">
            <summary>
            View model for control properties
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.Tools.ControlPropertyViewModel.GetText(System.String)">
            <summary>
            Gets the text representation fo the element.
            </summary>
            <param name="text">The text.</param>
            <returns>UIElement.</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.Tools.ControlPropertyViewModel.GetXaml(System.Object)">
            <summary>
            Serialzies the current property value as XAML
            </summary>
            <param name="element">The element.</param>
            <returns>System.String.</returns>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Tools.ControlPropertyViewModel.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Tools.ControlPropertyViewModel.Property2">
            <summary>
            Property exposed with leading space
            </summary>
            <value>The property2.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Tools.ControlPropertyViewModel.DependencyObject">
            <summary>
            Dependency object
            </summary>
            <value>The dependency object.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Tools.ControlPropertyViewModel.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Tools.ControlPropertyViewModel.DisplayValue">
            <summary>
            Gets the display value.
            </summary>
            <value>The display value.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Tools.ControlPropertyViewModel.IsDefault">
            <summary>
            Indicates whether the property value is the property default
            </summary>
            <value><c>true</c> if this instance is default; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Tools.ControlPropertyViewModel.IsBound">
            <summary>
            Indicates whether the property is data bound
            </summary>
            <value><c>true</c> if this instance is bound; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Tools.ControlPropertyViewModel.IsResource">
            <summary>
            Indicates whether this property is bound to a resource
            </summary>
            <value><c>true</c> if this instance is resource; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Tools.ControlPropertyViewModel.Foreground">
            <summary>
            Foreground color
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Tools.ControlPropertyViewModel.ResourceName">
            <summary>
            Name of a resource the property is bound to
            </summary>
            <value>The name of the resource.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Tools.ControlPropertyViewModel.BindingExpression">
            <summary>
            Binding expression (if the property is data bound)
            </summary>
            <value>The binding expression.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.Tools.ControlPropertyViewModel.Details">
            <summary>
            Detail pane content
            </summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.View">
            <summary>
            Base class for views (can be used instead of UserControl)
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.View.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.View.OnActivated(System.Object,System.EventArgs)">
            <summary>
            Called when the view is activated
            </summary>
            <param name="sender">The sender.</param>
            <param name="eventArgs">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.View.HasDefaultFocusProperty">
            <summary>Defines whether the control is the one to receive the default focus. Set it to true as an attached property to move focus to that control.</summary>
            <remarks>If multiple controls are set to receive the default first focus, the 'last one wins' rule is applied.</remarks>
            <example>&lt;TextBox c:Document.HasDefaultFocus="true" &gt;</example>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.View.GetHasDefaultFocus(System.Windows.DependencyObject)">
            <summary>Defines whether the control is the one to receive the default focus. Set it to true as an attached property to move focus to that control.</summary>
            <remarks>If multiple controls are set to receive the default first focus, the 'last one wins' rule is applied.</remarks>
            <example>&lt;TextBox c:Document.HasDefaultFocus="true" &gt;</example>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.View.SetHasDefaultFocus(System.Windows.DependencyObject,System.Boolean)">
            <summary>Defines whether the control is the one to receive the default focus. Set it to true as an attached property to move focus to that control.</summary>
            <remarks>If multiple controls are set to receive the default first focus, the 'last one wins' rule is applied.</remarks>
            <example>&lt;TextBox c:Document.HasDefaultFocus="true" &gt;</example>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.View.MoveFocusToDefaultOnActivateProperty">
            <summary>
            Indicates whether the focus should be moved to the default control when the view gets activated
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.View.MoveFocusToDefaultOnActivate">
            <summary>
            Indicates whether the focus should be moved to the default control when the view gets activated
            </summary>
            <value><c>true</c> if [move focus to default on activate]; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.ViewActionAndOpenViewSelector">
            <summary>
            This control combines a view action menu as well as an open-view selector (tab)
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.ViewActionAndOpenViewSelector.ActionsProperty">
            <summary>
            Reference to a provider of actions
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ViewActionAndOpenViewSelector.OnActionsChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the assigned actions changed
            </summary>
            <param name="d">The d.</param>
            <param name="args">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.ViewActionAndOpenViewSelector.ViewsProperty">
            <summary>
            A collection of views
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.ViewActionAndOpenViewSelector.ViewTabsProperty">
            <summary>
            Tab control this control is controlling
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ViewActionAndOpenViewSelector.OnViewsChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when views change
            </summary>
            <param name="d">The d.</param>
            <param name="args">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.ViewActionAndOpenViewSelector.TriggerItemProperty">
            <summary>
            Allows setting an item on any object, and when that object is clicked, the item will be executed appropriately
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ViewActionAndOpenViewSelector.OnTriggerItemChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Fires when the trigger item changes
            </summary>
            <param name="d">The d.</param>
            <param name="args">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ViewActionAndOpenViewSelector.SetTriggerItem(System.Windows.DependencyObject,CODE.Framework.Wpf.Mvvm.ViewActionAndOpenViewItem)">
            <summary>
            Setting the trigger item
            </summary>
            <param name="d">The d.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ViewActionAndOpenViewSelector.GetTriggerItem(System.Windows.DependencyObject)">
            <summary>
            Getting the trigger item
            </summary>
            <param name="d">The d.</param>
            <returns>ViewActionAndOpenViewItem.</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ViewActionAndOpenViewSelector.Repopulate">
            <summary>
            Populates the list of items from actions and views.
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewActionAndOpenViewSelector.Actions">
            <summary>
            Reference to a provider of actions
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewActionAndOpenViewSelector.Views">
            <summary>
            A collection of views
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewActionAndOpenViewSelector.ViewTabs">
            <summary>
            Tab control this control is controlling
            </summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.ViewActionAndOpenViewItem">
            <summary>
            Represents an individual item within a list of views and open items
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ViewActionAndOpenViewItem.#ctor(CODE.Framework.Wpf.Mvvm.IViewAction,System.Windows.Controls.TabControl)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Wpf.Mvvm.ViewActionAndOpenViewItem"/> class.
            </summary>
            <param name="viewTabs">The view tabs control.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ViewActionAndOpenViewItem.#ctor(CODE.Framework.Wpf.Mvvm.ViewResult,System.Int32,System.Windows.Controls.TabControl)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Wpf.Mvvm.ViewActionAndOpenViewItem"/> class.
            </summary>
            <param name="viewResult">The view result.</param>
            <param name="viewIndex">Index of the view within the tab control hosting it.</param>
            <param name="viewTabs">The view tabs control.</param>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.ViewActionAndOpenViewItem.MaxSubItemCountProperty">
            <summary>
            Maximum number of sut-items count to be displayed 
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ViewActionAndOpenViewItem.OnMaxSubItemCountChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Fires when the max sub item count changes
            </summary>
            <param name="d"></param>
            <param name="args"></param>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ViewActionAndOpenViewItem.NotifyChanged(System.String)">
            <summary>
            Can be used to trigger change notification
            </summary>
            <param name="property">Name of the property.</param>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewActionAndOpenViewItem.SubItems">
            <summary>
            Sub items
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewActionAndOpenViewItem.Group">
            <summary>
            Group title
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewActionAndOpenViewItem.MaxSubItemCount">
            <summary>
            Maximum number of sut-items count to be displayed 
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewActionAndOpenViewItem.OpenSubItemDisplayCount">
            <summary>
            Displays the number of open sub items that are views
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewActionAndOpenViewItem.OpenSubItemDisplayCountVisible">
            <summary>
            Indicates whether the count property shall be visible
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewActionAndOpenViewItem.ViewIndex">
            <summary>
            Index of the view within the view host
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewActionAndOpenViewItem.Action">
            <summary>
            Action the item is tied to
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewActionAndOpenViewItem.Caption">
            <summary>
            Caption
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewActionAndOpenViewItem.Icon">
            <summary>
            Icon
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewActionAndOpenViewItem.Visible">
            <summary>
            Indicates whether this action should be visible
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewActionAndOpenViewItem.MenuOpen">
            <summary>
            Indicates whether the context menu is open
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewActionAndOpenViewItem.MenuItems">
            <summary>
            Menu items for sub-item display
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewActionAndOpenViewItem.View">
            <summary>
            View (result) the item is tied to
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewActionAndOpenViewItem.ViewTabs">
            <summary>
            Associated view tab control
            </summary>
        </member>
        <member name="E:CODE.Framework.Wpf.Mvvm.ViewActionAndOpenViewItem.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.ButtonWithIcon">
            <summary>
            Special button subclass that provides an icon brush
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.ButtonWithIcon.IconBrushProperty">
            <summary>
            Brush used to display an icon
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ButtonWithIcon.IconBrush">
            <summary>
            Brush used to display an icon
            </summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.ViewActionHelper">
            <summary>
            This class is designed mostly for internal use and provides functions related to standard view action tasks
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ViewActionHelper.GetConsolidatedActions(CODE.Framework.Wpf.Mvvm.IHaveActions,CODE.Framework.Wpf.Mvvm.IHaveActions,System.String,CODE.Framework.Wpf.Mvvm.ViewActionDisplayMode,System.Boolean,CODE.Framework.Wpf.Mvvm.ViewActionDisplayMode)">
            <summary>
            Inspects up to 2 IHaveActions interfaces and returns a consolidated list of actions for both interfaces
            </summary>
            <param name="actions">The first interface containing actions</param>
            <param name="actions2">The second interface containing actions</param>
            <param name="defaultEmptyCategory">The default empty category.</param>
            <param name="actionsDisplayFilter">Indicates which actions out of the first actions collection shall be included.</param>
            <param name="flagFirstSecondaryActionAsNewGroup">Indicates whether the first action from the second actions collection should be flagged as a new group</param>
            <param name="actions2DisplayFilter">Indicates which actions out of the second actions collection shall be included.</param>
            <returns>ObservableCollection{IViewAction}.</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ViewActionHelper.GetTopLevelActionCategories(System.Collections.Generic.IEnumerable{CODE.Framework.Wpf.Mvvm.IViewAction},System.String,System.String)">
            <summary>
            Retrieves a list of all categories at the root of each action
            </summary>
            <param name="actions">List of actions</param>
            <param name="emptyGlobalCategoryTitle">The empty global category title.</param>
            <param name="emptyLocalCategoryTitle">The empty local category title.</param>
            <returns>IEnumerable{ViewActionCategory}.</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ViewActionHelper.GetAllActionsForCategory(System.Collections.Generic.IEnumerable{CODE.Framework.Wpf.Mvvm.IViewAction},CODE.Framework.Wpf.Mvvm.ViewActionCategory,System.Int32,System.String,System.Boolean)">
            <summary>
            Gets all actions that fall under the specified category
            </summary>
            <param name="actions">The actions.</param>
            <param name="category">The category.</param>
            <param name="indentLevel">The indent level.</param>
            <param name="emptyCategory">The empty category.</param>
            <param name="orderByGroupTitle">If true, then the result set is first ordered by group title.</param>
            <returns>IEnumerable{IViewAction}.</returns>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.ViewActionDisplayMode">
            <summary>
            Indicates which view actions should be displayed
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.ViewActionDisplayMode.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.ViewActionDisplayMode.All">
            <summary>
            All
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.ViewActionDisplayMode.AboveNormalSignificanceAndHigher">
            <summary>
            View actions with above normal significance
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.ViewActionDisplayMode.HighestSignificance">
            <summary>
            View actions with highest significance only
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.ViewActionDisplayMode.NormalSignificanceAndHigher">
            <summary>
            Anything that is at least low normal significance
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.ViewActionDisplayMode.BelowNormalSignificanceAndHigher">
            <summary>
            Anything that is at least low significance
            </summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.ViewActionItemsControl">
            <summary>
            Items control that auto-populates from an Actions collection of model object that implements IHaveActions
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.ViewActionItemsControl.ModelProperty">
            <summary>
            Model dependency property
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ViewActionItemsControl.ModelChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Change handler for model property
            </summary>
            <param name="d">The dependency object that triggered this change.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.ViewActionItemsControl.OrderByGroupTitleProperty">
            <summary>
            If set to true, actions are sorted by group title, before they are sorted by order
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.ViewActionItemsControl.EmptyGlobalCategoryTitleProperty">
            <summary>
            Title for empty global category titles (default: File)
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ViewActionItemsControl.PopulateItems(CODE.Framework.Wpf.Mvvm.IHaveActions)">
            <summary>
            Populates the current items control with items based on the actions collection
            </summary>
            <param name="actions">List of actions</param>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.ViewActionItemsControl.MenuKeyBindings">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ViewActionItemsControl.CreateAllMenuKeyBindings">
            <summary>
            Removes all key bindings from the current window that were associated with a view category menu
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ViewActionItemsControl.RemoveAllMenuKeyBindings">
            <summary>
            Removes all key bindings from the current window that were associated with a view category menu
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewActionItemsControl.Model">
            <summary>
            Model used as the data context
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewActionItemsControl.OrderByGroupTitle">
            <summary>
            If set to true, actions are sorted by group title, before they are sorted by order
            </summary>
            <value><c>true</c> if [order by group title]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewActionItemsControl.EmptyGlobalCategoryTitle">
            <summary>
            Title for empty global category titles (default: File)
            </summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.ViewActionMenu">
            <summary>
            Special menu object that can be bound to a collection of view actions to automatically and dynamically populate the menu.
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.ViewActionMenu.ModelProperty">
            <summary>
            Model dependency property
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ViewActionMenu.ModelChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Change handler for model property
            </summary>
            <param name="d">The dependency object that triggered this change.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.ViewActionMenu.SelectedViewProperty">
            <summary>
            Selected view dependency property
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ViewActionMenu.SelectedViewChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Change handler for selected view property
            </summary>
            <param name="d">The dependency object that triggered this change.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.ViewActionMenu.ForceTopLevelMenuItemsUpperCaseProperty">
            <summary>
            If set to true, the top level menu items will be forced to be upper case
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ViewActionMenu.PopulateMenu(CODE.Framework.Wpf.Mvvm.IHaveActions,CODE.Framework.Wpf.Mvvm.IHaveActions)">
            <summary>
            Populates the current menu with items based on the actions collection
            </summary>
            <param name="actions">List of primary actions</param>
            <param name="actions2">List of view specific actions</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ViewActionMenu.PopulateSubCategories(System.Windows.Controls.MenuItem,CODE.Framework.Wpf.Mvvm.ViewActionCategory,System.Collections.Generic.IEnumerable{CODE.Framework.Wpf.Mvvm.IViewAction},System.Int32)">
            <summary>
            Adds sub-items for the specified menu item and category
            </summary>
            <param name="menuItem">Parent menu item</param>
            <param name="category">Category we are interested in</param>
            <param name="actions">Actions to consider</param>
            <param name="indentLevel">Current hierarchical indentation level</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ViewActionMenu.HandleMenuShortcutKey(System.Windows.Controls.MenuItem,CODE.Framework.Wpf.Mvvm.IViewAction)">
            <summary>
            Handles the assignment of shortcut keys
            </summary>
            <param name="menuItem">The menu item.</param>
            <param name="action">The category.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ViewActionMenu.CreateAllMenuKeyBindings">
            <summary>
            Removes all key bindings from the current window that were associated with a view category menu
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ViewActionMenu.RemoveAllMenuKeyBindings">
            <summary>
            Removes all key bindings from the current window that were associated with a view category menu
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ViewActionMenu.GetMenuTitle(CODE.Framework.Wpf.Mvvm.IViewAction)">
            <summary>
            Detirmines the display title of a menu item
            </summary>
            <param name="action">The category.</param>
            <returns>Title</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ViewActionMenu.GetMenuTitle(CODE.Framework.Wpf.Mvvm.ViewActionCategory)">
            <summary>
            Detirmines the display title of a menu item
            </summary>
            <param name="category">The category.</param>
            <returns>Title</returns>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewActionMenu.Model">
            <summary>
            Model used as the data context
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewActionMenu.SelectedView">
            <summary>
            Selected view used as the data context
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewActionMenu.ForceTopLevelMenuItemsUpperCase">
            <summary>
            If set to true, the top level menu items will be forced to be upper case
            </summary>
            <value><c>true</c> if [force top level menu items upper case]; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.TopLevelViewActionMenuItem">
            <summary>
            Class used for top level menu items (the ones that are usually going left to right at the top of the screen)
            </summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.ViewActionMenuItem">
            <summary>
            Standard menu item used by view category menus
            </summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.ViewActionMenuIcon">
            <summary>
            Icon placeholder for menu items in view category menus
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ViewActionMenuIcon.#ctor(System.Windows.Media.Brush)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Wpf.Mvvm.ViewActionMenuIcon"/> class.
            </summary>
            <param name="icon">The icon.</param>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.ViewActionMenuKeyBinding">
            <summary>
            Special key binding used by view category menus
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ViewActionMenuKeyBinding.#ctor(CODE.Framework.Wpf.Mvvm.IViewAction)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Wpf.Mvvm.ViewActionMenuKeyBinding"/> class.
            </summary>
            <param name="action">The category.</param>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.ViewActionMenuButton">
            <summary>
            Special button control that can be bound to view actions which are displayed in a drop-down menu style
            visual element (actual visualization depends on the theme).
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.ViewActionMenuButton.ActionsProperty">
            <summary>
            View actions to be displayed in the drop-down
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.ViewActionMenuButton.ModelProperty">
            <summary>
            Model the view actions collectoin is a member of
            </summary>
            <remarks>Used in combination with the ModelActionsBindingPath property.</remarks>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.ViewActionMenuButton.ModelActionsBindingPathProperty">
            <summary>
            Binding path to the view actions collection on the model
            </summary>
            <remarks>Used in combination with the Model property.</remarks>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.ViewActionMenuButton.AutoHideButtonWhenNoActionsAreAvailableProperty">
            <summary>
            Defines whether or not the whole button auto-hides when no bound view actions are available
            </summary>
            <value>True (default) or false</value>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ViewActionMenuButton.OnClick">
            <summary>
            Called when a <see cref="T:System.Windows.Controls.Button" /> is clicked.
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ViewActionMenuButton.GetMenuTitle(CODE.Framework.Wpf.Mvvm.IViewAction)">
            <summary>
            Detirmines the display title of a menu item
            </summary>
            <param name="action">The category.</param>
            <returns>Title</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ViewActionMenuButton.HandleMenuShortcutKey(System.Windows.Controls.MenuItem,CODE.Framework.Wpf.Mvvm.IViewAction)">
            <summary>
            Handles the assignment of shortcut keys
            </summary>
            <param name="menuItem">The menu item.</param>
            <param name="action">The category.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ViewActionMenuButton.CreateAllMenuKeyBindings">
            <summary>
            Removes all key bindings from the current window that were associated with a view category menu
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ViewActionMenuButton.GetViewActions">
            <summary>
            Returns a list of currently used view actions
            </summary>
            <returns>IEnumerable&lt;IViewAction&gt;.</returns>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewActionMenuButton.Actions">
            <summary>
            View actions to be displayed in the drop-down
            </summary>
            <value>The actions.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewActionMenuButton.Model">
            <summary>
            Model the view actions collectoin is a member of
            </summary>
            <value>The model.</value>
            <remarks>Used in combination with the ModelActionsBindingPath property.</remarks>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewActionMenuButton.ModelActionsBindingPath">
            <summary>
            Binding path to the view actions collection on the model
            </summary>
            <value>The model actions binding path.</value>
            <remarks>Used in combination with the Model property.</remarks>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewActionMenuButton.AutoHideButtonWhenNoActionsAreAvailable">
            <summary>
            Defines whether or not the whole button auto-hides when no bound view actions are available
            </summary>
            <value>True (default) or false</value>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.ViewActionRibbon">
            <summary>
            Special menu object that can be bound to a collection of view actions to automatically and dynamically populate the menu.
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ViewActionRibbon.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Wpf.Mvvm.ViewActionRibbon"/> class.
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.ViewActionRibbon.ReadyForStatusChange">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.ViewActionRibbon.KeyboardShortcutsActiveProperty">
            <summary>Indicates whether the user has pressed the ALT key and thus activated display of keyboard shortcuts</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ViewActionRibbon.GetKeyboardShortcutsActive(System.Windows.DependencyObject)">
            <summary>Indicates whether the user has pressed the ALT key and thus activated display of keyboard shortcuts</summary>
            <param name="obj">The obj.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ViewActionRibbon.SetKeyboardShortcutsActive(System.Windows.DependencyObject,System.Boolean)">
            <summary>Indicates whether the user has pressed the ALT key and thus activated display of keyboard shortcuts</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.ViewActionRibbon.FirstPageIsSpecialProperty">
            <summary>
            Indicates whether the first ribbon page is to be handled differently as a file menu
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.ViewActionRibbon.LastRegularIndex">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.ViewActionRibbon.EmptyGlobalCategoryTitleProperty">
            <summary>
            Title for empty global category titles (default: File)
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.ViewActionRibbon.EmptyLocalCategoryTitleProperty">
            <summary>
            Title for empty local category titles (default: File)
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.ViewActionRibbon.HighlightLocalCategoriesProperty">
            <summary>
            Indicates whether local categories (ribbon pages populated from local/individual view actions) shall use the special colors
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.ViewActionRibbon.IsSpecialFirstPageActiveProperty">
            <summary>
            Indicates whether the first special ribbon page is active
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ViewActionRibbon.IsSpecialFirstPageActiveChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Determines whether [is special first page active changed] [the specified dependency object].
            </summary>
            <param name="d">The dependency object.</param>
            <param name="args">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.ViewActionRibbon.SpecialFirstPageActivateEvent">
            <summary>
            Occurs when the special first page is activated
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.ViewActionRibbon.SpecialFirstPageDeactivateEvent">
            <summary>
            Occurs when the special first page is deactivated
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.ViewActionRibbon.ModelProperty">
            <summary>
            Model dependency property
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ViewActionRibbon.ModelChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Change handler for model property
            </summary>
            <param name="d">The dependency object that triggered this change.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.ViewActionRibbon.SelectedViewProperty">
            <summary>
            Selected view dependency property
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ViewActionRibbon.SelectedViewChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Change handler for selected view property
            </summary>
            <param name="d">The dependency object that triggered this change.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.ViewActionRibbon.ForceTopLevelTitlesUpperCaseProperty">
            <summary>
            If set to true, the top level menu items will be forced to be upper case
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.ViewActionRibbon.RibbonItemCommandProperty">
            <summary>
            Attached property used to reference the command/action on any custom ribbon item
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ViewActionRibbon.GetRibbonItemCommand(System.Windows.DependencyObject)">
            <summary>
            Attached property used to reference the command/action on any custom ribbon item
            </summary>
            <param name="d">The dependency object the item is set on</param>
            <returns>ICommand.</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ViewActionRibbon.SetRibbonItemCommand(System.Windows.DependencyObject,System.Windows.Input.ICommand)">
            <summary>
            Attached property used to reference the command/action on any custom ribbon item
            </summary>
            <param name="d">The dependency object the item is set on</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ViewActionRibbon.PopulateRibbon(CODE.Framework.Wpf.Mvvm.IHaveActions,CODE.Framework.Wpf.Mvvm.IHaveActions,System.String)">
            <summary>
            Populates the current ribbon with items based on the actions collection
            </summary>
            <param name="actions">List of primary actions</param>
            <param name="actions2">List of view specific actions</param>
            <param name="selectedViewTitle">The selected view title.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ViewActionRibbon.AfterTabCreated">
            <summary>
            Called after tabs are created. Can be overridden in subclasses.
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ViewActionRibbon.PopulateSubCategories(System.Windows.Controls.Panel,CODE.Framework.Wpf.Mvvm.ViewActionCategory,System.Collections.Generic.IEnumerable{CODE.Framework.Wpf.Mvvm.IViewAction},System.Int32,CODE.Framework.Wpf.Mvvm.RibbonPage,System.Windows.Data.MultiBinding)">
            <summary>
            Adds sub-items for the specified tab item and category
            </summary>
            <param name="parentPanel">Parent item container</param>
            <param name="category">Category we are interested in</param>
            <param name="actions">Actions to consider</param>
            <param name="indentLevel">Current hierarchical indentation level</param>
            <param name="ribbonPage">The ribbon page.</param>
            <param name="visibilityBinding">The visibility binding.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ViewActionRibbon.HandleRibbonShortcutKey(CODE.Framework.Wpf.Mvvm.RibbonButton,CODE.Framework.Wpf.Mvvm.IViewAction,CODE.Framework.Wpf.Mvvm.RibbonPage)">
            <summary>
            Handles the assignment of shortcut keys
            </summary>
            <param name="button">The button.</param>
            <param name="action">The category.</param>
            <param name="ribbonPage">The ribbon page.</param>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.ViewActionRibbon.MenuKeyBindings">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ViewActionRibbon.CreateAllMenuKeyBindings">
            <summary>
            Removes all key bindings from the current window that were associated with a view category menu
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ViewActionRibbon.RemoveAllMenuKeyBindings">
            <summary>
            Removes all key bindings from the current window that were associated with a view category menu
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ViewActionRibbon.CreateMenuItemBinding(CODE.Framework.Wpf.Mvvm.IViewAction,System.Windows.FrameworkElement)">
            <summary>
            Creates the menu item binding.
            </summary>
            <param name="action">The action.</param>
            <param name="ribbonButton">The ribbon button.</param>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewActionRibbon.FirstPageIsSpecial">
            <summary>
            Indicates whether the first ribbon page is to be handled differently as a file menu
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewActionRibbon.EmptyGlobalCategoryTitle">
            <summary>
            Title for empty global category titles (default: File)
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewActionRibbon.EmptyLocalCategoryTitle">
            <summary>
            Title for empty local category titles (default: File)
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewActionRibbon.HighlightLocalCategories">
            <summary>
            Indicates whether local categories (ribbon pages populated from local/individual view actions) shall use the special colors
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewActionRibbon.IsSpecialFirstPageActive">
            <summary>
            Indicates whether the first special ribbon page is active
            </summary>
        </member>
        <member name="E:CODE.Framework.Wpf.Mvvm.ViewActionRibbon.SpecialFirstPageActivate">
            <summary>
            Occurs when the special first page is activated
            </summary>
        </member>
        <member name="E:CODE.Framework.Wpf.Mvvm.ViewActionRibbon.SpecialFirstPageDeactivate">
            <summary>
            Occurs when the special first page is activated
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewActionRibbon.Model">
            <summary>
            Model used as the data context
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewActionRibbon.SelectedView">
            <summary>
            Selected view used as the data context
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewActionRibbon.ForceTopLevelTitlesUpperCase">
            <summary>
            If set to true, the top level menu items will be forced to be upper case
            </summary>
            <value><c>true</c> if [force top level menu items upper case]; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.RibbonPage">
            <summary>
            Ribbon page
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.RibbonPage.PageAccessKeyProperty">
            <summary>Access key to be displayed for the page</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.RibbonPage.OnPageAccessKeyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>Fires when the page access key changes</summary>
            <param name="d">The dependency object.</param>
            <param name="args">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.RibbonPage.PageAccessKeySetProperty">
            <summary>Indicates whether a page access key has been set</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.RibbonPage.PageAccessKey">
            <summary>Access key to be displayed for the page</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.RibbonPage.PageAccessKeySet">
            <summary>Indicates whether a page access key has been set</summary>
            <value><c>true</c> if [page access key set]; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.RibbonFirstPage">
            <summary>
            Special page class for the first page in a ribbon
            </summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.RibbonSpecialPage">
            <summary>
            Special page class for special pages in a ribbon
            </summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.RibbonButton">
            <summary>
            Default ribbon button
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.RibbonButton.IconProperty">
            <summary>
            Button Icon
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.RibbonButton.AccessKeyProperty">
            <summary>Access key to be displayed for the button</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.RibbonButton.OnAccessKeyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>Fires when the access key changes</summary>
            <param name="d">The dependency object.</param>
            <param name="args">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.RibbonButton.AccessKeySetProperty">
            <summary>Indicates whether a page access key has been set</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.RibbonButton.IsCheckedProperty">
            <summary>Indicates whether the button is to be rendered as "checked" (often used in Toggle-style actions)</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.RibbonButton.Icon">
            <summary>
            Button Icon
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.RibbonButton.AccessKey">
            <summary>Access key to be displayed for the button</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.RibbonButton.AccessKeySet">
            <summary>Indicates whether a access key has been set</summary>
            <value><c>true</c> if [access key set]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.RibbonButton.IsChecked">
            <summary>Indicates whether the button is to be rendered as "checked" (often used in Toggle-style actions)</summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.RibbonButtonLarge">
            <summary>
            Large button element used in ribbons
            </summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.RibbonButtonSmall">
            <summary>
            Small button element used in ribbons
            </summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.RibbonSeparator">
            <summary>
            Separator element used in ribbons
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.RibbonSeparator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Wpf.Mvvm.RibbonSeparator"/> class.
            </summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.RibbonPageLayoutPanel">
            <summary>
            This panel is used to lay out items within a ribbon page
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.RibbonPageLayoutPanel.GroupTitleFontSizeProperty">
            <summary>Font Size used to render group titles</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.RibbonPageLayoutPanel.GroupTitleFontFamilyProperty">
            <summary>Font family used to render group titles</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.RibbonPageLayoutPanel.GroupTitleFontWeightProperty">
            <summary>Font weight used to render group titles</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.RibbonPageLayoutPanel.GroupTitleForegroundBrushProperty">
            <summary>Foreground brush used to render group titles</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.RibbonPageLayoutPanel.GroupTitleForegroundBrushOpacityProperty">
            <summary>Foreground brush opacity used to render group titles</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.RibbonPageLayoutPanel.MeasureOverride(System.Windows.Size)">
            <summary>
            When overridden in a derived class, measures the size in layout required for child elements and determines a size for the <see cref="T:System.Windows.FrameworkElement" />-derived class.
            </summary>
            <param name="availableSize">The available size that this element can give to child elements. Infinity can be specified as a value to indicate that the element will size to whatever content is available.</param>
            <returns>The size that this element determines it needs during layout, based on its calculations of child element sizes.</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.RibbonPageLayoutPanel.ArrangeOverride(System.Windows.Size)">
            <summary>
            When overridden in a derived class, positions child elements and determines a size for a <see cref="T:System.Windows.FrameworkElement" /> derived class.
            </summary>
            <param name="finalSize">The final area within the parent that this element should use to arrange itself and its children.</param>
            <returns>The actual size used.</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.RibbonPageLayoutPanel.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
            Draws the content of a <see cref="T:System.Windows.Media.DrawingContext" /> object during the render pass of a <see cref="T:System.Windows.Controls.Panel" /> element.
            </summary>
            <param name="dc">The <see cref="T:System.Windows.Media.DrawingContext" /> object to draw.</param>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.RibbonPageLayoutPanel.GroupTitleFontSize">
            <summary>Font Size used to render group titles</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.RibbonPageLayoutPanel.GroupTitleFontFamily">
            <summary>Font family used to render group titles</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.RibbonPageLayoutPanel.GroupTitleFontWeight">
            <summary>Font weight used to render group titles</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.RibbonPageLayoutPanel.GroupTitleForegroundBrush">
            <summary>Foreground brush used to render group titles</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.RibbonPageLayoutPanel.GroupTitleForegroundBrushOpacity">
            <summary>Foreground brush opacity used to render group titles</summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.RibbonPageLayoutPanel.GroupTitleRenderInfo">
            <summary>
            Class GroupTitleRenderInfo
            </summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.CloseSpecialRibbonUiButton">
            <summary>
            Special button used to close the special ribbon UI
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.CloseSpecialRibbonUiButton.RibbonProperty">
            <summary>
            Reference to the ribbon control
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.CloseSpecialRibbonUiButton.OnClick">
            <summary>
            Called when a <see cref="T:System.Windows.Controls.Button" /> is clicked.
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.CloseSpecialRibbonUiButton.Ribbon">
            <summary>
            Reference to the ribbon control
            </summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.SpecialFirstPageActionList">
            <summary>
            List of action items for first page controls
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.SpecialFirstPageActionList.ArrangeOverride(System.Windows.Size)">
            <summary>
            When overridden in a derived class, positions child elements and determines a size for a <see cref="T:System.Windows.FrameworkElement" /> derived class.
            </summary>
            <param name="finalSize">The final area within the parent that this element should use to arrange itself and its children.</param>
            <returns>The actual size used.</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.SpecialFirstPageActionList.MeasureOverride(System.Windows.Size)">
            <summary>
            When overridden in a derived class, measures the size in layout required for child elements and determines a size for the <see cref="T:System.Windows.FrameworkElement" />-derived class.
            </summary>
            <param name="availableSize">The available size that this element can give to child elements. Infinity can be specified as a value to indicate that the element will size to whatever content is available.</param>
            <returns>The size that this element determines it needs during layout, based on its calculations of child element sizes.</returns>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.SpecialFirstPageActionList.ModelProperty">
            <summary>
            Model dependency property
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.SpecialFirstPageActionList.ModelChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Change handler for model property
            </summary>
            <param name="d">The dependency object that triggered this change.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.SpecialFirstPageActionList.SelectedViewProperty">
            <summary>
            Selected view dependency property
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.SpecialFirstPageActionList.SelectedViewChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Change handler for selected view property
            </summary>
            <param name="d">The dependency object that triggered this change.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.SpecialFirstPageActionList.PopulateList(CODE.Framework.Wpf.Mvvm.IHaveActions,CODE.Framework.Wpf.Mvvm.IHaveActions,System.String)">
            <summary>
            Populates the current list with items based on the actions collection
            </summary>
            <param name="actions">List of primary actions</param>
            <param name="actions2">List of view specific actions</param>
            <param name="selectedViewTitle">The selected view title.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.SpecialFirstPageActionList.CreateMenuItemBinding(CODE.Framework.Wpf.Mvvm.IViewAction,System.Windows.FrameworkElement)">
            <summary>
            Creates the menu item binding.
            </summary>
            <param name="action">The action.</param>
            <param name="ribbonButton">The ribbon button.</param>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.SpecialFirstPageActionList.Model">
            <summary>
            Model used as the data context
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.SpecialFirstPageActionList.SelectedView">
            <summary>
            Selected view used as the data context
            </summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.AvailabilityToVisibleConverter">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.AvailabilityToVisibleConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>A converted value. If the method returns null, the valid null value is used.</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.AvailabilityToVisibleConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>A converted value. If the method returns null, the valid null value is used.</returns>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.MaximumVisibilityMultiConverter">
            <summary>
            Looks at multiple Visibility values and returns the highest visibility level
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.MaximumVisibilityMultiConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts source values to a value for the binding target. The data binding engine calls this method when it propagates the values from source bindings to the binding target.
            </summary>
            <param name="values">The array of values that the source bindings in the <see cref="T:System.Windows.Data.MultiBinding" /> produces. The value <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> indicates that the source binding has no value to provide for conversion.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>A converted value.If the method returns null, the valid null value is used.A return value of <see cref="T:System.Windows.DependencyProperty" />.<see cref="F:System.Windows.DependencyProperty.UnsetValue" /> indicates that the converter did not produce a value, and that the binding will use the <see cref="P:System.Windows.Data.BindingBase.FallbackValue" /> if it is available, or else will use the default value.A return value of <see cref="T:System.Windows.Data.Binding" />.<see cref="F:System.Windows.Data.Binding.DoNothing" /> indicates that the binding does not transfer the value or use the <see cref="P:System.Windows.Data.BindingBase.FallbackValue" /> or the default value.</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.MaximumVisibilityMultiConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a binding target value to the source binding values.
            </summary>
            <param name="value">The value that the binding target produces.</param>
            <param name="targetTypes">The array of types to convert to. The array length indicates the number and types of values that are suggested for the method to return.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>An array of values that have been converted from the target value back to the source values.</returns>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.MinimumVisibilityMultiConverter">
            <summary>
            Looks at multiple Visibility values and returns the lowest visibility level
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.MinimumVisibilityMultiConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts source values to a value for the binding target. The data binding engine calls this method when it propagates the values from source bindings to the binding target.
            </summary>
            <param name="values">The array of values that the source bindings in the <see cref="T:System.Windows.Data.MultiBinding" /> produces. The value <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> indicates that the source binding has no value to provide for conversion.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>A converted value.If the method returns null, the valid null value is used.A return value of <see cref="T:System.Windows.DependencyProperty" />.<see cref="F:System.Windows.DependencyProperty.UnsetValue" /> indicates that the converter did not produce a value, and that the binding will use the <see cref="P:System.Windows.Data.BindingBase.FallbackValue" /> if it is available, or else will use the default value.A return value of <see cref="T:System.Windows.Data.Binding" />.<see cref="F:System.Windows.Data.Binding.DoNothing" /> indicates that the binding does not transfer the value or use the <see cref="P:System.Windows.Data.BindingBase.FallbackValue" /> or the default value.</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.MinimumVisibilityMultiConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a binding target value to the source binding values.
            </summary>
            <param name="value">The value that the binding target produces.</param>
            <param name="targetTypes">The array of types to convert to. The array length indicates the number and types of values that are suggested for the method to return.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>An array of values that have been converted from the target value back to the source values.</returns>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.ChildrenCollectionCountToVisibleConverter">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ChildrenCollectionCountToVisibleConverter.#ctor(System.Windows.Controls.UIElementCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Wpf.Mvvm.ChildrenCollectionCountToVisibleConverter"/> class.
            </summary>
            <param name="children">The children.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ChildrenCollectionCountToVisibleConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>A converted value. If the method returns null, the valid null value is used.</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ChildrenCollectionCountToVisibleConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>A converted value. If the method returns null, the valid null value is used.</returns>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.SpecialFirstPageRibbonButton">
            <summary>
            Special button class for the first page in the ribbon
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.SpecialFirstPageRibbonButton.AccessKeyProperty">
            <summary>Access key to be displayed for the button</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.SpecialFirstPageRibbonButton.OnAccessKeyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>Fires when the access key changes</summary>
            <param name="d">The dependency object.</param>
            <param name="args">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.SpecialFirstPageRibbonButton.AccessKeySetProperty">
            <summary>Indicates whether a page access key has been set</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.SpecialFirstPageRibbonButton.AccessKey">
            <summary>Access key to be displayed for the button</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.SpecialFirstPageRibbonButton.AccessKeySet">
            <summary>Indicates whether a access key has been set</summary>
            <value><c>true</c> if [access key set]; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.ViewActionStackPanel">
            <summary>
            Stack panel populated with view actions
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.ViewActionStackPanel.ModelProperty">
            <summary>
            Model dependency property
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ViewActionStackPanel.ModelChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Change handler for model property
            </summary>
            <param name="d">The dependency object that triggered this change.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.ViewActionStackPanel.SelectedViewProperty">
            <summary>
            Selected view dependency property
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ViewActionStackPanel.SelectedViewChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Change handler for selected view property
            </summary>
            <param name="d">The dependency object that triggered this change.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.ViewActionStackPanel.ActionFilterProperty">
            <summary>
            Defines which view actions are to be displayed in this stack panel
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ViewActionStackPanel.OnActionFilterChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Fires when the action filter changes
            </summary>
            <param name="d">The object the filter was changed on</param>
            <param name="args">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ViewActionStackPanel.PopulateStack">
            <summary>
            Populates the current ribbon with items based on the actions collection
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewActionStackPanel.Model">
            <summary>
            Model used as the data context
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewActionStackPanel.SelectedView">
            <summary>
            Selected view used as the data context
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewActionStackPanel.ActionFilter">
            <summary>
            Defines which view actions are to be displayed in this stack panel
            </summary>
            <value>The action filter.</value>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.ViewActionStackPanelButton">
            <summary>
            Button class used by the ViewActionStackPanel class
            </summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.ViewActionStackPanelActionFilter">
            <summary>
            Defines which view actions to show in a view action stack panel
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.ViewActionStackPanelActionFilter.ShowAll">
            <summary>
            Shows all available and visible view actions
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.ViewActionStackPanelActionFilter.ShowPinned">
            <summary>
            Shows view actions that are available, visible, and pinned
            </summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.ViewActionTabPanel">
            <summary>
            Tab Panel class that can show both current tab elements as well as view actions
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.ViewActionTabPanel.ActionsProperty">
            <summary>
            Model object (should implement IHaveActions)
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ViewActionTabPanel.OnActionsChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Fires when the actions property changes
            </summary>
            <param name="d">Source</param>
            <param name="args">Arguments</param>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.ViewActionTabPanel.ParentTabControlProperty">
            <summary>
            Tab control from which the items collection is populated
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ViewActionTabPanel.OnParentTabControlChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Fires when the parent tab control changes
            </summary>
            <param name="d">Source</param>
            <param name="args">Arguments</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ViewActionTabPanel.RepopulateItems">
            <summary>
            Populates the children from a combination of actions and tab items
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewActionTabPanel.Actions">
            <summary>
            Model object (should implement IHaveActions)
            </summary>
            <value>The actions.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewActionTabPanel.ParentTabControl">
            <summary>
            Tab control from which the items collection is populated
            </summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.ViewActionToolbar">
            <summary>
            Abstract toolbar class designed for automatic binding to view actions
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ViewActionToolbar.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Wpf.Mvvm.ViewActionToolbar"/> class.
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.ViewActionToolbar.ModelProperty">
            <summary>
            Model dependency property
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ViewActionToolbar.ModelChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Change handler for model property
            </summary>
            <param name="d">The dependency object that triggered this change.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.ViewActionToolbar.SelectedViewProperty">
            <summary>
            Selected view dependency property
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ViewActionToolbar.SelectedViewChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Change handler for selected view property
            </summary>
            <param name="d">The dependency object that triggered this change.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.ViewActionToolbar.RootViewActionDisplayModeProperty">
            <summary>
            Defines which root view actions should be displayed
            </summary>
            <value>The view action display mode</value>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.ViewActionToolbar.LocalViewActionDisplayModeProperty">
            <summary>
            Defines which local view view actions should be displayed
            </summary>
            <value>The view action display mode</value>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ViewActionToolbar.PopulateToolbar(CODE.Framework.Wpf.Mvvm.IHaveActions,CODE.Framework.Wpf.Mvvm.IHaveActions)">
            <summary>
            Populates the current menu with items based on the actions collection
            </summary>
            <param name="actions">List of primary actions</param>
            <param name="actions2">List of view specific actions</param>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewActionToolbar.Model">
            <summary>
            Model used as the data context
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewActionToolbar.SelectedView">
            <summary>
            Selected view used as the data context
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewActionToolbar.RootViewActionDisplayMode">
            <summary>
            Defines which root view actions should be displayed
            </summary>
            <value>The view action display mode</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewActionToolbar.LocalViewActionDisplayMode">
            <summary>
            Defines which local view view actions should be displayed
            </summary>
            <value>The view action display mode</value>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.ViewActionToolbarButton">
            <summary>
            Button class used for view action toolbars
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ViewActionToolbarButton.#ctor(CODE.Framework.Wpf.Mvvm.IViewAction)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Wpf.Mvvm.ViewActionToolbarButton"/> class.
            </summary>
            <param name="action">The action associated with this toolbar button.</param>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.ViewActionToolbarButton.ActionProperty">
            <summary>
            View action asociated with this button
            </summary>
            <value>The action.</value>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.ViewActionToolbarButton.TitleDisplayFilterProperty">
            <summary>
            Indicates what level of view action titles (text) should be displayed for.
            Note that text is always displayed if no icon is available.
            </summary>
            <value>The title display filter.</value>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.ViewActionToolbarButton.HasIconProperty">
            <summary>
            Indicates whether this button has an icon
            </summary>
            <value><c>true</c> if this instance has icon; otherwise, <c>false</c>.</value>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.ViewActionToolbarButton.HasTitleProperty">
            <summary>
            Indicates whether the button has a title that should be displayed
            </summary>
            <value><c>true</c> if this instance has title; otherwise, <c>false</c>.</value>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.ViewActionToolbarButton.TitleProperty">
            <summary>
            Title of the button
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewActionToolbarButton.Action">
            <summary>
            View action asociated with this button
            </summary>
            <value>The action.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewActionToolbarButton.TitleDisplayFilter">
            <summary>
            Indicates what level of view action titles (text) should be displayed for.
            Note that text is always displayed if no icon is available.
            </summary>
            <value>The title display filter.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewActionToolbarButton.HasIcon">
            <summary>
            Indicates whether this button has an icon
            </summary>
            <value><c>true</c> if this instance has icon; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewActionToolbarButton.HasTitle">
            <summary>
            Indicates whether the button has a title that should be displayed
            </summary>
            <value><c>true</c> if this instance has title; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewActionToolbarButton.Title">
            <summary>
            Title of the button
            </summary>
            <value>The title.</value>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.ViewActionToolbarSeparator">
            <summary>
            Separator class used for view action separators
            </summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.ViewContentControl">
            <summary>Content presenter specific to hosting views</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ViewContentControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Wpf.Mvvm.ViewContentControl"/> class.
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.ViewContentControl.ViewContentProperty">
            <summary>Custom view content property used to host a view</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ViewContentControl.ViewContentPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>Handler for view content changes</summary>
            <param name="d">Source object</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.ViewContentControl.SizeStrategyHostProperty">
            <summary>Attached property to set the view's host object that is size strategy aware</summary>
            <remarks>This attached property can be attached to any UI Element to define a view size strategy aware object </remarks>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ViewContentControl.SizeStrategyHostPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>Handler for view content changes</summary>
            <param name="d">Source object</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ViewContentControl.SetSizeStrategyOnHost(System.Windows.DependencyObject,CODE.Framework.Wpf.Mvvm.ViewContentControl)">
            <summary>Sets the size strategy on host.</summary>
            <param name="view">The view.</param>
            <param name="viewContent">Content of the view.</param>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewContentControl.ViewContent">
            <summary>Custom view content property used to host a view</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewContentControl.SizeStrategyHost">
            <summary>Attached property to set the view's host object that is size strategy aware</summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.SizeStrategyAwareGrid">
            <summary>Grid class that is aware of size strategies</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.SizeStrategyAwareGrid.SizeStrategyProperty">
            <summary>Defines the size strategy employed by this grid</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.SizeStrategyAwareGrid.SizeStrategy">
            <summary>Defines the size strategy employed by this grid</summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.IViewEngine">
            <summary>
            Interface suppoted by all document engines
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.IViewEngine.GetView(System.String,System.String)">
            <summary>
            Finds and instantiates the specified document 
            </summary>
            <param name="viewName">Name of the document to find</param>
            <param name="controllerName">Name of the controller that requested the document</param>
            <returns>Document result indicating the success of the operation</returns>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.IDocumentEngine">
            <summary>
            Interface supported by all document-capable document engines
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.IDocumentEngine.GetDocument(System.String,System.String)">
            <summary>
            Finds and instantiates the specified document (document)
            </summary>
            <param name="documentName">Name of the document to find</param>
            <param name="controllerName">Name of the controller that requested the document</param>
            <returns>Document result indicating the success of the operation</returns>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.IThemableViewEngine">
            <summary>
            Interface based on IViewEngine that also supports themeing of document (re-theming on the fly)
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.IThemableViewEngine.ChangeViewTheme(System.Windows.FrameworkElement,System.String,System.String)">
            <summary>Changes the theme of the provided document from the old theme name to the new theme name</summary>
            <param name="view">The document.</param>
            <param name="newTheme">The new theme.</param>
            <param name="oldTheme">The old theme.</param>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.ViewEngineResult">
            <summary>
            Object indicating the result of an attempt to find a document
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ViewEngineResult.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewEngineResult.FoundView">
            <summary>
            Indicates whether the document was found
            </summary>
            <remarks>
            If true, Document and DocumentSource will be populated. Otherwise, LocationsSearched will be populated
            </remarks>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewEngineResult.View">
            <summary>
            Actual document object
            </summary>
            <remarks>
            Only available of FoundDocument = true
            </remarks>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewEngineResult.ViewSource">
            <summary>
            Original source of the document (for information purposes)
            </summary>
            <remarks>
            Only available of FoundDocument = true
            </remarks>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewEngineResult.LocationsSearched">
            <summary>
            List of locations unsuccessfully searched
            </summary>
            <remarks>
            Only available of FoundDocument = false
            </remarks>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.DocumentEngineResult">
            <summary>
            Object indicating the result of an attempt to find a document (document)
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.DocumentEngineResult.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.DocumentEngineResult.FoundDocument">
            <summary>
            Indicates whether the document was found
            </summary>
            <remarks>
            If true, Document and DocumentSource will be populated. Otherwise, LocationsSearched will be populated
            </remarks>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.DocumentEngineResult.Document">
            <summary>
            Actual document object
            </summary>
            <remarks>
            Only available of FoundDocument = true
            </remarks>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.DocumentEngineResult.DocumentSource">
            <summary>
            Original source of the document (for information purposes)
            </summary>
            <remarks>
            Only available of FoundDocument = true
            </remarks>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.DocumentEngineResult.LocationsSearched">
            <summary>
            List of locations unsuccessfully searched
            </summary>
            <remarks>
            Only available of FoundDocument = false
            </remarks>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.CompiledXamlViewEngine">
            <summary>
            This document engine searches namespaces for matching views
            </summary>
            <remarks>
            For this engine to return a valid document, any of the application's assemblies
            must have a document (class) of the desired name (case-insensitive!) in a namespace that 
            ends in "Views.[controller]" or "Views.Shared"
            </remarks>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.CompiledXamlViewEngine.GetView(System.String,System.String)">
            <summary>
            Finds and instantiates the specified document
            </summary>
            <param name="viewName">Name of the document to find</param>
            <param name="controllerName">Name of the controller that requested the document</param>
            <returns>
            Document result indicating the success of the operation
            </returns>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.LooseXamlViewEngine">
            <summary>
            This document engine searches an application's resources for matching views programmed as XAML pages.
            </summary>
            <remarks>
            For this engine to return a valid document, any of the application's assemblies
            must have a document (loose XAML) of the desired name (case-insensitive!) in a namespace that 
            ends in "Views.[controller]" or "Views.Shared"
            </remarks>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.LooseXamlViewEngine.GetView(System.String,System.String)">
            <summary>
            Finds and instantiates the specified document
            </summary>
            <param name="viewName">Name of the document to find</param>
            <param name="controllerName">Name of the controller that requested the document</param>
            <returns>
            Document result indicating the success of the operation
            </returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.LooseXamlViewEngine.ChangeViewTheme(System.Windows.FrameworkElement,System.String,System.String)">
            <summary>Changes the theme of the provided document from the old theme name to the new theme name</summary>
            <param name="view">The document.</param>
            <param name="newTheme">The new theme.</param>
            <param name="oldTheme">The old theme.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.LooseXamlViewEngine.TryGetView(System.String)">
            <summary>
            Tries the get the document.
            </summary>
            <param name="searchPath">The search path.</param>
            <returns>ViewEngineResult.</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.LooseXamlViewEngine.TryAttachingLayoutResources(System.Windows.FrameworkElement,System.String)">
            <summary>
            Attempts to load additional layout resource dictionaries if present.
            </summary>
            <param name="view">Document to attach these layouts to</param>
            <param name="searchPath">Search path to look in</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.LooseXamlViewEngine.TryAttachingDocumentLayoutResources(System.Windows.FrameworkContentElement,System.String)">
            <summary>
            Attempts to load additional layout resource dictionaries if present.
            </summary>
            <param name="document">Document to attach these layouts to</param>
            <param name="searchPath">Search path to look in</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.LooseXamlViewEngine.ApplyResource(System.Windows.FrameworkElement,System.String)">
            <summary>
            Attempts to apply a resource to a framework element
            </summary>
            <param name="view"></param>
            <param name="searchPath"></param>
            <returns></returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.LooseXamlViewEngine.ApplyDocumentResource(System.Windows.FrameworkContentElement,System.String)">
            <summary>
            Attempts to apply a resource to a framework element
            </summary>
            <param name="document">The document.</param>
            <param name="searchPath">The search path.</param>
            <remarks>This method searches for the specified resource dictionary and keeps searching for additional files of the same name with a numberd sequence</remarks>
            <returns>True or false</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.LooseXamlViewEngine.GetDocument(System.String,System.String)">
            <summary>
            Finds and instantiates the specified document (document)
            </summary>
            <param name="documentName">Name of the document to find</param>
            <param name="controllerName">Name of the controller that requested the document</param>
            <returns>Document result indicating the success of the operation</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.LooseXamlViewEngine.TryGetDocument(System.String)">
            <summary>
            Tries the get the document.
            </summary>
            <param name="searchPath">The search path.</param>
            <returns>ViewEngineResult.</returns>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.StandardViewEngine">
            <summary>
            This document engine can serve up standard views for the current theme
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.StandardViewEngine.GetView(System.String,System.String)">
            <summary>Finds and instantiates the specified document</summary>
            <param name="viewName">Name of the document to find</param>
            <param name="controllerName">Name of the controller that requested the document</param>
            <returns>Document result indicating the success of the operation</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.StandardViewEngine.ChangeViewTheme(System.Windows.FrameworkElement,System.String,System.String)">
            <summary>Changes the theme of the provided document from the old theme name to the new theme name</summary>
            <param name="view">The document.</param>
            <param name="newTheme">The new theme.</param>
            <param name="oldTheme">The old theme.</param>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.StandardViewGrid">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.StandardViewGrid.ViewName">
            <summary>
            Document name
            </summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.ViewHostTabControl">
            <summary>
            Special tab control used to host views (typically normal views in the shell)
            </summary>
            <remarks>Designed for internal use only</remarks>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ViewHostTabControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Wpf.Mvvm.ViewHostTabControl"/> class.
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.ViewHostTabControl.NextViewSelectedEvent">
            <summary>
            Fires when the next view is selected (either a new view, or a view with a higher index than the previously selected one)
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ViewHostTabControl.RaiseNextViewSelected">
            <summary>
            Raises the next view selected event.
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.ViewHostTabControl.PreviousViewSelectedEvent">
            <summary>
            Fires when the previous view is selected (a view with a lower index than the previously selected one)
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.ViewHostTabControl.RaisePreviousViewSelected">
            <summary>
            Raises the previous view selected event.
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.ViewHostTabControl.ShowHeadersProperty">
            <summary>Defines whether tab headers shall be displayed</summary>
            <remarks>It is up to each theme to respect this property</remarks>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.ViewHostTabControl.MainModelProperty">
            <summary>Main model (typically the start view model)</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.ViewHostTabControl.ContentZoomProperty">
            <summary>
            Desired zoom for the content within the tab control
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.ViewHostTabControl.HasVisibleItemsProperty">
            <summary>
            Indicates whether the control has visible items
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.ViewHostTabControl.HasVisibleLocalViewsProperty">
            <summary>
            Indicates whether local child views are visible
            </summary>
        </member>
        <member name="E:CODE.Framework.Wpf.Mvvm.ViewHostTabControl.NextViewSelected">
            <summary>
            Fires when the next view is selected (either a new view, or a view with a higher index than the previously selected one)
            </summary>
        </member>
        <member name="E:CODE.Framework.Wpf.Mvvm.ViewHostTabControl.PreviousViewSelected">
            <summary>
            Fires when the previous view is selected (a view with a lower index than the previously selected one)
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewHostTabControl.ShowHeaders">
            <summary>Defines whether tab headers shall be displayed</summary>
            <remarks>It is up to each theme to respect this property</remarks>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewHostTabControl.MainModel">
            <summary>Main model (typically the start view model)</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewHostTabControl.ContentZoom">
            <summary>
            Desired zoom for the content within the tab control
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewHostTabControl.HasVisibleItems">
            <summary>
            Indicates whether the control has visible items
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.ViewHostTabControl.HasVisibleLocalViews">
            <summary>
            Indicates whether local child views are visible
            </summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Mvvm.TopLevelViewHostTabControl">
            <summary>
            Special tab control class for top-level views
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.TopLevelViewHostTabControl.NormalViewHostProperty">
            <summary>Link to a normal view host, which can potentially be disabled whenever top level views are active</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.TopLevelViewHostTabControl.DisableNormalViewHostWhenTopLevelIsActiveProperty">
            <summary>Defines whether normal views should be disabled when top level views are active</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.TopLevelViewHostTabControl.GetInputBindingsSet(System.Windows.DependencyObject)">
            <summary>InputBindingsSet</summary>
            <param name="obj">Object to get value from</param>
            <returns>True/False</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.TopLevelViewHostTabControl.SetInputBindingsSet(System.Windows.DependencyObject,System.Boolean)">
            <summary>InputBindingsSet</summary>
            <param name="obj">Object to set the value on</param>
            <param name="value">Value to set</param>
        </member>
        <member name="F:CODE.Framework.Wpf.Mvvm.TopLevelViewHostTabControl.InputBindingsSetProperty">
            <summary>Indicates whether input bindings have been set on a certain control of interest</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.TopLevelViewHostTabControl.OnItemsChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>Called to update the current selection when items change.</summary>
            <param name="e">The event data for the System.Windows.Controls.ItemContainerGenerator.ItemsChanged event</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Mvvm.TopLevelViewHostTabControl.OnSelectionChanged(System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>Raises the System.Windows.Controls.Primitives.Selector.SelectionChanged routed event</summary>
            <param name="e">Provides data for System.Windows.Controls.SelectionChangedEventArgs.</param>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.TopLevelViewHostTabControl.NormalViewHost">
            <summary>Link to a normal view host, which can potentially be disabled whenever top level views are active</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Mvvm.TopLevelViewHostTabControl.DisableNormalViewHostWhenTopLevelIsActive">
            <summary>Defines whether normal views should be disabled when top level views are active</summary>
        </member>
    </members>
</doc>
