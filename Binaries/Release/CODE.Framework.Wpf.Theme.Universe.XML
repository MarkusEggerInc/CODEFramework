<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CODE.Framework.Wpf.Theme.Universe</name>
    </assembly>
    <members>
        <member name="T:CODE.Framework.Wpf.Theme.Universe.Classes.PointingDeviceInputModeToMarginConverter">
            <summary>
            Converts the pointing mode to a margin
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Theme.Universe.Classes.PointingDeviceInputModeToMarginConverter.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Theme.Universe.Classes.PointingDeviceInputModeToMarginConverter.MouseMargin">
            <summary>
            Margin to be used when the mode is set to Mouse
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Theme.Universe.Classes.PointingDeviceInputModeToMarginConverter.TouchMargin">
            <summary>
            Margin to be used when the mode is set to Touch
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Theme.Universe.Classes.PointingDeviceInputModeToMarginConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts the value to a margin
            </summary>
            <param name="value">Value</param>
            <param name="targetType">Target Type</param>
            <param name="parameter">Parameter</param>
            <param name="culture">Culture</param>
            <returns>Margin</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Theme.Universe.Classes.PointingDeviceInputModeToMarginConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts the value back 
            </summary>
            <param name="value">Value</param>
            <param name="targetType">Target type</param>
            <param name="parameter">Parameter</param>
            <param name="culture">Culture</param>
            <returns>Unchanged value</returns>
        </member>
        <member name="T:CODE.Framework.Wpf.Theme.Universe.Classes.UniverseStandardFeatures">
            <summary>
            Standard features supported by the Workplace theme
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Theme.Universe.Classes.UniverseStandardFeatures.StandardViewFactory">
            <summary>Reference to the standard view factory (if supported)</summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Theme.Universe.Classes.UniverseStandardViewFactory">
            <summary>Factory to create standard views supported by Workplace</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Theme.Universe.Classes.UniverseStandardViewFactory.GetStandardView(System.String)">
            <summary>Returns a standard view based on the view name as a string</summary>
            <param name="viewName">Standard view name</param>
            <returns>Standard view or null</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Theme.Universe.Classes.UniverseStandardViewFactory.GetStandardView(CODE.Framework.Wpf.Mvvm.StandardViews)">
            <summary>
            Returns a standard view based on the standard view enumeration
            </summary>
            <param name="standardView">Standard view identifier</param>
            <returns>Standard view or null</returns>
        </member>
        <member name="T:CODE.Framework.Wpf.Theme.Universe.Controls.CircularProgressAnimation">
            <summary>Simple rendering mechanism to render a standard Newsroom loading animation (circular)</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Theme.Universe.Controls.CircularProgressAnimation.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Theme.Universe.Controls.CircularProgressAnimation.DotCount">
            <summary>Defines the number of actual dots in the animation</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Theme.Universe.Controls.CircularProgressAnimation.DotCountProperty">
            <summary>Defines the number of actual dots in the animation</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Theme.Universe.Controls.CircularProgressAnimation.DotDiameter">
            <summary>Defines the diameter of each dot within the animation</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Theme.Universe.Controls.CircularProgressAnimation.DotDiameterProperty">
            <summary>Defines the diameter of each dot within the animation</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Theme.Universe.Controls.CircularProgressAnimation.DotBrush">
            <summary>Brush used to draw each dot</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Theme.Universe.Controls.CircularProgressAnimation.DotBrushProperty">
            <summary>Brush used to draw each dot</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Theme.Universe.Controls.CircularProgressAnimation.DotSpaceFactor">
            <summary>Determines the spacing of the individual dots (1 = neutral)</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Theme.Universe.Controls.CircularProgressAnimation.DotSpaceFactorProperty">
            <summary>Determines the spacing of the individual dots (1 = neutral)</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Theme.Universe.Controls.CircularProgressAnimation.DotAnimationSpeedFactor">
            <summary>Sets the speed of the animation (factor 1 = neutral speed, lower factors are faster, larger factors slower, as it increases the time the animation has to perform)(</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Theme.Universe.Controls.CircularProgressAnimation.DotAnimationSpeedFactorProperty">
            <summary>Sets the speed of the animation (factor 1 = neutral speed, lower factors are faster, larger factors slower, as it increases the time the animation has to perform)(</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Theme.Universe.Controls.CircularProgressAnimation.IsActive">
            <summary>Indicates whether the progress animation is active</summary>
            <value>True if active</value>
            <remarks>For the progress animation to be displayed, the IsActive must be true, and the control must have its visibility set to visible.</remarks>
        </member>
        <member name="F:CODE.Framework.Wpf.Theme.Universe.Controls.CircularProgressAnimation.IsActiveProperty">
            <summary>Indicates whether the progress animation is active</summary>
            <value>True if active</value>
            <remarks>For the progress animation to be displayed, the IsActive must be true, and the control must have its visibility set to visible.</remarks>
        </member>
        <member name="P:CODE.Framework.Wpf.Theme.Universe.Controls.CircularProgressAnimation.StartDelay">
            <summary>
            Defines the delay (in milliseconds) before the progress animation appears when activated
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Theme.Universe.Controls.CircularProgressAnimation.StartDelayProperty">
            <summary>
            Defines the delay (in milliseconds) before the progress animation appears when activated
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Theme.Universe.Controls.CircularProgressAnimation.TriggerVisualRefresh(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>Triggers a re-creation of all the child elements that make up the animation</summary>
            <param name="o">Dependency Object</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Theme.Universe.Controls.CircularProgressAnimation.CreateVisuals(System.Int32)">
            <summary>Creates the actual visual elements that make up the animation</summary>
            <param name="circleCount">Number of circles to use in the animation</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Theme.Universe.Controls.CircularProgressAnimation.StartAnimation">
            <summary>
            Starts the animation.
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Theme.Universe.Controls.CircularProgressAnimation._animationInStartMode">
            <summary>Internal field used to prevent recursive calls</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Theme.Universe.Controls.CircularProgressAnimation.StopAnimation">
            <summary>
            Stops the animation.
            </summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Theme.Universe.Controls.SelectOpenViewButton">
            <summary>
            Special button control used to switch the active view
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Theme.Universe.Controls.SelectOpenViewButton.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Wpf.Theme.Universe.Controls.SelectOpenViewButton"/> class.
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Theme.Universe.Controls.SelectOpenViewButton.TabControl">
            <summary>
            Parent tab control
            </summary>
            <value>The tab control.</value>
        </member>
        <member name="F:CODE.Framework.Wpf.Theme.Universe.Controls.SelectOpenViewButton.TabControlProperty">
            <summary>
            Parent tab control
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Theme.Universe.Controls.SelectOpenViewButton.OnTabControlChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles the <see cref="E:TabControlChanged" /> event.
            </summary>
            <param name="d">The d.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Theme.Universe.Controls.SelectOpenViewButton.OnClick">
            <summary>
            Called when the button is clicked
            </summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Theme.Universe.Controls.SelectViewMenuItem">
            <summary>
            Menu item for view selection
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Theme.Universe.Controls.SelectViewMenuItem.#ctor(CODE.Framework.Wpf.Theme.Universe.Controls.ShellTabControl,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Wpf.Theme.Universe.Controls.SelectViewMenuItem"/> class.
            </summary>
            <param name="tabControl">The tab control.</param>
            <param name="index">The index that is to be selected when this item is picked.</param>
        </member>
        <member name="T:CODE.Framework.Wpf.Theme.Universe.Controls.ShellTabControl">
            <summary>
            Tab Control used specifically as a view host in a Metro Shell
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Theme.Universe.Controls.ShellTabControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Wpf.Theme.Universe.Controls.ShellTabControl"/> class.
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Theme.Universe.Controls.ShellTabControl.PageSwitchedEvent">
            <summary>This event fires whenever the user switches to a different view (but not to and from the start page)</summary>
        </member>
        <member name="E:CODE.Framework.Wpf.Theme.Universe.Controls.ShellTabControl.PageSwitched">
            <summary>This event fires whenever the user switches to a different view (but not to and from the start page)</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Theme.Universe.Controls.ShellTabControl.OnApplyTemplate">
            <summary>
            Called when <see cref="M:System.Windows.FrameworkElement.ApplyTemplate"/> is called.
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Theme.Universe.Controls.ShellTabControl.MakeHomePageVisible">
            <summary>
            Makes the home page visible.
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Theme.Universe.Controls.ShellTabControl.HomeTitle">
            <summary>
            Title for the home item in the tabs
            </summary>
            <value>The home title.</value>
        </member>
        <member name="F:CODE.Framework.Wpf.Theme.Universe.Controls.ShellTabControl.HomeTitleProperty">
            <summary>
            Title for the home item in the tabs
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Theme.Universe.Controls.ShellTabControl.HomePageVisible">
            <summary>
            Defines whether the homepage is the currently visible element
            </summary>
            <value>
              <c>true</c> if home page visible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="F:CODE.Framework.Wpf.Theme.Universe.Controls.ShellTabControl.HomePageVisibleProperty">
            <summary>
            Defines whether the homepage is the currently visible element
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Theme.Universe.Controls.ShellTabControl.HomePage">
            <summary>
            Visual for the homepage
            </summary>
            <value>
            The home page.
            </value>
        </member>
        <member name="F:CODE.Framework.Wpf.Theme.Universe.Controls.ShellTabControl.HomePageProperty">
            <summary>
            Visual for the homepage
            </summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Theme.Universe.Controls.ViewActionHamburgerMenu">
            <summary>
            Class ViewActionHamburgerMenu.special class used to implement a hamburger menu
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Theme.Universe.Controls.ViewActionHamburgerMenu.ExpandsPermanently">
            <summary>
            Indicates whether an expand operation is permanent (true) or just overlaps other content (false)
            </summary>
            <value><c>true</c> if [expands permanently]; otherwise, <c>false</c>.</value>
        </member>
        <member name="F:CODE.Framework.Wpf.Theme.Universe.Controls.ViewActionHamburgerMenu.ExpandsPermanentlyProperty">
            <summary>
            Indicates whether an expand operation is permanent (true) or just overlaps other content (false)
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Theme.Universe.Controls.ViewActionHamburgerMenu.Expanded">
            <summary>
            Expanded state of the menu
            </summary>
            <value>The expanded state</value>
        </member>
        <member name="F:CODE.Framework.Wpf.Theme.Universe.Controls.ViewActionHamburgerMenu.ExpandedProperty">
            <summary>
            Expanded state of the menu
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Theme.Universe.Controls.ViewActionHamburgerMenu.OnExpandedStateChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Fires when the expanded state of the menu changes
            </summary>
            <param name="d">The menu object</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:CODE.Framework.Wpf.Theme.Universe.Controls.ViewActionHamburgerMenu.Model">
            <summary>
            Model used as the data context
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Theme.Universe.Controls.ViewActionHamburgerMenu.ModelProperty">
            <summary>
            Model dependency property
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Theme.Universe.Controls.ViewActionHamburgerMenu.ModelChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Change handler for model property
            </summary>
            <param name="d">The dependency object that triggered this change.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Theme.Universe.Controls.ViewActionHamburgerMenu.PopulateStack">
            <summary>
            Populates the current ribbon with items based on the actions collection
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Theme.Universe.Controls.ViewActionHamburgerMenu.MeasureOverride(System.Windows.Size)">
            <summary>
            Measures the override.
            </summary>
            <param name="availableSize">Size of the available.</param>
            <returns>Size.</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Theme.Universe.Controls.ViewActionHamburgerMenu.ArrangeOverride(System.Windows.Size)">
            <summary>
            Arranges the override.
            </summary>
            <param name="finalSize">The final size.</param>
            <returns>Size.</returns>
        </member>
        <member name="T:CODE.Framework.Wpf.Theme.Universe.Controls.HamburgerMenuButton">
            <summary>
            Button control used in hamburger menus
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Theme.Universe.Controls.HamburgerMenuButton.Caption">
            <summary>
            Gets or sets the caption.
            </summary>
            <value>The caption.</value>
        </member>
        <member name="F:CODE.Framework.Wpf.Theme.Universe.Controls.HamburgerMenuButton.CaptionProperty">
            <summary>
            The caption property
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Theme.Universe.Controls.HamburgerMenuButton.BrushResourceKey">
            <summary>
            Resource key to be used for the icon
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Theme.Universe.Controls.HamburgerMenuButton.BrushResourceKeyProperty">
            <summary>
            Resource key to be used for the icon
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Theme.Universe.Controls.HamburgerMenuButton.IsExpanded">
            <summary>
            Gets or sets a value indicating whether this instance is expanded.
            </summary>
            <value><c>true</c> if this instance is expanded; otherwise, <c>false</c>.</value>
        </member>
        <member name="F:CODE.Framework.Wpf.Theme.Universe.Controls.HamburgerMenuButton.IsExpandedProperty">
            <summary>
            The is expanded property
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Theme.Universe.Controls.HamburgerMenuButton.HasSubItems">
            <summary>
            Indicates whether the menu has sub items
            </summary>
            <value><c>true</c> if this instance has sub items; otherwise, <c>false</c>.</value>
        </member>
        <member name="F:CODE.Framework.Wpf.Theme.Universe.Controls.HamburgerMenuButton.HasSubItemsProperty">
            <summary>
            Indicates whether the menu has sub items
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Theme.Universe.Controls.HamburgerMenuButton.SubActions">
            <summary>
            Sub items.
            </summary>
            <value>The sub actions.</value>
        </member>
        <member name="M:CODE.Framework.Wpf.Theme.Universe.Controls.HamburgerMenuButton.OnClick">
            <summary>
            Called when [click].
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Theme.Universe.Controls.HamburgerMenuButton.HandleMenuShortcutKey(System.Windows.Controls.MenuItem,CODE.Framework.Wpf.Mvvm.IViewAction)">
            <summary>
            Handles the assignment of shortcut keys
            </summary>
            <param name="menuItem">The menu item.</param>
            <param name="action">The category.</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Theme.Universe.Controls.HamburgerMenuButton.GetMenuTitle(CODE.Framework.Wpf.Mvvm.IViewAction)">
            <summary>
            Determines the display title of a menu item
            </summary>
            <param name="action">The category.</param>
            <returns>Title</returns>
        </member>
        <member name="T:CODE.Framework.Wpf.Theme.Universe.Controls.HamburgerMenuTopButton">
            <summary>
            First button in the hamburger menu (the actual "hamburger")
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Theme.Universe.Controls.HamburgerMenuTopButton.#ctor(CODE.Framework.Wpf.Theme.Universe.Controls.ViewActionHamburgerMenu)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Wpf.Theme.Universe.Controls.HamburgerMenuTopButton"/> class.
            </summary>
            <param name="parentMenu">The parent menu.</param>
        </member>
        <member name="T:CODE.Framework.Wpf.Theme.Universe.Controls.HamburgerMenuState">
            <summary>
            Indicates the state of the hamburger menu
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Theme.Universe.Controls.HamburgerMenuState.Collapsed">
            <summary>
            Collapsed (only icons are visible)
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Theme.Universe.Controls.HamburgerMenuState.Expanded">
            <summary>
            Temporarily expanded (text labels overlay other content)
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Theme.Universe.Controls.HamburgerMenuState.PermanentlyExpanded">
            <summary>
            Permanently expanded (the menu occupies the full width, including labels)
            </summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Theme.Universe.StandardViews.Notification">
            <summary>
            Interaction logic for Notification.xaml
            </summary>
            <summary>
            Notification
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Theme.Universe.StandardViews.Notification.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Theme.Universe.StandardViews.Notification.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
    </members>
</doc>
