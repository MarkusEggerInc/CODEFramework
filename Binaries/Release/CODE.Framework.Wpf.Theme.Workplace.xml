<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CODE.Framework.Wpf.Theme.Workplace</name>
    </assembly>
    <members>
        <member name="T:CODE.Framework.Wpf.Theme.Workplace.Classes.ScrollRightButton">
            <summary>
            Button used to style the scroll-right button of a scroll bar
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Theme.Workplace.Classes.ScrollRightButton.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Wpf.Theme.Workplace.Classes.ScrollRightButton" /> class.
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Theme.Workplace.Classes.ScrollRightButton.OnClick">
            <summary>
            Raises an automation event and calls the base method to raise the <see cref="E:System.Windows.Controls.Primitives.ButtonBase.Click" /> event.
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Theme.Workplace.Classes.ScrollRightButton.ScrollViewer">
            <summary>Reference to the scroll viewer this button goes with</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Theme.Workplace.Classes.ScrollRightButton.ScrollViewerProperty">
            <summary>Reference to the scroll viewer this button goes with</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Theme.Workplace.Classes.ScrollRightButton.ScrollViewerChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            This method fires when the assigned scroll viewer changes
            </summary>
            <param name="d">The dependency object.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="T:CODE.Framework.Wpf.Theme.Workplace.Classes.ScrollLeftButton">
            <summary>
            Button used to style the scroll-left button of a scroll bar
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Theme.Workplace.Classes.ScrollLeftButton.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Wpf.Theme.Workplace.Classes.ScrollLeftButton" /> class.
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Theme.Workplace.Classes.ScrollLeftButton.OnClick">
            <summary>
            Raises an automation event and calls the base method to raise the <see cref="E:System.Windows.Controls.Primitives.ButtonBase.Click" /> event.
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Theme.Workplace.Classes.ScrollLeftButton.ScrollViewer">
            <summary>Reference to the scroll viewer this button goes with</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Theme.Workplace.Classes.ScrollLeftButton.ScrollViewerProperty">
            <summary>Reference to the scroll viewer this button goes with</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Theme.Workplace.Classes.ScrollLeftButton.ScrollViewerChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            This method fires when the assigned scroll viewer changes
            </summary>
            <param name="d">The dependency object.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="T:CODE.Framework.Wpf.Theme.Workplace.Classes.ToUpperTextConverter">
            <summary>
            Converts bound text to upper case
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Theme.Workplace.Classes.ToUpperTextConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>A converted value. If the method returns null, the valid null value is used.</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Theme.Workplace.Classes.ToUpperTextConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>A converted value. If the method returns null, the valid null value is used.</returns>
        </member>
        <member name="T:CODE.Framework.Wpf.Theme.Workplace.Classes.WorkplaceStandardFeatures">
            <summary>
            Standard features supported by the Workplace theme
            </summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Theme.Workplace.Classes.WorkplaceStandardFeatures.StandardViewFactory">
            <summary>Reference to the standard view factory (if supported)</summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Theme.Workplace.Classes.WorkplaceStandardViewFactory">
            <summary>Factory to create standard views supported by Workplace</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Theme.Workplace.Classes.WorkplaceStandardViewFactory.GetStandardView(System.String)">
            <summary>Returns a standard view based on the view name as a string</summary>
            <param name="viewName">Standard view name</param>
            <returns>Standard view or null</returns>
        </member>
        <member name="M:CODE.Framework.Wpf.Theme.Workplace.Classes.WorkplaceStandardViewFactory.GetStandardView(CODE.Framework.Wpf.Mvvm.StandardViews)">
            <summary>
            Returns a standard view based on the standard view enumeration
            </summary>
            <param name="standardView">Standard view identifier</param>
            <returns>Standard view or null</returns>
        </member>
        <member name="T:CODE.Framework.Wpf.Theme.Workplace.Controls.LinearProgressAnimation">
            <summary>Simple rendering mechanism to render a standard Metro loading animatin (circular)</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Theme.Workplace.Controls.LinearProgressAnimation.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Theme.Workplace.Controls.LinearProgressAnimation.DotCount">
            <summary>Defines the number of actual dots in the animation</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Theme.Workplace.Controls.LinearProgressAnimation.DotCountProperty">
            <summary>Defines the number of actual dots in the animation</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Theme.Workplace.Controls.LinearProgressAnimation.DotDiameter">
            <summary>Defines the diameter of each dot within the animation</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Theme.Workplace.Controls.LinearProgressAnimation.DotDiameterProperty">
            <summary>Defines the diameter of each dot within the animation</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Theme.Workplace.Controls.LinearProgressAnimation.DotBrush">
            <summary>Brush used to draw each dot</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Theme.Workplace.Controls.LinearProgressAnimation.DotBrushProperty">
            <summary>Brush used to draw each dot</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Theme.Workplace.Controls.LinearProgressAnimation.DotSpaceFactor">
            <summary>Detirmines the spacing of the individual dots (1 = neutral)</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Theme.Workplace.Controls.LinearProgressAnimation.DotSpaceFactorProperty">
            <summary>Detirmines the spacing of the individual dots (1 = neutral)</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Theme.Workplace.Controls.LinearProgressAnimation.DotAnimationSpeedFactor">
            <summary>Sets the speed of the animation (factor 1 = neutral speed, lower factors are faster, larger factors slower, as it increases the time the animation has to perform)(</summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Theme.Workplace.Controls.LinearProgressAnimation.DotAnimationSpeedFactorProperty">
            <summary>Sets the speed of the animation (factor 1 = neutral speed, lower factors are faster, larger factors slower, as it increases the time the animation has to perform)(</summary>
        </member>
        <member name="P:CODE.Framework.Wpf.Theme.Workplace.Controls.LinearProgressAnimation.IsActive">
            <summary>Indicates whether the progress animation is active</summary>
            <value>True if active</value>
            <remarks>For the progress animation to be displayed, the IsActive must be true, and the control must have its visibility set to visible.</remarks>
        </member>
        <member name="F:CODE.Framework.Wpf.Theme.Workplace.Controls.LinearProgressAnimation.IsActiveProperty">
            <summary>Indicates whether the progress animation is active</summary>
            <value>True if active</value>
            <remarks>For the progress animation to be displayed, the IsActive must be true, and the control must have its visibility set to visible.</remarks>
        </member>
        <member name="M:CODE.Framework.Wpf.Theme.Workplace.Controls.LinearProgressAnimation.TriggerVisualRefresh(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>Triggers a re-creation of all the child elements that make up the animation</summary>
            <param name="o">Dependency Object</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Theme.Workplace.Controls.LinearProgressAnimation.CreateVisuals(System.Int32)">
            <summary>Creates the actual visual elements that make up the animation</summary>
            <param name="circleCount">Number of circles to use in the animation</param>
        </member>
        <member name="M:CODE.Framework.Wpf.Theme.Workplace.Controls.LinearProgressAnimation.StartAnimation">
            <summary>
            Starts the animation.
            </summary>
        </member>
        <member name="F:CODE.Framework.Wpf.Theme.Workplace.Controls.LinearProgressAnimation._animationInStartMode">
            <summary>Internal field used to prevent recursive calls</summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Theme.Workplace.Controls.LinearProgressAnimation.StopAnimation">
            <summary>
            Stops the animation.
            </summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Theme.Workplace.StandardViews.LargePeekImageAndText06">
            <summary>
            Interaction logic for LargePeekImageAndText06.xaml
            </summary>
            <summary>
            LargePeekImageAndText06
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Theme.Workplace.StandardViews.LargePeekImageAndText06.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Wpf.Theme.Workplace.StandardViews.LargePeekImageAndText06" /> class.
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Theme.Workplace.StandardViews.LargePeekImageAndText06.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:CODE.Framework.Wpf.Theme.Workplace.StandardViews.Notification">
            <summary>
            Interaction logic for Notification.xaml
            </summary>
            <summary>
            Notification
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Theme.Workplace.StandardViews.Notification.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Wpf.Theme.Workplace.StandardViews.Notification" /> class.
            </summary>
        </member>
        <member name="M:CODE.Framework.Wpf.Theme.Workplace.StandardViews.Notification.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
    </members>
</doc>
