<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CODE.Framework.Core</name>
    </assembly>
    <members>
        <member name="T:CODE.Framework.Core.ComponentModel.IDataBindingRefresher">
            <summary>
            Interface to be implemented by data sources that may
            send update messages to bound controls.
            </summary>
        </member>
        <member name="E:CODE.Framework.Core.ComponentModel.IDataBindingRefresher.DataSourceChanged">
            <summary>
            Event that is to be raised when source updates
            </summary>
        </member>
        <member name="T:CODE.Framework.Core.ComponentModel.DataLoadController">
            <summary>
            Abstract data load controller class used to define data environments for forms.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.DataLoadController.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.ComponentModel.DataLoadController"/> class.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.DataLoadController.Configure">
            <summary>
            Configures this instance.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.DataLoadController.NewContents">
            <summary>
            This method gets called whenever new content needs to be created (such as a new entity)
            </summary>
            <returns>Data object</returns>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.DataLoadController.LoadContents">
            <summary>
            This method is invoked whenever data needs to be loaded (including reloading data)
            </summary>
            <returns>Data object</returns>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.DataLoadController.LoadSecondaryData">
            <summary>
            Called whenever secondary data needs to be loaded
            </summary>
            <returns>Data object</returns>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.DataLoadController.SetEntityType``1">
            <summary>
            Defines an entity type that is to be loaded
            </summary>
            <typeparam name="TType">The type of the type.</typeparam>
        </member>
        <member name="F:CODE.Framework.Core.ComponentModel.DataLoadController._loader">
            <summary>
            Internal reference to the data loader
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.DataLoadController.Loader">
            <summary>
            Internal reference to the data loader
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.DataLoadController.GetInternalLoader">
            <summary>
            Returns an instance of an automatically created internal loader.
            </summary>
            <remarks>
            Internal loaders are generally used for unit testing only. It is often useful to override 
            this method to return a different loader. The loader is generally only used to return parameters
            that may be used during loading. To do so, subclass the default loader (TestEditDataLoader)
            or implement the IEditDataLoader interface and return it from this method. The controller will 
            then automatically use that loader.
            </remarks>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.DataLoadController.SetDataLoader(CODE.Framework.Core.ComponentModel.IEditDataLoader)">
            <summary>
            Defines the data loader object this controller targets
            </summary>
            <param name="loader">The loader.</param>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.DataLoadController.PerformAutoNew">
            <summary>
            Should the object perform auto news based on the entity type specified?
            </summary>
            <value></value>
            <remarks>This property only has an impact after an entity type has been set by means of the SetEntityType() method</remarks>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.DataLoadController.PerformAutoLoad">
            <summary>
            Should the object perform auto loads based on the entity type specified?
            </summary>
            <value></value>
            <remarks>This property only has an impact after an entity type has been set by means of the SetEntityType() method</remarks>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.DataLoadController.PerformAutoDelete">
            <summary>
            Should the object perform auto deletes based on the entity type specified?
            </summary>
            <value></value>
            <remarks>This property only has an impact after an entity type has been set by means of the SetEntityType() method</remarks>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.DataLoadController.PerformAutoSave">
            <summary>
            Should the object perform auto saves based on the entity type specified?
            </summary>
            <value></value>
            <remarks>This property only has an impact after an entity type has been set by means of the SetEntityType() method</remarks>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.DataLoadController.PerformAutoVerify">
            <summary>
            Should the object perform auto verifies based on the entity type specified?
            </summary>
            <value></value>
            <remarks>This property only has an impact after an entity type has been set by means of the SetEntityType() method</remarks>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.DataLoadController.Status">
            <summary>
            Gets the status.
            </summary>
            <value>The status.</value>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.DataLoadController.GetParameterValue``1(System.String)">
            <summary>
            Retrieves the value of a parameter by name
            </summary>
            <param name="parameterName">Parameter name</param>
            <returns>Parameter value</returns>
            <typeparam name="TType">Expected return type</typeparam>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.DataLoadController.GetParameterValue(System.String)">
            <summary>
            Retrieves the value of a parameter by name
            </summary>
            <param name="parameterName">Parameter name</param>
            <returns>Parameter value</returns>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.DataLoadController.Parameters">
            <summary>
            Parameters collection (thread-safe)
            </summary>
            <remarks>
            The dictionary returned by this property is made thread-safe by means of cloning.
            This means that every time this collection is accessed, a copy of the original (internal)
            collection is created. If you then interact with the collection, it will not update the
            original parameters. Therefore, most interaction with this collection should
            not happen through this property, but by means of the SetParameterValue()/GetParameterValue() 
            methods instead.
            </remarks>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.DataLoadController.SetParameterValue``1(System.String,``0)">
            <summary>
            Sets the parameter value (and adds the key to the collection if need be).
            </summary>
            <typeparam name="TType">The type of the type.</typeparam>
            <param name="parameterName">Name of the parameter.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.DataLoadController.ParameterExists(System.String)">
            <summary>
            Returns true if the specified parameter exists
            </summary>
            <param name="parameterName">Name of the parameter.</param>
            <returns>True or false</returns>
        </member>
        <member name="F:CODE.Framework.Core.ComponentModel.DataLoadController._loadDataMethod">
            <summary>
            For internal use only (cache)
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.ComponentModel.DataLoadController._newDataMethod">
            <summary>
            For internal use only (cache)
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.ComponentModel.DataLoadController._entityType">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.DataLoadController.MainEntity">
            <summary>
            Main entity created by auto-load or auto-new
            </summary>
            <value>The main entity.</value>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.DataLoadController.AutoLoad">
            <summary>
            Performs an automatic load operation, if possible
            </summary>
            <returns>Data object or data object list</returns>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.DataLoadController.AutoNew">
            <summary>
            Performs an automatic new operation, if possible
            </summary>
            <returns>Data object or data object list</returns>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.DataLoadController.AutoDelete">
            <summary>
            Performs an auto-delete on the current data entity
            </summary>
            <returns>True or false</returns>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.DataLoadController.AutoSave">
            <summary>
            Performs an auto-save on the current data entity
            </summary>
            <returns>True or false</returns>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.DataLoadController.AutoVerify">
            <summary>
            Performs an auto-verification on the current data entity
            </summary>
            <returns>True or false</returns>
        </member>
        <member name="T:CODE.Framework.Core.ComponentModel.IDataLoadController">
            <summary>
            Basic data controller interface
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.IDataLoadController.Configure">
            <summary>
            Configures this instance.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.IDataLoadController.NewContents">
            <summary>
            This method gets called whenever new content needs to be created (such as a new entity)
            </summary>
            <returns>Data object</returns>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.IDataLoadController.LoadContents">
            <summary>
            This method is invoked whenever data needs to be loaded (including reloading data)
            </summary>
            <returns>Data object</returns>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.IDataLoadController.LoadSecondaryData">
            <summary>
            Called whenever secondary data needs to be loaded
            </summary>
            <returns>Data object</returns>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.IDataLoadController.SetEntityType``1">
            <summary>
            Defines an entity type that is to be loaded
            </summary>
            <typeparam name="TType">The type of the type.</typeparam>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.IDataLoadController.SetDataLoader(CODE.Framework.Core.ComponentModel.IEditDataLoader)">
            <summary>
            Defines the data loader object this controller targets
            </summary>
            <param name="loader">The loader.</param>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.IDataLoadController.PerformAutoNew">
            <summary>
            Should the object perform auto news based on the entity type specified?
            </summary>
            <remarks>This property only has an impact after an entity type has been set by means of the SetEntityType() method</remarks>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.IDataLoadController.PerformAutoLoad">
            <summary>
            Should the object perform auto loads based on the entity type specified?
            </summary>
            <remarks>This property only has an impact after an entity type has been set by means of the SetEntityType() method</remarks>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.IDataLoadController.PerformAutoDelete">
            <summary>
            Should the object perform auto deletes based on the entity type specified?
            </summary>
            <remarks>This property only has an impact after an entity type has been set by means of the SetEntityType() method</remarks>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.IDataLoadController.PerformAutoSave">
            <summary>
            Should the object perform auto saves based on the entity type specified?
            </summary>
            <remarks>This property only has an impact after an entity type has been set by means of the SetEntityType() method</remarks>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.IDataLoadController.PerformAutoVerify">
            <summary>
            Should the object perform auto verifies based on the entity type specified?
            </summary>
            <remarks>This property only has an impact after an entity type has been set by means of the SetEntityType() method</remarks>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.IDataLoadController.AutoLoad">
            <summary>
            Performs an automatic load operation, if possible
            </summary>
            <returns>Data object or data object list</returns>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.IDataLoadController.AutoNew">
            <summary>
            Performs an automatic new operation, if possible
            </summary>
            <returns>Data object or data object list</returns>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.IDataLoadController.AutoDelete">
            <summary>
            Performs an auto-delete on the current data entity
            </summary>
            <returns>True or false</returns>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.IDataLoadController.AutoSave">
            <summary>
            Performs an auto-save on the current data entity
            </summary>
            <returns>True or false</returns>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.IDataLoadController.AutoVerify">
            <summary>
            Performs an auto-verification on the current data entity
            </summary>
            <returns>True or false</returns>
        </member>
        <member name="T:CODE.Framework.Core.ComponentModel.DataLoadControllerCollection">
            <summary>
            Collection of data loader controllers
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.ComponentModel.DataLoadControllerCollection._loader">
            <summary>
            Internal reference to the controller
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.DataLoadControllerCollection.#ctor(CODE.Framework.Core.ComponentModel.IEditDataLoader)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.ComponentModel.DataLoadControllerCollection"/> class.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.DataLoadControllerCollection.Add(CODE.Framework.Core.ComponentModel.IDataLoadController)">
            <summary>
            Adds a data loader controller
            </summary>
            <param name="controller">The controller.</param>
        </member>
        <member name="T:CODE.Framework.Core.ComponentModel.TestEditDataLoader">
            <summary>
            Data loader class that is automatically invoked for stand-alone unit testing scenarios
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.TestEditDataLoader.SetHost(CODE.Framework.Core.ComponentModel.IDataEditHandler)">
            <summary>
            Sets the host object used to load data
            </summary>
            <param name="host">Host</param>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.TestEditDataLoader.Save">
            <summary>
            Saves all the current data
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.TestEditDataLoader.Save(System.EventHandler{CODE.Framework.Core.ComponentModel.SavedEventArgs},System.EventHandler{CODE.Framework.Core.ComponentModel.SavedEventArgs})">
            <summary>
            Saves all the current data
            </summary>
            <param name="successCallback">Callback for success</param>
            <param name="failureCallback">Callback for failure</param>
        </member>
        <member name="E:CODE.Framework.Core.ComponentModel.TestEditDataLoader.Saved">
            <summary>
            Saved event
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.TestEditDataLoader.Verify">
            <summary>
            Verifies the current data
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.TestEditDataLoader.Verify(System.EventHandler{CODE.Framework.Core.ComponentModel.VerifiedEventArgs},System.EventHandler{CODE.Framework.Core.ComponentModel.VerifiedEventArgs})">
            <summary>
            Verifies the current data
            </summary>
            <param name="successCallback">Callback for success</param>
            <param name="failureCallback">Callback for failure</param>
        </member>
        <member name="E:CODE.Framework.Core.ComponentModel.TestEditDataLoader.Verified">
            <summary>
            Verified event
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.TestEditDataLoader.Status">
            <summary>
            Content status
            </summary>
            <value></value>
        </member>
        <member name="E:CODE.Framework.Core.ComponentModel.TestEditDataLoader.ContentStatusChanged">
            <summary>
            Content status changed event
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.TestEditDataLoader.Load(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Loads data
            </summary>
            <param name="parameters">Parameters collection</param>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.TestEditDataLoader.Load(System.Collections.Generic.Dictionary{System.String,System.Object},System.Boolean,System.Boolean)">
            <summary>
            Loads data
            </summary>
            <param name="parameters">Parameters collection</param>
            <param name="loadPrimaryData">if set to <c>true</c> [load primary data].</param>
            <param name="loadSecondaryData">if set to <c>true</c> [load secondary data].</param>
        </member>
        <member name="E:CODE.Framework.Core.ComponentModel.TestEditDataLoader.Loaded">
            <summary>
            Loaded event
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.TestEditDataLoader.New(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Creates new data
            </summary>
            <param name="parameters">Parameters collection</param>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.TestEditDataLoader.New(System.Collections.Generic.Dictionary{System.String,System.Object},System.Boolean,System.Boolean)">
            <summary>
            Creates new data
            </summary>
            <param name="parameters">Parameters collection</param>
            <param name="newPrimaryData">if set to <c>true</c> [new primary data].</param>
            <param name="loadSecondaryData">if set to <c>true</c> [load secondary data].</param>
        </member>
        <member name="E:CODE.Framework.Core.ComponentModel.TestEditDataLoader.Newed">
            <summary>
            Newed event
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.TestEditDataLoader.Delete">
            <summary>
            Deletes data
            </summary>
        </member>
        <member name="E:CODE.Framework.Core.ComponentModel.TestEditDataLoader.Deleted">
            <summary>
            Deleted event
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.TestEditDataLoader.MultiThreaded">
            <summary>
            Should data operations be performed multi threaded?
            </summary>
            <value></value>
            <remarks>
            This property shall always default to true.
            </remarks>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.TestEditDataLoader.PrimaryData">
            <summary>
            Array list (collection) of primary data objects
            </summary>
            <value></value>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.TestEditDataLoader.SecondaryData">
            <summary>
            Array list (collection) of secondary data objects
            </summary>
            <value></value>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.TestEditDataLoader.GetParameterValue``1(System.String)">
            <summary>
            Retrieves the value of a parameter by name
            </summary>
            <typeparam name="TType">Expected return type</typeparam>
            <param name="parameterName">Parameter name</param>
            <returns>Parameter value</returns>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.TestEditDataLoader.GetParameterValue(System.String)">
            <summary>
            Retrieves the value of a parameter by name
            </summary>
            <param name="parameterName">Parameter name</param>
            <returns>Parameter value</returns>
        </member>
        <member name="F:CODE.Framework.Core.ComponentModel.TestEditDataLoader._parameters">
            <summary>
            Internal dictionary
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.TestEditDataLoader.Parameters">
            <summary>
            Parameters collection (thread-safe)
            </summary>
            <value></value>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.TestEditDataLoader.SetParameterValue``1(System.String,``0)">
            <summary>
            Sets the parameter value (and adds the key to the collection if need be).
            </summary>
            <typeparam name="TType">The type of the type.</typeparam>
            <param name="parameterName">Name of the parameter.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.TestEditDataLoader.ParameterExists(System.String)">
            <summary>
            Returns true if the specified parameter exists
            </summary>
            <param name="parameterName">Name of the parameter.</param>
            <returns>True or false</returns>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.TestEditDataLoader.MainDataEntity">
            <summary>
            Reference to the main data entity object
            </summary>
            <value></value>
            <remarks>
            This object typically is the first object in the primary data collection
            </remarks>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.TestEditDataLoader.SetEntityType``1">
            <summary>
            Sets the main entity type used for auto-loading of content.
            </summary>
            <typeparam name="TType">Data entity type</typeparam>
            <remarks>
            Any object can be set as the main data entity type. However,
            to perform auto-data-handling, the object must have certain characteristics.
            New data creation:
            The type must have a static NewEntity() method (no parameters).
            Data loading:
            The type must have a static LoadEntity(Guid) method, -- and/or --
            The type must have a static LoadEntity(int) method, -- and/or --
            The type must have a static LoadEntity(string) method.
            Data saving:
            The type must implement ISavable (and probably should implement IVerifyable)
            Data verification:
            The type must implement IVerifyable
            Data delition:
            The type must implement IDeletable
            </remarks>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.TestEditDataLoader.PerformAutoNew">
            <summary>
            Should the object perform auto news based on the entity type specified?
            </summary>
            <value></value>
            <remarks>This property only has an impact after an entity type has been set by means of the SetEntityType() method</remarks>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.TestEditDataLoader.PerformAutoLoad">
            <summary>
            Should the object perform auto loads based on the entity type specified?
            </summary>
            <value></value>
            <remarks>This property only has an impact after an entity type has been set by means of the SetEntityType() method</remarks>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.TestEditDataLoader.PerformAutoSave">
            <summary>
            Should the object perform auto saves based on the entity type specified?
            </summary>
            <value></value>
            <remarks>This property only has an impact after an entity type has been set by means of the SetEntityType() method</remarks>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.TestEditDataLoader.PerformAutoVerify">
            <summary>
            Should the object perform auto verifies based on the entity type specified?
            </summary>
            <value></value>
            <remarks>This property only has an impact after an entity type has been set by means of the SetEntityType() method</remarks>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.TestEditDataLoader.PerformAutoDelete">
            <summary>
            Should the object perform auto deletes based on the entity type specified?
            </summary>
            <value></value>
            <remarks>This property only has an impact after an entity type has been set by means of the SetEntityType() method</remarks>
        </member>
        <member name="F:CODE.Framework.Core.ComponentModel.TestEditDataLoader._dataLoadControllers">
            <summary>
            Internal reference for data controllers
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.TestEditDataLoader.DataLoadControllers">
            <summary>
            Gets the data load controllers.
            </summary>
            <value>The data load controllers.</value>
        </member>
        <member name="T:CODE.Framework.Core.ComponentModel.IDataHandler">
            <summary>
            Basic definition of an interface that can be applied to
            a UI container (such as a form) that is intended to load data.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.IDataHandler.ContentStatus">
            <summary>
            Content load status
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.IDataHandler.InitialLoad(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            This method gets called when the pane first loads.
            Parameters will be passed to this method.
            </summary>
            <param name="queryString">Name value collection of parameters</param>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.IDataHandler.InitialLoad(System.Guid)">
            <summary>
            This method gets called when the pane first loads.
            Parameters will be passed to this method.
            </summary>
            <param name="mainEntityId">Primary Key of the entity that is to be loaded</param>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.IDataHandler.InitialLoad(System.Int32)">
            <summary>
            This method gets called when the pane first loads.
            Parameters will be passed to this method.
            </summary>
            <param name="mainEntityId">Primary Key of the entity that is to be loaded</param>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.IDataHandler.InitialLoad(System.String)">
            <summary>
            This method gets called when the pane first loads.
            Parameters will be passed to this method.
            </summary>
            <param name="mainEntityId">Primary Key of the entity that is to be loaded</param>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.IDataHandler.InitialNew">
            <summary>
            Loads the form and indicates that the user intends to create a new item.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.IDataHandler.InitialNew(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Loads the form and indicates that the user intends to create a new item.
            </summary>
            <param name="queryString">Name value collection of parameters</param>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.IDataHandler.LoadContents">
            <summary>
            This method is invoked whenever data needs to be loaded (including reloading data)
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.IDataHandler.LoadSecondaryData">
            <summary>
            Called whenever secondary data needs to be loaded
            </summary>
            <returns>Data object</returns>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.IDataHandler.ShowContentsAuto">
            <summary>
            This method is invoked whenever the pane contents need to be presented to the user,
            after the contents have been loaded.
            This method is designed to be used internally only.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.IDataHandler.ShowContents">
            <summary>
            This method is invoked whenever the pane contents need to be presented to the user,
            after the contents have been loaded.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.IDataHandler.NewContents">
            <summary>
            This method gets called whenever new content needs to be created (such as a new entity)
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.IDataHandler.BeforeLoadContents">
            <summary>
            This method gets called before any data loading starts. This provides the ability to
            change the UI before the data is loaded (such as showing a wait screen)
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.IDataHandler.HandleDataException(System.Exception)">
            <summary>
            This method is called whenever an exception is raised during data loading.
            </summary>
            <param name="ex">Exception</param>
            <remarks>
            It is important to override this method and add code that accepts the error information
            and funnels it to the foreground thread (since exceptions that occur on background threads
            will not be visible on the foreground thread and thus not be obvious at all).
            </remarks>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.IDataHandler.ShowDataException(System.Exception)">
            <summary>
            This method is used to present the data to the user by means of a dialog
            or something similar.
            </summary>
            <param name="ex">Exception</param>
            <remarks>
            Generally, this method is called by HandleDataException(ex).
            It is important to override this method, since otherwise, the exception
            information will not be displayed to the user.
            It is IS OK to override this method without calling the default behavior.
            </remarks>
        </member>
        <member name="E:CODE.Framework.Core.ComponentModel.IDataHandler.DataExceptionThrown">
            <summary>
            This event fires whenever a data exception (load, save, verify, new,...) is fired.
            </summary>
            <remarks>
            Generally, this event is fired by HandleDataException(ex).
            </remarks>
        </member>
        <member name="T:CODE.Framework.Core.ComponentModel.DataExceptionEventArgs">
            <summary>
            Event arguments class for data exception events
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.DataExceptionEventArgs.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.ComponentModel.DataExceptionEventArgs"/> class.
            </summary>
            <param name="ex">The ex.</param>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.DataExceptionEventArgs.Exception">
            <summary>
            Exception information
            </summary>
            <value>The exception.</value>
        </member>
        <member name="T:CODE.Framework.Core.ComponentModel.IDataEditHandler">
            <summary>
            Basic definition of an edit form interface
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.IDataEditHandler.Save">
            <summary>
            Basic save method
            </summary>
            <returns>True or False</returns>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.IDataEditHandler.Verify">
            <summary>
            Basic data verification method
            </summary>
            <returns>True or false</returns>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.IDataEditHandler.Delete">
            <summary>
            Basic data deletion method
            </summary>
            <returns>True or false</returns>
        </member>
        <member name="T:CODE.Framework.Core.ComponentModel.IDataListHandler">
            <summary>
            Basic definition for a data list handler, such as a content pane.
            </summary>
            <remarks>This interface is not finalized at this point and will change!!!</remarks>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.IDataListHandler.RefreshContents">
            <summary>
            Basic method to reload the current information and refresh the display
            </summary>
        </member>
        <member name="T:CODE.Framework.Core.ComponentModel.IDataEditInteractions">
            <summary>
            This interface defines data interactions
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.IDataEditInteractions.SaveData">
            <summary>
            Triggers a data save operation
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.IDataEditInteractions.VerifyData">
            <summary>
            Triggers data verification
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.IDataEditInteractions.DeleteData">
            <summary>
            Triggers data deletion
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.IDataEditInteractions.NewData">
            <summary>
            Triggers the creation of new data
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.IDataEditInteractions.UndoData">
            <summary>
            Triggers an undo for the changes on the current data.
            </summary>
        </member>
        <member name="T:CODE.Framework.Core.ComponentModel.IDataInterfaceEvents">
            <summary>
            This interface defines all the events fired by data interfaces.
            These events are used for data handling based on events rather than inheritance.
            </summary>
        </member>
        <member name="E:CODE.Framework.Core.ComponentModel.IDataInterfaceEvents.HandleDelete">
            <summary>
            Occurs when the system triggers a delete. This event can be used to handle the delete or cancel it.
            </summary>
        </member>
        <member name="E:CODE.Framework.Core.ComponentModel.IDataInterfaceEvents.HandleSave">
            <summary>
            Occurs when the system triggers a save. This event can be used to handle the save or cancel it.
            </summary>
        </member>
        <member name="E:CODE.Framework.Core.ComponentModel.IDataInterfaceEvents.HandleVerify">
            <summary>
            Occurs when the system triggers a verify. This event can be used to handle the verify or cancel it.
            </summary>
        </member>
        <member name="E:CODE.Framework.Core.ComponentModel.IDataInterfaceEvents.ContentStatusChanged">
            <summary>
            Content status changed event
            </summary>
        </member>
        <member name="E:CODE.Framework.Core.ComponentModel.IDataInterfaceEvents.HandleLoadContents">
            <summary>
            Occurs when content needs to be loaded
            </summary>
        </member>
        <member name="E:CODE.Framework.Core.ComponentModel.IDataInterfaceEvents.HandleNewContents">
            <summary>
            Occurs when content needs to be created
            </summary>
        </member>
        <member name="E:CODE.Framework.Core.ComponentModel.IDataInterfaceEvents.HandleLoadSecondaryData">
            <summary>
            Occurs when secondary data needs to be loaded
            </summary>
        </member>
        <member name="E:CODE.Framework.Core.ComponentModel.IDataInterfaceEvents.HandleShowContents">
            <summary>
            Occurs when on screen contents need to be refreshed.
            </summary>
        </member>
        <member name="E:CODE.Framework.Core.ComponentModel.IDataInterfaceEvents.SaveSucceeded">
            <summary>
            Occurs when a save operation succeeds.
            </summary>
        </member>
        <member name="E:CODE.Framework.Core.ComponentModel.IDataInterfaceEvents.SaveFailed">
            <summary>
            Occurs when a save operation fails.
            </summary>
        </member>
        <member name="T:CODE.Framework.Core.ComponentModel.DataLoaderEventArgs">
            <summary>
            Event arguments used by data loading events
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.DataLoaderEventArgs.#ctor(System.Collections.Generic.Dictionary{System.String,System.Object},CODE.Framework.Core.ComponentModel.IEditDataLoader)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.ComponentModel.DataLoaderEventArgs"/> class.
            </summary>
            <param name="queryString">The query string.</param>
            <param name="dataLoader">The data loader.</param>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.DataLoaderEventArgs.QueryString">
            <summary>
            Provides access to query string parameters
            </summary>
            <value>The query string parameter collection.</value>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.DataLoaderEventArgs.DataLoader">
            <summary>
            Gets or sets the data loader.
            </summary>
            <value>The data loader.</value>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.DataLoaderEventArgs.Data">
            <summary>
            The data returned to the loading object
            </summary>
            <value>The data.</value>
            <remarks>
            Data could be a single data object (such as a DataSet) or an enumerable list of objects
            </remarks>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.DataLoaderEventArgs.AddData(System.Object)">
            <summary>
            Adds loaded data to the list of loaded data objects
            </summary>
            <param name="data">The data object that is to be added.</param>
            <remarks>
            The data object could be a single object or an enumerable list of objects.
            Data that may have been previously assigned as a result, either by the current
            event handled or another, will be preserved and the provided data object will \
            be added to the list.
            </remarks>
            <returns>True is fuccessful</returns>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.DataLoaderEventArgs.GetDataAsArrayList">
            <summary>
            Checks the current data object and makes sure the object is an array list.
            If it isn't an array list, it turns it into an array list.
            </summary>
            <returns>Data source as an enumerable object</returns>
        </member>
        <member name="T:CODE.Framework.Core.ComponentModel.ShowContentsEventArgs">
            <summary>
            Show content event arguments
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.ShowContentsEventArgs.#ctor(System.Object,CODE.Framework.Core.ComponentModel.IEditDataLoader)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.ComponentModel.ShowContentsEventArgs"/> class.
            </summary>
            <param name="source">The event source.</param>
            <param name="dataLoader">The data loader.</param>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.ShowContentsEventArgs.Source">
            <summary>
            Gets or sets the event source.
            </summary>
            <value>The source.</value>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.ShowContentsEventArgs.DataLoader">
            <summary>
            Gets or sets the data loader.
            </summary>
            <value>The data loader.</value>
        </member>
        <member name="T:CODE.Framework.Core.ComponentModel.IEditDataLoader">
            <summary>
            Interfaces used by secondary data loader objects
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.IEditDataLoader.SetHost(CODE.Framework.Core.ComponentModel.IDataEditHandler)">
            <summary>
            Sets the host object used to load data
            </summary>
            <param name="host">Host</param>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.IEditDataLoader.Save">
            <summary>
            Saves all the current data
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.IEditDataLoader.Save(System.EventHandler{CODE.Framework.Core.ComponentModel.SavedEventArgs},System.EventHandler{CODE.Framework.Core.ComponentModel.SavedEventArgs})">
            <summary>
            Saves all the current data
            </summary>
            <param name="successCallback">Callback for success</param>
            <param name="failureCallback">Callback for failure</param>
        </member>
        <member name="E:CODE.Framework.Core.ComponentModel.IEditDataLoader.Saved">
            <summary>
            Saved event
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.IEditDataLoader.Verify">
            <summary>
            Verifies the current data
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.IEditDataLoader.Verify(System.EventHandler{CODE.Framework.Core.ComponentModel.VerifiedEventArgs},System.EventHandler{CODE.Framework.Core.ComponentModel.VerifiedEventArgs})">
            <summary>
            Verifies the current data
            </summary>
            <param name="successCallback">Callback for success</param>
            <param name="failureCallback">Callback for failure</param>
        </member>
        <member name="E:CODE.Framework.Core.ComponentModel.IEditDataLoader.Verified">
            <summary>
            Verified event
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.IEditDataLoader.Status">
            <summary>
            Content status
            </summary>
        </member>
        <member name="E:CODE.Framework.Core.ComponentModel.IEditDataLoader.ContentStatusChanged">
            <summary>
            Content status changed event
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.IEditDataLoader.Load(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Loads data
            </summary>
            <param name="parameters">Parameters collection</param>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.IEditDataLoader.Load(System.Collections.Generic.Dictionary{System.String,System.Object},System.Boolean,System.Boolean)">
            <summary>
            Loads data
            </summary>
            <param name="parameters">Parameters collection</param>
            <param name="loadPrimaryData">if set to <c>true</c> [load primary data].</param>
            <param name="loadSecondaryData">if set to <c>true</c> [load secondary data].</param>
        </member>
        <member name="E:CODE.Framework.Core.ComponentModel.IEditDataLoader.Loaded">
            <summary>
            Loaded event
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.IEditDataLoader.New(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Creates new data 
            </summary>
            <param name="parameters">Parameters collection</param>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.IEditDataLoader.New(System.Collections.Generic.Dictionary{System.String,System.Object},System.Boolean,System.Boolean)">
            <summary>
            Creates new data 
            </summary>
            <param name="parameters">Parameters collection</param>
            <param name="newPrimaryData">if set to <c>true</c> [new primary data].</param>
            <param name="loadSecondaryData">if set to <c>true</c> [load secondary data].</param>
        </member>
        <member name="E:CODE.Framework.Core.ComponentModel.IEditDataLoader.Newed">
            <summary>
            Newed event
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.IEditDataLoader.Delete">
            <summary>
            Deletes data
            </summary>
        </member>
        <member name="E:CODE.Framework.Core.ComponentModel.IEditDataLoader.Deleted">
            <summary>
            Deleted event
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.IEditDataLoader.MultiThreaded">
            <summary>
            Should data operations be performed multi threaded?
            </summary>
            <remarks>
            This property shall always default to true.
            </remarks>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.IEditDataLoader.PrimaryData">
            <summary>
            Array list (collection) of primary data objects
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.IEditDataLoader.SecondaryData">
            <summary>
            Array list (collection) of secondary data objects
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.IEditDataLoader.GetParameterValue``1(System.String)">
            <summary>
            Retrieves the value of a parameter by name
            </summary>
            <param name="parameterName">Parameter name</param>
            <returns>Parameter value</returns>
            <typeparam name="TType">Expected return type</typeparam>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.IEditDataLoader.GetParameterValue(System.String)">
            <summary>
            Retrieves the value of a parameter by name
            </summary>
            <param name="parameterName">Parameter name</param>
            <returns>Parameter value</returns>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.IEditDataLoader.Parameters">
            <summary>
            Parameters collection (thread-safe)
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.IEditDataLoader.SetParameterValue``1(System.String,``0)">
            <summary>
            Sets the parameter value (and adds the key to the collection if need be).
            </summary>
            <typeparam name="TType">The type of the type.</typeparam>
            <param name="parameterName">Name of the parameter.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.IEditDataLoader.ParameterExists(System.String)">
            <summary>
            Returns true if the specified parameter exists
            </summary>
            <param name="parameterName">Name of the parameter.</param>
            <returns>True or false</returns>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.IEditDataLoader.MainDataEntity">
            <summary>
            Reference to the main data entity object
            </summary>
            <remarks>
            This object typically is the first object in the primary data collection
            </remarks>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.IEditDataLoader.SetEntityType``1">
            <summary>
            Sets the main entity type used for auto-loading of content.
            </summary>
            <typeparam name="TType">Data entity type</typeparam>
            <remarks>
            Any object can be set as the main data entity type. However, 
            to perform auto-data-handling, the object must have certain characteristics.
            
            New data creation:
            The type must have a static NewEntity() method (no parameters).
            
            Data loading:
            The type must have a static LoadEntity(Guid) method, -- and/or --
            The type must have a static LoadEntity(int) method, -- and/or --
            The type must have a static LoadEntity(string) method.
            
            Data saving:
            The type must implement ISavable (and probably should implement IVerifyable)
            
            Data verification:
            The type must implement IVerifyable
            
            Data delition:
            The type must implement IDeletable
            </remarks>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.IEditDataLoader.PerformAutoNew">
            <summary>
            Should the object perform auto news based on the entity type specified?
            </summary>
            <remarks>This property only has an impact after an entity type has been set by means of the SetEntityType() method</remarks>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.IEditDataLoader.PerformAutoLoad">
            <summary>
            Should the object perform auto loads based on the entity type specified?
            </summary>
            <remarks>This property only has an impact after an entity type has been set by means of the SetEntityType() method</remarks>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.IEditDataLoader.PerformAutoSave">
            <summary>
            Should the object perform auto saves based on the entity type specified?
            </summary>
            <remarks>This property only has an impact after an entity type has been set by means of the SetEntityType() method</remarks>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.IEditDataLoader.PerformAutoVerify">
            <summary>
            Should the object perform auto verifies based on the entity type specified?
            </summary>
            <remarks>This property only has an impact after an entity type has been set by means of the SetEntityType() method</remarks>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.IEditDataLoader.PerformAutoDelete">
            <summary>
            Should the object perform auto deletes based on the entity type specified?
            </summary>
            <remarks>This property only has an impact after an entity type has been set by means of the SetEntityType() method</remarks>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.IEditDataLoader.DataLoadControllers">
            <summary>
            Gets the data load controllers.
            </summary>
            <value>The data load controllers.</value>
        </member>
        <member name="T:CODE.Framework.Core.ComponentModel.IDeletable">
            <summary>
            Standard deletable interface
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.IDeletable.Delete">
            <summary>
            Delete
            </summary>
            <returns>Success (true or false)</returns>
        </member>
        <member name="T:CODE.Framework.Core.ComponentModel.IVerifyable">
            <summary>
            Standard verifyable interface
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.IVerifyable.Verify">
            <summary>
            Verify
            </summary>
        </member>
        <member name="T:CODE.Framework.Core.ComponentModel.ISavable">
            <summary>
            Standard savable interface
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.ISavable.Save">
            <summary>
            Save
            </summary>
            <returns>Success (true or false)</returns>
        </member>
        <member name="T:CODE.Framework.Core.ComponentModel.IDirty">
            <summary>
            Standard is-dirty interface (can be used to indicate whether data is dirty)
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.IDirty.IsDirty">
            <summary>
            Gets a value indicating whether this instance is dirty (has modified data).
            </summary>
            <value><c>true</c> if this instance is dirty; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:CODE.Framework.Core.ComponentModel.DataEventArgs">
            <summary>
            Event arguments for data operation events
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.DataEventArgs.#ctor(System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="success">Was the operation successful?</param>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.DataEventArgs.Success">
            <summary>
            Was the operation successful?
            </summary>
        </member>
        <member name="T:CODE.Framework.Core.ComponentModel.SavedEventArgs">
            <summary>
            Saved event arguments
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.SavedEventArgs.#ctor(System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="success">Was the save successful?</param>
        </member>
        <member name="T:CODE.Framework.Core.ComponentModel.VerifiedEventArgs">
            <summary>
            Verified event arguments
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.VerifiedEventArgs.#ctor(System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="success">Was the verify successful?</param>
        </member>
        <member name="T:CODE.Framework.Core.ComponentModel.LoadedEventArgs">
            <summary>
            Loaded event arguments
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.LoadedEventArgs.#ctor(System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="success">Was the load successful?</param>
        </member>
        <member name="T:CODE.Framework.Core.ComponentModel.NewedEventArgs">
            <summary>
            Newed event arguments
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.NewedEventArgs.#ctor(System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="success">Was the new successful?</param>
        </member>
        <member name="T:CODE.Framework.Core.ComponentModel.DeletedEventArgs">
            <summary>
            Deleted event arguments
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.DeletedEventArgs.#ctor(System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="success">Was the delete successful?</param>
        </member>
        <member name="T:CODE.Framework.Core.ComponentModel.ContentStatusChangedEventArgs">
            <summary>
            Content status changed event arguments
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.ContentStatusChangedEventArgs.#ctor(CODE.Framework.Core.ComponentModel.ContentStatus)">
            <summary>
            Constructor
            </summary>
            <param name="status">New status</param>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.ContentStatusChangedEventArgs.NewStatus">
            <summary>
            New content status
            </summary>
        </member>
        <member name="T:CODE.Framework.Core.ComponentModel.ContentStatus">
            <summary>
            Content load status of any given data loader
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.ComponentModel.ContentStatus.Virgin">
            <summary>
            Virgin (empty)
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.ComponentModel.ContentStatus.Loading">
            <summary>
            Data is being loaded
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.ComponentModel.ContentStatus.LoadComplete">
            <summary>
            Data has been loaded completely
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.ComponentModel.ContentStatus.DisplayComplete">
            <summary>
            Data display has been completed
            </summary>
        </member>
        <member name="T:CODE.Framework.Core.ComponentModel.EditDataLoader">
            <summary>
            Data loader object used to load
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.EditDataLoader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.ComponentModel.EditDataLoader"/> class.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.ComponentModel.EditDataLoader._dataLoadControllers">
            <summary>
            Internal reference for the data load controllers
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.EditDataLoader.DataLoadControllers">
            <summary>
            Collection of registered data load controllers
            </summary>
            <value>The data load controllers.</value>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.EditDataLoader.Host">
            <summary>
            Loader host
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.ComponentModel.EditDataLoader._primaryData">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.EditDataLoader.PrimaryData">
            <summary>
            Array list (collection) of primary data objects
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.EditDataLoader.MainDataEntity">
            <summary>
            Reference to the main data entity object
            </summary>
            <remarks>
            This object is the first object in the primary 
            data collection (if available)
            </remarks>
        </member>
        <member name="F:CODE.Framework.Core.ComponentModel.EditDataLoader._secondaryData">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.EditDataLoader.SecondaryData">
            <summary>
            Array list (collection) of secondary data objects
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.EditDataLoader.MultiThreaded">
            <summary>
            Should data operations be performed multi threaded?
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.EditDataLoader.PerformAutoNew">
            <summary>
            Should the object perform auto news based on the entity type specified?
            </summary>
            <remarks>This property only has an impact after an entity type has been set by means of the SetEntityType() method</remarks>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.EditDataLoader.PerformAutoLoad">
            <summary>
            Should the object perform auto loads based on the entity type specified?
            </summary>
            <remarks>This property only has an impact after an entity type has been set by means of the SetEntityType() method</remarks>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.EditDataLoader.PerformAutoSave">
            <summary>
            Should the object perform auto saves based on the entity type specified?
            </summary>
            <remarks>This property only has an impact after an entity type has been set by means of the SetEntityType() method</remarks>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.EditDataLoader.PerformAutoVerify">
            <summary>
            Should the object perform auto verifies based on the entity type specified?
            </summary>
            <remarks>This property only has an impact after an entity type has been set by means of the SetEntityType() method</remarks>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.EditDataLoader.PerformAutoDelete">
            <summary>
            Should the object perform auto deletes based on the entity type specified?
            </summary>
            <remarks>This property only has an impact after an entity type has been set by means of the SetEntityType() method</remarks>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.EditDataLoader.SetHost(CODE.Framework.Core.ComponentModel.IDataEditHandler)">
            <summary>
            Sets the host that is used to load data
            </summary>
            <param name="host">Host</param>
        </member>
        <member name="F:CODE.Framework.Core.ComponentModel.EditDataLoader._status">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.EditDataLoader.Status">
            <summary>
            Status
            </summary>
        </member>
        <member name="E:CODE.Framework.Core.ComponentModel.EditDataLoader.ContentStatusChanged">
            <summary>
            Content status changed event
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.ComponentModel.EditDataLoader._parameters">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.ComponentModel.EditDataLoader._parametersLock">
            <summary>
            Lock dummy
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.EditDataLoader.GetParameterValue``1(System.String)">
            <summary>
            Retrieves the value of a parameter by name
            </summary>
            <param name="parameterName">Parameter name</param>
            <returns>Parameter value</returns>
            <typeparam name="TType">Expected return type</typeparam>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.EditDataLoader.GetParameterValue(System.String)">
            <summary>
            Retrieves the value of a parameter by name
            </summary>
            <param name="parameterName">Parameter name</param>
            <returns>Parameter value</returns>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.EditDataLoader.Parameters">
            <summary>
            Parameters collection (thread-safe)
            </summary>
            <remarks>
            The dictionary returned by this property is made thread-safe by means of cloning.
            This means that every time this collection is accessed, a copy of the original (internal)
            collection is created. If you then interact with the collection, it will not update the
            original parameters. Therefore, most interaction with this collection should
            not happen through this property, but by means of the SetParameterValue()/GetParameterValue() 
            methods instead.
            </remarks>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.EditDataLoader.SetParameterValue``1(System.String,``0)">
            <summary>
            Sets the parameter value (and adds the key to the collection if need be).
            </summary>
            <typeparam name="TType">The type of the type.</typeparam>
            <param name="parameterName">Name of the parameter.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.EditDataLoader.ParameterExists(System.String)">
            <summary>
            Returns true if the specified parameter exists
            </summary>
            <param name="parameterName">Name of the parameter.</param>
            <returns>True or false</returns>
        </member>
        <member name="F:CODE.Framework.Core.ComponentModel.EditDataLoader._saveWorker">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.EditDataLoader.SaveWorker">
            <summary>
            Background worker used to save data
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.EditDataLoader.AvailableSaveWorker">
            <summary>
            Returns an instance of an available (non-busy) save worker
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.EditDataLoader.Save">
            <summary>
            Save
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.EditDataLoader.Save(System.EventHandler{CODE.Framework.Core.ComponentModel.SavedEventArgs},System.EventHandler{CODE.Framework.Core.ComponentModel.SavedEventArgs})">
            <summary>
            Saves all the current data
            </summary>
            <param name="successCallback">Callback for success</param>
            <param name="failureCallback">Callback for failure</param>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.EditDataLoader.AutoSave">
            <summary>
            Performs an auto-save on the current data entity
            </summary>
            <returns>True or false</returns>
        </member>
        <member name="F:CODE.Framework.Core.ComponentModel.EditDataLoader._saveResultsLocker">
            <summary>
            Lock dummy
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.ComponentModel.EditDataLoader._saveResult">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.EditDataLoader.WorkSaveContents(System.Object,System.ComponentModel.DoWorkEventArgs)">
            <summary>
            Triggers the save contents processing
            </summary>
            <param name="sender">Sender</param>
            <param name="e">Event args</param>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.EditDataLoader.WorkSaveContentsCompleted(System.Object,System.ComponentModel.RunWorkerCompletedEventArgs)">
            <summary>
            Event handler for completion of save contents
            </summary>
            <param name="sender">Sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="E:CODE.Framework.Core.ComponentModel.EditDataLoader.Saved">
            <summary>
            Saved event
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.ComponentModel.EditDataLoader._verifyWorker">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.EditDataLoader.VerifyWorker">
            <summary>
            Background worker used to verify data
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.EditDataLoader.AvailableVerifyWorker">
            <summary>
            Returns an instance of an available (non-busy) verify worker
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.EditDataLoader.Verify(System.EventHandler{CODE.Framework.Core.ComponentModel.VerifiedEventArgs},System.EventHandler{CODE.Framework.Core.ComponentModel.VerifiedEventArgs})">
            <summary>
            Verifies the current data
            </summary>
            <param name="successCallback">Callback for success</param>
            <param name="failureCallback">Callback for failure</param>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.EditDataLoader.Verify">
            <summary>
            Verify
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.EditDataLoader.AutoVerify">
            <summary>
            Performs an auto-verification on the current data entity
            </summary>
            <returns>True or false</returns>
        </member>
        <member name="F:CODE.Framework.Core.ComponentModel.EditDataLoader._verifyResultsLocker">
            <summary>
            Lock dummy
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.ComponentModel.EditDataLoader._verifyResult">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.EditDataLoader.WorkVerifyContents(System.Object,System.ComponentModel.DoWorkEventArgs)">
            <summary>
            Triggers the verify contents processing
            </summary>
            <param name="sender">Sender</param>
            <param name="e">Event args</param>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.EditDataLoader.WorkVerifyContentsCompleted(System.Object,System.ComponentModel.RunWorkerCompletedEventArgs)">
            <summary>
            Event handler for completion of verify contents
            </summary>
            <param name="sender">Sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="E:CODE.Framework.Core.ComponentModel.EditDataLoader.Verified">
            <summary>
            Verified event
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.ComponentModel.EditDataLoader._loadWorker">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.EditDataLoader.LoadWorker">
            <summary>
            Background worker used to load existing contents
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.EditDataLoader.AvailableLoadWorker">
            <summary>
            Returns an instance of an available (non-busy) load worker
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.EditDataLoader.Load(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Triggers the loading operation.
            </summary>
            <param name="parameters">Parameters collection</param>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.EditDataLoader.Load(System.Collections.Generic.Dictionary{System.String,System.Object},System.Boolean,System.Boolean)">
            <summary>
            Triggers the loading operation.
            </summary>
            <param name="parameters">Parameters collection</param>
            <param name="loadPrimaryData">if set to <c>true</c> [load primary data].</param>
            <param name="loadSecondaryData">if set to <c>true</c> [load secondary data].</param>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.EditDataLoader.HandleMultiThreadedLoad(System.Boolean,System.Boolean)">
            <summary>
            Handles the load operation in multi-threaded scenario.
            If loadSecondaryData is true, the secondary data gets triggered only after
            the primary data has been retrieved.
            The Loaded event is raised after all loading operations have been finished.
            </summary>
            <param name="loadPrimaryData">if set to <c>true</c> [load primary data].</param>
            <param name="loadSecondaryData">if set to <c>true</c> [load secondary data].</param>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.EditDataLoader.RegisterForRaisingLoadedEventAfterLoadSupportData(System.Boolean)">
            <summary>
            Registers for raising Loaded event after load support data.
            </summary>
            <param name="register">if set to <c>true</c> [register].</param>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.EditDataLoader.RegisterForRaisingLoadedEventAfterLoadPrimaryData(System.Boolean)">
            <summary>
            Registers for raising loaded event after load primary data.
            </summary>
            <param name="register">if set to <c>true</c> [register].</param>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.EditDataLoader.RegisterLoadSupportDataToRunAfterLoadPrimaryData(System.Boolean)">
            <summary>
            Registers the load support data to run after load primary data has finished.
            </summary>
            <param name="register">if set to <c>true</c> support data is loaded after primary data is done loading.
            If set to false, it unregisters the execution, in case it's been registered before.</param>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.EditDataLoader.HandleSingleThreadedLoad(System.Boolean,System.Boolean)">
            <summary>
            Handles the load operation in single-threaded scenario.
            If loadSecondaryData is true, the secondary data gets triggered only after
            the primary data has been retrieved.
            The Loaded event is raised after all loading operations have been finished.
            </summary>
            <param name="loadPrimaryData">if set to <c>true</c> [load primary data].</param>
            <param name="loadSecondaryData">if set to <c>true</c> [load secondary data].</param>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.EditDataLoader.TriggerLoaded">
            <summary>
            Triggers the loaded event
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.EditDataLoader.WorkLoadContents(System.Object,System.ComponentModel.DoWorkEventArgs)">
            <summary>
            Triggers the load contents processing
            </summary>
            <param name="sender">Sender</param>
            <param name="e">Event args</param>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.EditDataLoader.RunLoadContents">
            <summary>
            Performs the load-contents work
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.ComponentModel.EditDataLoader._loadDataMethod">
            <summary>
            For internal use only (cache)
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.EditDataLoader.AutoLoad">
            <summary>
            Performs an automatic load operation, if possible
            </summary>
            <returns>Data object or data object list</returns>
        </member>
        <member name="E:CODE.Framework.Core.ComponentModel.EditDataLoader.Loaded">
            <summary>
            Loaded event
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.ComponentModel.EditDataLoader._newWorker">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.EditDataLoader.NewWorker">
            <summary>
            Background worker used to load new contents
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.EditDataLoader.AvailableNewWorker">
            <summary>
            Returns an instance of an available (non-busy) new worker
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.EditDataLoader.New(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            New
            </summary>
            <param name="parameters">Parameters collection</param>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.EditDataLoader.New(System.Collections.Generic.Dictionary{System.String,System.Object},System.Boolean,System.Boolean)">
            <summary>
            New
            </summary>
            <param name="parameters">Parameters collection</param>
            <param name="newPrimaryData">if set to <c>true</c> [new primary data].</param>
            <param name="loadSecondaryData">if set to <c>true</c> [load secondary data].</param>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.EditDataLoader.TriggerNewed">
            <summary>
            Triggers the newed event
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.EditDataLoader.WorkNewContents(System.Object,System.ComponentModel.DoWorkEventArgs)">
            <summary>
            Triggers the new contents processing
            </summary>
            <param name="sender">Sender</param>
            <param name="e">Event args</param>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.EditDataLoader.RunNewContents">
            <summary>
            Performs the new-contents work
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.ComponentModel.EditDataLoader._newDataMethod">
            <summary>
            For internal use only (cache)
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.EditDataLoader.AutoNew">
            <summary>
            Performs an automatic new operation, if possible
            </summary>
            <returns>Data object or data object list</returns>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.EditDataLoader.WorkNewContentsCompleted(System.Object,System.ComponentModel.RunWorkerCompletedEventArgs)">
            <summary>
            Event handler for completion of new contents
            </summary>
            <param name="sender">Sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="E:CODE.Framework.Core.ComponentModel.EditDataLoader.Newed">
            <summary>
            Newed event
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.ComponentModel.EditDataLoader._loadSupportWorker">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.EditDataLoader.LoadSupportWorker">
            <summary>
            Background worker used to load support data
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.EditDataLoader.AvailableLoadSupportWorker">
            <summary>
            Returns an instance of an available (non-busy) load support worker
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.EditDataLoader.WorkLoadSupportData(System.Object,System.ComponentModel.DoWorkEventArgs)">
            <summary>
            Triggers the load of support data
            </summary>
            <param name="sender">Sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.EditDataLoader.RunLoadSupportData">
            <summary>
            Performs the load support data work
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.EditDataLoader.WorkLoadSupportDataCompleted(System.Object,System.ComponentModel.RunWorkerCompletedEventArgs)">
            <summary>
            Fires when the load of support data has been completed
            </summary>
            <param name="sender">Sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="F:CODE.Framework.Core.ComponentModel.EditDataLoader._deleteWorker">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.EditDataLoader.DeleteWorker">
            <summary>
            Background worker used to delete data
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.EditDataLoader.AvailableDeleteWorker">
            <summary>
            Returns an instance of an available (non-busy) delete worker
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.EditDataLoader.Delete">
            <summary>
            Deleted
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.EditDataLoader.AutoDelete">
            <summary>
            Performs an auto-delete on the current data entity
            </summary>
            <returns>True or false</returns>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.EditDataLoader.WorkDeleteData(System.Object,System.ComponentModel.DoWorkEventArgs)">
            <summary>
            Triggers the delete of data
            </summary>
            <param name="sender">Sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.EditDataLoader.WorkDeleteDataCompleted(System.Object,System.ComponentModel.RunWorkerCompletedEventArgs)">
            <summary>
            Fires when the delete of data has been completed
            </summary>
            <param name="sender">Sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="E:CODE.Framework.Core.ComponentModel.EditDataLoader.Deleted">
            <summary>
            Deleted event
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.EditDataLoader.PopulatePrimaryDataList(System.Object)">
            <summary>
            This method takes a data object and uses it to populate the list of primary data objects
            </summary>
            <param name="data">Data object</param>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.EditDataLoader.PopulateSecondaryDataList(System.Object)">
            <summary>
            This method takes a data object and uses it to populate the list of secondary data objects
            </summary>
            <param name="data">Data object</param>
        </member>
        <member name="F:CODE.Framework.Core.ComponentModel.EditDataLoader._entityType">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.EditDataLoader.SetEntityType``1">
            <summary>
            Sets the main entity type used for auto-loading of content.
            </summary>
            <typeparam name="TType">Data entity type</typeparam>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.EditDataLoader.CloneDictionary(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Creates a clone of a dictionary, so it can safely be used on a background thread.
            </summary>
            <param name="originalCollection">Original collection</param>
            <returns>Copy of the collection</returns>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.EditDataLoader.MergeDataSources(System.Object,System.Object)">
            <summary>
            Merges two data entity sources
            </summary>
            <param name="dataAuto">Source 1 (often auto-generated)</param>
            <param name="dataManual">Source 2 (often manually retrieved)</param>
            <returns>Data object, or list of data objects</returns>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.EditDataLoader.CommunicateExceptionToForegroundThread(System.Exception)">
            <summary>
            This method is used to funnel an exception to a different thread.
            </summary>
            <param name="ex">Exception</param>
        </member>
        <member name="T:CODE.Framework.Core.ComponentModel.EditDataLoader.VerifyCallbacks">
            <summary>
            This class is used to pass the callbacks to the worker thread.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.EditDataLoader.VerifyCallbacks.SuccessCallback">
            <summary>
            Success callback
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.EditDataLoader.VerifyCallbacks.FailureCallback">
            <summary>
            Failure callback
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.EditDataLoader.VerifyCallbacks.#ctor(System.EventHandler{CODE.Framework.Core.ComponentModel.VerifiedEventArgs},System.EventHandler{CODE.Framework.Core.ComponentModel.VerifiedEventArgs})">
            <summary>
            Constructor
            </summary>
            <param name="successCallback">Success callback</param>
            <param name="failureCallback">Failure callback</param>
        </member>
        <member name="T:CODE.Framework.Core.ComponentModel.EditDataLoader.SaveCallbacks">
            <summary>
            This class is used to pass the callbacks to the worker thread.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.EditDataLoader.SaveCallbacks.SuccessCallback">
            <summary>
            Success callback
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.EditDataLoader.SaveCallbacks.FailureCallback">
            <summary>
            Failure callback
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.EditDataLoader.SaveCallbacks.#ctor(System.EventHandler{CODE.Framework.Core.ComponentModel.SavedEventArgs},System.EventHandler{CODE.Framework.Core.ComponentModel.SavedEventArgs})">
            <summary>
            Constructor
            </summary>
            <param name="successCallback">Success callback</param>
            <param name="failureCallback">Failure callback</param>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.EditDataLoader.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.EditDataLoader.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.EditDataLoader.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="disposing">Are we disposing managed resources?</param>
        </member>
        <member name="F:CODE.Framework.Core.ComponentModel.EditDataLoader._disposed">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="T:CODE.Framework.Core.ComponentModel.IFilterable">
            <summary>
            Interface used tor filterable collections
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.IFilterable.Filter">
            <summary>
            Filter expression
            </summary>
            <example>FirstName = 'John'</example>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.IFilterable.FilterMaster">
            <summary>
            Filter expression
            </summary>
            <remarks>
            Filterable objects are always filtered by their master expression
            AND the individual filter expression.
            </remarks>
            <example>Status = 1</example>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.IFilterable.CompleteFilterExpression">
            <summary>
            Complete filter expression, including the master filter
            and the individual filter
            </summary>
            <example>(Status = 1) AND (FirstName = 'John')</example>
        </member>
        <member name="M:CODE.Framework.Core.ComponentModel.IFilterable.ClearFilter">
            <summary>
            Clears out all filter expressions, except the master filter.
            </summary>
        </member>
        <member name="T:CODE.Framework.Core.ComponentModel.ISortable">
            <summary>
            Interface used for sortable collections
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.ISortable.SortBy">
            <summary>
            Sort expression
            </summary>
            <example>FirstName, LastName</example>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.ISortable.SortByMaster">
            <summary>
            Master sort expression
            </summary>
            <remarks>
            Sortable objects are first sorted by the master expression, 
            and then by the sort-by expression
            </remarks>
            <example>Company</example>
        </member>
        <member name="P:CODE.Framework.Core.ComponentModel.ISortable.CompleteSortExpression">
            <summary>
            Complete sort expression
            </summary>
            <remarks>
            This is a combination of the master sort expression
            and the sort-by expression
            </remarks>
            <example>Company, FirstName, LastName</example>
        </member>
        <member name="T:CODE.Framework.Core.Configuration.ConfigurationSettings">
            <summary>
            The ConfigurationSettings class is the main point of access to an application settings
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Configuration.ConfigurationSettings.Settings">
            <summary>
            Exposes access to the Settings.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Configuration.ConfigurationSettings.Sources">
            <summary>
            Exposes access to the ConfigurationSettingsSourcesCollection.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Configuration.ConfigurationSettings.GetAllKeys">
            <summary>
            Returns a complete collection of all keys across all sources
            </summary>
            <returns>List&lt;System.String&gt;.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:CODE.Framework.Core.Configuration.ConfigurationSettingsSourcesCollection">
            <summary>
            Exposes ConfigurationSettingsSourcesCollection inside the ConfigurationSettings class (which is the main class that uses 
            the ConfigurationSettingsSourcesCollection class). The ConfigurationSettingsSourcesCollection class doesn't actually store ConfigurationSettingsSourcesCollection. Instead, it just
            exposes an interface for getting to ConfigurationSettingsSourcesCollection in sources that were added to the 
            ConfigurationSettings class.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Configuration.ConfigurationSettingsSourcesCollection.Item(System.Int32)">
            <summary>
            Indexer that allows a source to be accessed by its index. 
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Configuration.ConfigurationSettingsSourcesCollection.Add(CODE.Framework.Core.Configuration.IConfigurationSource)">
            <summary>
            Add sources to the collection.
            </summary>
            <param name="configurationSource">The source.</param>
        </member>
        <member name="M:CODE.Framework.Core.Configuration.ConfigurationSettingsSourcesCollection.GetAllSources">
            <summary>
            Returns a copy of all sources in a thread-safe way
            </summary>
            <returns>Array of configuration sources.</returns>
        </member>
        <member name="T:CODE.Framework.Core.Configuration.ConfigurationSource">
            <summary>
            This class implements the IConfigurationSource interface and it serves as the baseclass
            for the concrete "config source" classes.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Configuration.ConfigurationSource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Configuration.ConfigurationSource"/> class.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Configuration.ConfigurationSource.MarkDirty">
            <summary>
            Used to mark the source as dirty.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Configuration.ConfigurationSource.SetNotDirty(System.Boolean)">
            <summary>
            Reloads original settings for the configuration source and marks the source as not dirty.
            </summary>
            <param name="reloadSettings">Indicates whether the settings should be reloaded.</param>
        </member>
        <member name="P:CODE.Framework.Core.Configuration.ConfigurationSource.FriendlyName">
            <summary>
            Determines a friendly name for the source (such as "UserConfiguration", or "MachineConfiguration").
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Configuration.ConfigurationSource.IsSettingSupported(System.String)">
            <summary>
            Determines whether a given setting is supported by the class. The default behavior
            is provided, but the method is marked as virtual so that subclasses can provide their own
            implementation.
            </summary>
            <param name="settingName">The name of the setting.</param>
            <returns>True if the setting is supported, False if it is not.</returns>
            <example>
            // Look for setting in any source.
            bool supported = ConfigurationSettings.IsSettingsSupported("MySetting")
            // Look for setting only in a specific source.
            bool supported = ConfigurationSettings["Registry"].IsSettingsSupported("MySetting")
            </example>
        </member>
        <member name="M:CODE.Framework.Core.Configuration.ConfigurationSource.Read">
            <summary>
            Read persisted settings and place them in memory.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Configuration.ConfigurationSource.SupportsType(CODE.Framework.Core.Configuration.ConfigurationSourceTypes)">
            <summary>
            Checks whether a given Source Type is supported.
            </summary>
            <param name="sourceType">The type of source being checked, according to enum EPS.Configuration.ConfigurationSourceTypes.</param>
            <returns>True or False, indicating whether or not the source type is supported.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Configuration.ConfigurationSource.Write">
            <summary>
            Persists settings, taking it from memory to the storage being used.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Configuration.ConfigurationSource.IsSecure">
            <summary>
            Indicates whether the source is considered secure or not.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Configuration.ConfigurationSource.IsReadOnly">
            <summary>
            Indicates whether the source is considered ReadOnly.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Configuration.ConfigurationSource.Settings">
            <summary>Exposes the Settings member.</summary>
            <example>
            var setting = ConfigurationSettings.Settings["MySetting"]
            </example>
        </member>
        <member name="P:CODE.Framework.Core.Configuration.ConfigurationSource.IsActive">
            <summary>
            Indicates whether the source is active (enabled)
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Configuration.ConfigurationSource.IsDirty">
            <summary>
            Gets a value indicating whether the source has changed since
            the last time it's been populated.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Configuration.ConfigurationSource.InternalSettings">
            <summary>
            The internal settings
            </summary>
        </member>
        <member name="T:CODE.Framework.Core.Configuration.ConfigurationSourceSettings">
            <summary>
            Hashtable that keeps a Name-Value list of settings. This class is mainly used by the ConfigurationSource class.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Configuration.ConfigurationSourceSettings.#ctor(CODE.Framework.Core.Configuration.IConfigurationSource,System.TimeSpan)">
            <summary>
            Constructor.
            </summary>
            <param name="parent">The parent configuration source that hosts this settings collection.</param>
            <param name="maxSettingsCacheDuration">Maximum duration of the settings cache.</param>
        </member>
        <member name="M:CODE.Framework.Core.Configuration.ConfigurationSourceSettings.#ctor(CODE.Framework.Core.Configuration.IConfigurationSource)">
            <summary>
            Constructor.
            </summary>
            <param name="parent">The parent configuration source that hosts this settings collection.</param>
        </member>
        <member name="M:CODE.Framework.Core.Configuration.ConfigurationSourceSettings.ApplyCurrentReadTimestamp">
            <summary>
            Applies the current date/time as the last read timestamp
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Configuration.ConfigurationSourceSettings.RemoveSettingWhenSetToNull">
            <summary>
            Defines whether null values are automatically removed from the settings collection
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Configuration.ConfigurationSourceSettings.Item(System.String)">
            <summary>
            Indexer.
            </summary>
            <remarks>
            The main reason this indexer is being overridden is so that we can
            flag as "dirty" the config source that hosts the settings.
            </remarks>
        </member>
        <member name="M:CODE.Framework.Core.Configuration.ConfigurationSourceSettings.GetAllKeys">
            <summary>
            Returns a copied list of all keys in a thread-safe way.
            </summary>
            <returns>List of all keys</returns>
        </member>
        <member name="M:CODE.Framework.Core.Configuration.ConfigurationSourceSettings.GetAllKeysAndValues">
            <summary>
            Returns a copied list of all keys and values in a thread-safe way
            </summary>
            <returns>List of all keys and values</returns>
        </member>
        <member name="M:CODE.Framework.Core.Configuration.ConfigurationSourceSettings.ContainsKey(System.String)">
            <summary>
            Determines whether the specified key is contained in the settings collection.
            </summary>
            <param name="key">The key.</param>
            <returns><c>true</c> if the specified key is contained in the collection; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Configuration.ConfigurationSourceSettings.Add(System.String,System.String)">
            <summary>
            Adds the specified setting
            </summary>
            <param name="key">The key/setting name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:CODE.Framework.Core.Configuration.ConfigurationSourceSettings.Clear">
            <summary>
            Clears the settings.
            </summary>
        </member>
        <member name="T:CODE.Framework.Core.Configuration.DotNetConfigurationFile">
            <summary>
            This class wraps up the functionality available natively in .NET for reading 
            the default settings (AppSettings) available in the config files.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Configuration.DotNetConfigurationFile.FriendlyName">
            <summary>
            Indicates source's Friendly Name.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Configuration.DotNetConfigurationFile.IsReadOnly">
            <summary>
            Indicates whether the source is read-only. .NET's native AppSettings is read-only,
            therefore we mark this class as read-only too.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Configuration.DotNetConfigurationFile.IsSecure">
            <summary>
            Determines whether the source is secure or not.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Configuration.DotNetConfigurationFile.Read">
            <summary>
            Read settings from native .NET object and feed settings into our own object.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Configuration.DotNetConfigurationFile.SupportsType(CODE.Framework.Core.Configuration.ConfigurationSourceTypes)">
            <summary>
            Checks whether a given source type is supported, according to Enum ConfigurationSourceTypes.
            </summary>
            <param name="sourceType">The source type.</param>
            <returns>True/False for supported or not.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Configuration.DotNetConfigurationFile.Write">
            <summary>
            Persists settings from memory into storage.
            </summary>
        </member>
        <member name="T:CODE.Framework.Core.Configuration.IConfigurationSource">
            <summary>
            Interface that determines everything a configuration source must expose. 
            There is a ConfigurationSource abstract class that implements this interface, giving 
            a starting point in case we need such class.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Configuration.IConfigurationSource.FriendlyName">
            <summary>
            Determines a friendly name for the source (such as "UserConfiguration", or "MachineConfiguration").
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Configuration.IConfigurationSource.IsSettingSupported(System.String)">
            <summary>
            Checks whether a given setting is supported or not.
            </summary>
            <param name="settingName">The setting.</param>
            <returns>True/False for supported or not.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Configuration.IConfigurationSource.Read">
            <summary>
            Read settings from storage and put them in memory.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Configuration.IConfigurationSource.SupportsType(CODE.Framework.Core.Configuration.ConfigurationSourceTypes)">
            <summary>
            Checks whether a given source type is supported.
            </summary>
            <param name="sourceType">The source type, according to enum ConfigurationSourceTypes.</param>
            <returns>True/False for supported or not.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Configuration.IConfigurationSource.Write">
            <summary>
            Persists settings into storage.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Configuration.IConfigurationSource.IsSecure">
            <summary>
            Indicates whether source is secure or not.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Configuration.IConfigurationSource.IsReadOnly">
            <summary>
            Indicates whether the source is ReadOnly, meaning that settings can be read, but cannot be written to.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Configuration.IConfigurationSource.IsActive">
            <summary>
            Indicates whether the source is active (enabled)
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Configuration.IConfigurationSource.Settings">
            <summary>
            Keeps list of settings and its values.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Configuration.IConfigurationSource.IsDirty">
            <summary>
            Gets a value indicating whether the source has changed since 
            the last time it's been populated.
            </summary>
        </member>
        <member name="T:CODE.Framework.Core.Configuration.MemorySettings">
            <summary>
            summary description for specialconfiguration.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Configuration.MemorySettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Configuration.MemorySettings"/> class.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Configuration.MemorySettings.FriendlyName">
            <summary>
            Source's Friendly Name.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Configuration.MemorySettings.IsSecure">
            <summary>
            Determines whether source is secure.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Configuration.MemorySettings.IsReadOnly">
            <summary>
            Indicates if this source is read-only.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Configuration.MemorySettings.Read">
            <summary>
            Read settings from file.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Configuration.MemorySettings.Write">
            <summary>
            Write settings to file.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Configuration.MemorySettings.SupportsType(CODE.Framework.Core.Configuration.ConfigurationSourceTypes)">
            <summary>
            Checks whether a given type is supported.
            </summary>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="T:CODE.Framework.Core.Configuration.SecureConfigurationFile">
            <summary>
            This class wraps up the functionality available natively in .NET for reading 
            the default settings (AppSettings) available in the config files.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Configuration.SecureConfigurationFile.EncryptionKey">
            <summary>
            Key used to encrypt and decrypt configuration settings
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Configuration.SecureConfigurationFile.ConfigurationFileName">
            <summary>
            File name for the secure configuration file (if left empty, 'App.sconfig' will be used in the same directory as core.dll)
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Configuration.SecureConfigurationFile.FriendlyName">
            <summary>
            Indicates source's Friendly Name.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Configuration.SecureConfigurationFile.IsReadOnly">
            <summary>
            Indicates whether the source is read-only. .NET's native AppSettings is read-only,
            therefore we mark this class as read-only too.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Configuration.SecureConfigurationFile.IsSecure">
            <summary>
            Determines whether the source is secure or not.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Configuration.SecureConfigurationFile.GetConfigurationFileName">
            <summary>
            Generates a standard file name to be used for the configuration file
            </summary>
            <returns></returns>
        </member>
        <member name="M:CODE.Framework.Core.Configuration.SecureConfigurationFile.Read">
            <summary>
            Read settings from native .NET object and feed settings into our own object.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Configuration.SecureConfigurationFile.SupportsType(CODE.Framework.Core.Configuration.ConfigurationSourceTypes)">
            <summary>
            Checks whether a given source type is supported, according to Enum ConfigurationSourceTypes.
            </summary>
            <param name="sourceType">The source type.</param>
            <returns>True/False for supported or not.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Configuration.SecureConfigurationFile.Write">
            <summary>
            Persists settings from memory into storage.
            </summary>
        </member>
        <member name="T:CODE.Framework.Core.Configuration.SettingNotSupportedException">
            <summary>
            Exception thrown when some code is trying to write to a read-only setting.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Configuration.SettingNotSupportedException.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Configuration.SettingNotSupportedException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message</param>
        </member>
        <member name="M:CODE.Framework.Core.Configuration.SettingNotSupportedException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message.</param>
            <param name="innerException">Inner exception.</param>
        </member>
        <member name="M:CODE.Framework.Core.Configuration.SettingNotSupportedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor.
            </summary>
            <param name="info">Serialization information.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="T:CODE.Framework.Core.Configuration.SettingReadOnlyException">
            <summary>
            Exception thrown when some code is trying to write to a read-only setting.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Configuration.SettingReadOnlyException.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Configuration.SettingReadOnlyException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message</param>
        </member>
        <member name="M:CODE.Framework.Core.Configuration.SettingReadOnlyException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message.</param>
            <param name="innerException">Inner exception.</param>
        </member>
        <member name="M:CODE.Framework.Core.Configuration.SettingReadOnlyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor.
            </summary>
            <param name="info">Serialization information.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="T:CODE.Framework.Core.Configuration.Settings">
            <summary>
            Exposes settings inside the ConfigurationSettings class (which is the main class that uses 
            the Settings class). The Settings class doesn't actually store settings. Instead, it just
            exposes an interface for getting to settings in sources that were added to the 
            ConfigurationSettings class.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Configuration.Settings.Item(System.String)">
            <summary>
            Indexer that allows a setting to be accessed by its name. 
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Configuration.Settings.IsSettingSupported(System.String)">
            <summary>
            Checks whether a given setting is supported by any source inside the ConfigurationSettings object.
            </summary>
            <param name="setting">Name of the setting.</param>
            <returns>True/False, indicating whether the setting is supported or not.</returns>
        </member>
        <member name="T:CODE.Framework.Core.Configuration.ConfigurationSourceTypes">
            <summary>
            Enum with possible Configuration Source Types.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Configuration.ConfigurationSourceTypes.User">
            <summary>User</summary>
        </member>
        <member name="F:CODE.Framework.Core.Configuration.ConfigurationSourceTypes.Machine">
            <summary>Machine</summary>
        </member>
        <member name="F:CODE.Framework.Core.Configuration.ConfigurationSourceTypes.System">
            <summary>System</summary>
        </member>
        <member name="F:CODE.Framework.Core.Configuration.ConfigurationSourceTypes.Network">
            <summary>Network</summary>
        </member>
        <member name="F:CODE.Framework.Core.Configuration.ConfigurationSourceTypes.Security">
            <summary>Security</summary>
        </member>
        <member name="F:CODE.Framework.Core.Configuration.ConfigurationSourceTypes.Other">
            <summary>Other</summary>
        </member>
        <member name="T:CODE.Framework.Core.Configuration.SecurityType">
            <summary>
            Enum with possible Security Types.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Configuration.SecurityType.Secure">
            <summary>Secure</summary>
        </member>
        <member name="F:CODE.Framework.Core.Configuration.SecurityType.NonSecure">
            <summary>Non-Secure</summary>
        </member>
        <member name="T:CODE.Framework.Core.Exceptions.IndexOutOfBoundsException">
            <summary>
            Exception class used for enumeration errors.
            The error is raised when an enumeration finds its enumeration source in disarray
            and thus overshoots the sources bounds
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Exceptions.IndexOutOfBoundsException.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Exceptions.IndexOutOfBoundsException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message</param>
        </member>
        <member name="M:CODE.Framework.Core.Exceptions.IndexOutOfBoundsException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message.</param>
            <param name="innerException">Inner exception.</param>
        </member>
        <member name="M:CODE.Framework.Core.Exceptions.IndexOutOfBoundsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor.
            </summary>
            <param name="info">Serialization information.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="T:CODE.Framework.Core.Exceptions.MissingConfigurationSettingException">
            <summary>
            This exception is thrown whenever part of Milos requires a configuration setting that is not present.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Exceptions.MissingConfigurationSettingException.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Exceptions.MissingConfigurationSettingException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="setting">Name of the missing setting</param>
        </member>
        <member name="M:CODE.Framework.Core.Exceptions.MissingConfigurationSettingException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message.</param>
            <param name="innerException">Inner exception.</param>
        </member>
        <member name="M:CODE.Framework.Core.Exceptions.MissingConfigurationSettingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor.
            </summary>
            <param name="info">Serialization information.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="T:CODE.Framework.Core.Exceptions.NullReferenceException">
            <summary>
            Exception class used for null reference exceptions thrown by Milos.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Exceptions.NullReferenceException.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Exceptions.NullReferenceException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message</param>
        </member>
        <member name="M:CODE.Framework.Core.Exceptions.NullReferenceException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message.</param>
            <param name="innerException">Inner exception.</param>
        </member>
        <member name="M:CODE.Framework.Core.Exceptions.NullReferenceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor.
            </summary>
            <param name="info">Serialization information.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.Bson.BsonObjectId">
            <summary>
            Represents a BSON Oid (object id).
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Bson.BsonObjectId.Value">
            <summary>
            Gets or sets the value of the Oid.
            </summary>
            <value>The value of the Oid.</value>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Bson.BsonObjectId.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Newtonsoft.Bson.BsonObjectId"/> class.
            </summary>
            <param name="value">The Oid value.</param>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.Bson.BsonReader">
            <summary>
            Represents a reader that provides fast, non-cached, forward-only access to serialized JSON data.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Bson.BsonReader.JsonNet35BinaryCompatibility">
            <summary>
            Gets or sets a value indicating whether binary data reading should compatible with incorrect Json.NET 3.5 written binary.
            </summary>
            <value>
            	<c>true</c> if binary data reading will be compatible with incorrect Json.NET 3.5 written binary; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Bson.BsonReader.ReadRootValueAsArray">
            <summary>
            Gets or sets a value indicating whether the root object will be read as a JSON array.
            </summary>
            <value>
            	<c>true</c> if the root object will be read as a JSON array; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Bson.BsonReader.DateTimeKindHandling">
            <summary>
            Gets or sets the <see cref="T:System.DateTimeKind" /> used when reading <see cref="T:System.DateTime"/> values from BSON.
            </summary>
            <value>The <see cref="T:System.DateTimeKind" /> used when reading <see cref="T:System.DateTime"/> values from BSON.</value>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Bson.BsonReader.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Newtonsoft.Bson.BsonReader"/> class.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Bson.BsonReader.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Newtonsoft.Bson.BsonReader"/> class.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Bson.BsonReader.#ctor(System.IO.Stream,System.Boolean,System.DateTimeKind)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Newtonsoft.Bson.BsonReader"/> class.
            </summary>
            <param name="stream">The stream.</param>
            <param name="readRootValueAsArray">if set to <c>true</c> the root object will be read as a JSON array.</param>
            <param name="dateTimeKindHandling">The <see cref="T:System.DateTimeKind" /> used when reading <see cref="T:System.DateTime"/> values from BSON.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Bson.BsonReader.#ctor(System.IO.BinaryReader,System.Boolean,System.DateTimeKind)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Newtonsoft.Bson.BsonReader"/> class.
            </summary>
            <param name="reader">The reader.</param>
            <param name="readRootValueAsArray">if set to <c>true</c> the root object will be read as a JSON array.</param>
            <param name="dateTimeKindHandling">The <see cref="T:System.DateTimeKind" /> used when reading <see cref="T:System.DateTime"/> values from BSON.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Bson.BsonReader.ReadAsBytes">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Byte"/>[].
            </summary>
            <returns>
            A <see cref="T:System.Byte"/>[] or a null reference if the next JSON token is null. This method will return <c>null</c> at the end of an array.
            </returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Bson.BsonReader.ReadAsDecimal">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Bson.BsonReader.ReadAsInt32">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Bson.BsonReader.ReadAsString">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.String"/>.
            </summary>
            <returns>A <see cref="T:System.String"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Bson.BsonReader.ReadAsDateTime">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.String"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Bson.BsonReader.ReadAsDateTimeOffset">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>
            A <see cref="T:System.Nullable`1"/>. This method will return <c>null</c> at the end of an array.
            </returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Bson.BsonReader.Read">
            <summary>
            Reads the next JSON token from the stream.
            </summary>
            <returns>
            true if the next token was read successfully; false if there are no more tokens to read.
            </returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Bson.BsonReader.Close">
            <summary>
            Changes the <see cref="T:CODE.Framework.Core.Newtonsoft.JsonReader.State"/> to Closed.
            </summary>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.Bson.BsonWriter">
            <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of generating JSON data.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Bson.BsonWriter.DateTimeKindHandling">
            <summary>
            Gets or sets the <see cref="T:System.DateTimeKind" /> used when writing <see cref="T:System.DateTime"/> values to BSON.
            When set to <see cref="F:System.DateTimeKind.Unspecified" /> no conversion will occur.
            </summary>
            <value>The <see cref="T:System.DateTimeKind" /> used when writing <see cref="T:System.DateTime"/> values to BSON.</value>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Bson.BsonWriter.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Newtonsoft.Bson.BsonWriter"/> class.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Bson.BsonWriter.#ctor(System.IO.BinaryWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Newtonsoft.Bson.BsonWriter"/> class.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Bson.BsonWriter.Flush">
            <summary>
            Flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Bson.BsonWriter.WriteEnd(CODE.Framework.Core.Newtonsoft.JsonToken)">
            <summary>
            Writes the end.
            </summary>
            <param name="token">The token.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Bson.BsonWriter.WriteComment(System.String)">
            <summary>
            Writes out a comment <code>/*...*/</code> containing the specified text.
            </summary>
            <param name="text">Text to place inside the comment.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Bson.BsonWriter.WriteStartConstructor(System.String)">
            <summary>
            Writes the start of a constructor with the given name.
            </summary>
            <param name="name">The name of the constructor.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Bson.BsonWriter.WriteRaw(System.String)">
            <summary>
            Writes raw JSON.
            </summary>
            <param name="json">The raw JSON to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Bson.BsonWriter.WriteRawValue(System.String)">
            <summary>
            Writes raw JSON where a value is expected and updates the writer's state.
            </summary>
            <param name="json">The raw JSON to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Bson.BsonWriter.WriteStartArray">
            <summary>
            Writes the beginning of a JSON array.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Bson.BsonWriter.WriteStartObject">
            <summary>
            Writes the beginning of a JSON object.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Bson.BsonWriter.WritePropertyName(System.String)">
            <summary>
            Writes the property name of a name/value pair on a JSON object.
            </summary>
            <param name="name">The name of the property.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Bson.BsonWriter.Close">
            <summary>
            Closes this stream and the underlying stream.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Bson.BsonWriter.WriteValue(System.Object)">
            <summary>
            Writes a <see cref="T:System.Object"/> value.
            An error will raised if the value cannot be written as a single JSON token.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> value to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Bson.BsonWriter.WriteNull">
            <summary>
            Writes a null value.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Bson.BsonWriter.WriteUndefined">
            <summary>
            Writes an undefined value.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Bson.BsonWriter.WriteValue(System.String)">
            <summary>
            Writes a <see cref="T:System.String"/> value.
            </summary>
            <param name="value">The <see cref="T:System.String"/> value to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Bson.BsonWriter.WriteValue(System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int32"/> value to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Bson.BsonWriter.WriteValue(System.UInt32)">
            <summary>
            Writes a <see cref="T:System.UInt32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt32"/> value to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Bson.BsonWriter.WriteValue(System.Int64)">
            <summary>
            Writes a <see cref="T:System.Int64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int64"/> value to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Bson.BsonWriter.WriteValue(System.UInt64)">
            <summary>
            Writes a <see cref="T:System.UInt64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt64"/> value to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Bson.BsonWriter.WriteValue(System.Single)">
            <summary>
            Writes a <see cref="T:System.Single"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Single"/> value to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Bson.BsonWriter.WriteValue(System.Double)">
            <summary>
            Writes a <see cref="T:System.Double"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Double"/> value to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Bson.BsonWriter.WriteValue(System.Boolean)">
            <summary>
            Writes a <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Boolean"/> value to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Bson.BsonWriter.WriteValue(System.Int16)">
            <summary>
            Writes a <see cref="T:System.Int16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int16"/> value to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Bson.BsonWriter.WriteValue(System.UInt16)">
            <summary>
            Writes a <see cref="T:System.UInt16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt16"/> value to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Bson.BsonWriter.WriteValue(System.Char)">
            <summary>
            Writes a <see cref="T:System.Char"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Char"/> value to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Bson.BsonWriter.WriteValue(System.Byte)">
            <summary>
            Writes a <see cref="T:System.Byte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Byte"/> value to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Bson.BsonWriter.WriteValue(System.SByte)">
            <summary>
            Writes a <see cref="T:System.SByte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.SByte"/> value to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Bson.BsonWriter.WriteValue(System.Decimal)">
            <summary>
            Writes a <see cref="T:System.Decimal"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Decimal"/> value to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Bson.BsonWriter.WriteValue(System.DateTime)">
            <summary>
            Writes a <see cref="T:System.DateTime"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTime"/> value to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Bson.BsonWriter.WriteValue(System.DateTimeOffset)">
            <summary>
            Writes a <see cref="T:System.DateTimeOffset"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTimeOffset"/> value to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Bson.BsonWriter.WriteValue(System.Byte[])">
            <summary>
            Writes a <see cref="T:System.Byte"/>[] value.
            </summary>
            <param name="value">The <see cref="T:System.Byte"/>[] value to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Bson.BsonWriter.WriteValue(System.Guid)">
            <summary>
            Writes a <see cref="T:System.Guid"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Guid"/> value to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Bson.BsonWriter.WriteValue(System.TimeSpan)">
            <summary>
            Writes a <see cref="T:System.TimeSpan"/> value.
            </summary>
            <param name="value">The <see cref="T:System.TimeSpan"/> value to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Bson.BsonWriter.WriteValue(System.Uri)">
            <summary>
            Writes a <see cref="T:System.Uri"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Uri"/> value to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Bson.BsonWriter.WriteObjectId(System.Byte[])">
            <summary>
            Writes a <see cref="T:System.Byte"/>[] value that represents a BSON object id.
            </summary>
            <param name="value">The Object ID value to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Bson.BsonWriter.WriteRegex(System.String,System.String)">
            <summary>
            Writes a BSON regex.
            </summary>
            <param name="pattern">The regex pattern.</param>
            <param name="options">The regex options.</param>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.ConstructorHandling">
            <summary>
            Specifies how constructors are used when initializing objects during deserialization by the <see cref="T:CODE.Framework.Core.Newtonsoft.JsonSerializer"/>.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.ConstructorHandling.Default">
            <summary>
            First attempt to use the public default constructor, then fall back to single paramatized constructor, then the non-public default constructor.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.ConstructorHandling.AllowNonPublicDefaultConstructor">
            <summary>
            Json.NET will use a non-public default constructor before falling back to a paramatized constructor.
            </summary>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.Converters.BinaryConverter">
            <summary>
            Converts a binary value to and from a base 64 string value.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Converters.BinaryConverter.WriteJson(CODE.Framework.Core.Newtonsoft.JsonWriter,System.Object,CODE.Framework.Core.Newtonsoft.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:CODE.Framework.Core.Newtonsoft.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Converters.BinaryConverter.ReadJson(CODE.Framework.Core.Newtonsoft.JsonReader,System.Type,System.Object,CODE.Framework.Core.Newtonsoft.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:CODE.Framework.Core.Newtonsoft.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Converters.BinaryConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.Converters.BsonObjectIdConverter">
            <summary>
            Converts a <see cref="T:CODE.Framework.Core.Newtonsoft.Bson.BsonObjectId"/> to and from JSON and BSON.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Converters.BsonObjectIdConverter.WriteJson(CODE.Framework.Core.Newtonsoft.JsonWriter,System.Object,CODE.Framework.Core.Newtonsoft.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:CODE.Framework.Core.Newtonsoft.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Converters.BsonObjectIdConverter.ReadJson(CODE.Framework.Core.Newtonsoft.JsonReader,System.Type,System.Object,CODE.Framework.Core.Newtonsoft.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:CODE.Framework.Core.Newtonsoft.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Converters.BsonObjectIdConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.Converters.DataSetConverter">
            <summary>
            Converts a <see cref="T:System.Data.DataSet"/> to and from JSON.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Converters.DataSetConverter.WriteJson(CODE.Framework.Core.Newtonsoft.JsonWriter,System.Object,CODE.Framework.Core.Newtonsoft.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:CODE.Framework.Core.Newtonsoft.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Converters.DataSetConverter.ReadJson(CODE.Framework.Core.Newtonsoft.JsonReader,System.Type,System.Object,CODE.Framework.Core.Newtonsoft.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:CODE.Framework.Core.Newtonsoft.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Converters.DataSetConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified value type.
            </summary>
            <param name="valueType">Type of the value.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified value type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.Converters.DataTableConverter">
            <summary>
            Converts a <see cref="T:System.Data.DataTable"/> to and from JSON.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Converters.DataTableConverter.WriteJson(CODE.Framework.Core.Newtonsoft.JsonWriter,System.Object,CODE.Framework.Core.Newtonsoft.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:CODE.Framework.Core.Newtonsoft.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Converters.DataTableConverter.ReadJson(CODE.Framework.Core.Newtonsoft.JsonReader,System.Type,System.Object,CODE.Framework.Core.Newtonsoft.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:CODE.Framework.Core.Newtonsoft.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Converters.DataTableConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified value type.
            </summary>
            <param name="valueType">Type of the value.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified value type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.Converters.DateTimeConverterBase">
            <summary>
            Provides a base class for converting a <see cref="T:System.DateTime"/> to and from JSON.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Converters.DateTimeConverterBase.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.Converters.DiscriminatedUnionConverter">
            <summary>
            Converts a F# discriminated union type to and from JSON.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Converters.DiscriminatedUnionConverter.WriteJson(CODE.Framework.Core.Newtonsoft.JsonWriter,System.Object,CODE.Framework.Core.Newtonsoft.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:CODE.Framework.Core.Newtonsoft.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Converters.DiscriminatedUnionConverter.ReadJson(CODE.Framework.Core.Newtonsoft.JsonReader,System.Type,System.Object,CODE.Framework.Core.Newtonsoft.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:CODE.Framework.Core.Newtonsoft.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Converters.DiscriminatedUnionConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.Converters.EntityKeyMemberConverter">
            <summary>
            Converts an Entity Framework EntityKey to and from JSON.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Converters.EntityKeyMemberConverter.WriteJson(CODE.Framework.Core.Newtonsoft.JsonWriter,System.Object,CODE.Framework.Core.Newtonsoft.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:CODE.Framework.Core.Newtonsoft.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Converters.EntityKeyMemberConverter.ReadJson(CODE.Framework.Core.Newtonsoft.JsonReader,System.Type,System.Object,CODE.Framework.Core.Newtonsoft.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:CODE.Framework.Core.Newtonsoft.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Converters.EntityKeyMemberConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.Converters.ExpandoObjectConverter">
            <summary>
            Converts an ExpandoObject to and from JSON.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Converters.ExpandoObjectConverter.WriteJson(CODE.Framework.Core.Newtonsoft.JsonWriter,System.Object,CODE.Framework.Core.Newtonsoft.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:CODE.Framework.Core.Newtonsoft.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Converters.ExpandoObjectConverter.ReadJson(CODE.Framework.Core.Newtonsoft.JsonReader,System.Type,System.Object,CODE.Framework.Core.Newtonsoft.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:CODE.Framework.Core.Newtonsoft.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Converters.ExpandoObjectConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Converters.ExpandoObjectConverter.CanWrite">
            <summary>
            Gets a value indicating whether this <see cref="T:CODE.Framework.Core.Newtonsoft.JsonConverter"/> can write JSON.
            </summary>
            <value>
            	<c>true</c> if this <see cref="T:CODE.Framework.Core.Newtonsoft.JsonConverter"/> can write JSON; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.Converters.JavaScriptDateTimeConverter">
            <summary>
            Converts a <see cref="T:System.DateTime"/> to and from a JavaScript date constructor (e.g. new Date(52231943)).
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Converters.JavaScriptDateTimeConverter.WriteJson(CODE.Framework.Core.Newtonsoft.JsonWriter,System.Object,CODE.Framework.Core.Newtonsoft.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:CODE.Framework.Core.Newtonsoft.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Converters.JavaScriptDateTimeConverter.ReadJson(CODE.Framework.Core.Newtonsoft.JsonReader,System.Type,System.Object,CODE.Framework.Core.Newtonsoft.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:CODE.Framework.Core.Newtonsoft.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing property value of the JSON that is being converted.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.Converters.KeyValuePairConverter">
            <summary>
            Converts a <see cref="T:System.Collections.Generic.KeyValuePair`2"/> to and from JSON.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Converters.KeyValuePairConverter.WriteJson(CODE.Framework.Core.Newtonsoft.JsonWriter,System.Object,CODE.Framework.Core.Newtonsoft.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:CODE.Framework.Core.Newtonsoft.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Converters.KeyValuePairConverter.ReadJson(CODE.Framework.Core.Newtonsoft.JsonReader,System.Type,System.Object,CODE.Framework.Core.Newtonsoft.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:CODE.Framework.Core.Newtonsoft.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Converters.KeyValuePairConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.Converters.RegexConverter">
            <summary>
            Converts a <see cref="T:System.Text.RegularExpressions.Regex"/> to and from JSON and BSON.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Converters.RegexConverter.WriteJson(CODE.Framework.Core.Newtonsoft.JsonWriter,System.Object,CODE.Framework.Core.Newtonsoft.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:CODE.Framework.Core.Newtonsoft.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Converters.RegexConverter.ReadJson(CODE.Framework.Core.Newtonsoft.JsonReader,System.Type,System.Object,CODE.Framework.Core.Newtonsoft.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:CODE.Framework.Core.Newtonsoft.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Converters.RegexConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.Converters.XmlNodeConverter">
            <summary>
            Converts XML to and from JSON.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Converters.XmlNodeConverter.DeserializeRootElementName">
            <summary>
            Gets or sets the name of the root element to insert when deserializing to XML if the JSON structure has produces multiple root elements.
            </summary>
            <value>The name of the deserialize root element.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Converters.XmlNodeConverter.WriteArrayAttribute">
            <summary>
            Gets or sets a flag to indicate whether to write the Json.NET array attribute.
            This attribute helps preserve arrays when converting the written XML back to JSON.
            </summary>
            <value><c>true</c> if the array attibute is written to the XML; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Converters.XmlNodeConverter.OmitRootObject">
            <summary>
            Gets or sets a value indicating whether to write the root JSON object.
            </summary>
            <value><c>true</c> if the JSON root object is omitted; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Converters.XmlNodeConverter.WriteJson(CODE.Framework.Core.Newtonsoft.JsonWriter,System.Object,CODE.Framework.Core.Newtonsoft.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:CODE.Framework.Core.Newtonsoft.JsonWriter"/> to write to.</param>
            <param name="serializer">The calling serializer.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Converters.XmlNodeConverter.ReadJson(CODE.Framework.Core.Newtonsoft.JsonReader,System.Type,System.Object,CODE.Framework.Core.Newtonsoft.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:CODE.Framework.Core.Newtonsoft.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Converters.XmlNodeConverter.IsNamespaceAttribute(System.String,System.String@)">
            <summary>
            Checks if the attributeName is a namespace attribute.
            </summary>
            <param name="attributeName">Attribute name to test.</param>
            <param name="prefix">The attribute name prefix if it has one, otherwise an empty string.</param>
            <returns>True if attribute name is for a namespace attribute, otherwise false.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Converters.XmlNodeConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified value type.
            </summary>
            <param name="valueType">Type of the value.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified value type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.JsonArrayAttribute">
            <summary>
            Instructs the <see cref="T:CODE.Framework.Core.Newtonsoft.JsonSerializer"/> how to serialize the collection.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonArrayAttribute.AllowNullItems">
            <summary>
            Gets or sets a value indicating whether null items are allowed in the collection.
            </summary>
            <value><c>true</c> if null items are allowed in the collection; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonArrayAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Newtonsoft.JsonArrayAttribute"/> class.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonArrayAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Newtonsoft.JsonObjectAttribute"/> class with a flag indicating whether the array can contain null items
            </summary>
            <param name="allowNullItems">A flag indicating whether the array can contain null items.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonArrayAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Newtonsoft.JsonArrayAttribute"/> class with the specified container Id.
            </summary>
            <param name="id">The container Id.</param>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.JsonConstructorAttribute">
            <summary>
            Instructs the <see cref="T:CODE.Framework.Core.Newtonsoft.JsonSerializer"/> to use the specified constructor when deserializing that object.
            </summary>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.JsonDictionaryAttribute">
            <summary>
            Instructs the <see cref="T:CODE.Framework.Core.Newtonsoft.JsonSerializer"/> how to serialize the collection.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonDictionaryAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Newtonsoft.JsonDictionaryAttribute"/> class.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonDictionaryAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Newtonsoft.JsonDictionaryAttribute"/> class with the specified container Id.
            </summary>
            <param name="id">The container Id.</param>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.JsonExtensionDataAttribute">
            <summary>
            Instructs the <see cref="T:CODE.Framework.Core.Newtonsoft.JsonSerializer"/> to deserialize properties with no matching class member into the specified collection
            and write values during serialization.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonExtensionDataAttribute.WriteData">
            <summary>
            Gets or sets a value that indicates whether to write extension data when serializing the object.
            </summary>
            <value>
            	<c>true</c> to write extension data when serializing the object; otherwise, <c>false</c>. The default is <c>true</c>.
            </value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonExtensionDataAttribute.ReadData">
            <summary>
            Gets or sets a value that indicates whether to read extension data when deserializing the object.
            </summary>
            <value>
            	<c>true</c> to read extension data when deserializing the object; otherwise, <c>false</c>. The default is <c>true</c>.
            </value>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonExtensionDataAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Newtonsoft.JsonExtensionDataAttribute"/> class.
            </summary>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.JsonIgnoreAttribute">
            <summary>
            Instructs the <see cref="T:CODE.Framework.Core.Newtonsoft.JsonSerializer"/> not to serialize the public field or public read/write property value.
            </summary>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.JsonPropertyAttribute">
            <summary>
            Instructs the <see cref="T:CODE.Framework.Core.Newtonsoft.JsonSerializer"/> to always serialize the member with the specified name.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonPropertyAttribute.ItemConverterType">
            <summary>
            Gets or sets the converter used when serializing the property's collection items.
            </summary>
            <value>The collection's items converter.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonPropertyAttribute.ItemConverterParameters">
            <summary>
            The parameter list to use when constructing the JsonConverter described by ItemConverterType.
            If null, the default constructor is used.
            When non-null, there must be a constructor defined in the JsonConverter that exactly matches the number,
            order, and type of these parameters.
            </summary>
            <example>
            [JsonProperty(ItemConverterType = typeof(MyContainerConverter), ItemConverterParameters = new object[] { 123, "Four" })]
            </example>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonPropertyAttribute.NullValueHandling">
            <summary>
            Gets or sets the null value handling used when serializing this property.
            </summary>
            <value>The null value handling.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonPropertyAttribute.DefaultValueHandling">
            <summary>
            Gets or sets the default value handling used when serializing this property.
            </summary>
            <value>The default value handling.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonPropertyAttribute.ReferenceLoopHandling">
            <summary>
            Gets or sets the reference loop handling used when serializing this property.
            </summary>
            <value>The reference loop handling.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonPropertyAttribute.ObjectCreationHandling">
            <summary>
            Gets or sets the object creation handling used when deserializing this property.
            </summary>
            <value>The object creation handling.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonPropertyAttribute.TypeNameHandling">
            <summary>
            Gets or sets the type name handling used when serializing this property.
            </summary>
            <value>The type name handling.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonPropertyAttribute.IsReference">
            <summary>
            Gets or sets whether this property's value is serialized as a reference.
            </summary>
            <value>Whether this property's value is serialized as a reference.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonPropertyAttribute.Order">
            <summary>
            Gets or sets the order of serialization and deserialization of a member.
            </summary>
            <value>The numeric order of serialization or deserialization.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonPropertyAttribute.Required">
            <summary>
            Gets or sets a value indicating whether this property is required.
            </summary>
            <value>
            	A value indicating whether this property is required.
            </value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonPropertyAttribute.PropertyName">
            <summary>
            Gets or sets the name of the property.
            </summary>
            <value>The name of the property.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonPropertyAttribute.ItemReferenceLoopHandling">
            <summary>
            Gets or sets the the reference loop handling used when serializing the property's collection items.
            </summary>
            <value>The collection's items reference loop handling.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonPropertyAttribute.ItemTypeNameHandling">
            <summary>
            Gets or sets the the type name handling used when serializing the property's collection items.
            </summary>
            <value>The collection's items type name handling.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonPropertyAttribute.ItemIsReference">
            <summary>
            Gets or sets whether this property's collection items are serialized as a reference.
            </summary>
            <value>Whether this property's collection items are serialized as a reference.</value>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonPropertyAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Newtonsoft.JsonPropertyAttribute"/> class.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonPropertyAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Newtonsoft.JsonPropertyAttribute"/> class with the specified name.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.Linq.JPropertyDescriptor">
            <summary>
            Represents a view of a <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JProperty"/>.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JPropertyDescriptor.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JPropertyDescriptor"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JPropertyDescriptor.CanResetValue(System.Object)">
            <summary>
            When overridden in a derived class, returns whether resetting an object changes its value.
            </summary>
            <returns>
            true if resetting the component changes its value; otherwise, false.
            </returns>
            <param name="component">The component to test for reset capability. 
                            </param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JPropertyDescriptor.GetValue(System.Object)">
            <summary>
            When overridden in a derived class, gets the current value of the property on a component.
            </summary>
            <returns>
            The value of a property for a given component.
            </returns>
            <param name="component">The component with the property for which to retrieve the value. 
                            </param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JPropertyDescriptor.ResetValue(System.Object)">
            <summary>
            When overridden in a derived class, resets the value for this property of the component to the default value.
            </summary>
            <param name="component">The component with the property value that is to be reset to the default value. 
                            </param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JPropertyDescriptor.SetValue(System.Object,System.Object)">
            <summary>
            When overridden in a derived class, sets the value of the component to a different value.
            </summary>
            <param name="component">The component with the property value that is to be set. 
                            </param><param name="value">The new value. 
                            </param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JPropertyDescriptor.ShouldSerializeValue(System.Object)">
            <summary>
            When overridden in a derived class, determines a value indicating whether the value of this property needs to be persisted.
            </summary>
            <returns>
            true if the property should be persisted; otherwise, false.
            </returns>
            <param name="component">The component with the property to be examined for persistence. 
                            </param>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Linq.JPropertyDescriptor.ComponentType">
            <summary>
            When overridden in a derived class, gets the type of the component this property is bound to.
            </summary>
            <returns>
            A <see cref="T:System.Type"/> that represents the type of component this property is bound to. When the <see cref="M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)"/> or <see cref="M:System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)"/> methods are invoked, the object specified might be an instance of this type.
            </returns>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Linq.JPropertyDescriptor.IsReadOnly">
            <summary>
            When overridden in a derived class, gets a value indicating whether this property is read-only.
            </summary>
            <returns>
            true if the property is read-only; otherwise, false.
            </returns>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Linq.JPropertyDescriptor.PropertyType">
            <summary>
            When overridden in a derived class, gets the type of the property.
            </summary>
            <returns>
            A <see cref="T:System.Type"/> that represents the type of the property.
            </returns>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Linq.JPropertyDescriptor.NameHashCode">
            <summary>
            Gets the hash code for the name of the member.
            </summary>
            <value></value>
            <returns>
            The hash code for the name of the member.
            </returns>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.Linq.JRaw">
            <summary>
            Represents a raw JSON string.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JRaw.#ctor(CODE.Framework.Core.Newtonsoft.Linq.JRaw)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JRaw"/> class from another <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JRaw"/> object.
            </summary>
            <param name="other">A <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JRaw"/> object to copy from.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JRaw.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JRaw"/> class.
            </summary>
            <param name="rawJson">The raw json.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JRaw.Create(CODE.Framework.Core.Newtonsoft.JsonReader)">
            <summary>
            Creates an instance of <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JRaw"/> with the content of the reader's current token.
            </summary>
            <param name="reader">The reader.</param>
            <returns>An instance of <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JRaw"/> with the content of the reader's current token.</returns>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.Linq.MergeArrayHandling">
            <summary>
            Specifies how JSON arrays are merged together.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.Linq.MergeArrayHandling.Concat">
            <summary>Concatenate arrays.</summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.Linq.MergeArrayHandling.Union">
            <summary>Union arrays, skipping items that already exist.</summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.Linq.MergeArrayHandling.Replace">
            <summary>Replace all array items.</summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.Linq.MergeArrayHandling.Merge">
            <summary>Merge array items together, matched by index.</summary>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.Linq.JTokenType">
            <summary>
            Specifies the type of token.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.Linq.JTokenType.None">
            <summary>
            No token type has been set.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.Linq.JTokenType.Object">
            <summary>
            A JSON object.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.Linq.JTokenType.Array">
            <summary>
            A JSON array.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.Linq.JTokenType.Constructor">
            <summary>
            A JSON constructor.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.Linq.JTokenType.Property">
            <summary>
            A JSON object property.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.Linq.JTokenType.Comment">
            <summary>
            A comment.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.Linq.JTokenType.Integer">
            <summary>
            An integer value.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.Linq.JTokenType.Float">
            <summary>
            A float value.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.Linq.JTokenType.String">
            <summary>
            A string value.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.Linq.JTokenType.Boolean">
            <summary>
            A boolean value.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.Linq.JTokenType.Null">
            <summary>
            A null value.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.Linq.JTokenType.Undefined">
            <summary>
            An undefined value.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.Linq.JTokenType.Date">
            <summary>
            A date value.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.Linq.JTokenType.Raw">
            <summary>
            A raw JSON value.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.Linq.JTokenType.Bytes">
            <summary>
            A collection of bytes value.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.Linq.JTokenType.Guid">
            <summary>
            A Guid value.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.Linq.JTokenType.Uri">
            <summary>
            A Uri value.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.Linq.JTokenType.TimeSpan">
            <summary>
            A TimeSpan value.
            </summary>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.Linq.Extensions">
            <summary>
            Contains the LINQ to JSON extension methods.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.Extensions.Ancestors``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a collection of tokens that contains the ancestors of every token in the source collection.
            </summary>
            <typeparam name="T">The type of the objects in source, constrained to <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/>.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/> that contains the ancestors of every token in the source collection.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.Extensions.AncestorsAndSelf``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a collection of tokens that contains every token in the source collection, and the ancestors of every token in the source collection.
            </summary>
            <typeparam name="T">The type of the objects in source, constrained to <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/>.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/> that contains every token in the source collection, the ancestors of every token in the source collection.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.Extensions.Descendants``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a collection of tokens that contains the descendants of every token in the source collection.
            </summary>
            <typeparam name="T">The type of the objects in source, constrained to <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JContainer"/>.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/> that contains the descendants of every token in the source collection.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.Extensions.DescendantsAndSelf``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a collection of tokens that contains every token in the source collection, and the descendants of every token in the source collection.
            </summary>
            <typeparam name="T">The type of the objects in source, constrained to <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JContainer"/>.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/> that contains every token in the source collection, and the descendants of every token in the source collection.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.Extensions.Properties(System.Collections.Generic.IEnumerable{CODE.Framework.Core.Newtonsoft.Linq.JObject})">
            <summary>
            Returns a collection of child properties of every object in the source collection.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JObject"/> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JProperty"/> that contains the properties of every object in the source collection.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.Extensions.Values(System.Collections.Generic.IEnumerable{CODE.Framework.Core.Newtonsoft.Linq.JToken},System.Object)">
            <summary>
            Returns a collection of child values of every object in the source collection with the given key.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/> that contains the source collection.</param>
            <param name="key">The token key.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/> that contains the values of every token in the source collection with the given key.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.Extensions.Values(System.Collections.Generic.IEnumerable{CODE.Framework.Core.Newtonsoft.Linq.JToken})">
            <summary>
            Returns a collection of child values of every object in the source collection.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/> that contains the values of every token in the source collection.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.Extensions.Values``1(System.Collections.Generic.IEnumerable{CODE.Framework.Core.Newtonsoft.Linq.JToken},System.Object)">
            <summary>
            Returns a collection of converted child values of every object in the source collection with the given key.
            </summary>
            <typeparam name="T">The type to convert the values to.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/> that contains the source collection.</param>
            <param name="key">The token key.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the converted values of every token in the source collection with the given key.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.Extensions.Values``1(System.Collections.Generic.IEnumerable{CODE.Framework.Core.Newtonsoft.Linq.JToken})">
            <summary>
            Returns a collection of converted child values of every object in the source collection.
            </summary>
            <typeparam name="T">The type to convert the values to.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the converted values of every token in the source collection.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.Extensions.Value``1(System.Collections.Generic.IEnumerable{CODE.Framework.Core.Newtonsoft.Linq.JToken})">
            <summary>
            Converts the value.
            </summary>
            <typeparam name="T">The type to convert the value to.</typeparam>
            <param name="value">A <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/> cast as a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/>.</param>
            <returns>A converted value.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.Extensions.Value``2(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts the value.
            </summary>
            <typeparam name="T">The source collection type.</typeparam>
            <typeparam name="TU">The type to convert the value to.</typeparam>
            <param name="value">A <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/> cast as a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/>.</param>
            <returns>A converted value.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.Extensions.Children``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a collection of child tokens of every array in the source collection.
            </summary>
            <typeparam name="T">The source collection type.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/> that contains the values of every token in the source collection.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.Extensions.Children``2(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a collection of converted child tokens of every array in the source collection.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/> that contains the source collection.</param>
            <typeparam name="TU">The type to convert the values to.</typeparam>
            <typeparam name="T">The source collection type.</typeparam>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the converted values of every token in the source collection.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.Extensions.AsJEnumerable(System.Collections.Generic.IEnumerable{CODE.Framework.Core.Newtonsoft.Linq.JToken})">
            <summary>
            Returns the input typed as <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.IJEnumerable`1"/>.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/> that contains the source collection.</param>
            <returns>The input typed as <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.IJEnumerable`1"/>.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.Extensions.AsJEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the input typed as <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.IJEnumerable`1"/>.
            </summary>
            <typeparam name="T">The source collection type.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/> that contains the source collection.</param>
            <returns>The input typed as <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.IJEnumerable`1"/>.</returns>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.Linq.IJEnumerable`1">
            <summary>
            Represents a collection of <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/> objects.
            </summary>
            <typeparam name="T">The type of token</typeparam>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Linq.IJEnumerable`1.Item(System.Object)">
            <summary>
            Gets the <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.IJEnumerable`1"/> with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.Linq.JArray">
            <summary>
            Represents a JSON array.
            </summary>
            <example>
              <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParseArray" title="Parsing a JSON Array from Text" />
            </example>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Linq.JArray.ChildrenTokens">
            <summary>
            Gets the container's children tokens.
            </summary>
            <value>The container's children tokens.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Linq.JArray.Type">
            <summary>
            Gets the node type for this <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/>.
            </summary>
            <value>The type.</value>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JArray.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JArray"/> class.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JArray.#ctor(CODE.Framework.Core.Newtonsoft.Linq.JArray)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JArray"/> class from another <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JArray"/> object.
            </summary>
            <param name="other">A <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JArray"/> object to copy from.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JArray.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JArray"/> class with the specified content.
            </summary>
            <param name="content">The contents of the array.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JArray.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JArray"/> class with the specified content.
            </summary>
            <param name="content">The contents of the array.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JArray.Load(CODE.Framework.Core.Newtonsoft.JsonReader)">
            <summary>
            Loads an <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JArray"/> from a <see cref="T:CODE.Framework.Core.Newtonsoft.JsonReader"/>. 
            </summary>
            <param name="reader">A <see cref="T:CODE.Framework.Core.Newtonsoft.JsonReader"/> that will be read for the content of the <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JArray"/>.</param>
            <returns>A <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JArray"/> that contains the JSON that was read from the specified <see cref="T:CODE.Framework.Core.Newtonsoft.JsonReader"/>.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JArray.Parse(System.String)">
            <summary>
            Load a <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JArray"/> from a string that contains JSON.
            </summary>
            <param name="json">A <see cref="T:System.String"/> that contains JSON.</param>
            <returns>A <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JArray"/> populated from the string that contains JSON.</returns>
            <example>
              <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParseArray" title="Parsing a JSON Array from Text" />
            </example>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JArray.FromObject(System.Object)">
            <summary>
            Creates a <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JArray"/> from an object.
            </summary>
            <param name="o">The object that will be used to create <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JArray"/>.</param>
            <returns>A <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JArray"/> with the values of the specified object</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JArray.FromObject(System.Object,CODE.Framework.Core.Newtonsoft.JsonSerializer)">
            <summary>
            Creates a <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JArray"/> from an object.
            </summary>
            <param name="o">The object that will be used to create <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JArray"/>.</param>
            <param name="jsonSerializer">The <see cref="T:CODE.Framework.Core.Newtonsoft.JsonSerializer"/> that will be used to read the object.</param>
            <returns>A <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JArray"/> with the values of the specified object</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JArray.WriteTo(CODE.Framework.Core.Newtonsoft.JsonWriter,CODE.Framework.Core.Newtonsoft.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:CODE.Framework.Core.Newtonsoft.JsonWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:CODE.Framework.Core.Newtonsoft.JsonWriter"/> into which this method will write.</param>
            <param name="converters">A collection of <see cref="T:CODE.Framework.Core.Newtonsoft.JsonConverter"/> which will be used when writing the token.</param>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Linq.JArray.Item(System.Object)">
            <summary>
            Gets the <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/> with the specified key.
            </summary>
            <value>The <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/> with the specified key.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Linq.JArray.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JArray.IndexOf(CODE.Framework.Core.Newtonsoft.Linq.JToken)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <returns>
            The index of <paramref name="item"/> if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JArray.Insert(System.Int32,CODE.Framework.Core.Newtonsoft.Linq.JToken)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.</exception>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JArray.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1"/> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.</exception>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JArray.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JArray.Add(CODE.Framework.Core.Newtonsoft.Linq.JToken)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JArray.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only. </exception>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JArray.Contains(CODE.Framework.Core.Newtonsoft.Linq.JToken)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JArray.CopyTo(CODE.Framework.Core.Newtonsoft.Linq.JToken[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Linq.JArray.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, false.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JArray.Remove(CODE.Framework.Core.Newtonsoft.Linq.JToken)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.Linq.JConstructor">
            <summary>
            Represents a JSON constructor.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Linq.JConstructor.ChildrenTokens">
            <summary>
            Gets the container's children tokens.
            </summary>
            <value>The container's children tokens.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Linq.JConstructor.Name">
            <summary>
            Gets or sets the name of this constructor.
            </summary>
            <value>The constructor name.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Linq.JConstructor.Type">
            <summary>
            Gets the node type for this <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/>.
            </summary>
            <value>The type.</value>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JConstructor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JConstructor"/> class.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JConstructor.#ctor(CODE.Framework.Core.Newtonsoft.Linq.JConstructor)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JConstructor"/> class from another <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JConstructor"/> object.
            </summary>
            <param name="other">A <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JConstructor"/> object to copy from.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JConstructor.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JConstructor"/> class with the specified name and content.
            </summary>
            <param name="name">The constructor name.</param>
            <param name="content">The contents of the constructor.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JConstructor.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JConstructor"/> class with the specified name and content.
            </summary>
            <param name="name">The constructor name.</param>
            <param name="content">The contents of the constructor.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JConstructor.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JConstructor"/> class with the specified name.
            </summary>
            <param name="name">The constructor name.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JConstructor.WriteTo(CODE.Framework.Core.Newtonsoft.JsonWriter,CODE.Framework.Core.Newtonsoft.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:CODE.Framework.Core.Newtonsoft.JsonWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:CODE.Framework.Core.Newtonsoft.JsonWriter"/> into which this method will write.</param>
            <param name="converters">A collection of <see cref="T:CODE.Framework.Core.Newtonsoft.JsonConverter"/> which will be used when writing the token.</param>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Linq.JConstructor.Item(System.Object)">
            <summary>
            Gets the <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/> with the specified key.
            </summary>
            <value>The <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/> with the specified key.</value>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JConstructor.Load(CODE.Framework.Core.Newtonsoft.JsonReader)">
            <summary>
            Loads an <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JConstructor"/> from a <see cref="T:CODE.Framework.Core.Newtonsoft.JsonReader"/>. 
            </summary>
            <param name="reader">A <see cref="T:CODE.Framework.Core.Newtonsoft.JsonReader"/> that will be read for the content of the <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JConstructor"/>.</param>
            <returns>A <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JConstructor"/> that contains the JSON that was read from the specified <see cref="T:CODE.Framework.Core.Newtonsoft.JsonReader"/>.</returns>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.Linq.JContainer">
            <summary>
            Represents a token that can contain other tokens.
            </summary>
        </member>
        <member name="E:CODE.Framework.Core.Newtonsoft.Linq.JContainer.ListChanged">
            <summary>
            Occurs when the list changes or an item in the list changes.
            </summary>
        </member>
        <member name="E:CODE.Framework.Core.Newtonsoft.Linq.JContainer.AddingNew">
            <summary>
            Occurs before an item is added to the collection.
            </summary>
        </member>
        <member name="E:CODE.Framework.Core.Newtonsoft.Linq.JContainer.CollectionChanged">
            <summary>
            Occurs when the items list of the collection has changed, or the collection is reset.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Linq.JContainer.ChildrenTokens">
            <summary>
            Gets the container's children tokens.
            </summary>
            <value>The container's children tokens.</value>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JContainer.OnAddingNew(System.ComponentModel.AddingNewEventArgs)">
            <summary>
            Raises the <see cref="E:CODE.Framework.Core.Newtonsoft.Linq.JContainer.AddingNew"/> event.
            </summary>
            <param name="e">The <see cref="T:System.ComponentModel.AddingNewEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JContainer.OnListChanged(System.ComponentModel.ListChangedEventArgs)">
            <summary>
            Raises the <see cref="E:CODE.Framework.Core.Newtonsoft.Linq.JContainer.ListChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.ComponentModel.ListChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JContainer.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises the <see cref="E:CODE.Framework.Core.Newtonsoft.Linq.JContainer.CollectionChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Linq.JContainer.HasValues">
            <summary>
            Gets a value indicating whether this token has child tokens.
            </summary>
            <value>
            	<c>true</c> if this token has child values; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Linq.JContainer.First">
            <summary>
            Get the first child token of this token.
            </summary>
            <value>
            A <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/> containing the first child token of the <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/>.
            </value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Linq.JContainer.Last">
            <summary>
            Get the last child token of this token.
            </summary>
            <value>
            A <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/> containing the last child token of the <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/>.
            </value>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JContainer.Children">
            <summary>
            Returns a collection of the child tokens of this token, in document order.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/> containing the child tokens of this <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/>, in document order.
            </returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JContainer.Values``1">
            <summary>
            Returns a collection of the child values of this token, in document order.
            </summary>
            <typeparam name="T">The type to convert the values to.</typeparam>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the child values of this <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/>, in document order.
            </returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JContainer.Descendants">
            <summary>
            Returns a collection of the descendant tokens for this token in document order.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the descendant tokens of the <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/>.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JContainer.DescendantsAndSelf">
            <summary>
            Returns a collection of the tokens that contain this token, and all descendant tokens of this token, in document order.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing this token, and all the descendant tokens of the <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/>.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JContainer.Add(System.Object)">
            <summary>
            Adds the specified content as children of this <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/>.
            </summary>
            <param name="content">The content to be added.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JContainer.AddFirst(System.Object)">
            <summary>
            Adds the specified content as the first children of this <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/>.
            </summary>
            <param name="content">The content to be added.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JContainer.CreateWriter">
            <summary>
            Creates an <see cref="T:CODE.Framework.Core.Newtonsoft.JsonWriter"/> that can be used to add tokens to the <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/>.
            </summary>
            <returns>An <see cref="T:CODE.Framework.Core.Newtonsoft.JsonWriter"/> that is ready to have content written to it.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JContainer.ReplaceAll(System.Object)">
            <summary>
            Replaces the children nodes of this token with the specified content.
            </summary>
            <param name="content">The content.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JContainer.RemoveAll">
            <summary>
            Removes the child nodes from this token.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JContainer.Merge(System.Object)">
            <summary>
            Merge the specified content into this <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/>.
            </summary>
            <param name="content">The content to be merged.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JContainer.Merge(System.Object,CODE.Framework.Core.Newtonsoft.Linq.JsonMergeSettings)">
            <summary>
            Merge the specified content into this <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/> using <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JsonMergeSettings"/>.
            </summary>
            <param name="content">The content to be merged.</param>
            <param name="settings">The <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JsonMergeSettings"/> used to merge the content.</param>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Linq.JContainer.Count">
            <summary>
            Gets the count of child JSON tokens.
            </summary>
            <value>The count of child JSON tokens</value>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.Linq.JObject">
            <summary>
            Represents a JSON object.
            </summary>
            <example>
              <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParse" title="Parsing a JSON Object from Text" />
            </example>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Linq.JObject.ChildrenTokens">
            <summary>
            Gets the container's children tokens.
            </summary>
            <value>The container's children tokens.</value>
        </member>
        <member name="E:CODE.Framework.Core.Newtonsoft.Linq.JObject.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="E:CODE.Framework.Core.Newtonsoft.Linq.JObject.PropertyChanging">
            <summary>
            Occurs when a property value is changing.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JObject"/> class.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JObject.#ctor(CODE.Framework.Core.Newtonsoft.Linq.JObject)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JObject"/> class from another <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JObject"/> object.
            </summary>
            <param name="other">A <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JObject"/> object to copy from.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JObject.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JObject"/> class with the specified content.
            </summary>
            <param name="content">The contents of the object.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JObject.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JObject"/> class with the specified content.
            </summary>
            <param name="content">The contents of the object.</param>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Linq.JObject.Type">
            <summary>
            Gets the node type for this <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/>.
            </summary>
            <value>The type.</value>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JObject.Properties">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of this object's properties.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of this object's properties.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JObject.Property(System.String)">
            <summary>
            Gets a <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JProperty"/> the specified name.
            </summary>
            <param name="name">The property name.</param>
            <returns>A <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JProperty"/> with the specified name or null.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JObject.PropertyValues">
            <summary>
            Gets an <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JEnumerable`1"/> of this object's property values.
            </summary>
            <returns>An <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JEnumerable`1"/> of this object's property values.</returns>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Linq.JObject.Item(System.Object)">
            <summary>
            Gets the <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/> with the specified key.
            </summary>
            <value>The <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/> with the specified key.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Linq.JObject.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/> with the specified property name.
            </summary>
            <value></value>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JObject.Load(CODE.Framework.Core.Newtonsoft.JsonReader)">
            <summary>
            Loads an <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JObject"/> from a <see cref="T:CODE.Framework.Core.Newtonsoft.JsonReader"/>. 
            </summary>
            <param name="reader">A <see cref="T:CODE.Framework.Core.Newtonsoft.JsonReader"/> that will be read for the content of the <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JObject"/>.</param>
            <returns>A <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JObject"/> that contains the JSON that was read from the specified <see cref="T:CODE.Framework.Core.Newtonsoft.JsonReader"/>.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JObject.Parse(System.String)">
            <summary>
            Load a <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JObject"/> from a string that contains JSON.
            </summary>
            <param name="json">A <see cref="T:System.String"/> that contains JSON.</param>
            <returns>A <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JObject"/> populated from the string that contains JSON.</returns>
            <example>
              <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParse" title="Parsing a JSON Object from Text" />
            </example>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JObject.FromObject(System.Object)">
            <summary>
            Creates a <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JObject"/> from an object.
            </summary>
            <param name="o">The object that will be used to create <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JObject"/>.</param>
            <returns>A <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JObject"/> with the values of the specified object</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JObject.FromObject(System.Object,CODE.Framework.Core.Newtonsoft.JsonSerializer)">
            <summary>
            Creates a <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JObject"/> from an object.
            </summary>
            <param name="o">The object that will be used to create <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JObject"/>.</param>
            <param name="jsonSerializer">The <see cref="T:CODE.Framework.Core.Newtonsoft.JsonSerializer"/> that will be used to read the object.</param>
            <returns>A <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JObject"/> with the values of the specified object</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JObject.WriteTo(CODE.Framework.Core.Newtonsoft.JsonWriter,CODE.Framework.Core.Newtonsoft.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:CODE.Framework.Core.Newtonsoft.JsonWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:CODE.Framework.Core.Newtonsoft.JsonWriter"/> into which this method will write.</param>
            <param name="converters">A collection of <see cref="T:CODE.Framework.Core.Newtonsoft.JsonConverter"/> which will be used when writing the token.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JObject.GetValue(System.String)">
            <summary>
            Gets the <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/> with the specified property name.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>The <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/> with the specified property name.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JObject.GetValue(System.String,System.StringComparison)">
            <summary>
            Gets the <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/> with the specified property name.
            The exact property name will be searched for first and if no matching property is found then
            the <see cref="T:System.StringComparison"/> will be used to match a property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="comparison">One of the enumeration values that specifies how the strings will be compared.</param>
            <returns>The <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/> with the specified property name.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JObject.TryGetValue(System.String,System.StringComparison,CODE.Framework.Core.Newtonsoft.Linq.JToken@)">
            <summary>
            Tries to get the <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/> with the specified property name.
            The exact property name will be searched for first and if no matching property is found then
            the <see cref="T:System.StringComparison"/> will be used to match a property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="value">The value.</param>
            <param name="comparison">One of the enumeration values that specifies how the strings will be compared.</param>
            <returns>true if a value was successfully retrieved; otherwise, false.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JObject.Add(System.String,CODE.Framework.Core.Newtonsoft.Linq.JToken)">
            <summary>
            Adds the specified property name.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JObject.Remove(System.String)">
            <summary>
            Removes the property with the specified name.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>true if item was successfully removed; otherwise, false.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JObject.TryGetValue(System.String,CODE.Framework.Core.Newtonsoft.Linq.JToken@)">
            <summary>
            Tries the get value.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="value">The value.</param>
            <returns>true if a value was successfully retrieved; otherwise, false.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JObject.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JObject.OnPropertyChanged(System.String)">
            <summary>
            Raises the <see cref="E:CODE.Framework.Core.Newtonsoft.Linq.JObject.PropertyChanged"/> event with the provided arguments.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JObject.OnPropertyChanging(System.String)">
            <summary>
            Raises the <see cref="E:CODE.Framework.Core.Newtonsoft.Linq.JObject.PropertyChanging"/> event with the provided arguments.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetProperties">
            <summary>
            Returns the properties for this instance of a component.
            </summary>
            <returns>
            A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> that represents the properties for this component instance.
            </returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetProperties(System.Attribute[])">
            <summary>
            Returns the properties for this instance of a component using the attribute array as a filter.
            </summary>
            <param name="attributes">An array of type <see cref="T:System.Attribute"/> that is used as a filter.</param>
            <returns>
            A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> that represents the filtered properties for this component instance.
            </returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetAttributes">
            <summary>
            Returns a collection of custom attributes for this instance of a component.
            </summary>
            <returns>
            An <see cref="T:System.ComponentModel.AttributeCollection"/> containing the attributes for this object.
            </returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetClassName">
            <summary>
            Returns the class name of this instance of a component.
            </summary>
            <returns>
            The class name of the object, or null if the class does not have a name.
            </returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetComponentName">
            <summary>
            Returns the name of this instance of a component.
            </summary>
            <returns>
            The name of the object, or null if the object does not have a name.
            </returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetConverter">
            <summary>
            Returns a type converter for this instance of a component.
            </summary>
            <returns>
            A <see cref="T:System.ComponentModel.TypeConverter"/> that is the converter for this object, or null if there is no <see cref="T:System.ComponentModel.TypeConverter"/> for this object.
            </returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetDefaultEvent">
            <summary>
            Returns the default event for this instance of a component.
            </summary>
            <returns>
            An <see cref="T:System.ComponentModel.EventDescriptor"/> that represents the default event for this object, or null if this object does not have events.
            </returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetDefaultProperty">
            <summary>
            Returns the default property for this instance of a component.
            </summary>
            <returns>
            A <see cref="T:System.ComponentModel.PropertyDescriptor"/> that represents the default property for this object, or null if this object does not have properties.
            </returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetEditor(System.Type)">
            <summary>
            Returns an editor of the specified type for this instance of a component.
            </summary>
            <param name="editorBaseType">A <see cref="T:System.Type"/> that represents the editor for this object.</param>
            <returns>
            An <see cref="T:System.Object"/> of the specified type that is the editor for this object, or null if the editor cannot be found.
            </returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetEvents(System.Attribute[])">
            <summary>
            Returns the events for this instance of a component using the specified attribute array as a filter.
            </summary>
            <param name="attributes">An array of type <see cref="T:System.Attribute"/> that is used as a filter.</param>
            <returns>
            An <see cref="T:System.ComponentModel.EventDescriptorCollection"/> that represents the filtered events for this component instance.
            </returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetEvents">
            <summary>
            Returns the events for this instance of a component.
            </summary>
            <returns>
            An <see cref="T:System.ComponentModel.EventDescriptorCollection"/> that represents the events for this component instance.
            </returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Returns an object that contains the property described by the specified property descriptor.
            </summary>
            <param name="pd">A <see cref="T:System.ComponentModel.PropertyDescriptor"/> that represents the property whose owner is to be found.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the owner of the specified property.
            </returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JObject.GetMetaObject(System.Linq.Expressions.Expression)">
            <summary>
            Returns the <see cref="T:System.Dynamic.DynamicMetaObject"/> responsible for binding operations performed on this object.
            </summary>
            <param name="parameter">The expression tree representation of the runtime value.</param>
            <returns>
            The <see cref="T:System.Dynamic.DynamicMetaObject"/> to bind this object.
            </returns>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.Linq.JProperty">
            <summary>
            Represents a JSON property.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Linq.JProperty.ChildrenTokens">
            <summary>
            Gets the container's children tokens.
            </summary>
            <value>The container's children tokens.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Linq.JProperty.Name">
            <summary>
            Gets the property name.
            </summary>
            <value>The property name.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Linq.JProperty.Value">
            <summary>
            Gets or sets the property value.
            </summary>
            <value>The property value.</value>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JProperty.#ctor(CODE.Framework.Core.Newtonsoft.Linq.JProperty)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JProperty"/> class from another <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JProperty"/> object.
            </summary>
            <param name="other">A <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JProperty"/> object to copy from.</param>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Linq.JProperty.Type">
            <summary>
            Gets the node type for this <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/>.
            </summary>
            <value>The type.</value>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JProperty.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JProperty"/> class.
            </summary>
            <param name="name">The property name.</param>
            <param name="content">The property content.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JProperty.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JProperty"/> class.
            </summary>
            <param name="name">The property name.</param>
            <param name="content">The property content.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JProperty.WriteTo(CODE.Framework.Core.Newtonsoft.JsonWriter,CODE.Framework.Core.Newtonsoft.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:CODE.Framework.Core.Newtonsoft.JsonWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:CODE.Framework.Core.Newtonsoft.JsonWriter"/> into which this method will write.</param>
            <param name="converters">A collection of <see cref="T:CODE.Framework.Core.Newtonsoft.JsonConverter"/> which will be used when writing the token.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JProperty.Load(CODE.Framework.Core.Newtonsoft.JsonReader)">
            <summary>
            Loads an <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JProperty"/> from a <see cref="T:CODE.Framework.Core.Newtonsoft.JsonReader"/>. 
            </summary>
            <param name="reader">A <see cref="T:CODE.Framework.Core.Newtonsoft.JsonReader"/> that will be read for the content of the <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JProperty"/>.</param>
            <returns>A <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JProperty"/> that contains the JSON that was read from the specified <see cref="T:CODE.Framework.Core.Newtonsoft.JsonReader"/>.</returns>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.Linq.JsonMergeSettings">
            <summary>
            Specifies the settings used when merging JSON.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Linq.JsonMergeSettings.MergeArrayHandling">
            <summary>
            Gets or sets the method used when merging JSON arrays.
            </summary>
            <value>The method used when merging JSON arrays.</value>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.Linq.JToken">
            <summary>
            Represents an abstract JSON token.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Linq.JToken.EqualityComparer">
            <summary>
            Gets a comparer that can compare two tokens for value equality.
            </summary>
            <value>A <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JTokenEqualityComparer"/> that can compare two nodes for value equality.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Linq.JToken.Parent">
            <summary>
            Gets or sets the parent.
            </summary>
            <value>The parent.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Linq.JToken.Root">
            <summary>
            Gets the root <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/> of this <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/>.
            </summary>
            <value>The root <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/> of this <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/>.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Linq.JToken.Type">
            <summary>
            Gets the node type for this <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/>.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Linq.JToken.HasValues">
            <summary>
            Gets a value indicating whether this token has child tokens.
            </summary>
            <value>
            	<c>true</c> if this token has child values; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.DeepEquals(CODE.Framework.Core.Newtonsoft.Linq.JToken,CODE.Framework.Core.Newtonsoft.Linq.JToken)">
            <summary>
            Compares the values of two tokens, including the values of all descendant tokens.
            </summary>
            <param name="t1">The first <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/> to compare.</param>
            <param name="t2">The second <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/> to compare.</param>
            <returns>true if the tokens are equal; otherwise false.</returns>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Linq.JToken.Next">
            <summary>
            Gets the next sibling token of this node.
            </summary>
            <value>The <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/> that contains the next sibling token.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Linq.JToken.Previous">
            <summary>
            Gets the previous sibling token of this node.
            </summary>
            <value>The <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/> that contains the previous sibling token.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Linq.JToken.Path">
            <summary>
            Gets the path of the JSON token. 
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.AddAfterSelf(System.Object)">
            <summary>
            Adds the specified content immediately after this token.
            </summary>
            <param name="content">A content object that contains simple content or a collection of content objects to be added after this token.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.AddBeforeSelf(System.Object)">
            <summary>
            Adds the specified content immediately before this token.
            </summary>
            <param name="content">A content object that contains simple content or a collection of content objects to be added before this token.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.Ancestors">
            <summary>
            Returns a collection of the ancestor tokens of this token.
            </summary>
            <returns>A collection of the ancestor tokens of this token.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.AncestorsAndSelf">
            <summary>
            Returns a collection of tokens that contain this token, and the ancestors of this token.
            </summary>
            <returns>A collection of tokens that contain this token, and the ancestors of this token.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.AfterSelf">
            <summary>
            Returns a collection of the sibling tokens after this token, in document order.
            </summary>
            <returns>A collection of the sibling tokens after this tokens, in document order.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.BeforeSelf">
            <summary>
            Returns a collection of the sibling tokens before this token, in document order.
            </summary>
            <returns>A collection of the sibling tokens before this token, in document order.</returns>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Linq.JToken.Item(System.Object)">
            <summary>
            Gets the <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/> with the specified key.
            </summary>
            <value>The <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/> with the specified key.</value>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.Value``1(System.Object)">
            <summary>
            Gets the <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/> with the specified key converted to the specified type.
            </summary>
            <typeparam name="T">The type to convert the token to.</typeparam>
            <param name="key">The token key.</param>
            <returns>The converted token value.</returns>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Linq.JToken.First">
            <summary>
            Get the first child token of this token.
            </summary>
            <value>A <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/> containing the first child token of the <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/>.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Linq.JToken.Last">
            <summary>
            Get the last child token of this token.
            </summary>
            <value>A <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/> containing the last child token of the <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/>.</value>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.Children">
            <summary>
            Returns a collection of the child tokens of this token, in document order.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/> containing the child tokens of this <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/>, in document order.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.Children``1">
            <summary>
            Returns a collection of the child tokens of this token, in document order, filtered by the specified type.
            </summary>
            <typeparam name="T">The type to filter the child tokens on.</typeparam>
            <returns>A <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JEnumerable`1"/> containing the child tokens of this <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/>, in document order.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.Values``1">
            <summary>
            Returns a collection of the child values of this token, in document order.
            </summary>
            <typeparam name="T">The type to convert the values to.</typeparam>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the child values of this <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/>, in document order.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.Remove">
            <summary>
            Removes this token from its parent.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.Replace(CODE.Framework.Core.Newtonsoft.Linq.JToken)">
            <summary>
            Replaces this token with the specified token.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.WriteTo(CODE.Framework.Core.Newtonsoft.JsonWriter,CODE.Framework.Core.Newtonsoft.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:CODE.Framework.Core.Newtonsoft.JsonWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:CODE.Framework.Core.Newtonsoft.JsonWriter"/> into which this method will write.</param>
            <param name="converters">A collection of <see cref="T:CODE.Framework.Core.Newtonsoft.JsonConverter"/> which will be used when writing the token.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.ToString">
            <summary>
            Returns the indented JSON for this token.
            </summary>
            <returns>
            The indented JSON for this token.
            </returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.ToString(CODE.Framework.Core.Newtonsoft.Formatting,CODE.Framework.Core.Newtonsoft.JsonConverter[])">
            <summary>
            Returns the JSON for this token using the given formatting and converters.
            </summary>
            <param name="formatting">Indicates how the output is formatted.</param>
            <param name="converters">A collection of <see cref="T:CODE.Framework.Core.Newtonsoft.JsonConverter"/> which will be used when writing the token.</param>
            <returns>The JSON for this token using the given formatting and converters.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.op_Explicit(CODE.Framework.Core.Newtonsoft.Linq.JToken)~System.Boolean">
            <summary>
            Performs an explicit conversion from <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/> to <see cref="T:System.Boolean"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.op_Explicit(CODE.Framework.Core.Newtonsoft.Linq.JToken)~System.DateTimeOffset">
            <summary>
            Performs an explicit conversion from <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/> to <see cref="T:System.DateTimeOffset"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.op_Explicit(CODE.Framework.Core.Newtonsoft.Linq.JToken)~System.Nullable{System.Boolean}">
            <summary>
            Performs an explicit conversion from <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.op_Explicit(CODE.Framework.Core.Newtonsoft.Linq.JToken)~System.Int64">
            <summary>
            Performs an explicit conversion from <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/> to <see cref="T:System.Int64"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.op_Explicit(CODE.Framework.Core.Newtonsoft.Linq.JToken)~System.Nullable{System.DateTime}">
            <summary>
            Performs an explicit conversion from <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.op_Explicit(CODE.Framework.Core.Newtonsoft.Linq.JToken)~System.Nullable{System.DateTimeOffset}">
            <summary>
            Performs an explicit conversion from <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.op_Explicit(CODE.Framework.Core.Newtonsoft.Linq.JToken)~System.Nullable{System.Decimal}">
            <summary>
            Performs an explicit conversion from <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.op_Explicit(CODE.Framework.Core.Newtonsoft.Linq.JToken)~System.Nullable{System.Double}">
            <summary>
            Performs an explicit conversion from <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.op_Explicit(CODE.Framework.Core.Newtonsoft.Linq.JToken)~System.Nullable{System.Char}">
            <summary>
            Performs an explicit conversion from <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.op_Explicit(CODE.Framework.Core.Newtonsoft.Linq.JToken)~System.Int32">
            <summary>
            Performs an explicit conversion from <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/> to <see cref="T:System.Int32"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.op_Explicit(CODE.Framework.Core.Newtonsoft.Linq.JToken)~System.Int16">
            <summary>
            Performs an explicit conversion from <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/> to <see cref="T:System.Int16"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.op_Explicit(CODE.Framework.Core.Newtonsoft.Linq.JToken)~System.UInt16">
            <summary>
            Performs an explicit conversion from <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/> to <see cref="T:System.UInt16"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.op_Explicit(CODE.Framework.Core.Newtonsoft.Linq.JToken)~System.Char">
            <summary>
            Performs an explicit conversion from <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/> to <see cref="T:System.Char"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.op_Explicit(CODE.Framework.Core.Newtonsoft.Linq.JToken)~System.Byte">
            <summary>
            Performs an explicit conversion from <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/> to <see cref="T:System.Byte"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.op_Explicit(CODE.Framework.Core.Newtonsoft.Linq.JToken)~System.SByte">
            <summary>
            Performs an explicit conversion from <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/> to <see cref="T:System.SByte"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.op_Explicit(CODE.Framework.Core.Newtonsoft.Linq.JToken)~System.Nullable{System.Int32}">
            <summary>
            Performs an explicit conversion from <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.op_Explicit(CODE.Framework.Core.Newtonsoft.Linq.JToken)~System.Nullable{System.Int16}">
            <summary>
            Performs an explicit conversion from <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.op_Explicit(CODE.Framework.Core.Newtonsoft.Linq.JToken)~System.Nullable{System.UInt16}">
            <summary>
            Performs an explicit conversion from <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.op_Explicit(CODE.Framework.Core.Newtonsoft.Linq.JToken)~System.Nullable{System.Byte}">
            <summary>
            Performs an explicit conversion from <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.op_Explicit(CODE.Framework.Core.Newtonsoft.Linq.JToken)~System.Nullable{System.SByte}">
            <summary>
            Performs an explicit conversion from <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.op_Explicit(CODE.Framework.Core.Newtonsoft.Linq.JToken)~System.DateTime">
            <summary>
            Performs an explicit conversion from <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/> to <see cref="T:System.DateTime"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.op_Explicit(CODE.Framework.Core.Newtonsoft.Linq.JToken)~System.Nullable{System.Int64}">
            <summary>
            Performs an explicit conversion from <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.op_Explicit(CODE.Framework.Core.Newtonsoft.Linq.JToken)~System.Nullable{System.Single}">
            <summary>
            Performs an explicit conversion from <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.op_Explicit(CODE.Framework.Core.Newtonsoft.Linq.JToken)~System.Decimal">
            <summary>
            Performs an explicit conversion from <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/> to <see cref="T:System.Decimal"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.op_Explicit(CODE.Framework.Core.Newtonsoft.Linq.JToken)~System.Nullable{System.UInt32}">
            <summary>
            Performs an explicit conversion from <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.op_Explicit(CODE.Framework.Core.Newtonsoft.Linq.JToken)~System.Nullable{System.UInt64}">
            <summary>
            Performs an explicit conversion from <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.op_Explicit(CODE.Framework.Core.Newtonsoft.Linq.JToken)~System.Double">
            <summary>
            Performs an explicit conversion from <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/> to <see cref="T:System.Double"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.op_Explicit(CODE.Framework.Core.Newtonsoft.Linq.JToken)~System.Single">
            <summary>
            Performs an explicit conversion from <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/> to <see cref="T:System.Single"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.op_Explicit(CODE.Framework.Core.Newtonsoft.Linq.JToken)~System.String">
            <summary>
            Performs an explicit conversion from <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.op_Explicit(CODE.Framework.Core.Newtonsoft.Linq.JToken)~System.UInt32">
            <summary>
            Performs an explicit conversion from <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/> to <see cref="T:System.UInt32"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.op_Explicit(CODE.Framework.Core.Newtonsoft.Linq.JToken)~System.UInt64">
            <summary>
            Performs an explicit conversion from <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/> to <see cref="T:System.UInt64"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.op_Explicit(CODE.Framework.Core.Newtonsoft.Linq.JToken)~System.Byte[]">
            <summary>
            Performs an explicit conversion from <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/> to <see cref="T:System.Byte"/>[].
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.op_Explicit(CODE.Framework.Core.Newtonsoft.Linq.JToken)~System.Guid">
            <summary>
            Performs an explicit conversion from <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/> to <see cref="T:System.Guid"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.op_Explicit(CODE.Framework.Core.Newtonsoft.Linq.JToken)~System.Nullable{System.Guid}">
            <summary>
            Performs an explicit conversion from <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/> to <see cref="T:System.Guid"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.op_Explicit(CODE.Framework.Core.Newtonsoft.Linq.JToken)~System.TimeSpan">
            <summary>
            Performs an explicit conversion from <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/> to <see cref="T:System.TimeSpan"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.op_Explicit(CODE.Framework.Core.Newtonsoft.Linq.JToken)~System.Nullable{System.TimeSpan}">
            <summary>
            Performs an explicit conversion from <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/> to <see cref="T:System.TimeSpan"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.op_Explicit(CODE.Framework.Core.Newtonsoft.Linq.JToken)~System.Uri">
            <summary>
            Performs an explicit conversion from <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/> to <see cref="T:System.Uri"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.op_Implicit(System.Boolean)~CODE.Framework.Core.Newtonsoft.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Boolean"/> to <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.op_Implicit(System.DateTimeOffset)~CODE.Framework.Core.Newtonsoft.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.DateTimeOffset"/> to <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.op_Implicit(System.Byte)~CODE.Framework.Core.Newtonsoft.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Byte"/> to <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.op_Implicit(System.Nullable{System.Byte})~CODE.Framework.Core.Newtonsoft.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.op_Implicit(System.SByte)~CODE.Framework.Core.Newtonsoft.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.SByte"/> to <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.op_Implicit(System.Nullable{System.SByte})~CODE.Framework.Core.Newtonsoft.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.op_Implicit(System.Nullable{System.Boolean})~CODE.Framework.Core.Newtonsoft.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.op_Implicit(System.Int64)~CODE.Framework.Core.Newtonsoft.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.op_Implicit(System.Nullable{System.DateTime})~CODE.Framework.Core.Newtonsoft.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.op_Implicit(System.Nullable{System.DateTimeOffset})~CODE.Framework.Core.Newtonsoft.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.op_Implicit(System.Nullable{System.Decimal})~CODE.Framework.Core.Newtonsoft.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.op_Implicit(System.Nullable{System.Double})~CODE.Framework.Core.Newtonsoft.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.op_Implicit(System.Int16)~CODE.Framework.Core.Newtonsoft.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Int16"/> to <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.op_Implicit(System.UInt16)~CODE.Framework.Core.Newtonsoft.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.UInt16"/> to <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.op_Implicit(System.Int32)~CODE.Framework.Core.Newtonsoft.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Int32"/> to <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.op_Implicit(System.Nullable{System.Int32})~CODE.Framework.Core.Newtonsoft.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.op_Implicit(System.DateTime)~CODE.Framework.Core.Newtonsoft.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.DateTime"/> to <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.op_Implicit(System.Nullable{System.Int64})~CODE.Framework.Core.Newtonsoft.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.op_Implicit(System.Nullable{System.Single})~CODE.Framework.Core.Newtonsoft.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.op_Implicit(System.Decimal)~CODE.Framework.Core.Newtonsoft.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Decimal"/> to <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.op_Implicit(System.Nullable{System.Int16})~CODE.Framework.Core.Newtonsoft.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.op_Implicit(System.Nullable{System.UInt16})~CODE.Framework.Core.Newtonsoft.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.op_Implicit(System.Nullable{System.UInt32})~CODE.Framework.Core.Newtonsoft.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.op_Implicit(System.Nullable{System.UInt64})~CODE.Framework.Core.Newtonsoft.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.op_Implicit(System.Double)~CODE.Framework.Core.Newtonsoft.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Double"/> to <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.op_Implicit(System.Single)~CODE.Framework.Core.Newtonsoft.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Single"/> to <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.op_Implicit(System.String)~CODE.Framework.Core.Newtonsoft.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.op_Implicit(System.UInt32)~CODE.Framework.Core.Newtonsoft.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.UInt32"/> to <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.op_Implicit(System.UInt64)~CODE.Framework.Core.Newtonsoft.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.UInt64"/> to <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.op_Implicit(System.Byte[])~CODE.Framework.Core.Newtonsoft.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Byte"/>[] to <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.op_Implicit(System.Uri)~CODE.Framework.Core.Newtonsoft.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Uri"/> to <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.op_Implicit(System.TimeSpan)~CODE.Framework.Core.Newtonsoft.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.TimeSpan"/> to <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.op_Implicit(System.Nullable{System.TimeSpan})~CODE.Framework.Core.Newtonsoft.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.op_Implicit(System.Guid)~CODE.Framework.Core.Newtonsoft.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Guid"/> to <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.op_Implicit(System.Nullable{System.Guid})~CODE.Framework.Core.Newtonsoft.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.CreateReader">
            <summary>
            Creates an <see cref="T:CODE.Framework.Core.Newtonsoft.JsonReader"/> for this token.
            </summary>
            <returns>An <see cref="T:CODE.Framework.Core.Newtonsoft.JsonReader"/> that can be used to read this token and its descendants.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.FromObject(System.Object)">
            <summary>
            Creates a <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/> from an object.
            </summary>
            <param name="o">The object that will be used to create <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/>.</param>
            <returns>A <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/> with the value of the specified object</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.FromObject(System.Object,CODE.Framework.Core.Newtonsoft.JsonSerializer)">
            <summary>
            Creates a <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/> from an object using the specified <see cref="T:CODE.Framework.Core.Newtonsoft.JsonSerializer"/>.
            </summary>
            <param name="o">The object that will be used to create <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/>.</param>
            <param name="jsonSerializer">The <see cref="T:CODE.Framework.Core.Newtonsoft.JsonSerializer"/> that will be used when reading the object.</param>
            <returns>A <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/> with the value of the specified object</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.ToObject``1">
            <summary>
            Creates the specified .NET type from the <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/>.
            </summary>
            <typeparam name="T">The object type that the token will be deserialized to.</typeparam>
            <returns>The new object created from the JSON value.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.ToObject(System.Type)">
            <summary>
            Creates the specified .NET type from the <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/>.
            </summary>
            <param name="objectType">The object type that the token will be deserialized to.</param>
            <returns>The new object created from the JSON value.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.ToObject``1(CODE.Framework.Core.Newtonsoft.JsonSerializer)">
            <summary>
            Creates the specified .NET type from the <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/> using the specified <see cref="T:CODE.Framework.Core.Newtonsoft.JsonSerializer"/>.
            </summary>
            <typeparam name="T">The object type that the token will be deserialized to.</typeparam>
            <param name="jsonSerializer">The <see cref="T:CODE.Framework.Core.Newtonsoft.JsonSerializer"/> that will be used when creating the object.</param>
            <returns>The new object created from the JSON value.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.ToObject(System.Type,CODE.Framework.Core.Newtonsoft.JsonSerializer)">
            <summary>
            Creates the specified .NET type from the <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/> using the specified <see cref="T:CODE.Framework.Core.Newtonsoft.JsonSerializer"/>.
            </summary>
            <param name="objectType">The object type that the token will be deserialized to.</param>
            <param name="jsonSerializer">The <see cref="T:CODE.Framework.Core.Newtonsoft.JsonSerializer"/> that will be used when creating the object.</param>
            <returns>The new object created from the JSON value.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.ReadFrom(CODE.Framework.Core.Newtonsoft.JsonReader)">
            <summary>
            Creates a <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/> from a <see cref="T:CODE.Framework.Core.Newtonsoft.JsonReader"/>.
            </summary>
            <param name="reader">An <see cref="T:CODE.Framework.Core.Newtonsoft.JsonReader"/> positioned at the token to read into this <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/>.</param>
            <returns>
            An <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/> that contains the token and its descendant tokens
            that were read from the reader. The runtime type of the token is determined
            by the token type of the first token encountered in the reader.
            </returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.Parse(System.String)">
            <summary>
            Load a <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/> from a string that contains JSON.
            </summary>
            <param name="json">A <see cref="T:System.String"/> that contains JSON.</param>
            <returns>A <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/> populated from the string that contains JSON.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.Load(CODE.Framework.Core.Newtonsoft.JsonReader)">
            <summary>
            Creates a <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/> from a <see cref="T:CODE.Framework.Core.Newtonsoft.JsonReader"/>.
            </summary>
            <param name="reader">An <see cref="T:CODE.Framework.Core.Newtonsoft.JsonReader"/> positioned at the token to read into this <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/>.</param>
            <returns>
            An <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/> that contains the token and its descendant tokens
            that were read from the reader. The runtime type of the token is determined
            by the token type of the first token encountered in the reader.
            </returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.SelectToken(System.String)">
            <summary>
            Selects a <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/> using a JPath expression. Selects the token that matches the object path.
            </summary>
            <param name="path">
            A <see cref="T:System.String"/> that contains a JPath expression.
            </param>
            <returns>A <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/>, or null.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.SelectToken(System.String,System.Boolean)">
            <summary>
            Selects a <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/> using a JPath expression. Selects the token that matches the object path.
            </summary>
            <param name="path">
            A <see cref="T:System.String"/> that contains a JPath expression.
            </param>
            <param name="errorWhenNoMatch">A flag to indicate whether an error should be thrown if no tokens are found when evaluating part of the expression.</param>
            <returns>A <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/>.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.SelectTokens(System.String)">
            <summary>
            Selects a collection of elements using a JPath expression.
            </summary>
            <param name="path">
            A <see cref="T:System.String"/> that contains a JPath expression.
            </param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the selected elements.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.SelectTokens(System.String,System.Boolean)">
            <summary>
            Selects a collection of elements using a JPath expression.
            </summary>
            <param name="path">
            A <see cref="T:System.String"/> that contains a JPath expression.
            </param>
            <param name="errorWhenNoMatch">A flag to indicate whether an error should be thrown if no tokens are found when evaluating part of the expression.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the selected elements.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.GetMetaObject(System.Linq.Expressions.Expression)">
            <summary>
            Returns the <see cref="T:System.Dynamic.DynamicMetaObject"/> responsible for binding operations performed on this object.
            </summary>
            <param name="parameter">The expression tree representation of the runtime value.</param>
            <returns>
            The <see cref="T:System.Dynamic.DynamicMetaObject"/> to bind this object.
            </returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.System#Dynamic#IDynamicMetaObjectProvider#GetMetaObject(System.Linq.Expressions.Expression)">
            <summary>
            Returns the <see cref="T:System.Dynamic.DynamicMetaObject"/> responsible for binding operations performed on this object.
            </summary>
            <param name="parameter">The expression tree representation of the runtime value.</param>
            <returns>
            The <see cref="T:System.Dynamic.DynamicMetaObject"/> to bind this object.
            </returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.DeepClone">
            <summary>
            Creates a new instance of the <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/>. All child tokens are recursively cloned.
            </summary>
            <returns>A new instance of the <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/>.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.AddAnnotation(System.Object)">
            <summary>
            Adds an object to the annotation list of this <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/>.
            </summary>
            <param name="annotation">The annotation to add.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.Annotation``1">
            <summary>
            Get the first annotation object of the specified type from this <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/>.
            </summary>
            <typeparam name="T">The type of the annotation to retrieve.</typeparam>
            <returns>The first annotation object that matches the specified type, or <c>null</c> if no annotation is of the specified type.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.Annotation(System.Type)">
            <summary>
            Gets the first annotation object of the specified type from this <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/>.
            </summary>
            <param name="type">The <see cref="P:CODE.Framework.Core.Newtonsoft.Linq.JToken.Type"/> of the annotation to retrieve.</param>
            <returns>The first annotation object that matches the specified type, or <c>null</c> if no annotation is of the specified type.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.Annotations``1">
            <summary>
            Gets a collection of annotations of the specified type for this <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/>.
            </summary>
            <typeparam name="T">The type of the annotations to retrieve.</typeparam>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/>  that contains the annotations for this <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/>.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.Annotations(System.Type)">
            <summary>
            Gets a collection of annotations of the specified type for this <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/>.
            </summary>
            <param name="type">The <see cref="P:CODE.Framework.Core.Newtonsoft.Linq.JToken.Type"/> of the annotations to retrieve.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Object"/> that contains the annotations that match the specified type for this <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/>.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.RemoveAnnotations``1">
            <summary>
            Removes the annotations of the specified type from this <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/>.
            </summary>
            <typeparam name="T">The type of annotations to remove.</typeparam>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.RemoveAnnotations(System.Type)">
            <summary>
            Removes the annotations of the specified type from this <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/>.
            </summary>
            <param name="type">The <see cref="P:CODE.Framework.Core.Newtonsoft.Linq.JToken.Type"/> of annotations to remove.</param>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.Linq.JEnumerable`1">
            <summary>
            Represents a collection of <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/> objects.
            </summary>
            <typeparam name="T">The type of token</typeparam>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.Linq.JEnumerable`1.Empty">
            <summary>
            An empty collection of <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/> objects.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JEnumerable`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JEnumerable`1"/> struct.
            </summary>
            <param name="enumerable">The enumerable.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JEnumerable`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JEnumerable`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Linq.JEnumerable`1.Item(System.Object)">
            <summary>
            Gets the <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.IJEnumerable`1"/> with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JEnumerable`1.Equals(CODE.Framework.Core.Newtonsoft.Linq.JEnumerable{`0})">
            <summary>
            Determines whether the specified <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JEnumerable`1"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JEnumerable`1"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JEnumerable`1"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JEnumerable`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JEnumerable`1.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.Linq.JTokenEqualityComparer">
            <summary>
            Compares tokens to determine whether they are equal.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JTokenEqualityComparer.Equals(CODE.Framework.Core.Newtonsoft.Linq.JToken,CODE.Framework.Core.Newtonsoft.Linq.JToken)">
            <summary>
            Determines whether the specified objects are equal.
            </summary>
            <param name="x">The first object of type <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/> to compare.</param>
            <param name="y">The second object of type <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/> to compare.</param>
            <returns>
            true if the specified objects are equal; otherwise, false.
            </returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JTokenEqualityComparer.GetHashCode(CODE.Framework.Core.Newtonsoft.Linq.JToken)">
            <summary>
            Returns a hash code for the specified object.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> for which a hash code is to be returned.</param>
            <returns>A hash code for the specified object.</returns>
            <exception cref="T:System.ArgumentNullException">The type of <paramref name="obj"/> is a reference type and <paramref name="obj"/> is null.</exception>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.Linq.JTokenReader">
            <summary>
            Represents a reader that provides fast, non-cached, forward-only access to serialized JSON data.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Linq.JTokenReader.CurrentToken">
            <summary>
            Gets the <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/> at the reader's current position.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JTokenReader.#ctor(CODE.Framework.Core.Newtonsoft.Linq.JToken)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JTokenReader"/> class.
            </summary>
            <param name="token">The token to read from.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JTokenReader.ReadAsBytes">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Byte"/>[].
            </summary>
            <returns>
            A <see cref="T:System.Byte"/>[] or a null reference if the next JSON token is null. This method will return <c>null</c> at the end of an array.
            </returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JTokenReader.ReadAsDecimal">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JTokenReader.ReadAsInt32">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JTokenReader.ReadAsString">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.String"/>.
            </summary>
            <returns>A <see cref="T:System.String"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JTokenReader.ReadAsDateTime">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.String"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JTokenReader.ReadAsDateTimeOffset">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JTokenReader.Read">
            <summary>
            Reads the next JSON token from the stream.
            </summary>
            <returns>
            true if the next token was read successfully; false if there are no more tokens to read.
            </returns>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Linq.JTokenReader.Path">
            <summary>
            Gets the path of the current JSON token. 
            </summary>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.Linq.JTokenWriter">
            <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of generating JSON data.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Linq.JTokenWriter.CurrentToken">
            <summary>
            Gets the <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/> at the writer's current position.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Linq.JTokenWriter.Token">
            <summary>
            Gets the token being writen.
            </summary>
            <value>The token being writen.</value>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JTokenWriter.#ctor(CODE.Framework.Core.Newtonsoft.Linq.JContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JTokenWriter"/> class writing to the given <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JContainer"/>.
            </summary>
            <param name="container">The container being written to.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JTokenWriter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JTokenWriter"/> class.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JTokenWriter.Flush">
            <summary>
            Flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JTokenWriter.WriteStartObject">
            <summary>
            Writes the beginning of a JSON object.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JTokenWriter.WriteStartArray">
            <summary>
            Writes the beginning of a JSON array.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JTokenWriter.WriteStartConstructor(System.String)">
            <summary>
            Writes the start of a constructor with the given name.
            </summary>
            <param name="name">The name of the constructor.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JTokenWriter.WriteEnd(CODE.Framework.Core.Newtonsoft.JsonToken)">
            <summary>
            Writes the end.
            </summary>
            <param name="token">The token.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JTokenWriter.WritePropertyName(System.String)">
            <summary>
            Writes the property name of a name/value pair on a JSON object.
            </summary>
            <param name="name">The name of the property.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JTokenWriter.WriteValue(System.Object)">
            <summary>
            Writes a <see cref="T:System.Object"/> value.
            An error will raised if the value cannot be written as a single JSON token.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> value to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JTokenWriter.WriteNull">
            <summary>
            Writes a null value.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JTokenWriter.WriteUndefined">
            <summary>
            Writes an undefined value.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JTokenWriter.WriteRaw(System.String)">
            <summary>
            Writes raw JSON.
            </summary>
            <param name="json">The raw JSON to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JTokenWriter.WriteComment(System.String)">
            <summary>
            Writes out a comment <code>/*...*/</code> containing the specified text.
            </summary>
            <param name="text">Text to place inside the comment.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JTokenWriter.WriteValue(System.String)">
            <summary>
            Writes a <see cref="T:System.String"/> value.
            </summary>
            <param name="value">The <see cref="T:System.String"/> value to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JTokenWriter.WriteValue(System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int32"/> value to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JTokenWriter.WriteValue(System.UInt32)">
            <summary>
            Writes a <see cref="T:System.UInt32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt32"/> value to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JTokenWriter.WriteValue(System.Int64)">
            <summary>
            Writes a <see cref="T:System.Int64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int64"/> value to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JTokenWriter.WriteValue(System.UInt64)">
            <summary>
            Writes a <see cref="T:System.UInt64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt64"/> value to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JTokenWriter.WriteValue(System.Single)">
            <summary>
            Writes a <see cref="T:System.Single"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Single"/> value to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JTokenWriter.WriteValue(System.Double)">
            <summary>
            Writes a <see cref="T:System.Double"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Double"/> value to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JTokenWriter.WriteValue(System.Boolean)">
            <summary>
            Writes a <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Boolean"/> value to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JTokenWriter.WriteValue(System.Int16)">
            <summary>
            Writes a <see cref="T:System.Int16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int16"/> value to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JTokenWriter.WriteValue(System.UInt16)">
            <summary>
            Writes a <see cref="T:System.UInt16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt16"/> value to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JTokenWriter.WriteValue(System.Char)">
            <summary>
            Writes a <see cref="T:System.Char"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Char"/> value to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JTokenWriter.WriteValue(System.Byte)">
            <summary>
            Writes a <see cref="T:System.Byte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Byte"/> value to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JTokenWriter.WriteValue(System.SByte)">
            <summary>
            Writes a <see cref="T:System.SByte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.SByte"/> value to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JTokenWriter.WriteValue(System.Decimal)">
            <summary>
            Writes a <see cref="T:System.Decimal"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Decimal"/> value to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JTokenWriter.WriteValue(System.DateTime)">
            <summary>
            Writes a <see cref="T:System.DateTime"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTime"/> value to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JTokenWriter.WriteValue(System.DateTimeOffset)">
            <summary>
            Writes a <see cref="T:System.DateTimeOffset"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTimeOffset"/> value to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JTokenWriter.WriteValue(System.Byte[])">
            <summary>
            Writes a <see cref="T:System.Byte"/>[] value.
            </summary>
            <param name="value">The <see cref="T:System.Byte"/>[] value to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JTokenWriter.WriteValue(System.TimeSpan)">
            <summary>
            Writes a <see cref="T:System.TimeSpan"/> value.
            </summary>
            <param name="value">The <see cref="T:System.TimeSpan"/> value to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JTokenWriter.WriteValue(System.Guid)">
            <summary>
            Writes a <see cref="T:System.Guid"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Guid"/> value to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JTokenWriter.WriteValue(System.Uri)">
            <summary>
            Writes a <see cref="T:System.Uri"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Uri"/> value to write.</param>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.Linq.JValue">
            <summary>
            Represents a value in JSON (string, integer, date, etc).
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JValue.#ctor(CODE.Framework.Core.Newtonsoft.Linq.JValue)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JValue"/> class from another <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JValue"/> object.
            </summary>
            <param name="other">A <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JValue"/> object to copy from.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JValue.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JValue.#ctor(System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JValue.#ctor(System.Char)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JValue.#ctor(System.UInt64)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JValue.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JValue.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JValue.#ctor(System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JValue.#ctor(System.DateTimeOffset)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JValue.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JValue.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JValue.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JValue.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JValue.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JValue.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Linq.JValue.HasValues">
            <summary>
            Gets a value indicating whether this token has child tokens.
            </summary>
            <value>
            	<c>true</c> if this token has child values; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JValue.CreateComment(System.String)">
            <summary>
            Creates a <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JValue"/> comment with the given value.
            </summary>
            <param name="value">The value.</param>
            <returns>A <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JValue"/> comment with the given value.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JValue.CreateString(System.String)">
            <summary>
            Creates a <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JValue"/> string with the given value.
            </summary>
            <param name="value">The value.</param>
            <returns>A <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JValue"/> string with the given value.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JValue.CreateNull">
            <summary>
            Creates a <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JValue"/> null value.
            </summary>
            <returns>A <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JValue"/> null value.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JValue.CreateUndefined">
            <summary>
            Creates a <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JValue"/> null value.
            </summary>
            <returns>A <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JValue"/> null value.</returns>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Linq.JValue.Type">
            <summary>
            Gets the node type for this <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/>.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Linq.JValue.Value">
            <summary>
            Gets or sets the underlying token value.
            </summary>
            <value>The underlying token value.</value>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JValue.WriteTo(CODE.Framework.Core.Newtonsoft.JsonWriter,CODE.Framework.Core.Newtonsoft.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:CODE.Framework.Core.Newtonsoft.JsonWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:CODE.Framework.Core.Newtonsoft.JsonWriter"/> into which this method will write.</param>
            <param name="converters">A collection of <see cref="T:CODE.Framework.Core.Newtonsoft.JsonConverter"/> which will be used when writing the token.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JValue.Equals(CODE.Framework.Core.Newtonsoft.Linq.JValue)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JValue.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JValue.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JValue.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JValue.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JValue.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JValue.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JValue.GetMetaObject(System.Linq.Expressions.Expression)">
            <summary>
            Returns the <see cref="T:System.Dynamic.DynamicMetaObject"/> responsible for binding operations performed on this object.
            </summary>
            <param name="parameter">The expression tree representation of the runtime value.</param>
            <returns>
            The <see cref="T:System.Dynamic.DynamicMetaObject"/> to bind this object.
            </returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Linq.JValue.CompareTo(CODE.Framework.Core.Newtonsoft.Linq.JValue)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has these meanings:
            Value
            Meaning
            Less than zero
            This instance is less than <paramref name="obj"/>.
            Zero
            This instance is equal to <paramref name="obj"/>.
            Greater than zero
            This instance is greater than <paramref name="obj"/>.
            </returns>
            <exception cref="T:System.ArgumentException">
            	<paramref name="obj"/> is not the same type as this instance.
            </exception>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.DateFormatHandling">
            <summary>
            Specifies how dates are formatted when writing JSON text.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.DateFormatHandling.IsoDateFormat">
            <summary>
            Dates are written in the ISO 8601 format, e.g. "2012-03-21T05:40Z".
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.DateFormatHandling.MicrosoftDateFormat">
            <summary>
            Dates are written in the Microsoft JSON format, e.g. "\/Date(1198908717056)\/".
            </summary>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.DateParseHandling">
            <summary>
            Specifies how date formatted strings, e.g. "\/Date(1198908717056)\/" and "2012-03-21T05:40Z", are parsed when reading JSON text.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.DateParseHandling.None">
            <summary>
            Date formatted strings are not parsed to a date type and are read as strings.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.DateParseHandling.DateTime">
            <summary>
            Date formatted strings, e.g. "\/Date(1198908717056)\/" and "2012-03-21T05:40Z", are parsed to <see cref="F:CODE.Framework.Core.Newtonsoft.DateParseHandling.DateTime"/>.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.DateParseHandling.DateTimeOffset">
            <summary>
            Date formatted strings, e.g. "\/Date(1198908717056)\/" and "2012-03-21T05:40Z", are parsed to <see cref="F:CODE.Framework.Core.Newtonsoft.DateParseHandling.DateTimeOffset"/>.
            </summary>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.DateTimeZoneHandling">
            <summary>
            Specifies how to treat the time value when converting between string and <see cref="T:System.DateTime"/>.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.DateTimeZoneHandling.Local">
            <summary>
            Treat as local time. If the <see cref="T:System.DateTime"/> object represents a Coordinated Universal Time (UTC), it is converted to the local time.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.DateTimeZoneHandling.Utc">
            <summary>
            Treat as a UTC. If the <see cref="T:System.DateTime"/> object represents a local time, it is converted to a UTC.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.DateTimeZoneHandling.Unspecified">
            <summary>
            Treat as a local time if a <see cref="T:System.DateTime"/> is being converted to a string.
            If a string is being converted to <see cref="T:System.DateTime"/>, convert to a local time if a time zone is specified.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.DateTimeZoneHandling.RoundtripKind">
            <summary>
            Time zone information should be preserved when converting.
            </summary>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.DefaultValueHandling">
            <summary>
            Specifies default value handling options for the <see cref="T:CODE.Framework.Core.Newtonsoft.JsonSerializer"/>.
            </summary>
            <example>
              <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeDefaultValueHandlingObject" title="DefaultValueHandling Class" />
              <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeDefaultValueHandlingExample" title="DefaultValueHandling Ignore Example" />
            </example>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.DefaultValueHandling.Include">
            <summary>
            Include members where the member value is the same as the member's default value when serializing objects.
            Included members are written to JSON. Has no effect when deserializing.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.DefaultValueHandling.Ignore">
            <summary>
            Ignore members where the member value is the same as the member's default value when serializing objects
            so that is is not written to JSON.
            This option will ignore all default values (e.g. <c>null</c> for objects and nullable types; <c>0</c> for integers,
            decimals and floating point numbers; and <c>false</c> for booleans). The default value ignored can be changed by
            placing the <see cref="T:System.ComponentModel.DefaultValueAttribute"/> on the property.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.DefaultValueHandling.Populate">
            <summary>
            Members with a default value but no JSON will be set to their default value when deserializing.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.DefaultValueHandling.IgnoreAndPopulate">
            <summary>
            Ignore members where the member value is the same as the member's default value when serializing objects
            and sets members to their default value when deserializing.
            </summary>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.FloatFormatHandling">
            <summary>
            Specifies float format handling options when writing special floating point numbers, e.g. <see cref="F:System.Double.NaN"/>,
            <see cref="F:System.Double.PositiveInfinity"/> and <see cref="F:System.Double.NegativeInfinity"/> with <see cref="T:CODE.Framework.Core.Newtonsoft.JsonWriter"/>.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.FloatFormatHandling.String">
            <summary>
            Write special floating point values as strings in JSON, e.g. "NaN", "Infinity", "-Infinity".
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.FloatFormatHandling.Symbol">
            <summary>
            Write special floating point values as symbols in JSON, e.g. NaN, Infinity, -Infinity.
            Note that this will produce non-valid JSON.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.FloatFormatHandling.DefaultValue">
            <summary>
            Write special floating point values as the property's default value in JSON, e.g. 0.0 for a <see cref="T:System.Double"/> property, null for a <see cref="T:System.Nullable`1"/> property.
            </summary>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.FloatParseHandling">
            <summary>
            Specifies how floating point numbers, e.g. 1.0 and 9.9, are parsed when reading JSON text.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.FloatParseHandling.Double">
            <summary>
            Floating point numbers are parsed to <see cref="F:CODE.Framework.Core.Newtonsoft.FloatParseHandling.Double"/>.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.FloatParseHandling.Decimal">
            <summary>
            Floating point numbers are parsed to <see cref="F:CODE.Framework.Core.Newtonsoft.FloatParseHandling.Decimal"/>.
            </summary>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.Formatting">
            <summary>
            Specifies formatting options for the <see cref="T:CODE.Framework.Core.Newtonsoft.JsonTextWriter"/>.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.Formatting.None">
            <summary>
            No special formatting is applied. This is the default.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.Formatting.Indented">
            <summary>
            Causes child objects to be indented according to the <see cref="P:CODE.Framework.Core.Newtonsoft.JsonTextWriter.Indentation"/> and <see cref="P:CODE.Framework.Core.Newtonsoft.JsonTextWriter.IndentChar"/> settings.
            </summary>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.IJsonLineInfo">
            <summary>
            Provides an interface to enable a class to return line and position information.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.IJsonLineInfo.HasLineInfo">
            <summary>
            Gets a value indicating whether the class can return line information.
            </summary>
            <returns>
            	<c>true</c> if LineNumber and LinePosition can be provided; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.IJsonLineInfo.LineNumber">
            <summary>
            Gets the current line number.
            </summary>
            <value>The current line number or 0 if no line information is available (for example, HasLineInfo returns false).</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.IJsonLineInfo.LinePosition">
            <summary>
            Gets the current line position.
            </summary>
            <value>The current line position or 0 if no line information is available (for example, HasLineInfo returns false).</value>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.JsonContainerAttribute">
            <summary>
            Instructs the <see cref="T:CODE.Framework.Core.Newtonsoft.JsonSerializer"/> how to serialize the object.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonContainerAttribute.Id">
            <summary>
            Gets or sets the id.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonContainerAttribute.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonContainerAttribute.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonContainerAttribute.ItemConverterType">
            <summary>
            Gets the collection's items converter.
            </summary>
            <value>The collection's items converter.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonContainerAttribute.ItemConverterParameters">
            <summary>
            The parameter list to use when constructing the JsonConverter described by ItemConverterType.
            If null, the default constructor is used.
            When non-null, there must be a constructor defined in the JsonConverter that exactly matches the number,
            order, and type of these parameters.
            </summary>
            <example>
            [JsonContainer(ItemConverterType = typeof(MyContainerConverter), ItemConverterParameters = new object[] { 123, "Four" })]
            </example>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonContainerAttribute.IsReference">
            <summary>
            Gets or sets a value that indicates whether to preserve object references.
            </summary>
            <value>
            	<c>true</c> to keep object reference; otherwise, <c>false</c>. The default is <c>false</c>.
            </value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonContainerAttribute.ItemIsReference">
            <summary>
            Gets or sets a value that indicates whether to preserve collection's items references.
            </summary>
            <value>
            	<c>true</c> to keep collection's items object references; otherwise, <c>false</c>. The default is <c>false</c>.
            </value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonContainerAttribute.ItemReferenceLoopHandling">
            <summary>
            Gets or sets the reference loop handling used when serializing the collection's items.
            </summary>
            <value>The reference loop handling.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonContainerAttribute.ItemTypeNameHandling">
            <summary>
            Gets or sets the type name handling used when serializing the collection's items.
            </summary>
            <value>The type name handling.</value>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonContainerAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Newtonsoft.JsonContainerAttribute"/> class.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonContainerAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Newtonsoft.JsonContainerAttribute"/> class with the specified container Id.
            </summary>
            <param name="id">The container Id.</param>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.JsonConvert">
            <summary>
            Provides methods for converting between common language runtime types and JSON types.
            </summary>
            <example>
              <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="SerializeObject" title="Serializing and Deserializing JSON with JsonConvert" />
            </example>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonConvert.DefaultSettings">
            <summary>
            Gets or sets a function that creates default <see cref="T:CODE.Framework.Core.Newtonsoft.JsonSerializerSettings"/>.
            Default settings are automatically used by serialization methods on <see cref="T:CODE.Framework.Core.Newtonsoft.JsonConvert"/>,
            and <see cref="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.ToObject``1"/> and <see cref="M:CODE.Framework.Core.Newtonsoft.Linq.JToken.FromObject(System.Object)"/> on <see cref="T:CODE.Framework.Core.Newtonsoft.Linq.JToken"/>.
            To serialize without using any default settings create a <see cref="T:CODE.Framework.Core.Newtonsoft.JsonSerializer"/> with
            <see cref="M:CODE.Framework.Core.Newtonsoft.JsonSerializer.Create"/>.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.JsonConvert.True">
            <summary>
            Represents JavaScript's boolean value true as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.JsonConvert.False">
            <summary>
            Represents JavaScript's boolean value false as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.JsonConvert.Null">
            <summary>
            Represents JavaScript's null as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.JsonConvert.Undefined">
            <summary>
            Represents JavaScript's undefined as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.JsonConvert.PositiveInfinity">
            <summary>
            Represents JavaScript's positive infinity as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.JsonConvert.NegativeInfinity">
            <summary>
            Represents JavaScript's negative infinity as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.JsonConvert.NaN">
            <summary>
            Represents JavaScript's NaN as a string. This field is read-only.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonConvert.ToString(System.DateTime)">
            <summary>
            Converts the <see cref="T:System.DateTime"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.DateTime"/>.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonConvert.ToString(System.DateTime,CODE.Framework.Core.Newtonsoft.DateFormatHandling,CODE.Framework.Core.Newtonsoft.DateTimeZoneHandling)">
            <summary>
            Converts the <see cref="T:System.DateTime"/> to its JSON string representation using the <see cref="T:CODE.Framework.Core.Newtonsoft.DateFormatHandling"/> specified.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="format">The format the date will be converted to.</param>
            <param name="timeZoneHandling">The time zone handling when the date is converted to a string.</param>
            <returns>A JSON string representation of the <see cref="T:System.DateTime"/>.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonConvert.ToString(System.DateTimeOffset)">
            <summary>
            Converts the <see cref="T:System.DateTimeOffset"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.DateTimeOffset"/>.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonConvert.ToString(System.DateTimeOffset,CODE.Framework.Core.Newtonsoft.DateFormatHandling)">
            <summary>
            Converts the <see cref="T:System.DateTimeOffset"/> to its JSON string representation using the <see cref="T:CODE.Framework.Core.Newtonsoft.DateFormatHandling"/> specified.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="format">The format the date will be converted to.</param>
            <returns>A JSON string representation of the <see cref="T:System.DateTimeOffset"/>.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonConvert.ToString(System.Boolean)">
            <summary>
            Converts the <see cref="T:System.Boolean"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Boolean"/>.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonConvert.ToString(System.Char)">
            <summary>
            Converts the <see cref="T:System.Char"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Char"/>.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonConvert.ToString(System.Enum)">
            <summary>
            Converts the <see cref="T:System.Enum"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Enum"/>.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonConvert.ToString(System.Int32)">
            <summary>
            Converts the <see cref="T:System.Int32"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Int32"/>.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonConvert.ToString(System.Int16)">
            <summary>
            Converts the <see cref="T:System.Int16"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Int16"/>.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonConvert.ToString(System.UInt16)">
            <summary>
            Converts the <see cref="T:System.UInt16"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.UInt16"/>.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonConvert.ToString(System.UInt32)">
            <summary>
            Converts the <see cref="T:System.UInt32"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.UInt32"/>.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonConvert.ToString(System.Int64)">
            <summary>
            Converts the <see cref="T:System.Int64"/>  to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Int64"/>.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonConvert.ToString(System.UInt64)">
            <summary>
            Converts the <see cref="T:System.UInt64"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.UInt64"/>.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonConvert.ToString(System.Single)">
            <summary>
            Converts the <see cref="T:System.Single"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Single"/>.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonConvert.ToString(System.Double)">
            <summary>
            Converts the <see cref="T:System.Double"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Double"/>.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonConvert.ToString(System.Byte)">
            <summary>
            Converts the <see cref="T:System.Byte"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Byte"/>.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonConvert.ToString(System.SByte)">
            <summary>
            Converts the <see cref="T:System.SByte"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.SByte"/>.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonConvert.ToString(System.Decimal)">
            <summary>
            Converts the <see cref="T:System.Decimal"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.SByte"/>.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonConvert.ToString(System.Guid)">
            <summary>
            Converts the <see cref="T:System.Guid"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Guid"/>.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonConvert.ToString(System.TimeSpan)">
            <summary>
            Converts the <see cref="T:System.TimeSpan"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.TimeSpan"/>.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonConvert.ToString(System.Uri)">
            <summary>
            Converts the <see cref="T:System.Uri"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Uri"/>.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonConvert.ToString(System.String)">
            <summary>
            Converts the <see cref="T:System.String"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonConvert.ToString(System.String,System.Char)">
            <summary>
            Converts the <see cref="T:System.String"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="delimiter">The string delimiter character.</param>
            <returns>A JSON string representation of the <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonConvert.ToString(System.String,System.Char,CODE.Framework.Core.Newtonsoft.StringEscapeHandling)">
            <summary>
            Converts the <see cref="T:System.String"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="delimiter">The string delimiter character.</param>
            <param name="stringEscapeHandling">The string escape handling.</param>
            <returns>A JSON string representation of the <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonConvert.ToString(System.Object)">
            <summary>
            Converts the <see cref="T:System.Object"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Object"/>.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonConvert.SerializeObject(System.Object)">
            <summary>
            Serializes the specified object to a JSON string.
            </summary>
            <param name="value">The object to serialize.</param>
            <returns>A JSON string representation of the object.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonConvert.SerializeObject(System.Object,CODE.Framework.Core.Newtonsoft.Formatting)">
            <summary>
            Serializes the specified object to a JSON string using formatting.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="formatting">Indicates how the output is formatted.</param>
            <returns>
            A JSON string representation of the object.
            </returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonConvert.SerializeObject(System.Object,CODE.Framework.Core.Newtonsoft.JsonConverter[])">
            <summary>
            Serializes the specified object to a JSON string using a collection of <see cref="T:CODE.Framework.Core.Newtonsoft.JsonConverter"/>.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="converters">A collection converters used while serializing.</param>
            <returns>A JSON string representation of the object.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonConvert.SerializeObject(System.Object,CODE.Framework.Core.Newtonsoft.Formatting,CODE.Framework.Core.Newtonsoft.JsonConverter[])">
            <summary>
            Serializes the specified object to a JSON string using formatting and a collection of <see cref="T:CODE.Framework.Core.Newtonsoft.JsonConverter"/>.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="formatting">Indicates how the output is formatted.</param>
            <param name="converters">A collection converters used while serializing.</param>
            <returns>A JSON string representation of the object.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonConvert.SerializeObject(System.Object,CODE.Framework.Core.Newtonsoft.JsonSerializerSettings)">
            <summary>
            Serializes the specified object to a JSON string using <see cref="T:CODE.Framework.Core.Newtonsoft.JsonSerializerSettings"/>.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="settings">The <see cref="T:CODE.Framework.Core.Newtonsoft.JsonSerializerSettings"/> used to serialize the object.
            If this is null, default serialization settings will be used.</param>
            <returns>
            A JSON string representation of the object.
            </returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonConvert.SerializeObject(System.Object,System.Type,CODE.Framework.Core.Newtonsoft.JsonSerializerSettings)">
            <summary>
            Serializes the specified object to a JSON string using a type, formatting and <see cref="T:CODE.Framework.Core.Newtonsoft.JsonSerializerSettings"/>.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="settings">The <see cref="T:CODE.Framework.Core.Newtonsoft.JsonSerializerSettings"/> used to serialize the object.
            If this is null, default serialization settings will be used.</param>
            <param name="type">
            The type of the value being serialized.
            This parameter is used when <see cref="T:CODE.Framework.Core.Newtonsoft.TypeNameHandling"/> is Auto to write out the type name if the type of the value does not match.
            Specifing the type is optional.
            </param>
            <returns>
            A JSON string representation of the object.
            </returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonConvert.SerializeObject(System.Object,CODE.Framework.Core.Newtonsoft.Formatting,CODE.Framework.Core.Newtonsoft.JsonSerializerSettings)">
            <summary>
            Serializes the specified object to a JSON string using formatting and <see cref="T:CODE.Framework.Core.Newtonsoft.JsonSerializerSettings"/>.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="formatting">Indicates how the output is formatted.</param>
            <param name="settings">The <see cref="T:CODE.Framework.Core.Newtonsoft.JsonSerializerSettings"/> used to serialize the object.
            If this is null, default serialization settings will be used.</param>
            <returns>
            A JSON string representation of the object.
            </returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonConvert.SerializeObject(System.Object,System.Type,CODE.Framework.Core.Newtonsoft.Formatting,CODE.Framework.Core.Newtonsoft.JsonSerializerSettings)">
            <summary>
            Serializes the specified object to a JSON string using a type, formatting and <see cref="T:CODE.Framework.Core.Newtonsoft.JsonSerializerSettings"/>.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="formatting">Indicates how the output is formatted.</param>
            <param name="settings">The <see cref="T:CODE.Framework.Core.Newtonsoft.JsonSerializerSettings"/> used to serialize the object.
            If this is null, default serialization settings will be used.</param>
            <param name="type">
            The type of the value being serialized.
            This parameter is used when <see cref="T:CODE.Framework.Core.Newtonsoft.TypeNameHandling"/> is Auto to write out the type name if the type of the value does not match.
            Specifing the type is optional.
            </param>
            <returns>
            A JSON string representation of the object.
            </returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonConvert.DeserializeObject(System.String)">
            <summary>
            Deserializes the JSON to a .NET object.
            </summary>
            <param name="value">The JSON to deserialize.</param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonConvert.DeserializeObject(System.String,CODE.Framework.Core.Newtonsoft.JsonSerializerSettings)">
            <summary>
            Deserializes the JSON to a .NET object using <see cref="T:CODE.Framework.Core.Newtonsoft.JsonSerializerSettings"/>.
            </summary>
            <param name="value">The JSON to deserialize.</param>
            <param name="settings">
            The <see cref="T:CODE.Framework.Core.Newtonsoft.JsonSerializerSettings"/> used to deserialize the object.
            If this is null, default serialization settings will be used.
            </param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonConvert.DeserializeObject(System.String,System.Type)">
            <summary>
            Deserializes the JSON to the specified .NET type.
            </summary>
            <param name="value">The JSON to deserialize.</param>
            <param name="type">The <see cref="T:System.Type"/> of object being deserialized.</param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonConvert.DeserializeObject``1(System.String)">
            <summary>
            Deserializes the JSON to the specified .NET type.
            </summary>
            <typeparam name="T">The type of the object to deserialize to.</typeparam>
            <param name="value">The JSON to deserialize.</param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonConvert.DeserializeAnonymousType``1(System.String,``0)">
            <summary>
            Deserializes the JSON to the given anonymous type.
            </summary>
            <typeparam name="T">
            The anonymous type to deserialize to. This can't be specified
            traditionally and must be infered from the anonymous type passed
            as a parameter.
            </typeparam>
            <param name="value">The JSON to deserialize.</param>
            <param name="anonymousTypeObject">The anonymous type object.</param>
            <returns>The deserialized anonymous type from the JSON string.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonConvert.DeserializeAnonymousType``1(System.String,``0,CODE.Framework.Core.Newtonsoft.JsonSerializerSettings)">
            <summary>
            Deserializes the JSON to the given anonymous type using <see cref="T:CODE.Framework.Core.Newtonsoft.JsonSerializerSettings"/>.
            </summary>
            <typeparam name="T">
            The anonymous type to deserialize to. This can't be specified
            traditionally and must be infered from the anonymous type passed
            as a parameter.
            </typeparam>
            <param name="value">The JSON to deserialize.</param>
            <param name="anonymousTypeObject">The anonymous type object.</param>
            <param name="settings">
            The <see cref="T:CODE.Framework.Core.Newtonsoft.JsonSerializerSettings"/> used to deserialize the object.
            If this is null, default serialization settings will be used.
            </param>
            <returns>The deserialized anonymous type from the JSON string.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonConvert.DeserializeObject``1(System.String,CODE.Framework.Core.Newtonsoft.JsonConverter[])">
            <summary>
            Deserializes the JSON to the specified .NET type using a collection of <see cref="T:CODE.Framework.Core.Newtonsoft.JsonConverter"/>.
            </summary>
            <typeparam name="T">The type of the object to deserialize to.</typeparam>
            <param name="value">The JSON to deserialize.</param>
            <param name="converters">Converters to use while deserializing.</param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonConvert.DeserializeObject``1(System.String,CODE.Framework.Core.Newtonsoft.JsonSerializerSettings)">
            <summary>
            Deserializes the JSON to the specified .NET type using <see cref="T:CODE.Framework.Core.Newtonsoft.JsonSerializerSettings"/>.
            </summary>
            <typeparam name="T">The type of the object to deserialize to.</typeparam>
            <param name="value">The object to deserialize.</param>
            <param name="settings">
            The <see cref="T:CODE.Framework.Core.Newtonsoft.JsonSerializerSettings"/> used to deserialize the object.
            If this is null, default serialization settings will be used.
            </param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonConvert.DeserializeObject(System.String,System.Type,CODE.Framework.Core.Newtonsoft.JsonConverter[])">
            <summary>
            Deserializes the JSON to the specified .NET type using a collection of <see cref="T:CODE.Framework.Core.Newtonsoft.JsonConverter"/>.
            </summary>
            <param name="value">The JSON to deserialize.</param>
            <param name="type">The type of the object to deserialize.</param>
            <param name="converters">Converters to use while deserializing.</param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonConvert.DeserializeObject(System.String,System.Type,CODE.Framework.Core.Newtonsoft.JsonSerializerSettings)">
            <summary>
            Deserializes the JSON to the specified .NET type using <see cref="T:CODE.Framework.Core.Newtonsoft.JsonSerializerSettings"/>.
            </summary>
            <param name="value">The JSON to deserialize.</param>
            <param name="type">The type of the object to deserialize to.</param>
            <param name="settings">
            The <see cref="T:CODE.Framework.Core.Newtonsoft.JsonSerializerSettings"/> used to deserialize the object.
            If this is null, default serialization settings will be used.
            </param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonConvert.PopulateObject(System.String,System.Object)">
            <summary>
            Populates the object with values from the JSON string.
            </summary>
            <param name="value">The JSON to populate values from.</param>
            <param name="target">The target object to populate values onto.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonConvert.PopulateObject(System.String,System.Object,CODE.Framework.Core.Newtonsoft.JsonSerializerSettings)">
            <summary>
            Populates the object with values from the JSON string using <see cref="T:CODE.Framework.Core.Newtonsoft.JsonSerializerSettings"/>.
            </summary>
            <param name="value">The JSON to populate values from.</param>
            <param name="target">The target object to populate values onto.</param>
            <param name="settings">
            The <see cref="T:CODE.Framework.Core.Newtonsoft.JsonSerializerSettings"/> used to deserialize the object.
            If this is null, default serialization settings will be used.
            </param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonConvert.SerializeXmlNode(System.Xml.XmlNode)">
            <summary>
            Serializes the XML node to a JSON string.
            </summary>
            <param name="node">The node to serialize.</param>
            <returns>A JSON string of the XmlNode.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonConvert.SerializeXmlNode(System.Xml.XmlNode,CODE.Framework.Core.Newtonsoft.Formatting)">
            <summary>
            Serializes the XML node to a JSON string using formatting.
            </summary>
            <param name="node">The node to serialize.</param>
            <param name="formatting">Indicates how the output is formatted.</param>
            <returns>A JSON string of the XmlNode.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonConvert.SerializeXmlNode(System.Xml.XmlNode,CODE.Framework.Core.Newtonsoft.Formatting,System.Boolean)">
            <summary>
            Serializes the XML node to a JSON string using formatting and omits the root object if <paramref name="omitRootObject"/> is <c>true</c>.
            </summary>
            <param name="node">The node to serialize.</param>
            <param name="formatting">Indicates how the output is formatted.</param>
            <param name="omitRootObject">Omits writing the root object.</param>
            <returns>A JSON string of the XmlNode.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonConvert.DeserializeXmlNode(System.String)">
            <summary>
            Deserializes the XmlNode from a JSON string.
            </summary>
            <param name="value">The JSON string.</param>
            <returns>The deserialized XmlNode</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonConvert.DeserializeXmlNode(System.String,System.String)">
            <summary>
            Deserializes the XmlNode from a JSON string nested in a root elment specified by <paramref name="deserializeRootElementName"/>.
            </summary>
            <param name="value">The JSON string.</param>
            <param name="deserializeRootElementName">The name of the root element to append when deserializing.</param>
            <returns>The deserialized XmlNode</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonConvert.DeserializeXmlNode(System.String,System.String,System.Boolean)">
            <summary>
            Deserializes the XmlNode from a JSON string nested in a root elment specified by <paramref name="deserializeRootElementName"/>
            and writes a .NET array attribute for collections.
            </summary>
            <param name="value">The JSON string.</param>
            <param name="deserializeRootElementName">The name of the root element to append when deserializing.</param>
            <param name="writeArrayAttribute">
            A flag to indicate whether to write the Json.NET array attribute.
            This attribute helps preserve arrays when converting the written XML back to JSON.
            </param>
            <returns>The deserialized XmlNode</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonConvert.SerializeXNode(System.Xml.Linq.XObject)">
            <summary>
            Serializes the <see cref="T:System.Xml.Linq.XNode"/> to a JSON string.
            </summary>
            <param name="node">The node to convert to JSON.</param>
            <returns>A JSON string of the XNode.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonConvert.SerializeXNode(System.Xml.Linq.XObject,CODE.Framework.Core.Newtonsoft.Formatting)">
            <summary>
            Serializes the <see cref="T:System.Xml.Linq.XNode"/> to a JSON string using formatting.
            </summary>
            <param name="node">The node to convert to JSON.</param>
            <param name="formatting">Indicates how the output is formatted.</param>
            <returns>A JSON string of the XNode.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonConvert.SerializeXNode(System.Xml.Linq.XObject,CODE.Framework.Core.Newtonsoft.Formatting,System.Boolean)">
            <summary>
            Serializes the <see cref="T:System.Xml.Linq.XNode"/> to a JSON string using formatting and omits the root object if <paramref name="omitRootObject"/> is <c>true</c>.
            </summary>
            <param name="node">The node to serialize.</param>
            <param name="formatting">Indicates how the output is formatted.</param>
            <param name="omitRootObject">Omits writing the root object.</param>
            <returns>A JSON string of the XNode.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonConvert.DeserializeXNode(System.String)">
            <summary>
            Deserializes the <see cref="T:System.Xml.Linq.XNode"/> from a JSON string.
            </summary>
            <param name="value">The JSON string.</param>
            <returns>The deserialized XNode</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonConvert.DeserializeXNode(System.String,System.String)">
            <summary>
            Deserializes the <see cref="T:System.Xml.Linq.XNode"/> from a JSON string nested in a root elment specified by <paramref name="deserializeRootElementName"/>.
            </summary>
            <param name="value">The JSON string.</param>
            <param name="deserializeRootElementName">The name of the root element to append when deserializing.</param>
            <returns>The deserialized XNode</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonConvert.DeserializeXNode(System.String,System.String,System.Boolean)">
            <summary>
            Deserializes the <see cref="T:System.Xml.Linq.XNode"/> from a JSON string nested in a root elment specified by <paramref name="deserializeRootElementName"/>
            and writes a .NET array attribute for collections.
            </summary>
            <param name="value">The JSON string.</param>
            <param name="deserializeRootElementName">The name of the root element to append when deserializing.</param>
            <param name="writeArrayAttribute">
            A flag to indicate whether to write the Json.NET array attribute.
            This attribute helps preserve arrays when converting the written XML back to JSON.
            </param>
            <returns>The deserialized XNode</returns>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.JsonConverter">
            <summary>
            Converts an object to and from JSON.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonConverter.WriteJson(CODE.Framework.Core.Newtonsoft.JsonWriter,System.Object,CODE.Framework.Core.Newtonsoft.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:CODE.Framework.Core.Newtonsoft.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonConverter.ReadJson(CODE.Framework.Core.Newtonsoft.JsonReader,System.Type,System.Object,CODE.Framework.Core.Newtonsoft.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:CODE.Framework.Core.Newtonsoft.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonConverter.GetSchema">
            <summary>
            <para>
            Gets the <see cref="T:CODE.Framework.Core.Newtonsoft.Schema.JsonSchema"/> of the JSON produced by the JsonConverter.
            </para>
            <note type="caution">
            JSON Schema validation has been moved to its own package. See <see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see> for more details.
            </note>
            </summary>
            <returns>The <see cref="T:CODE.Framework.Core.Newtonsoft.Schema.JsonSchema"/> of the JSON produced by the JsonConverter.</returns>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonConverter.CanRead">
            <summary>
            Gets a value indicating whether this <see cref="T:CODE.Framework.Core.Newtonsoft.JsonConverter"/> can read JSON.
            </summary>
            <value><c>true</c> if this <see cref="T:CODE.Framework.Core.Newtonsoft.JsonConverter"/> can read JSON; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonConverter.CanWrite">
            <summary>
            Gets a value indicating whether this <see cref="T:CODE.Framework.Core.Newtonsoft.JsonConverter"/> can write JSON.
            </summary>
            <value><c>true</c> if this <see cref="T:CODE.Framework.Core.Newtonsoft.JsonConverter"/> can write JSON; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.JsonConverterAttribute">
            <summary>
            Instructs the <see cref="T:CODE.Framework.Core.Newtonsoft.JsonSerializer"/> to use the specified <see cref="T:CODE.Framework.Core.Newtonsoft.JsonConverter"/> when serializing the member or class.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonConverterAttribute.ConverterType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the converter.
            </summary>
            <value>The <see cref="T:System.Type"/> of the converter.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonConverterAttribute.ConverterParameters">
            <summary>
            The parameter list to use when constructing the JsonConverter described by ConverterType.  
            If null, the default constructor is used.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonConverterAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Newtonsoft.JsonConverterAttribute"/> class.
            </summary>
            <param name="converterType">Type of the converter.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonConverterAttribute.#ctor(System.Type,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Newtonsoft.JsonConverterAttribute"/> class.
            </summary>
            <param name="converterType">Type of the converter.</param>
            <param name="converterParameters">Parameter list to use when constructing the JsonConverter. Can be null.</param>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.JsonConverterCollection">
            <summary>
            Represents a collection of <see cref="T:CODE.Framework.Core.Newtonsoft.JsonConverter"/>.
            </summary>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.JsonException">
            <summary>
            The exception thrown when an error occurs during JSON serialization or deserialization.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Newtonsoft.JsonException"/> class.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Newtonsoft.JsonException"/> class
            with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Newtonsoft.JsonException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Newtonsoft.JsonException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.JsonObjectAttribute">
            <summary>
            Instructs the <see cref="T:CODE.Framework.Core.Newtonsoft.JsonSerializer"/> how to serialize the object.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonObjectAttribute.MemberSerialization">
            <summary>
            Gets or sets the member serialization.
            </summary>
            <value>The member serialization.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonObjectAttribute.ItemRequired">
            <summary>
            Gets or sets a value that indicates whether the object's properties are required.
            </summary>
            <value>
            	A value indicating whether the object's properties are required.
            </value>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonObjectAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Newtonsoft.JsonObjectAttribute"/> class.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonObjectAttribute.#ctor(CODE.Framework.Core.Newtonsoft.MemberSerialization)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Newtonsoft.JsonObjectAttribute"/> class with the specified member serialization.
            </summary>
            <param name="memberSerialization">The member serialization.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonObjectAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Newtonsoft.JsonObjectAttribute"/> class with the specified container Id.
            </summary>
            <param name="id">The container Id.</param>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.JsonReader">
            <summary>
            Represents a reader that provides fast, non-cached, forward-only access to serialized JSON data.
            </summary>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.JsonReader.State">
            <summary>
            Specifies the state of the reader.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.JsonReader.State.Start">
            <summary>
            The Read method has not been called.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.JsonReader.State.Complete">
            <summary>
            The end of the file has been reached successfully.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.JsonReader.State.Property">
            <summary>
            Reader is at a property.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.JsonReader.State.ObjectStart">
            <summary>
            Reader is at the start of an object.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.JsonReader.State.Object">
            <summary>
            Reader is in an object.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.JsonReader.State.ArrayStart">
            <summary>
            Reader is at the start of an array.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.JsonReader.State.Array">
            <summary>
            Reader is in an array.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.JsonReader.State.Closed">
            <summary>
            The Close method has been called.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.JsonReader.State.PostValue">
            <summary>
            Reader has just read a value.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.JsonReader.State.ConstructorStart">
            <summary>
            Reader is at the start of a constructor.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.JsonReader.State.Constructor">
            <summary>
            Reader in a constructor.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.JsonReader.State.Error">
            <summary>
            An error occurred that prevents the read operation from continuing.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.JsonReader.State.Finished">
            <summary>
            The end of the file has been reached successfully.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonReader.CurrentState">
            <summary>
            Gets the current reader state.
            </summary>
            <value>The current reader state.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonReader.CloseInput">
            <summary>
            Gets or sets a value indicating whether the underlying stream or
            <see cref="T:System.IO.TextReader"/> should be closed when the reader is closed.
            </summary>
            <value>
            true to close the underlying stream or <see cref="T:System.IO.TextReader"/> when
            the reader is closed; otherwise false. The default is true.
            </value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonReader.SupportMultipleContent">
            <summary>
            Gets or sets a value indicating whether multiple pieces of JSON content can
            be read from a continuous stream without erroring.
            </summary>
            <value>
            true to support reading multiple pieces of JSON content; otherwise false. The default is false.
            </value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonReader.QuoteChar">
            <summary>
            Gets the quotation mark character used to enclose the value of a string.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonReader.DateTimeZoneHandling">
            <summary>
            Get or set how <see cref="T:System.DateTime"/> time zones are handling when reading JSON.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonReader.DateParseHandling">
            <summary>
            Get or set how date formatted strings, e.g. "\/Date(1198908717056)\/" and "2012-03-21T05:40Z", are parsed when reading JSON.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonReader.FloatParseHandling">
            <summary>
            Get or set how floating point numbers, e.g. 1.0 and 9.9, are parsed when reading JSON text.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonReader.DateFormatString">
            <summary>
            Get or set how custom date formatted strings are parsed when reading JSON.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonReader.MaxDepth">
            <summary>
            Gets or sets the maximum depth allowed when reading JSON. Reading past this depth will throw a <see cref="T:CODE.Framework.Core.Newtonsoft.JsonReaderException"/>.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonReader.TokenType">
            <summary>
            Gets the type of the current JSON token. 
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonReader.Value">
            <summary>
            Gets the text value of the current JSON token.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonReader.ValueType">
            <summary>
            Gets The Common Language Runtime (CLR) type for the current JSON token.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonReader.Depth">
            <summary>
            Gets the depth of the current token in the JSON document.
            </summary>
            <value>The depth of the current token in the JSON document.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonReader.Path">
            <summary>
            Gets the path of the current JSON token. 
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonReader.Culture">
            <summary>
            Gets or sets the culture used when reading JSON. Defaults to <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonReader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Newtonsoft.JsonReader"/> class with the specified <see cref="T:System.IO.TextReader"/>.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonReader.Read">
            <summary>
            Reads the next JSON token from the stream.
            </summary>
            <returns>true if the next token was read successfully; false if there are no more tokens to read.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonReader.ReadAsInt32">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonReader.ReadAsString">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.String"/>.
            </summary>
            <returns>A <see cref="T:System.String"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonReader.ReadAsBytes">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Byte"/>[].
            </summary>
            <returns>A <see cref="T:System.Byte"/>[] or a null reference if the next JSON token is null. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonReader.ReadAsDecimal">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonReader.ReadAsDateTime">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.String"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonReader.ReadAsDateTimeOffset">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonReader.Skip">
            <summary>
            Skips the children of the current token.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonReader.SetToken(CODE.Framework.Core.Newtonsoft.JsonToken)">
            <summary>
            Sets the current token.
            </summary>
            <param name="newToken">The new token.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonReader.SetToken(CODE.Framework.Core.Newtonsoft.JsonToken,System.Object)">
            <summary>
            Sets the current token and value.
            </summary>
            <param name="newToken">The new token.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonReader.SetStateBasedOnCurrent">
            <summary>
            Sets the state based on current token type.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonReader.System#IDisposable#Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonReader.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonReader.Close">
            <summary>
            Changes the <see cref="T:CODE.Framework.Core.Newtonsoft.JsonReader.State"/> to Closed. 
            </summary>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.JsonReaderException">
            <summary>
            The exception thrown when an error occurs while reading JSON text.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonReaderException.LineNumber">
            <summary>
            Gets the line number indicating where the error occurred.
            </summary>
            <value>The line number indicating where the error occurred.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonReaderException.LinePosition">
            <summary>
            Gets the line position indicating where the error occurred.
            </summary>
            <value>The line position indicating where the error occurred.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonReaderException.Path">
            <summary>
            Gets the path to the JSON where the error occurred.
            </summary>
            <value>The path to the JSON where the error occurred.</value>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonReaderException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Newtonsoft.JsonReaderException"/> class.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonReaderException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Newtonsoft.JsonReaderException"/> class
            with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonReaderException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Newtonsoft.JsonReaderException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonReaderException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Newtonsoft.JsonReaderException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.Schema.JsonSchema">
            <summary>
            <para>
            An in-memory representation of a JSON Schema.
            </para>
            <note type="caution">
            JSON Schema validation has been moved to its own package. See <see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see> for more details.
            </note>
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Schema.JsonSchema.Id">
            <summary>
            Gets or sets the id.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Schema.JsonSchema.Title">
            <summary>
            Gets or sets the title.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Schema.JsonSchema.Required">
            <summary>
            Gets or sets whether the object is required.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Schema.JsonSchema.ReadOnly">
            <summary>
            Gets or sets whether the object is read only.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Schema.JsonSchema.Hidden">
            <summary>
            Gets or sets whether the object is visible to users.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Schema.JsonSchema.Transient">
            <summary>
            Gets or sets whether the object is transient.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Schema.JsonSchema.Description">
            <summary>
            Gets or sets the description of the object.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Schema.JsonSchema.Type">
            <summary>
            Gets or sets the types of values allowed by the object.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Schema.JsonSchema.Pattern">
            <summary>
            Gets or sets the pattern.
            </summary>
            <value>The pattern.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Schema.JsonSchema.MinimumLength">
            <summary>
            Gets or sets the minimum length.
            </summary>
            <value>The minimum length.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Schema.JsonSchema.MaximumLength">
            <summary>
            Gets or sets the maximum length.
            </summary>
            <value>The maximum length.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Schema.JsonSchema.DivisibleBy">
            <summary>
            Gets or sets a number that the value should be divisble by.
            </summary>
            <value>A number that the value should be divisble by.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Schema.JsonSchema.Minimum">
            <summary>
            Gets or sets the minimum.
            </summary>
            <value>The minimum.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Schema.JsonSchema.Maximum">
            <summary>
            Gets or sets the maximum.
            </summary>
            <value>The maximum.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Schema.JsonSchema.ExclusiveMinimum">
            <summary>
            Gets or sets a flag indicating whether the value can not equal the number defined by the "minimum" attribute.
            </summary>
            <value>A flag indicating whether the value can not equal the number defined by the "minimum" attribute.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Schema.JsonSchema.ExclusiveMaximum">
            <summary>
            Gets or sets a flag indicating whether the value can not equal the number defined by the "maximum" attribute.
            </summary>
            <value>A flag indicating whether the value can not equal the number defined by the "maximum" attribute.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Schema.JsonSchema.MinimumItems">
            <summary>
            Gets or sets the minimum number of items.
            </summary>
            <value>The minimum number of items.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Schema.JsonSchema.MaximumItems">
            <summary>
            Gets or sets the maximum number of items.
            </summary>
            <value>The maximum number of items.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Schema.JsonSchema.Items">
            <summary>
            Gets or sets the <see cref="T:CODE.Framework.Core.Newtonsoft.Schema.JsonSchema"/> of items.
            </summary>
            <value>The <see cref="T:CODE.Framework.Core.Newtonsoft.Schema.JsonSchema"/> of items.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Schema.JsonSchema.PositionalItemsValidation">
            <summary>
            Gets or sets a value indicating whether items in an array are validated using the <see cref="T:CODE.Framework.Core.Newtonsoft.Schema.JsonSchema"/> instance at their array position from <see cref="P:CODE.Framework.Core.Newtonsoft.Schema.JsonSchema.Items"/>.
            </summary>
            <value>
            	<c>true</c> if items are validated using their array position; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Schema.JsonSchema.AdditionalItems">
            <summary>
            Gets or sets the <see cref="T:CODE.Framework.Core.Newtonsoft.Schema.JsonSchema"/> of additional items.
            </summary>
            <value>The <see cref="T:CODE.Framework.Core.Newtonsoft.Schema.JsonSchema"/> of additional items.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Schema.JsonSchema.AllowAdditionalItems">
            <summary>
            Gets or sets a value indicating whether additional items are allowed.
            </summary>
            <value>
            	<c>true</c> if additional items are allowed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Schema.JsonSchema.UniqueItems">
            <summary>
            Gets or sets whether the array items must be unique.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Schema.JsonSchema.Properties">
            <summary>
            Gets or sets the <see cref="T:CODE.Framework.Core.Newtonsoft.Schema.JsonSchema"/> of properties.
            </summary>
            <value>The <see cref="T:CODE.Framework.Core.Newtonsoft.Schema.JsonSchema"/> of properties.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Schema.JsonSchema.AdditionalProperties">
            <summary>
            Gets or sets the <see cref="T:CODE.Framework.Core.Newtonsoft.Schema.JsonSchema"/> of additional properties.
            </summary>
            <value>The <see cref="T:CODE.Framework.Core.Newtonsoft.Schema.JsonSchema"/> of additional properties.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Schema.JsonSchema.PatternProperties">
            <summary>
            Gets or sets the pattern properties.
            </summary>
            <value>The pattern properties.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Schema.JsonSchema.AllowAdditionalProperties">
            <summary>
            Gets or sets a value indicating whether additional properties are allowed.
            </summary>
            <value>
            	<c>true</c> if additional properties are allowed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Schema.JsonSchema.Requires">
            <summary>
            Gets or sets the required property if this property is present.
            </summary>
            <value>The required property if this property is present.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Schema.JsonSchema.Enum">
            <summary>
            Gets or sets the a collection of valid enum values allowed.
            </summary>
            <value>A collection of valid enum values allowed.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Schema.JsonSchema.Disallow">
            <summary>
            Gets or sets disallowed types.
            </summary>
            <value>The disallow types.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Schema.JsonSchema.Default">
            <summary>
            Gets or sets the default value.
            </summary>
            <value>The default value.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Schema.JsonSchema.Extends">
            <summary>
            Gets or sets the collection of <see cref="T:CODE.Framework.Core.Newtonsoft.Schema.JsonSchema"/> that this schema extends.
            </summary>
            <value>The collection of <see cref="T:CODE.Framework.Core.Newtonsoft.Schema.JsonSchema"/> that this schema extends.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Schema.JsonSchema.Format">
            <summary>
            Gets or sets the format.
            </summary>
            <value>The format.</value>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Schema.JsonSchema.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Newtonsoft.Schema.JsonSchema"/> class.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Schema.JsonSchema.Read(CODE.Framework.Core.Newtonsoft.JsonReader)">
            <summary>
            Reads a <see cref="T:CODE.Framework.Core.Newtonsoft.Schema.JsonSchema"/> from the specified <see cref="T:CODE.Framework.Core.Newtonsoft.JsonReader"/>.
            </summary>
            <param name="reader">The <see cref="T:CODE.Framework.Core.Newtonsoft.JsonReader"/> containing the JSON Schema to read.</param>
            <returns>The <see cref="T:CODE.Framework.Core.Newtonsoft.Schema.JsonSchema"/> object representing the JSON Schema.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Schema.JsonSchema.Read(CODE.Framework.Core.Newtonsoft.JsonReader,CODE.Framework.Core.Newtonsoft.Schema.JsonSchemaResolver)">
            <summary>
            Reads a <see cref="T:CODE.Framework.Core.Newtonsoft.Schema.JsonSchema"/> from the specified <see cref="T:CODE.Framework.Core.Newtonsoft.JsonReader"/>.
            </summary>
            <param name="reader">The <see cref="T:CODE.Framework.Core.Newtonsoft.JsonReader"/> containing the JSON Schema to read.</param>
            <param name="resolver">The <see cref="T:CODE.Framework.Core.Newtonsoft.Schema.JsonSchemaResolver"/> to use when resolving schema references.</param>
            <returns>The <see cref="T:CODE.Framework.Core.Newtonsoft.Schema.JsonSchema"/> object representing the JSON Schema.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Schema.JsonSchema.Parse(System.String)">
            <summary>
            Load a <see cref="T:CODE.Framework.Core.Newtonsoft.Schema.JsonSchema"/> from a string that contains schema JSON.
            </summary>
            <param name="json">A <see cref="T:System.String"/> that contains JSON.</param>
            <returns>A <see cref="T:CODE.Framework.Core.Newtonsoft.Schema.JsonSchema"/> populated from the string that contains JSON.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Schema.JsonSchema.Parse(System.String,CODE.Framework.Core.Newtonsoft.Schema.JsonSchemaResolver)">
            <summary>
            Parses the specified json.
            </summary>
            <param name="json">The json.</param>
            <param name="resolver">The resolver.</param>
            <returns>A <see cref="T:CODE.Framework.Core.Newtonsoft.Schema.JsonSchema"/> populated from the string that contains JSON.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Schema.JsonSchema.WriteTo(CODE.Framework.Core.Newtonsoft.JsonWriter)">
            <summary>
            Writes this schema to a <see cref="T:CODE.Framework.Core.Newtonsoft.JsonWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:CODE.Framework.Core.Newtonsoft.JsonWriter"/> into which this method will write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Schema.JsonSchema.WriteTo(CODE.Framework.Core.Newtonsoft.JsonWriter,CODE.Framework.Core.Newtonsoft.Schema.JsonSchemaResolver)">
            <summary>
            Writes this schema to a <see cref="T:CODE.Framework.Core.Newtonsoft.JsonWriter"/> using the specified <see cref="T:CODE.Framework.Core.Newtonsoft.Schema.JsonSchemaResolver"/>.
            </summary>
            <param name="writer">A <see cref="T:CODE.Framework.Core.Newtonsoft.JsonWriter"/> into which this method will write.</param>
            <param name="resolver">The resolver used.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Schema.JsonSchema.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.Schema.JsonSchemaResolver">
            <summary>
            <para>
            Resolves <see cref="T:CODE.Framework.Core.Newtonsoft.Schema.JsonSchema"/> from an id.
            </para>
            <note type="caution">
            JSON Schema validation has been moved to its own package. See <see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see> for more details.
            </note>
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Schema.JsonSchemaResolver.LoadedSchemas">
            <summary>
            Gets or sets the loaded schemas.
            </summary>
            <value>The loaded schemas.</value>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Schema.JsonSchemaResolver.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Newtonsoft.Schema.JsonSchemaResolver"/> class.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Schema.JsonSchemaResolver.GetSchema(System.String)">
            <summary>
            Gets a <see cref="T:CODE.Framework.Core.Newtonsoft.Schema.JsonSchema"/> for the specified reference.
            </summary>
            <param name="reference">The id.</param>
            <returns>A <see cref="T:CODE.Framework.Core.Newtonsoft.Schema.JsonSchema"/> for the specified reference.</returns>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.Schema.JsonSchemaType">
            <summary>
            <para>
            The value types allowed by the <see cref="T:CODE.Framework.Core.Newtonsoft.Schema.JsonSchema"/>.
            </para>
            <note type="caution">
            JSON Schema validation has been moved to its own package. See <see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see> for more details.
            </note>
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.Schema.JsonSchemaType.None">
            <summary>
            No type specified.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.Schema.JsonSchemaType.String">
            <summary>
            String type.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.Schema.JsonSchemaType.Float">
            <summary>
            Float type.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.Schema.JsonSchemaType.Integer">
            <summary>
            Integer type.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.Schema.JsonSchemaType.Boolean">
            <summary>
            Boolean type.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.Schema.JsonSchemaType.Object">
            <summary>
            Object type.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.Schema.JsonSchemaType.Array">
            <summary>
            Array type.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.Schema.JsonSchemaType.Null">
            <summary>
            Null type.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.Schema.JsonSchemaType.Any">
            <summary>
            Any type.
            </summary>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.JsonSerializationException">
            <summary>
            The exception thrown when an error occurs during JSON serialization or deserialization.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonSerializationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Newtonsoft.JsonSerializationException"/> class.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonSerializationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Newtonsoft.JsonSerializationException"/> class
            with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonSerializationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Newtonsoft.JsonSerializationException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonSerializationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Newtonsoft.JsonSerializationException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.JsonSerializer">
            <summary>
            Serializes and deserializes objects into and from the JSON format.
            The <see cref="T:CODE.Framework.Core.Newtonsoft.JsonSerializer"/> enables you to control how objects are encoded into JSON.
            </summary>
        </member>
        <member name="E:CODE.Framework.Core.Newtonsoft.JsonSerializer.Error">
            <summary>
            Occurs when the <see cref="T:CODE.Framework.Core.Newtonsoft.JsonSerializer"/> errors during serialization and deserialization.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonSerializer.ReferenceResolver">
            <summary>
            Gets or sets the <see cref="T:CODE.Framework.Core.Newtonsoft.Serialization.IReferenceResolver"/> used by the serializer when resolving references.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonSerializer.Binder">
            <summary>
            Gets or sets the <see cref="T:System.Runtime.Serialization.SerializationBinder"/> used by the serializer when resolving type names.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonSerializer.TraceWriter">
            <summary>
            Gets or sets the <see cref="T:CODE.Framework.Core.Newtonsoft.Serialization.ITraceWriter"/> used by the serializer when writing trace messages.
            </summary>
            <value>The trace writer.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonSerializer.TypeNameHandling">
            <summary>
            Gets or sets how type name writing and reading is handled by the serializer.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonSerializer.TypeNameAssemblyFormat">
            <summary>
            Gets or sets how a type name assembly is written and resolved by the serializer.
            </summary>
            <value>The type name assembly format.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonSerializer.PreserveReferencesHandling">
            <summary>
            Gets or sets how object references are preserved by the serializer.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonSerializer.ReferenceLoopHandling">
            <summary>
            Get or set how reference loops (e.g. a class referencing itself) is handled.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonSerializer.MissingMemberHandling">
            <summary>
            Get or set how missing members (e.g. JSON contains a property that isn't a member on the object) are handled during deserialization.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonSerializer.NullValueHandling">
            <summary>
            Get or set how null values are handled during serialization and deserialization.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonSerializer.DefaultValueHandling">
            <summary>
            Get or set how null default are handled during serialization and deserialization.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonSerializer.ObjectCreationHandling">
            <summary>
            Gets or sets how objects are created during deserialization.
            </summary>
            <value>The object creation handling.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonSerializer.ConstructorHandling">
            <summary>
            Gets or sets how constructors are used during deserialization.
            </summary>
            <value>The constructor handling.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonSerializer.MetadataPropertyHandling">
            <summary>
            Gets or sets how metadata properties are used during deserialization.
            </summary>
            <value>The metadata properties handling.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonSerializer.Converters">
            <summary>
            Gets a collection <see cref="T:CODE.Framework.Core.Newtonsoft.JsonConverter"/> that will be used during serialization.
            </summary>
            <value>Collection <see cref="T:CODE.Framework.Core.Newtonsoft.JsonConverter"/> that will be used during serialization.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonSerializer.ContractResolver">
            <summary>
            Gets or sets the contract resolver used by the serializer when
            serializing .NET objects to JSON and vice versa.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonSerializer.Context">
            <summary>
            Gets or sets the <see cref="T:System.Runtime.Serialization.StreamingContext"/> used by the serializer when invoking serialization callback methods.
            </summary>
            <value>The context.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonSerializer.Formatting">
            <summary>
            Indicates how JSON text output is formatted.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonSerializer.DateFormatHandling">
            <summary>
            Get or set how dates are written to JSON text.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonSerializer.DateTimeZoneHandling">
            <summary>
            Get or set how <see cref="T:System.DateTime"/> time zones are handling during serialization and deserialization.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonSerializer.DateParseHandling">
            <summary>
            Get or set how date formatted strings, e.g. "\/Date(1198908717056)\/" and "2012-03-21T05:40Z", are parsed when reading JSON.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonSerializer.FloatParseHandling">
            <summary>
            Get or set how floating point numbers, e.g. 1.0 and 9.9, are parsed when reading JSON text.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonSerializer.FloatFormatHandling">
            <summary>
            Get or set how special floating point numbers, e.g. <see cref="F:System.Double.NaN"/>,
            <see cref="F:System.Double.PositiveInfinity"/> and <see cref="F:System.Double.NegativeInfinity"/>,
            are written as JSON text.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonSerializer.StringEscapeHandling">
            <summary>
            Get or set how strings are escaped when writing JSON text.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonSerializer.DateFormatString">
            <summary>
            Get or set how <see cref="T:System.DateTime"/> and <see cref="T:System.DateTimeOffset"/> values are formatted when writing JSON text, and the expected date format when reading JSON text.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonSerializer.Culture">
            <summary>
            Gets or sets the culture used when reading JSON. Defaults to <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonSerializer.MaxDepth">
            <summary>
            Gets or sets the maximum depth allowed when reading JSON. Reading past this depth will throw a <see cref="T:CODE.Framework.Core.Newtonsoft.JsonReaderException"/>.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonSerializer.CheckAdditionalContent">
            <summary>
            Gets a value indicating whether there will be a check for additional JSON content after deserializing an object.
            </summary>
            <value>
            	<c>true</c> if there will be a check for additional JSON content after deserializing an object; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonSerializer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Newtonsoft.JsonSerializer"/> class.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonSerializer.Create">
            <summary>
            Creates a new <see cref="T:CODE.Framework.Core.Newtonsoft.JsonSerializer"/> instance.
            The <see cref="T:CODE.Framework.Core.Newtonsoft.JsonSerializer"/> will not use default settings.
            </summary>
            <returns>
            A new <see cref="T:CODE.Framework.Core.Newtonsoft.JsonSerializer"/> instance.
            The <see cref="T:CODE.Framework.Core.Newtonsoft.JsonSerializer"/> will not use default settings.
            </returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonSerializer.Create(CODE.Framework.Core.Newtonsoft.JsonSerializerSettings)">
            <summary>
            Creates a new <see cref="T:CODE.Framework.Core.Newtonsoft.JsonSerializer"/> instance using the specified <see cref="T:CODE.Framework.Core.Newtonsoft.JsonSerializerSettings"/>.
            The <see cref="T:CODE.Framework.Core.Newtonsoft.JsonSerializer"/> will not use default settings.
            </summary>
            <param name="settings">The settings to be applied to the <see cref="T:CODE.Framework.Core.Newtonsoft.JsonSerializer"/>.</param>
            <returns>
            A new <see cref="T:CODE.Framework.Core.Newtonsoft.JsonSerializer"/> instance using the specified <see cref="T:CODE.Framework.Core.Newtonsoft.JsonSerializerSettings"/>.
            The <see cref="T:CODE.Framework.Core.Newtonsoft.JsonSerializer"/> will not use default settings.
            </returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonSerializer.CreateDefault">
            <summary>
            Creates a new <see cref="T:CODE.Framework.Core.Newtonsoft.JsonSerializer"/> instance.
            The <see cref="T:CODE.Framework.Core.Newtonsoft.JsonSerializer"/> will use default settings.
            </summary>
            <returns>
            A new <see cref="T:CODE.Framework.Core.Newtonsoft.JsonSerializer"/> instance.
            The <see cref="T:CODE.Framework.Core.Newtonsoft.JsonSerializer"/> will use default settings.
            </returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonSerializer.CreateDefault(CODE.Framework.Core.Newtonsoft.JsonSerializerSettings)">
            <summary>
            Creates a new <see cref="T:CODE.Framework.Core.Newtonsoft.JsonSerializer"/> instance using the specified <see cref="T:CODE.Framework.Core.Newtonsoft.JsonSerializerSettings"/>.
            The <see cref="T:CODE.Framework.Core.Newtonsoft.JsonSerializer"/> will use default settings.
            </summary>
            <param name="settings">The settings to be applied to the <see cref="T:CODE.Framework.Core.Newtonsoft.JsonSerializer"/>.</param>
            <returns>
            A new <see cref="T:CODE.Framework.Core.Newtonsoft.JsonSerializer"/> instance using the specified <see cref="T:CODE.Framework.Core.Newtonsoft.JsonSerializerSettings"/>.
            The <see cref="T:CODE.Framework.Core.Newtonsoft.JsonSerializer"/> will use default settings.
            </returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonSerializer.Populate(System.IO.TextReader,System.Object)">
            <summary>
            Populates the JSON values onto the target object.
            </summary>
            <param name="reader">The <see cref="T:System.IO.TextReader"/> that contains the JSON structure to reader values from.</param>
            <param name="target">The target object to populate values onto.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonSerializer.Populate(CODE.Framework.Core.Newtonsoft.JsonReader,System.Object)">
            <summary>
            Populates the JSON values onto the target object.
            </summary>
            <param name="reader">The <see cref="T:CODE.Framework.Core.Newtonsoft.JsonReader"/> that contains the JSON structure to reader values from.</param>
            <param name="target">The target object to populate values onto.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonSerializer.Deserialize(CODE.Framework.Core.Newtonsoft.JsonReader)">
            <summary>
            Deserializes the JSON structure contained by the specified <see cref="T:CODE.Framework.Core.Newtonsoft.JsonReader"/>.
            </summary>
            <param name="reader">The <see cref="T:CODE.Framework.Core.Newtonsoft.JsonReader"/> that contains the JSON structure to deserialize.</param>
            <returns>The <see cref="T:System.Object"/> being deserialized.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonSerializer.Deserialize(System.IO.TextReader,System.Type)">
            <summary>
            Deserializes the JSON structure contained by the specified <see cref="T:System.IO.StringReader"/>
            into an instance of the specified type.
            </summary>
            <param name="reader">The <see cref="T:System.IO.TextReader"/> containing the object.</param>
            <param name="objectType">The <see cref="T:System.Type"/> of object being deserialized.</param>
            <returns>The instance of <paramref name="objectType"/> being deserialized.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonSerializer.Deserialize``1(CODE.Framework.Core.Newtonsoft.JsonReader)">
            <summary>
            Deserializes the JSON structure contained by the specified <see cref="T:CODE.Framework.Core.Newtonsoft.JsonReader"/>
            into an instance of the specified type.
            </summary>
            <param name="reader">The <see cref="T:CODE.Framework.Core.Newtonsoft.JsonReader"/> containing the object.</param>
            <typeparam name="T">The type of the object to deserialize.</typeparam>
            <returns>The instance of <typeparamref name="T"/> being deserialized.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonSerializer.Deserialize(CODE.Framework.Core.Newtonsoft.JsonReader,System.Type)">
            <summary>
            Deserializes the JSON structure contained by the specified <see cref="T:CODE.Framework.Core.Newtonsoft.JsonReader"/>
            into an instance of the specified type.
            </summary>
            <param name="reader">The <see cref="T:CODE.Framework.Core.Newtonsoft.JsonReader"/> containing the object.</param>
            <param name="objectType">The <see cref="T:System.Type"/> of object being deserialized.</param>
            <returns>The instance of <paramref name="objectType"/> being deserialized.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonSerializer.Serialize(System.IO.TextWriter,System.Object)">
            <summary>
            Serializes the specified <see cref="T:System.Object"/> and writes the JSON structure
            to a <c>Stream</c> using the specified <see cref="T:System.IO.TextWriter"/>. 
            </summary>
            <param name="textWriter">The <see cref="T:System.IO.TextWriter"/> used to write the JSON structure.</param>
            <param name="value">The <see cref="T:System.Object"/> to serialize.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonSerializer.Serialize(CODE.Framework.Core.Newtonsoft.JsonWriter,System.Object,System.Type)">
            <summary>
            Serializes the specified <see cref="T:System.Object"/> and writes the JSON structure
            to a <c>Stream</c> using the specified <see cref="T:System.IO.TextWriter"/>. 
            </summary>
            <param name="jsonWriter">The <see cref="T:CODE.Framework.Core.Newtonsoft.JsonWriter"/> used to write the JSON structure.</param>
            <param name="value">The <see cref="T:System.Object"/> to serialize.</param>
            <param name="objectType">
            The type of the value being serialized.
            This parameter is used when <see cref="P:CODE.Framework.Core.Newtonsoft.JsonSerializer.TypeNameHandling"/> is Auto to write out the type name if the type of the value does not match.
            Specifing the type is optional.
            </param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonSerializer.Serialize(System.IO.TextWriter,System.Object,System.Type)">
            <summary>
            Serializes the specified <see cref="T:System.Object"/> and writes the JSON structure
            to a <c>Stream</c> using the specified <see cref="T:System.IO.TextWriter"/>. 
            </summary>
            <param name="textWriter">The <see cref="T:System.IO.TextWriter"/> used to write the JSON structure.</param>
            <param name="value">The <see cref="T:System.Object"/> to serialize.</param>
            <param name="objectType">
            The type of the value being serialized.
            This parameter is used when <see cref="P:CODE.Framework.Core.Newtonsoft.JsonSerializer.TypeNameHandling"/> is Auto to write out the type name if the type of the value does not match.
            Specifing the type is optional.
            </param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonSerializer.Serialize(CODE.Framework.Core.Newtonsoft.JsonWriter,System.Object)">
            <summary>
            Serializes the specified <see cref="T:System.Object"/> and writes the JSON structure
            to a <c>Stream</c> using the specified <see cref="T:CODE.Framework.Core.Newtonsoft.JsonWriter"/>. 
            </summary>
            <param name="jsonWriter">The <see cref="T:CODE.Framework.Core.Newtonsoft.JsonWriter"/> used to write the JSON structure.</param>
            <param name="value">The <see cref="T:System.Object"/> to serialize.</param>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.JsonSerializerSettings">
            <summary>
            Specifies the settings on a <see cref="T:CODE.Framework.Core.Newtonsoft.JsonSerializer"/> object.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonSerializerSettings.ReferenceLoopHandling">
            <summary>
            Gets or sets how reference loops (e.g. a class referencing itself) is handled.
            </summary>
            <value>Reference loop handling.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonSerializerSettings.MissingMemberHandling">
            <summary>
            Gets or sets how missing members (e.g. JSON contains a property that isn't a member on the object) are handled during deserialization.
            </summary>
            <value>Missing member handling.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonSerializerSettings.ObjectCreationHandling">
            <summary>
            Gets or sets how objects are created during deserialization.
            </summary>
            <value>The object creation handling.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonSerializerSettings.NullValueHandling">
            <summary>
            Gets or sets how null values are handled during serialization and deserialization.
            </summary>
            <value>Null value handling.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonSerializerSettings.DefaultValueHandling">
            <summary>
            Gets or sets how null default are handled during serialization and deserialization.
            </summary>
            <value>The default value handling.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonSerializerSettings.Converters">
            <summary>
            Gets or sets a collection <see cref="T:CODE.Framework.Core.Newtonsoft.JsonConverter"/> that will be used during serialization.
            </summary>
            <value>The converters.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonSerializerSettings.PreserveReferencesHandling">
            <summary>
            Gets or sets how object references are preserved by the serializer.
            </summary>
            <value>The preserve references handling.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonSerializerSettings.TypeNameHandling">
            <summary>
            Gets or sets how type name writing and reading is handled by the serializer.
            </summary>
            <value>The type name handling.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonSerializerSettings.MetadataPropertyHandling">
            <summary>
            Gets or sets how metadata properties are used during deserialization.
            </summary>
            <value>The metadata properties handling.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonSerializerSettings.TypeNameAssemblyFormat">
            <summary>
            Gets or sets how a type name assembly is written and resolved by the serializer.
            </summary>
            <value>The type name assembly format.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonSerializerSettings.ConstructorHandling">
            <summary>
            Gets or sets how constructors are used during deserialization.
            </summary>
            <value>The constructor handling.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonSerializerSettings.ContractResolver">
            <summary>
            Gets or sets the contract resolver used by the serializer when
            serializing .NET objects to JSON and vice versa.
            </summary>
            <value>The contract resolver.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonSerializerSettings.ReferenceResolver">
            <summary>
            Gets or sets the <see cref="T:CODE.Framework.Core.Newtonsoft.Serialization.IReferenceResolver"/> used by the serializer when resolving references.
            </summary>
            <value>The reference resolver.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonSerializerSettings.TraceWriter">
            <summary>
            Gets or sets the <see cref="T:CODE.Framework.Core.Newtonsoft.Serialization.ITraceWriter"/> used by the serializer when writing trace messages.
            </summary>
            <value>The trace writer.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonSerializerSettings.Binder">
            <summary>
            Gets or sets the <see cref="T:System.Runtime.Serialization.SerializationBinder"/> used by the serializer when resolving type names.
            </summary>
            <value>The binder.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonSerializerSettings.Error">
            <summary>
            Gets or sets the error handler called during serialization and deserialization.
            </summary>
            <value>The error handler called during serialization and deserialization.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonSerializerSettings.Context">
            <summary>
            Gets or sets the <see cref="T:System.Runtime.Serialization.StreamingContext"/> used by the serializer when invoking serialization callback methods.
            </summary>
            <value>The context.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonSerializerSettings.DateFormatString">
            <summary>
            Get or set how <see cref="T:System.DateTime"/> and <see cref="T:System.DateTimeOffset"/> values are formatted when writing JSON text, and the expected date format when reading JSON text.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonSerializerSettings.MaxDepth">
            <summary>
            Gets or sets the maximum depth allowed when reading JSON. Reading past this depth will throw a <see cref="T:CODE.Framework.Core.Newtonsoft.JsonReaderException"/>.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonSerializerSettings.Formatting">
            <summary>
            Indicates how JSON text output is formatted.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonSerializerSettings.DateFormatHandling">
            <summary>
            Get or set how dates are written to JSON text.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonSerializerSettings.DateTimeZoneHandling">
            <summary>
            Get or set how <see cref="T:System.DateTime"/> time zones are handling during serialization and deserialization.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonSerializerSettings.DateParseHandling">
            <summary>
            Get or set how date formatted strings, e.g. "\/Date(1198908717056)\/" and "2012-03-21T05:40Z", are parsed when reading JSON.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonSerializerSettings.FloatFormatHandling">
            <summary>
            Get or set how special floating point numbers, e.g. <see cref="F:System.Double.NaN"/>,
            <see cref="F:System.Double.PositiveInfinity"/> and <see cref="F:System.Double.NegativeInfinity"/>,
            are written as JSON.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonSerializerSettings.FloatParseHandling">
            <summary>
            Get or set how floating point numbers, e.g. 1.0 and 9.9, are parsed when reading JSON text.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonSerializerSettings.StringEscapeHandling">
            <summary>
            Get or set how strings are escaped when writing JSON text.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonSerializerSettings.Culture">
            <summary>
            Gets or sets the culture used when reading JSON. Defaults to <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonSerializerSettings.CheckAdditionalContent">
            <summary>
            Gets a value indicating whether there will be a check for additional content after deserializing an object.
            </summary>
            <value>
            	<c>true</c> if there will be a check for additional content after deserializing an object; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonSerializerSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Newtonsoft.JsonSerializerSettings"/> class.
            </summary>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.JsonTextReader">
            <summary>
            Represents a reader that provides fast, non-cached, forward-only access to JSON text data.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonTextReader.#ctor(System.IO.TextReader)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Newtonsoft.JsonReader"/> class with the specified <see cref="T:System.IO.TextReader"/>.
            </summary>
            <param name="reader">The <c>TextReader</c> containing the XML data to read.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonTextReader.GetBuffer">
            <summary>
            Gets the buffer.
            </summary>
            <returns>StringBuffer.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonTextReader.OnNewLine(System.Int32)">
            <summary>
            Called when moving to a new line
            </summary>
            <param name="pos">The position.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonTextReader.ParseString(System.Char)">
            <summary>
            Parses the string.
            </summary>
            <param name="quote">The quote.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonTextReader.Read">
            <summary>
            Reads the next JSON token from the stream.
            </summary>
            <returns>
            true if the next token was read successfully; false if there are no more tokens to read.
            </returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonTextReader.ReadAsBytes">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Byte"/>[].
            </summary>
            <returns>
            A <see cref="T:System.Byte"/>[] or a null reference if the next JSON token is null. This method will return <c>null</c> at the end of an array.
            </returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonTextReader.ReadAsDecimal">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonTextReader.ReadAsInt32">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonTextReader.ReadAsString">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.String"/>.
            </summary>
            <returns>A <see cref="T:System.String"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonTextReader.ReadAsDateTime">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.String"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonTextReader.ReadAsDateTimeOffset">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.DateTimeOffset"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonTextReader.Close">
            <summary>
            Changes the state to closed. 
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonTextReader.HasLineInfo">
            <summary>
            Gets a value indicating whether the class can return line information.
            </summary>
            <returns>
            	<c>true</c> if LineNumber and LinePosition can be provided; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonTextReader.LineNumber">
            <summary>
            Gets the current line number.
            </summary>
            <value>
            The current line number or 0 if no line information is available (for example, HasLineInfo returns false).
            </value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonTextReader.LinePosition">
            <summary>
            Gets the current line position.
            </summary>
            <value>
            The current line position or 0 if no line information is available (for example, HasLineInfo returns false).
            </value>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.JsonTextWriter">
            <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of generating JSON data.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonTextWriter.Indentation">
            <summary>
            Gets or sets how many IndentChars to write for each level in the hierarchy when <see cref="T:CODE.Framework.Core.Newtonsoft.Formatting"/> is set to <c>Formatting.Indented</c>.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonTextWriter.QuoteChar">
            <summary>
            Gets or sets which character to use to quote attribute values.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonTextWriter.IndentChar">
            <summary>
            Gets or sets which character to use for indenting when <see cref="T:CODE.Framework.Core.Newtonsoft.Formatting"/> is set to <c>Formatting.Indented</c>.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonTextWriter.QuoteName">
            <summary>
            Gets or sets a value indicating whether object names will be surrounded with quotes.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonTextWriter.#ctor(System.IO.TextWriter)">
            <summary>
            Creates an instance of the <c>JsonWriter</c> class using the specified <see cref="T:System.IO.TextWriter"/>. 
            </summary>
            <param name="textWriter">The <c>TextWriter</c> to write to.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonTextWriter.Flush">
            <summary>
            Flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonTextWriter.Close">
            <summary>
            Closes this stream and the underlying stream.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonTextWriter.WriteStartObject">
            <summary>
            Writes the beginning of a JSON object.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonTextWriter.WriteStartArray">
            <summary>
            Writes the beginning of a JSON array.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonTextWriter.WriteStartConstructor(System.String)">
            <summary>
            Writes the start of a constructor with the given name.
            </summary>
            <param name="name">The name of the constructor.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonTextWriter.WriteEnd(CODE.Framework.Core.Newtonsoft.JsonToken)">
            <summary>
            Writes the specified end token.
            </summary>
            <param name="token">The end token to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonTextWriter.WritePropertyName(System.String)">
            <summary>
            Writes the property name of a name/value pair on a JSON object.
            </summary>
            <param name="name">The name of the property.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonTextWriter.WritePropertyName(System.String,System.Boolean)">
            <summary>
            Writes the property name of a name/value pair on a JSON object.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="escape">A flag to indicate whether the text should be escaped when it is written as a JSON property name.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonTextWriter.WriteIndent">
            <summary>
            Writes indent characters.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonTextWriter.WriteValueDelimiter">
            <summary>
            Writes the JSON value delimiter.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonTextWriter.WriteIndentSpace">
            <summary>
            Writes an indent space.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonTextWriter.WriteValue(System.Object)">
            <summary>
            Writes a <see cref="T:System.Object"/> value.
            An error will raised if the value cannot be written as a single JSON token.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> value to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonTextWriter.WriteNull">
            <summary>
            Writes a null value.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonTextWriter.WriteUndefined">
            <summary>
            Writes an undefined value.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonTextWriter.WriteRaw(System.String)">
            <summary>
            Writes raw JSON.
            </summary>
            <param name="json">The raw JSON to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonTextWriter.WriteValue(System.String)">
            <summary>
            Writes a <see cref="T:System.String"/> value.
            </summary>
            <param name="value">The <see cref="T:System.String"/> value to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonTextWriter.WriteValue(System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int32"/> value to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonTextWriter.WriteValue(System.UInt32)">
            <summary>
            Writes a <see cref="T:System.UInt32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt32"/> value to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonTextWriter.WriteValue(System.Int64)">
            <summary>
            Writes a <see cref="T:System.Int64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int64"/> value to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonTextWriter.WriteValue(System.UInt64)">
            <summary>
            Writes a <see cref="T:System.UInt64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt64"/> value to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonTextWriter.WriteValue(System.Single)">
            <summary>
            Writes a <see cref="T:System.Single"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Single"/> value to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonTextWriter.WriteValue(System.Nullable{System.Single})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonTextWriter.WriteValue(System.Double)">
            <summary>
            Writes a <see cref="T:System.Double"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Double"/> value to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonTextWriter.WriteValue(System.Nullable{System.Double})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonTextWriter.WriteValue(System.Boolean)">
            <summary>
            Writes a <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Boolean"/> value to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonTextWriter.WriteValue(System.Int16)">
            <summary>
            Writes a <see cref="T:System.Int16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int16"/> value to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonTextWriter.WriteValue(System.UInt16)">
            <summary>
            Writes a <see cref="T:System.UInt16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt16"/> value to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonTextWriter.WriteValue(System.Char)">
            <summary>
            Writes a <see cref="T:System.Char"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Char"/> value to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonTextWriter.WriteValue(System.Byte)">
            <summary>
            Writes a <see cref="T:System.Byte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Byte"/> value to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonTextWriter.WriteValue(System.SByte)">
            <summary>
            Writes a <see cref="T:System.SByte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.SByte"/> value to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonTextWriter.WriteValue(System.Decimal)">
            <summary>
            Writes a <see cref="T:System.Decimal"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Decimal"/> value to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonTextWriter.WriteValue(System.DateTime)">
            <summary>
            Writes a <see cref="T:System.DateTime"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTime"/> value to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonTextWriter.WriteValue(System.Byte[])">
            <summary>
            Writes a <see cref="T:System.Byte"/>[] value.
            </summary>
            <param name="value">The <see cref="T:System.Byte"/>[] value to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonTextWriter.WriteValue(System.DateTimeOffset)">
            <summary>
            Writes a <see cref="T:System.DateTimeOffset"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTimeOffset"/> value to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonTextWriter.WriteValue(System.Guid)">
            <summary>
            Writes a <see cref="T:System.Guid"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Guid"/> value to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonTextWriter.WriteValue(System.TimeSpan)">
            <summary>
            Writes a <see cref="T:System.TimeSpan"/> value.
            </summary>
            <param name="value">The <see cref="T:System.TimeSpan"/> value to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonTextWriter.WriteValue(System.Uri)">
            <summary>
            Writes a <see cref="T:System.Uri"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Uri"/> value to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonTextWriter.WriteComment(System.String)">
            <summary>
            Writes out a comment <code>/*...*/</code> containing the specified text. 
            </summary>
            <param name="text">Text to place inside the comment.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonTextWriter.WriteWhitespace(System.String)">
            <summary>
            Writes out the given white space.
            </summary>
            <param name="ws">The string of white space characters.</param>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.JsonToken">
            <summary>
            Specifies the type of JSON token.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.JsonToken.None">
            <summary>
            This is returned by the <see cref="T:CODE.Framework.Core.Newtonsoft.JsonReader"/> if a <see cref="M:CODE.Framework.Core.Newtonsoft.JsonReader.Read"/> method has not been called. 
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.JsonToken.StartObject">
            <summary>
            An object start token.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.JsonToken.StartArray">
            <summary>
            An array start token.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.JsonToken.StartConstructor">
            <summary>
            A constructor start token.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.JsonToken.PropertyName">
            <summary>
            An object property name.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.JsonToken.Comment">
            <summary>
            A comment.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.JsonToken.Raw">
            <summary>
            Raw JSON.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.JsonToken.Integer">
            <summary>
            An integer.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.JsonToken.Float">
            <summary>
            A float.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.JsonToken.String">
            <summary>
            A string.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.JsonToken.Boolean">
            <summary>
            A boolean.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.JsonToken.Null">
            <summary>
            A null token.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.JsonToken.Undefined">
            <summary>
            An undefined token.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.JsonToken.EndObject">
            <summary>
            An object end token.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.JsonToken.EndArray">
            <summary>
            An array end token.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.JsonToken.EndConstructor">
            <summary>
            A constructor end token.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.JsonToken.Date">
            <summary>
            A Date.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.JsonToken.Bytes">
            <summary>
            Byte data.
            </summary>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.JsonWriter">
            <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of generating JSON data.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonWriter.CloseOutput">
            <summary>
            Gets or sets a value indicating whether the underlying stream or
            <see cref="T:System.IO.TextReader"/> should be closed when the writer is closed.
            </summary>
            <value>
            true to close the underlying stream or <see cref="T:System.IO.TextReader"/> when
            the writer is closed; otherwise false. The default is true.
            </value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonWriter.Top">
            <summary>
            Gets the top.
            </summary>
            <value>The top.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonWriter.WriteState">
            <summary>
            Gets the state of the writer.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonWriter.Path">
            <summary>
            Gets the path of the writer. 
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonWriter.Formatting">
            <summary>
            Indicates how JSON text output is formatted.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonWriter.DateFormatHandling">
            <summary>
            Get or set how dates are written to JSON text.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonWriter.DateTimeZoneHandling">
            <summary>
            Get or set how <see cref="T:System.DateTime"/> time zones are handling when writing JSON text.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonWriter.StringEscapeHandling">
            <summary>
            Get or set how strings are escaped when writing JSON text.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonWriter.FloatFormatHandling">
            <summary>
            Get or set how special floating point numbers, e.g. <see cref="F:System.Double.NaN"/>,
            <see cref="F:System.Double.PositiveInfinity"/> and <see cref="F:System.Double.NegativeInfinity"/>,
            are written to JSON text.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonWriter.DateFormatString">
            <summary>
            Get or set how <see cref="T:System.DateTime"/> and <see cref="T:System.DateTimeOffset"/> values are formatting when writing JSON text.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonWriter.Culture">
            <summary>
            Gets or sets the culture used when writing JSON. Defaults to <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonWriter.#ctor">
            <summary>
            Creates an instance of the <c>JsonWriter</c> class. 
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonWriter.Flush">
            <summary>
            Flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonWriter.Close">
            <summary>
            Closes this stream and the underlying stream.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonWriter.WriteStartObject">
            <summary>
            Writes the beginning of a JSON object.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonWriter.WriteEndObject">
            <summary>
            Writes the end of a JSON object.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonWriter.WriteStartArray">
            <summary>
            Writes the beginning of a JSON array.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonWriter.WriteEndArray">
            <summary>
            Writes the end of an array.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonWriter.WriteStartConstructor(System.String)">
            <summary>
            Writes the start of a constructor with the given name.
            </summary>
            <param name="name">The name of the constructor.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonWriter.WriteEndConstructor">
            <summary>
            Writes the end constructor.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonWriter.WritePropertyName(System.String)">
            <summary>
            Writes the property name of a name/value pair on a JSON object.
            </summary>
            <param name="name">The name of the property.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonWriter.WritePropertyName(System.String,System.Boolean)">
            <summary>
            Writes the property name of a name/value pair on a JSON object.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="escape">A flag to indicate whether the text should be escaped when it is written as a JSON property name.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonWriter.WriteEnd">
            <summary>
            Writes the end of the current JSON object or array.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonWriter.WriteToken(CODE.Framework.Core.Newtonsoft.JsonReader)">
            <summary>
            Writes the current <see cref="T:CODE.Framework.Core.Newtonsoft.JsonReader"/> token and its children.
            </summary>
            <param name="reader">The <see cref="T:CODE.Framework.Core.Newtonsoft.JsonReader"/> to read the token from.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonWriter.WriteToken(CODE.Framework.Core.Newtonsoft.JsonReader,System.Boolean)">
            <summary>
            Writes the current <see cref="T:CODE.Framework.Core.Newtonsoft.JsonReader"/> token.
            </summary>
            <param name="reader">The <see cref="T:CODE.Framework.Core.Newtonsoft.JsonReader"/> to read the token from.</param>
            <param name="writeChildren">A flag indicating whether the current token's children should be written.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonWriter.WriteToken(CODE.Framework.Core.Newtonsoft.JsonToken,System.Object)">
            <summary>
            Writes the <see cref="T:CODE.Framework.Core.Newtonsoft.JsonToken"/> token and its value.
            </summary>
            <param name="token">The <see cref="T:CODE.Framework.Core.Newtonsoft.JsonToken"/> to write.</param>
            <param name="value">
            The value to write.
            A value is only required for tokens that have an associated value, e.g. the <see cref="T:System.String"/> property name for <see cref="F:CODE.Framework.Core.Newtonsoft.JsonToken.PropertyName"/>.
            A null value can be passed to the method for token's that don't have a value, e.g. <see cref="F:CODE.Framework.Core.Newtonsoft.JsonToken.StartObject"/>.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonWriter.WriteToken(CODE.Framework.Core.Newtonsoft.JsonToken)">
            <summary>
            Writes the <see cref="T:CODE.Framework.Core.Newtonsoft.JsonToken"/> token.
            </summary>
            <param name="token">The <see cref="T:CODE.Framework.Core.Newtonsoft.JsonToken"/> to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonWriter.WriteEnd(CODE.Framework.Core.Newtonsoft.JsonToken)">
            <summary>
            Writes the specified end token.
            </summary>
            <param name="token">The end token to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonWriter.WriteIndent">
            <summary>
            Writes indent characters.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonWriter.WriteValueDelimiter">
            <summary>
            Writes the JSON value delimiter.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonWriter.WriteIndentSpace">
            <summary>
            Writes an indent space.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonWriter.WriteNull">
            <summary>
            Writes a null value.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonWriter.WriteUndefined">
            <summary>
            Writes an undefined value.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonWriter.WriteRaw(System.String)">
            <summary>
            Writes raw JSON without changing the writer's state.
            </summary>
            <param name="json">The raw JSON to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonWriter.WriteRawValue(System.String)">
            <summary>
            Writes raw JSON where a value is expected and updates the writer's state.
            </summary>
            <param name="json">The raw JSON to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonWriter.WriteValue(System.String)">
            <summary>
            Writes a <see cref="T:System.String"/> value.
            </summary>
            <param name="value">The <see cref="T:System.String"/> value to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonWriter.WriteValue(System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int32"/> value to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonWriter.WriteValue(System.UInt32)">
            <summary>
            Writes a <see cref="T:System.UInt32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt32"/> value to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonWriter.WriteValue(System.Int64)">
            <summary>
            Writes a <see cref="T:System.Int64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int64"/> value to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonWriter.WriteValue(System.UInt64)">
            <summary>
            Writes a <see cref="T:System.UInt64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt64"/> value to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonWriter.WriteValue(System.Single)">
            <summary>
            Writes a <see cref="T:System.Single"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Single"/> value to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonWriter.WriteValue(System.Double)">
            <summary>
            Writes a <see cref="T:System.Double"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Double"/> value to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonWriter.WriteValue(System.Boolean)">
            <summary>
            Writes a <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Boolean"/> value to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonWriter.WriteValue(System.Int16)">
            <summary>
            Writes a <see cref="T:System.Int16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int16"/> value to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonWriter.WriteValue(System.UInt16)">
            <summary>
            Writes a <see cref="T:System.UInt16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt16"/> value to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonWriter.WriteValue(System.Char)">
            <summary>
            Writes a <see cref="T:System.Char"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Char"/> value to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonWriter.WriteValue(System.Byte)">
            <summary>
            Writes a <see cref="T:System.Byte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Byte"/> value to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonWriter.WriteValue(System.SByte)">
            <summary>
            Writes a <see cref="T:System.SByte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.SByte"/> value to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonWriter.WriteValue(System.Decimal)">
            <summary>
            Writes a <see cref="T:System.Decimal"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Decimal"/> value to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonWriter.WriteValue(System.DateTime)">
            <summary>
            Writes a <see cref="T:System.DateTime"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTime"/> value to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonWriter.WriteValue(System.DateTimeOffset)">
            <summary>
            Writes a <see cref="T:System.DateTimeOffset"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTimeOffset"/> value to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonWriter.WriteValue(System.Guid)">
            <summary>
            Writes a <see cref="T:System.Guid"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Guid"/> value to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonWriter.WriteValue(System.TimeSpan)">
            <summary>
            Writes a <see cref="T:System.TimeSpan"/> value.
            </summary>
            <param name="value">The <see cref="T:System.TimeSpan"/> value to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonWriter.WriteValue(System.Nullable{System.Int32})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonWriter.WriteValue(System.Nullable{System.UInt32})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonWriter.WriteValue(System.Nullable{System.Int64})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonWriter.WriteValue(System.Nullable{System.UInt64})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonWriter.WriteValue(System.Nullable{System.Single})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonWriter.WriteValue(System.Nullable{System.Double})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonWriter.WriteValue(System.Nullable{System.Boolean})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonWriter.WriteValue(System.Nullable{System.Int16})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonWriter.WriteValue(System.Nullable{System.UInt16})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonWriter.WriteValue(System.Nullable{System.Char})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonWriter.WriteValue(System.Nullable{System.Byte})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonWriter.WriteValue(System.Nullable{System.SByte})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonWriter.WriteValue(System.Nullable{System.Decimal})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonWriter.WriteValue(System.Nullable{System.DateTime})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonWriter.WriteValue(System.Nullable{System.DateTimeOffset})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonWriter.WriteValue(System.Nullable{System.Guid})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonWriter.WriteValue(System.Nullable{System.TimeSpan})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonWriter.WriteValue(System.Byte[])">
            <summary>
            Writes a <see cref="T:System.Byte"/>[] value.
            </summary>
            <param name="value">The <see cref="T:System.Byte"/>[] value to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonWriter.WriteValue(System.Uri)">
            <summary>
            Writes a <see cref="T:System.Uri"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Uri"/> value to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonWriter.WriteValue(System.Object)">
            <summary>
            Writes a <see cref="T:System.Object"/> value.
            An error will raised if the value cannot be written as a single JSON token.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> value to write.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonWriter.WriteComment(System.String)">
            <summary>
            Writes out a comment <code>/*...*/</code> containing the specified text. 
            </summary>
            <param name="text">Text to place inside the comment.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonWriter.WriteWhitespace(System.String)">
            <summary>
            Writes out the given white space.
            </summary>
            <param name="ws">The string of white space characters.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonWriter.SetWriteState(CODE.Framework.Core.Newtonsoft.JsonToken,System.Object)">
            <summary>
            Sets the state of the JsonWriter,
            </summary>
            <param name="token">The JsonToken being written.</param>
            <param name="value">The value being written.</param>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.JsonWriterException">
            <summary>
            The exception thrown when an error occurs while reading JSON text.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.JsonWriterException.Path">
            <summary>
            Gets the path to the JSON where the error occurred.
            </summary>
            <value>The path to the JSON where the error occurred.</value>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonWriterException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Newtonsoft.JsonWriterException"/> class.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonWriterException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Newtonsoft.JsonWriterException"/> class
            with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonWriterException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Newtonsoft.JsonWriterException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.JsonWriterException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Newtonsoft.JsonWriterException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.MemberSerialization">
            <summary>
            Specifies the member serialization options for the <see cref="T:CODE.Framework.Core.Newtonsoft.JsonSerializer"/>.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.MemberSerialization.OptOut">
            <summary>
            All public members are serialized by default. Members can be excluded using <see cref="T:CODE.Framework.Core.Newtonsoft.JsonIgnoreAttribute"/> or <see cref="T:System.NonSerializedAttribute"/>.
            This is the default member serialization mode.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.MemberSerialization.OptIn">
            <summary>
            Only members must be marked with <see cref="T:CODE.Framework.Core.Newtonsoft.JsonPropertyAttribute"/> or <see cref="T:System.Runtime.Serialization.DataMemberAttribute"/> are serialized.
            This member serialization mode can also be set by marking the class with <see cref="T:System.Runtime.Serialization.DataContractAttribute"/>.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.MemberSerialization.Fields">
            <summary>
            All public and private fields are serialized. Members can be excluded using <see cref="T:CODE.Framework.Core.Newtonsoft.JsonIgnoreAttribute"/> or <see cref="T:System.NonSerializedAttribute"/>.
            This member serialization mode can also be set by marking the class with <see cref="T:System.SerializableAttribute"/>
            and setting IgnoreSerializableAttribute on <see cref="!:DefaultContractResolver"/> to false.
            </summary>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.MetadataPropertyHandling">
            <summary>
            Specifies metadata property handling options for the <see cref="T:CODE.Framework.Core.Newtonsoft.JsonSerializer"/>.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.MetadataPropertyHandling.Default">
            <summary>
            Read metadata properties located at the start of a JSON object.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.MetadataPropertyHandling.ReadAhead">
            <summary>
            Read metadata properties located anywhere in a JSON object. Note that this setting will impact performance.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.MetadataPropertyHandling.Ignore">
            <summary>
            Do not try to read metadata properties.
            </summary>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.MissingMemberHandling">
            <summary>
            Specifies missing member handling options for the <see cref="T:CODE.Framework.Core.Newtonsoft.JsonSerializer"/>.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.MissingMemberHandling.Ignore">
            <summary>
            Ignore a missing member and do not attempt to deserialize it.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.MissingMemberHandling.Error">
            <summary>
            Throw a <see cref="T:CODE.Framework.Core.Newtonsoft.JsonSerializationException"/> when a missing member is encountered during deserialization.
            </summary>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.NullValueHandling">
            <summary>
            Specifies null value handling options for the <see cref="T:CODE.Framework.Core.Newtonsoft.JsonSerializer"/>.
            </summary>
            <example>
              <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeNullValueHandlingObject" title="NullValueHandling Class" />
              <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeNullValueHandlingExample" title="NullValueHandling Ignore Example" />
            </example>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.NullValueHandling.Include">
            <summary>
            Include null values when serializing and deserializing objects.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.NullValueHandling.Ignore">
            <summary>
            Ignore null values when serializing and deserializing objects.
            </summary>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.ObjectCreationHandling">
            <summary>
            Specifies how object creation is handled by the <see cref="T:CODE.Framework.Core.Newtonsoft.JsonSerializer"/>.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.ObjectCreationHandling.Auto">
            <summary>
            Reuse existing objects, create new objects when needed.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.ObjectCreationHandling.Reuse">
            <summary>
            Only reuse existing objects.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.ObjectCreationHandling.Replace">
            <summary>
            Always create new objects.
            </summary>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.PreserveReferencesHandling">
            <summary>
            Specifies reference handling options for the <see cref="T:CODE.Framework.Core.Newtonsoft.JsonSerializer"/>.
            Note that references cannot be preserved when a value is set via a non-default constructor such as types that implement ISerializable.
            </summary>
            <example>
              <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="PreservingObjectReferencesOn" title="Preserve Object References" />       
            </example>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.PreserveReferencesHandling.None">
            <summary>
            Do not preserve references when serializing types.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.PreserveReferencesHandling.Objects">
            <summary>
            Preserve references when serializing into a JSON object structure.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.PreserveReferencesHandling.Arrays">
            <summary>
            Preserve references when serializing into a JSON array structure.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.PreserveReferencesHandling.All">
            <summary>
            Preserve references when serializing.
            </summary>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.ReferenceLoopHandling">
            <summary>
            Specifies reference loop handling options for the <see cref="T:CODE.Framework.Core.Newtonsoft.JsonSerializer"/>.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.ReferenceLoopHandling.Error">
            <summary>
            Throw a <see cref="T:CODE.Framework.Core.Newtonsoft.JsonSerializationException"/> when a loop is encountered.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.ReferenceLoopHandling.Ignore">
            <summary>
            Ignore loop references and do not serialize.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.ReferenceLoopHandling.Serialize">
            <summary>
            Serialize loop references.
            </summary>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.Required">
            <summary>
            Indicating whether a property is required.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.Required.Default">
            <summary>
            The property is not required. The default state.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.Required.AllowNull">
            <summary>
            The property must be defined in JSON but can be a null value.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.Required.Always">
            <summary>
            The property must be defined in JSON and cannot be a null value.
            </summary>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.Serialization.DefaultContractResolver">
            <summary>
            Used by <see cref="T:CODE.Framework.Core.Newtonsoft.JsonSerializer"/> to resolves a <see cref="T:CODE.Framework.Core.Newtonsoft.Serialization.JsonContract"/> for a given <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Serialization.DefaultContractResolver.DynamicCodeGeneration">
            <summary>
            Gets a value indicating whether members are being get and set using dynamic code generation.
            This value is determined by the runtime permissions available.
            </summary>
            <value>
            	<c>true</c> if using dynamic code generation; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Serialization.DefaultContractResolver.DefaultMembersSearchFlags">
            <summary>
            Gets or sets the default members search flags.
            </summary>
            <value>The default members search flags.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Serialization.DefaultContractResolver.SerializeCompilerGeneratedMembers">
            <summary>
            Gets or sets a value indicating whether compiler generated members should be serialized.
            </summary>
            <value>
            	<c>true</c> if serialized compiler generated members; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Serialization.DefaultContractResolver.IgnoreSerializableInterface">
            <summary>
            Gets or sets a value indicating whether to ignore the <see cref="T:System.Runtime.Serialization.ISerializable"/> interface when serializing and deserializing types.
            </summary>
            <value>
            	<c>true</c> if the <see cref="T:System.Runtime.Serialization.ISerializable"/> interface will be ignored when serializing and deserializing types; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Serialization.DefaultContractResolver.IgnoreSerializableAttribute">
            <summary>
            Gets or sets a value indicating whether to ignore the <see cref="T:System.SerializableAttribute"/> attribute when serializing and deserializing types.
            </summary>
            <value>
            	<c>true</c> if the <see cref="T:System.SerializableAttribute"/> attribute will be ignored when serializing and deserializing types; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Serialization.DefaultContractResolver.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Newtonsoft.Serialization.DefaultContractResolver"/> class.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Serialization.DefaultContractResolver.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Newtonsoft.Serialization.DefaultContractResolver"/> class.
            </summary>
            <param name="shareCache">
            If set to <c>true</c> the <see cref="T:CODE.Framework.Core.Newtonsoft.Serialization.DefaultContractResolver"/> will use a cached shared with other resolvers of the same type.
            Sharing the cache will significantly improve performance with multiple resolver instances because expensive reflection will only
            happen once. This setting can cause unexpected behavior if different instances of the resolver are suppose to produce different
            results. When set to false it is highly recommended to reuse <see cref="T:CODE.Framework.Core.Newtonsoft.Serialization.DefaultContractResolver"/> instances with the <see cref="T:CODE.Framework.Core.Newtonsoft.JsonSerializer"/>.
            </param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Serialization.DefaultContractResolver.ResolveContract(System.Type)">
            <summary>
            Resolves the contract for a given type.
            </summary>
            <param name="type">The type to resolve a contract for.</param>
            <returns>The contract for a given type.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Serialization.DefaultContractResolver.GetSerializableMembers(System.Type)">
            <summary>
            Gets the serializable members for the type.
            </summary>
            <param name="objectType">The type to get serializable members for.</param>
            <returns>The serializable members for the type.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Serialization.DefaultContractResolver.CreateObjectContract(System.Type)">
            <summary>
            Creates a <see cref="T:CODE.Framework.Core.Newtonsoft.Serialization.JsonObjectContract"/> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:CODE.Framework.Core.Newtonsoft.Serialization.JsonObjectContract"/> for the given type.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Serialization.DefaultContractResolver.CreateConstructorParameters(System.Reflection.ConstructorInfo,CODE.Framework.Core.Newtonsoft.Serialization.JsonPropertyCollection)">
            <summary>
            Creates the constructor parameters.
            </summary>
            <param name="constructor">The constructor to create properties for.</param>
            <param name="memberProperties">The type's member properties.</param>
            <returns>Properties for the given <see cref="T:System.Reflection.ConstructorInfo"/>.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Serialization.DefaultContractResolver.CreatePropertyFromConstructorParameter(CODE.Framework.Core.Newtonsoft.Serialization.JsonProperty,System.Reflection.ParameterInfo)">
            <summary>
            Creates a <see cref="T:CODE.Framework.Core.Newtonsoft.Serialization.JsonProperty"/> for the given <see cref="T:System.Reflection.ParameterInfo"/>.
            </summary>
            <param name="matchingMemberProperty">The matching member property.</param>
            <param name="parameterInfo">The constructor parameter.</param>
            <returns>A created <see cref="T:CODE.Framework.Core.Newtonsoft.Serialization.JsonProperty"/> for the given <see cref="T:System.Reflection.ParameterInfo"/>.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Serialization.DefaultContractResolver.ResolveContractConverter(System.Type)">
            <summary>
            Resolves the default <see cref="T:CODE.Framework.Core.Newtonsoft.JsonConverter" /> for the contract.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>The contract's default <see cref="T:CODE.Framework.Core.Newtonsoft.JsonConverter" />.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Serialization.DefaultContractResolver.CreateDictionaryContract(System.Type)">
            <summary>
            Creates a <see cref="T:CODE.Framework.Core.Newtonsoft.Serialization.JsonDictionaryContract"/> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:CODE.Framework.Core.Newtonsoft.Serialization.JsonDictionaryContract"/> for the given type.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Serialization.DefaultContractResolver.CreateArrayContract(System.Type)">
            <summary>
            Creates a <see cref="T:CODE.Framework.Core.Newtonsoft.Serialization.JsonArrayContract"/> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:CODE.Framework.Core.Newtonsoft.Serialization.JsonArrayContract"/> for the given type.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Serialization.DefaultContractResolver.CreatePrimitiveContract(System.Type)">
            <summary>
            Creates a <see cref="T:CODE.Framework.Core.Newtonsoft.Serialization.JsonPrimitiveContract"/> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:CODE.Framework.Core.Newtonsoft.Serialization.JsonPrimitiveContract"/> for the given type.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Serialization.DefaultContractResolver.CreateLinqContract(System.Type)">
            <summary>
            Creates a <see cref="T:CODE.Framework.Core.Newtonsoft.Serialization.JsonLinqContract"/> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:CODE.Framework.Core.Newtonsoft.Serialization.JsonLinqContract"/> for the given type.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Serialization.DefaultContractResolver.CreateISerializableContract(System.Type)">
            <summary>
            Creates a <see cref="T:CODE.Framework.Core.Newtonsoft.Serialization.JsonISerializableContract"/> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:CODE.Framework.Core.Newtonsoft.Serialization.JsonISerializableContract"/> for the given type.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Serialization.DefaultContractResolver.CreateDynamicContract(System.Type)">
            <summary>
            Creates a <see cref="T:CODE.Framework.Core.Newtonsoft.Serialization.JsonDynamicContract"/> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:CODE.Framework.Core.Newtonsoft.Serialization.JsonDynamicContract"/> for the given type.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Serialization.DefaultContractResolver.CreateStringContract(System.Type)">
            <summary>
            Creates a <see cref="T:CODE.Framework.Core.Newtonsoft.Serialization.JsonStringContract"/> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:CODE.Framework.Core.Newtonsoft.Serialization.JsonStringContract"/> for the given type.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Serialization.DefaultContractResolver.CreateContract(System.Type)">
            <summary>
            Determines which contract type is created for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:CODE.Framework.Core.Newtonsoft.Serialization.JsonContract"/> for the given type.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Serialization.DefaultContractResolver.CreateProperties(System.Type,CODE.Framework.Core.Newtonsoft.MemberSerialization)">
            <summary>
            Creates properties for the given <see cref="T:CODE.Framework.Core.Newtonsoft.Serialization.JsonContract"/>.
            </summary>
            <param name="type">The type to create properties for.</param>
            /// <param name="memberSerialization">The member serialization mode for the type.</param>
            <returns>Properties for the given <see cref="T:CODE.Framework.Core.Newtonsoft.Serialization.JsonContract"/>.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Serialization.DefaultContractResolver.CreateMemberValueProvider(System.Reflection.MemberInfo)">
            <summary>
            Creates the <see cref="T:CODE.Framework.Core.Newtonsoft.Serialization.IValueProvider"/> used by the serializer to get and set values from a member.
            </summary>
            <param name="member">The member.</param>
            <returns>The <see cref="T:CODE.Framework.Core.Newtonsoft.Serialization.IValueProvider"/> used by the serializer to get and set values from a member.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Serialization.DefaultContractResolver.CreateProperty(System.Reflection.MemberInfo,CODE.Framework.Core.Newtonsoft.MemberSerialization)">
            <summary>
            Creates a <see cref="T:CODE.Framework.Core.Newtonsoft.Serialization.JsonProperty"/> for the given <see cref="T:System.Reflection.MemberInfo"/>.
            </summary>
            <param name="memberSerialization">The member's parent <see cref="T:CODE.Framework.Core.Newtonsoft.MemberSerialization"/>.</param>
            <param name="member">The member to create a <see cref="T:CODE.Framework.Core.Newtonsoft.Serialization.JsonProperty"/> for.</param>
            <returns>A created <see cref="T:CODE.Framework.Core.Newtonsoft.Serialization.JsonProperty"/> for the given <see cref="T:System.Reflection.MemberInfo"/>.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Serialization.DefaultContractResolver.ResolvePropertyName(System.String)">
            <summary>
            Resolves the name of the property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>Name of the property.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Serialization.DefaultContractResolver.GetResolvedPropertyName(System.String)">
            <summary>
            Gets the resolved name of the property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>Name of the property.</returns>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.Serialization.DefaultSerializationBinder">
            <summary>
            The default serialization binder used when resolving and loading classes from type names.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Serialization.DefaultSerializationBinder.BindToType(System.String,System.String)">
            <summary>
            When overridden in a derived class, controls the binding of a serialized object to a type.
            </summary>
            <param name="assemblyName">Specifies the <see cref="T:System.Reflection.Assembly"/> name of the serialized object.</param>
            <param name="typeName">Specifies the <see cref="T:System.Type"/> name of the serialized object.</param>
            <returns>
            The type of the object the formatter creates a new instance of.
            </returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Serialization.DefaultSerializationBinder.BindToName(System.Type,System.String@,System.String@)">
            <summary>
            When overridden in a derived class, controls the binding of a serialized object to a type.
            </summary>
            <param name="serializedType">The type of the object the formatter creates a new instance of.</param>
            <param name="assemblyName">Specifies the <see cref="T:System.Reflection.Assembly"/> name of the serialized object. </param>
            <param name="typeName">Specifies the <see cref="T:System.Type"/> name of the serialized object. </param>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.Serialization.DynamicValueProvider">
            <summary>
            Get and set values for a <see cref="T:System.Reflection.MemberInfo"/> using dynamic methods.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Serialization.DynamicValueProvider.#ctor(System.Reflection.MemberInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Newtonsoft.Serialization.DynamicValueProvider"/> class.
            </summary>
            <param name="memberInfo">The member info.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Serialization.DynamicValueProvider.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value.
            </summary>
            <param name="target">The target to set the value on.</param>
            <param name="value">The value to set on the target.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Serialization.DynamicValueProvider.GetValue(System.Object)">
            <summary>
            Gets the value.
            </summary>
            <param name="target">The target to get the value from.</param>
            <returns>The value.</returns>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.Serialization.ErrorContext">
            <summary>
            Provides information surrounding an error.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Serialization.ErrorContext.Error">
            <summary>
            Gets the error.
            </summary>
            <value>The error.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Serialization.ErrorContext.OriginalObject">
            <summary>
            Gets the original object that caused the error.
            </summary>
            <value>The original object that caused the error.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Serialization.ErrorContext.Member">
            <summary>
            Gets the member that caused the error.
            </summary>
            <value>The member that caused the error.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Serialization.ErrorContext.Path">
            <summary>
            Gets the path of the JSON location where the error occurred.
            </summary>
            <value>The path of the JSON location where the error occurred.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Serialization.ErrorContext.Handled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:CODE.Framework.Core.Newtonsoft.Serialization.ErrorContext"/> is handled.
            </summary>
            <value><c>true</c> if handled; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.Serialization.ErrorEventArgs">
            <summary>
            Provides data for the Error event.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Serialization.ErrorEventArgs.CurrentObject">
            <summary>
            Gets the current object the error event is being raised against.
            </summary>
            <value>The current object the error event is being raised against.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Serialization.ErrorEventArgs.ErrorContext">
            <summary>
            Gets the error context.
            </summary>
            <value>The error context.</value>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Serialization.ErrorEventArgs.#ctor(System.Object,CODE.Framework.Core.Newtonsoft.Serialization.ErrorContext)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Newtonsoft.Serialization.ErrorEventArgs"/> class.
            </summary>
            <param name="currentObject">The current object.</param>
            <param name="errorContext">The error context.</param>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.Serialization.IAttributeProvider">
            <summary>
            Provides methods to get attributes.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Serialization.IAttributeProvider.GetAttributes(System.Boolean)">
            <summary>
            Returns a collection of all of the attributes, or an empty collection if there are no attributes.
            </summary>
            <param name="inherit">When true, look up the hierarchy chain for the inherited custom attribute.</param>
            <returns>A collection of <see cref="T:System.Attribute"/>s, or an empty collection.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Serialization.IAttributeProvider.GetAttributes(System.Type,System.Boolean)">
            <summary>
            Returns a collection of attributes, identified by type, or an empty collection if there are no attributes.
            </summary>
            <param name="attributeType">The type of the attributes.</param>
            <param name="inherit">When true, look up the hierarchy chain for the inherited custom attribute.</param>
            <returns>A collection of <see cref="T:System.Attribute"/>s, or an empty collection.</returns>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.Serialization.IContractResolver">
            <summary>
            Used by <see cref="T:CODE.Framework.Core.Newtonsoft.JsonSerializer"/> to resolves a <see cref="T:CODE.Framework.Core.Newtonsoft.Serialization.JsonContract"/> for a given <see cref="T:System.Type"/>.
            </summary>
            <example>
              <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeContractResolverObject" title="IContractResolver Class" />
              <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeContractResolverExample" title="IContractResolver Example" />
            </example>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Serialization.IContractResolver.ResolveContract(System.Type)">
            <summary>
            Resolves the contract for a given type.
            </summary>
            <param name="type">The type to resolve a contract for.</param>
            <returns>The contract for a given type.</returns>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.Serialization.IReferenceResolver">
            <summary>
            Used to resolve references when serializing and deserializing JSON by the <see cref="T:CODE.Framework.Core.Newtonsoft.JsonSerializer"/>.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Serialization.IReferenceResolver.ResolveReference(System.Object,System.String)">
            <summary>
            Resolves a reference to its object.
            </summary>
            <param name="context">The serialization context.</param>
            <param name="reference">The reference to resolve.</param>
            <returns>The object that</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Serialization.IReferenceResolver.GetReference(System.Object,System.Object)">
            <summary>
            Gets the reference for the sepecified object.
            </summary>
            <param name="context">The serialization context.</param>
            <param name="value">The object to get a reference for.</param>
            <returns>The reference to the object.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Serialization.IReferenceResolver.IsReferenced(System.Object,System.Object)">
            <summary>
            Determines whether the specified object is referenced.
            </summary>
            <param name="context">The serialization context.</param>
            <param name="value">The object to test for a reference.</param>
            <returns>
            	<c>true</c> if the specified object is referenced; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Serialization.IReferenceResolver.AddReference(System.Object,System.String,System.Object)">
            <summary>
            Adds a reference to the specified object.
            </summary>
            <param name="context">The serialization context.</param>
            <param name="reference">The reference.</param>
            <param name="value">The object to reference.</param>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.Serialization.JsonArrayContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:CODE.Framework.Core.Newtonsoft.JsonSerializer"/>.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Serialization.JsonArrayContract.CollectionItemType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the collection items.
            </summary>
            <value>The <see cref="T:System.Type"/> of the collection items.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Serialization.JsonArrayContract.IsMultidimensionalArray">
            <summary>
            Gets a value indicating whether the collection type is a multidimensional array.
            </summary>
            <value><c>true</c> if the collection type is a multidimensional array; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Serialization.JsonArrayContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Newtonsoft.Serialization.JsonArrayContract"/> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.Serialization.JsonContainerContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:CODE.Framework.Core.Newtonsoft.JsonSerializer"/>.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Serialization.JsonContainerContract.ItemConverter">
            <summary>
            Gets or sets the default collection items <see cref="T:CODE.Framework.Core.Newtonsoft.JsonConverter" />.
            </summary>
            <value>The converter.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Serialization.JsonContainerContract.ItemIsReference">
            <summary>
            Gets or sets a value indicating whether the collection items preserve object references.
            </summary>
            <value><c>true</c> if collection items preserve object references; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Serialization.JsonContainerContract.ItemReferenceLoopHandling">
            <summary>
            Gets or sets the collection item reference loop handling.
            </summary>
            <value>The reference loop handling.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Serialization.JsonContainerContract.ItemTypeNameHandling">
            <summary>
            Gets or sets the collection item type name handling.
            </summary>
            <value>The type name handling.</value>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Serialization.JsonContainerContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Newtonsoft.Serialization.JsonContainerContract"/> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.Serialization.SerializationCallback">
            <summary>
            Handles <see cref="T:CODE.Framework.Core.Newtonsoft.JsonSerializer"/> serialization callback events.
            </summary>
            <param name="o">The object that raised the callback event.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.Serialization.SerializationErrorCallback">
            <summary>
            Handles <see cref="T:CODE.Framework.Core.Newtonsoft.JsonSerializer"/> serialization error callback events.
            </summary>
            <param name="o">The object that raised the callback event.</param>
            <param name="context">The streaming context.</param>
            <param name="errorContext">The error context.</param>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.Serialization.ExtensionDataSetter">
            <summary>
            Sets extension data for an object during deserialization.
            </summary>
            <param name="o">The object to set extension data on.</param>
            <param name="key">The extension data key.</param>
            <param name="value">The extension data value.</param>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.Serialization.ExtensionDataGetter">
            <summary>
            Gets extension data for an object during serialization.
            </summary>
            <param name="o">The object to set extension data on.</param>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.Serialization.JsonContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:CODE.Framework.Core.Newtonsoft.JsonSerializer"/>.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Serialization.JsonContract.UnderlyingType">
            <summary>
            Gets the underlying type for the contract.
            </summary>
            <value>The underlying type for the contract.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Serialization.JsonContract.CreatedType">
            <summary>
            Gets or sets the type created during deserialization.
            </summary>
            <value>The type created during deserialization.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Serialization.JsonContract.IsReference">
            <summary>
            Gets or sets whether this type contract is serialized as a reference.
            </summary>
            <value>Whether this type contract is serialized as a reference.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Serialization.JsonContract.Converter">
            <summary>
            Gets or sets the default <see cref="T:CODE.Framework.Core.Newtonsoft.JsonConverter" /> for this contract.
            </summary>
            <value>The converter.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Serialization.JsonContract.OnDeserializedCallbacks">
            <summary>
            Gets or sets all methods called immediately after deserialization of the object.
            </summary>
            <value>The methods called immediately after deserialization of the object.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Serialization.JsonContract.OnDeserializingCallbacks">
            <summary>
            Gets or sets all methods called during deserialization of the object.
            </summary>
            <value>The methods called during deserialization of the object.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Serialization.JsonContract.OnSerializedCallbacks">
            <summary>
            Gets or sets all methods called after serialization of the object graph.
            </summary>
            <value>The methods called after serialization of the object graph.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Serialization.JsonContract.OnSerializingCallbacks">
            <summary>
            Gets or sets all methods called before serialization of the object.
            </summary>
            <value>The methods called before serialization of the object.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Serialization.JsonContract.OnErrorCallbacks">
            <summary>
            Gets or sets all method called when an error is thrown during the serialization of the object.
            </summary>
            <value>The methods called when an error is thrown during the serialization of the object.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Serialization.JsonContract.OnDeserialized">
            <summary>
            Gets or sets the method called immediately after deserialization of the object.
            </summary>
            <value>The method called immediately after deserialization of the object.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Serialization.JsonContract.OnDeserializing">
            <summary>
            Gets or sets the method called during deserialization of the object.
            </summary>
            <value>The method called during deserialization of the object.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Serialization.JsonContract.OnSerialized">
            <summary>
            Gets or sets the method called after serialization of the object graph.
            </summary>
            <value>The method called after serialization of the object graph.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Serialization.JsonContract.OnSerializing">
            <summary>
            Gets or sets the method called before serialization of the object.
            </summary>
            <value>The method called before serialization of the object.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Serialization.JsonContract.OnError">
            <summary>
            Gets or sets the method called when an error is thrown during the serialization of the object.
            </summary>
            <value>The method called when an error is thrown during the serialization of the object.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Serialization.JsonContract.DefaultCreator">
            <summary>
            Gets or sets the default creator method used to create the object.
            </summary>
            <value>The default creator method used to create the object.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Serialization.JsonContract.DefaultCreatorNonPublic">
            <summary>
            Gets or sets a value indicating whether the default creator is non public.
            </summary>
            <value><c>true</c> if the default object creator is non-public; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.Serialization.JsonDictionaryContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:CODE.Framework.Core.Newtonsoft.JsonSerializer"/>.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Serialization.JsonDictionaryContract.PropertyNameResolver">
            <summary>
            Gets or sets the property name resolver.
            </summary>
            <value>The property name resolver.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Serialization.JsonDictionaryContract.DictionaryKeyType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the dictionary keys.
            </summary>
            <value>The <see cref="T:System.Type"/> of the dictionary keys.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Serialization.JsonDictionaryContract.DictionaryValueType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the dictionary values.
            </summary>
            <value>The <see cref="T:System.Type"/> of the dictionary values.</value>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Serialization.JsonDictionaryContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Newtonsoft.Serialization.JsonDictionaryContract"/> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.Serialization.JsonDynamicContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:CODE.Framework.Core.Newtonsoft.JsonSerializer"/>.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Serialization.JsonDynamicContract.Properties">
            <summary>
            Gets the object's properties.
            </summary>
            <value>The object's properties.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Serialization.JsonDynamicContract.PropertyNameResolver">
            <summary>
            Gets or sets the property name resolver.
            </summary>
            <value>The property name resolver.</value>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Serialization.JsonDynamicContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Newtonsoft.Serialization.JsonDynamicContract"/> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.Serialization.JsonISerializableContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:CODE.Framework.Core.Newtonsoft.JsonSerializer"/>.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Serialization.JsonISerializableContract.ISerializableCreator">
            <summary>
            Gets or sets the ISerializable object constructor.
            </summary>
            <value>The ISerializable object constructor.</value>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Serialization.JsonISerializableContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Newtonsoft.Serialization.JsonISerializableContract"/> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.Serialization.JsonLinqContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:CODE.Framework.Core.Newtonsoft.JsonSerializer"/>.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Serialization.JsonLinqContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Newtonsoft.Serialization.JsonLinqContract"/> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.Serialization.JsonObjectContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:CODE.Framework.Core.Newtonsoft.JsonSerializer"/>.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Serialization.JsonObjectContract.MemberSerialization">
            <summary>
            Gets or sets the object member serialization.
            </summary>
            <value>The member object serialization.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Serialization.JsonObjectContract.ItemRequired">
            <summary>
            Gets or sets a value that indicates whether the object's properties are required.
            </summary>
            <value>
            	A value indicating whether the object's properties are required.
            </value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Serialization.JsonObjectContract.Properties">
            <summary>
            Gets the object's properties.
            </summary>
            <value>The object's properties.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Serialization.JsonObjectContract.ConstructorParameters">
            <summary>
            Gets the constructor parameters required for any non-default constructor
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Serialization.JsonObjectContract.CreatorParameters">
            <summary>
            Gets a collection of <see cref="T:CODE.Framework.Core.Newtonsoft.Serialization.JsonProperty"/> instances that define the parameters used with <see cref="P:CODE.Framework.Core.Newtonsoft.Serialization.JsonObjectContract.OverrideCreator"/>.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Serialization.JsonObjectContract.OverrideConstructor">
            <summary>
            Gets or sets the override constructor used to create the object.
            This is set when a constructor is marked up using the
            JsonConstructor attribute.
            </summary>
            <value>The override constructor.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Serialization.JsonObjectContract.ParametrizedConstructor">
            <summary>
            Gets or sets the parametrized constructor used to create the object.
            </summary>
            <value>The parametrized constructor.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Serialization.JsonObjectContract.OverrideCreator">
            <summary>
            Gets or sets the function used to create the object. When set this function will override <see cref="P:CODE.Framework.Core.Newtonsoft.Serialization.JsonContract.DefaultCreator"/>.
            This function is called with a collection of arguments which are defined by the <see cref="P:CODE.Framework.Core.Newtonsoft.Serialization.JsonObjectContract.CreatorParameters"/> collection.
            </summary>
            <value>The function used to create the object.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Serialization.JsonObjectContract.ExtensionDataSetter">
            <summary>
            Gets or sets the extension data setter.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Serialization.JsonObjectContract.ExtensionDataGetter">
            <summary>
            Gets or sets the extension data getter.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Serialization.JsonObjectContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Newtonsoft.Serialization.JsonObjectContract"/> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.Serialization.JsonPrimitiveContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:CODE.Framework.Core.Newtonsoft.JsonSerializer"/>.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Serialization.JsonPrimitiveContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Newtonsoft.Serialization.JsonPrimitiveContract"/> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.Serialization.JsonProperty">
            <summary>
            Maps a JSON property to a .NET member or constructor parameter.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Serialization.JsonProperty.PropertyName">
            <summary>
            Gets or sets the name of the property.
            </summary>
            <value>The name of the property.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Serialization.JsonProperty.DeclaringType">
            <summary>
            Gets or sets the type that declared this property.
            </summary>
            <value>The type that declared this property.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Serialization.JsonProperty.Order">
            <summary>
            Gets or sets the order of serialization and deserialization of a member.
            </summary>
            <value>The numeric order of serialization or deserialization.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Serialization.JsonProperty.UnderlyingName">
            <summary>
            Gets or sets the name of the underlying member or parameter.
            </summary>
            <value>The name of the underlying member or parameter.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Serialization.JsonProperty.ValueProvider">
            <summary>
            Gets the <see cref="T:CODE.Framework.Core.Newtonsoft.Serialization.IValueProvider"/> that will get and set the <see cref="T:CODE.Framework.Core.Newtonsoft.Serialization.JsonProperty"/> during serialization.
            </summary>
            <value>The <see cref="T:CODE.Framework.Core.Newtonsoft.Serialization.IValueProvider"/> that will get and set the <see cref="T:CODE.Framework.Core.Newtonsoft.Serialization.JsonProperty"/> during serialization.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Serialization.JsonProperty.AttributeProvider">
            <summary>
            Gets or sets the <see cref="T:CODE.Framework.Core.Newtonsoft.Serialization.IAttributeProvider"/> for this property.
            </summary>
            <value>The <see cref="T:CODE.Framework.Core.Newtonsoft.Serialization.IAttributeProvider"/> for this property.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Serialization.JsonProperty.PropertyType">
            <summary>
            Gets or sets the type of the property.
            </summary>
            <value>The type of the property.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Serialization.JsonProperty.Converter">
            <summary>
            Gets or sets the <see cref="T:CODE.Framework.Core.Newtonsoft.JsonConverter" /> for the property.
            If set this converter takes presidence over the contract converter for the property type.
            </summary>
            <value>The converter.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Serialization.JsonProperty.MemberConverter">
            <summary>
            Gets or sets the member converter.
            </summary>
            <value>The member converter.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Serialization.JsonProperty.Ignored">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:CODE.Framework.Core.Newtonsoft.Serialization.JsonProperty"/> is ignored.
            </summary>
            <value><c>true</c> if ignored; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Serialization.JsonProperty.Readable">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:CODE.Framework.Core.Newtonsoft.Serialization.JsonProperty"/> is readable.
            </summary>
            <value><c>true</c> if readable; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Serialization.JsonProperty.Writable">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:CODE.Framework.Core.Newtonsoft.Serialization.JsonProperty"/> is writable.
            </summary>
            <value><c>true</c> if writable; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Serialization.JsonProperty.HasMemberAttribute">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:CODE.Framework.Core.Newtonsoft.Serialization.JsonProperty"/> has a member attribute.
            </summary>
            <value><c>true</c> if has a member attribute; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Serialization.JsonProperty.DefaultValue">
            <summary>
            Gets the default value.
            </summary>
            <value>The default value.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Serialization.JsonProperty.Required">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:CODE.Framework.Core.Newtonsoft.Serialization.JsonProperty"/> is required.
            </summary>
            <value>A value indicating whether this <see cref="T:CODE.Framework.Core.Newtonsoft.Serialization.JsonProperty"/> is required.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Serialization.JsonProperty.IsReference">
            <summary>
            Gets or sets a value indicating whether this property preserves object references.
            </summary>
            <value>
            	<c>true</c> if this instance is reference; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Serialization.JsonProperty.NullValueHandling">
            <summary>
            Gets or sets the property null value handling.
            </summary>
            <value>The null value handling.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Serialization.JsonProperty.DefaultValueHandling">
            <summary>
            Gets or sets the property default value handling.
            </summary>
            <value>The default value handling.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Serialization.JsonProperty.ReferenceLoopHandling">
            <summary>
            Gets or sets the property reference loop handling.
            </summary>
            <value>The reference loop handling.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Serialization.JsonProperty.ObjectCreationHandling">
            <summary>
            Gets or sets the property object creation handling.
            </summary>
            <value>The object creation handling.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Serialization.JsonProperty.TypeNameHandling">
            <summary>
            Gets or sets or sets the type name handling.
            </summary>
            <value>The type name handling.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Serialization.JsonProperty.ShouldSerialize">
            <summary>
            Gets or sets a predicate used to determine whether the property should be serialize.
            </summary>
            <value>A predicate used to determine whether the property should be serialize.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Serialization.JsonProperty.GetIsSpecified">
            <summary>
            Gets or sets a predicate used to determine whether the property should be serialized.
            </summary>
            <value>A predicate used to determine whether the property should be serialized.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Serialization.JsonProperty.SetIsSpecified">
            <summary>
            Gets or sets an action used to set whether the property has been deserialized.
            </summary>
            <value>An action used to set whether the property has been deserialized.</value>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Serialization.JsonProperty.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Serialization.JsonProperty.ItemConverter">
            <summary>
            Gets or sets the converter used when serializing the property's collection items.
            </summary>
            <value>The collection's items converter.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Serialization.JsonProperty.ItemIsReference">
            <summary>
            Gets or sets whether this property's collection items are serialized as a reference.
            </summary>
            <value>Whether this property's collection items are serialized as a reference.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Serialization.JsonProperty.ItemTypeNameHandling">
            <summary>
            Gets or sets the the type name handling used when serializing the property's collection items.
            </summary>
            <value>The collection's items type name handling.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Serialization.JsonProperty.ItemReferenceLoopHandling">
            <summary>
            Gets or sets the the reference loop handling used when serializing the property's collection items.
            </summary>
            <value>The collection's items reference loop handling.</value>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.Serialization.JsonPropertyCollection">
            <summary>
            A collection of <see cref="T:CODE.Framework.Core.Newtonsoft.Serialization.JsonProperty"/> objects.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Serialization.JsonPropertyCollection.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Newtonsoft.Serialization.JsonPropertyCollection"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Serialization.JsonPropertyCollection.GetKeyForItem(CODE.Framework.Core.Newtonsoft.Serialization.JsonProperty)">
            <summary>
            When implemented in a derived class, extracts the key from the specified element.
            </summary>
            <param name="item">The element from which to extract the key.</param>
            <returns>The key for the specified element.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Serialization.JsonPropertyCollection.AddProperty(CODE.Framework.Core.Newtonsoft.Serialization.JsonProperty)">
            <summary>
            Adds a <see cref="T:CODE.Framework.Core.Newtonsoft.Serialization.JsonProperty"/> object.
            </summary>
            <param name="property">The property to add to the collection.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Serialization.JsonPropertyCollection.GetClosestMatchProperty(System.String)">
            <summary>
            Gets the closest matching <see cref="T:CODE.Framework.Core.Newtonsoft.Serialization.JsonProperty"/> object.
            First attempts to get an exact case match of propertyName and then
            a case insensitive match.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>A matching property if found.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Serialization.JsonPropertyCollection.GetProperty(System.String,System.StringComparison)">
            <summary>
            Gets a property by property name.
            </summary>
            <param name="propertyName">The name of the property to get.</param>
            <param name="comparisonType">Type property name string comparison.</param>
            <returns>A matching property if found.</returns>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.Serialization.JsonStringContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:CODE.Framework.Core.Newtonsoft.JsonSerializer"/>.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Serialization.JsonStringContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Newtonsoft.Serialization.JsonStringContract"/> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Serialization.JsonTypeReflector.CreateJsonConverterInstance(System.Type,System.Object[])">
            <summary>
            Lookup and create an instance of the JsonConverter type described by the argument.
            </summary>
            <param name="converterType">The JsonConverter type to create.</param>
            <param name="converterArgs">Optional arguments to pass to an initializing constructor of the JsonConverter.
            If null, the default constructor is used.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Serialization.JsonTypeReflector.GetJsonConverterCreator(System.Type)">
            <summary>
            Create a factory function that can be used to create instances of a JsonConverter described by the 
            argument type.  The returned function can then be used to either invoke the converter's default ctor, or any 
            parameterized constructors by way of an object array.
            </summary>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.Serialization.ObjectConstructor`1">
            <summary>
            Represents a method that constructs an object.
            </summary>
            <typeparam name="T">The object type to create.</typeparam>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.Serialization.OnErrorAttribute">
            <summary>
            When applied to a method, specifies that the method is called when an error occurs serializing an object.
            </summary>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.Serialization.ReflectionAttributeProvider">
            <summary>
            Provides methods to get attributes from a <see cref="T:System.Type"/>, <see cref="T:System.Reflection.MemberInfo"/>, <see cref="T:System.Reflection.ParameterInfo"/> or <see cref="T:System.Reflection.Assembly"/>.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Serialization.ReflectionAttributeProvider.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Newtonsoft.Serialization.ReflectionAttributeProvider"/> class.
            </summary>
            <param name="attributeProvider">The instance to get attributes for. This parameter should be a <see cref="T:System.Type"/>, <see cref="T:System.Reflection.MemberInfo"/>, <see cref="T:System.Reflection.ParameterInfo"/> or <see cref="T:System.Reflection.Assembly"/>.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Serialization.ReflectionAttributeProvider.GetAttributes(System.Boolean)">
            <summary>
            Returns a collection of all of the attributes, or an empty collection if there are no attributes.
            </summary>
            <param name="inherit">When true, look up the hierarchy chain for the inherited custom attribute.</param>
            <returns>A collection of <see cref="T:System.Attribute"/>s, or an empty collection.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Serialization.ReflectionAttributeProvider.GetAttributes(System.Type,System.Boolean)">
            <summary>
            Returns a collection of attributes, identified by type, or an empty collection if there are no attributes.
            </summary>
            <param name="attributeType">The type of the attributes.</param>
            <param name="inherit">When true, look up the hierarchy chain for the inherited custom attribute.</param>
            <returns>A collection of <see cref="T:System.Attribute"/>s, or an empty collection.</returns>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.Serialization.ReflectionValueProvider">
            <summary>
            Get and set values for a <see cref="T:System.Reflection.MemberInfo"/> using reflection.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Serialization.ReflectionValueProvider.#ctor(System.Reflection.MemberInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Newtonsoft.Serialization.ReflectionValueProvider"/> class.
            </summary>
            <param name="memberInfo">The member info.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Serialization.ReflectionValueProvider.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value.
            </summary>
            <param name="target">The target to set the value on.</param>
            <param name="value">The value to set on the target.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Serialization.ReflectionValueProvider.GetValue(System.Object)">
            <summary>
            Gets the value.
            </summary>
            <param name="target">The target to get the value from.</param>
            <returns>The value.</returns>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.Serialization.ITraceWriter">
            <summary>
            Represents a trace writer.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Serialization.ITraceWriter.LevelFilter">
            <summary>
            Gets the <see cref="T:System.Diagnostics.TraceLevel"/> that will be used to filter the trace messages passed to the writer.
            For example a filter level of <code>Info</code> will exclude <code>Verbose</code> messages and include <code>Info</code>,
            <code>Warning</code> and <code>Error</code> messages.
            </summary>
            <value>The <see cref="T:System.Diagnostics.TraceLevel"/> that will be used to filter the trace messages passed to the writer.</value>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Serialization.ITraceWriter.Trace(System.Diagnostics.TraceLevel,System.String,System.Exception)">
            <summary>
            Writes the specified trace level, message and optional exception.
            </summary>
            <param name="level">The <see cref="T:System.Diagnostics.TraceLevel"/> at which to write this trace.</param>
            <param name="message">The trace message.</param>
            <param name="ex">The trace exception. This parameter is optional.</param>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.Serialization.IValueProvider">
            <summary>
            Provides methods to get and set values.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Serialization.IValueProvider.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value.
            </summary>
            <param name="target">The target to set the value on.</param>
            <param name="value">The value to set on the target.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Serialization.IValueProvider.GetValue(System.Object)">
            <summary>
            Gets the value.
            </summary>
            <param name="target">The target to get the value from.</param>
            <returns>The value.</returns>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.StringEscapeHandling">
            <summary>
            Specifies how strings are escaped when writing JSON text.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.StringEscapeHandling.Default">
            <summary>
            Only control characters (e.g. newline) are escaped.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.StringEscapeHandling.EscapeNonAscii">
            <summary>
            All non-ASCII and control characters (e.g. newline) are escaped.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.StringEscapeHandling.EscapeHtml">
            <summary>
            HTML (&lt;, &gt;, &amp;, &apos;, &quot;) and control characters (e.g. newline) are escaped.
            </summary>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.TypeNameHandling">
            <summary>
            Specifies type name handling options for the <see cref="T:CODE.Framework.Core.Newtonsoft.JsonSerializer"/>.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.TypeNameHandling.None">
            <summary>
            Do not include the .NET type name when serializing types.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.TypeNameHandling.Objects">
            <summary>
            Include the .NET type name when serializing into a JSON object structure.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.TypeNameHandling.Arrays">
            <summary>
            Include the .NET type name when serializing into a JSON array structure.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.TypeNameHandling.All">
            <summary>
            Always include the .NET type name when serializing.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.TypeNameHandling.Auto">
            <summary>
            Include the .NET type name when the type of the object being serialized is not the same as its declared type.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Utilities.CollectionUtils.IsNullOrEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Determines whether the collection is null or empty.
            </summary>
            <param name="collection">The collection.</param>
            <returns>
            	<c>true</c> if the collection is null or empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Utilities.CollectionUtils.AddRange``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds the elements of the specified collection to the specified generic IList.
            </summary>
            <param name="initial">The list to add to.</param>
            <param name="collection">The collection of elements to add.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Utilities.CollectionUtils.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Returns the index of the first occurrence in a sequence by using a specified IEqualityComparer.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="list">A sequence in which to locate a value.</param>
            <param name="value">The object to locate in the sequence</param>
            <param name="comparer">An equality comparer to compare values.</param>
            <returns>The zero-based index of the first occurrence of value within the entire sequence, if found; otherwise, –1.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Utilities.ConvertUtils.ConvertOrCast(System.Object,System.Globalization.CultureInfo,System.Type)">
            <summary>
            Converts the value to the specified type. If the value is unable to be converted, the
            value is checked whether it assignable to the specified type.
            </summary>
            <param name="initialValue">The value to convert.</param>
            <param name="culture">The culture to use when converting.</param>
            <param name="targetType">The type to convert or cast the value to.</param>
            <returns>
            The converted type. If conversion was unsuccessful, the initial value
            is returned if assignable to the target type.
            </returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Utilities.DynamicProxyMetaObject`1.CallMethodWithResult(System.String,System.Dynamic.DynamicMetaObjectBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},CODE.Framework.Core.Newtonsoft.Utilities.DynamicProxyMetaObject{`0}.Fallback,CODE.Framework.Core.Newtonsoft.Utilities.DynamicProxyMetaObject{`0}.Fallback)">
            <summary>
            Helper method for generating a MetaObject which calls a
            specific method on Dynamic that returns a result
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Utilities.DynamicProxyMetaObject`1.CallMethodReturnLast(System.String,System.Dynamic.DynamicMetaObjectBinder,System.Linq.Expressions.Expression[],CODE.Framework.Core.Newtonsoft.Utilities.DynamicProxyMetaObject{`0}.Fallback)">
            <summary>
            Helper method for generating a MetaObject which calls a
            specific method on Dynamic, but uses one of the arguments for
            the result.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Utilities.DynamicProxyMetaObject`1.CallMethodNoResult(System.String,System.Dynamic.DynamicMetaObjectBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},CODE.Framework.Core.Newtonsoft.Utilities.DynamicProxyMetaObject{`0}.Fallback)">
            <summary>
            Helper method for generating a MetaObject which calls a
            specific method on Dynamic, but uses one of the arguments for
            the result.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Utilities.DynamicProxyMetaObject`1.GetRestrictions">
            <summary>
            Returns a Restrictions object which includes our current restrictions merged
            with a restriction limiting our type
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Utilities.EnumUtils.GetNamesAndValues``1">
            <summary>
            Gets a dictionary of the names and values of an Enum type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Utilities.EnumUtils.GetNamesAndValues``1(System.Type)">
            <summary>
            Gets a dictionary of the names and values of an Enum type.
            </summary>
            <param name="enumType">The enum type to get names and values for.</param>
            <returns></returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Utilities.PropertyNameTable.#cctor">
            <summary>
            Initializes static members of the <see cref="T:CODE.Framework.Core.Newtonsoft.Utilities.PropertyNameTable"/> class.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Utilities.PropertyNameTable.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Newtonsoft.Utilities.PropertyNameTable"/> class.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Utilities.PropertyNameTable.Get(System.Char[],System.Int32,System.Int32)">
            <summary>
            Gets the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="start">The start.</param>
            <param name="length">The length.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Utilities.PropertyNameTable.Add(System.String)">
            <summary>
            Adds the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns>System.String.</returns>
            <exception cref="T:System.ArgumentNullException">key</exception>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Utilities.PropertyNameTable.AddEntry(System.String,System.Int32)">
            <summary>
            Adds the entry.
            </summary>
            <param name="str">The string.</param>
            <param name="hashCode">The hash code.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Utilities.PropertyNameTable.Grow">
            <summary>
            Grows this instance.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Utilities.PropertyNameTable.TextEquals(System.String,System.Char[],System.Int32,System.Int32)">
            <summary>
            Texts the equals.
            </summary>
            <param name="str1">The STR1.</param>
            <param name="str2">The STR2.</param>
            <param name="str2Start">The STR2 start.</param>
            <param name="str2Length">Length of the STR2.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.Utilities.PropertyNameTable.Entry">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Utilities.PropertyNameTable.Entry.#ctor(System.String,System.Int32,CODE.Framework.Core.Newtonsoft.Utilities.PropertyNameTable.Entry)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Newtonsoft.Utilities.PropertyNameTable.Entry"/> class.
            </summary>
            <param name="value">The value.</param>
            <param name="hashCode">The hash code.</param>
            <param name="next">The next.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Utilities.ReflectionUtils.GetCollectionItemType(System.Type)">
            <summary>
            Gets the type of the typed collection's items.
            </summary>
            <param name="type">The type.</param>
            <returns>The type of the typed collection's items.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Utilities.ReflectionUtils.GetMemberUnderlyingType(System.Reflection.MemberInfo)">
            <summary>
            Gets the member's underlying type.
            </summary>
            <param name="member">The member.</param>
            <returns>The underlying type of the member.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Utilities.ReflectionUtils.IsIndexedProperty(System.Reflection.MemberInfo)">
            <summary>
            Determines whether the member is an indexed property.
            </summary>
            <param name="member">The member.</param>
            <returns>
            	<c>true</c> if the member is an indexed property; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Utilities.ReflectionUtils.IsIndexedProperty(System.Reflection.PropertyInfo)">
            <summary>
            Determines whether the property is an indexed property.
            </summary>
            <param name="property">The property.</param>
            <returns>
            	<c>true</c> if the property is an indexed property; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Utilities.ReflectionUtils.GetMemberValue(System.Reflection.MemberInfo,System.Object)">
            <summary>
            Gets the member's value on the object.
            </summary>
            <param name="member">The member.</param>
            <param name="target">The target object.</param>
            <returns>The member's value on the object.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Utilities.ReflectionUtils.SetMemberValue(System.Reflection.MemberInfo,System.Object,System.Object)">
            <summary>
            Sets the member's value on the target object.
            </summary>
            <param name="member">The member.</param>
            <param name="target">The target.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Utilities.ReflectionUtils.CanReadMemberValue(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Determines whether the specified MemberInfo can be read.
            </summary>
            <param name="member">The MemberInfo to determine whether can be read.</param>
            /// <param name="nonPublic">if set to <c>true</c> then allow the member to be gotten non-publicly.</param>
            <returns>
            	<c>true</c> if the specified MemberInfo can be read; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Utilities.ReflectionUtils.CanSetMemberValue(System.Reflection.MemberInfo,System.Boolean,System.Boolean)">
            <summary>
            Determines whether the specified MemberInfo can be set.
            </summary>
            <param name="member">The MemberInfo to determine whether can be set.</param>
            <param name="nonPublic">if set to <c>true</c> then allow the member to be set non-publicly.</param>
            <param name="canSetReadOnly">if set to <c>true</c> then allow the member to be set if read-only.</param>
            <returns>
            	<c>true</c> if the specified MemberInfo can be set; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.Utilities.StringBuffer">
            <summary>
            Builds a string. Unlike StringBuilder this class lets you reuse it's internal buffer.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Utilities.StringBuffer.Position">
            <summary>
            Gets or sets the position.
            </summary>
            <value>The position.</value>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Utilities.StringBuffer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Newtonsoft.Utilities.StringBuffer"/> class.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Utilities.StringBuffer.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Newtonsoft.Utilities.StringBuffer"/> class.
            </summary>
            <param name="initalSize">Size of the inital.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Utilities.StringBuffer.Append(System.Char)">
            <summary>
            Appends the specified value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Utilities.StringBuffer.Append(System.Char[],System.Int32,System.Int32)">
            <summary>
            Appends the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="startIndex">The start index.</param>
            <param name="count">The count.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Utilities.StringBuffer.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Utilities.StringBuffer.EnsureSize(System.Int32)">
            <summary>
            Ensures the size.
            </summary>
            <param name="appendLength">Length of the append.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Utilities.StringBuffer.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Utilities.StringBuffer.ToString(System.Int32,System.Int32)">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <param name="start">The start.</param>
            <param name="length">The length.</param>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Utilities.StringBuffer.GetInternalBuffer">
            <summary>
            Gets the internal buffer.
            </summary>
            <returns>System.Char[].</returns>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Utilities.StringReference.Chars">
            <summary>
            Gets the chars.
            </summary>
            <value>The chars.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Utilities.StringReference.StartIndex">
            <summary>
            Gets the start index.
            </summary>
            <value>The start index.</value>
        </member>
        <member name="P:CODE.Framework.Core.Newtonsoft.Utilities.StringReference.Length">
            <summary>
            Gets the length.
            </summary>
            <value>The length.</value>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Utilities.StringReference.#ctor(System.Char[],System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Newtonsoft.Utilities.StringReference"/> struct.
            </summary>
            <param name="chars">The chars.</param>
            <param name="startIndex">The start index.</param>
            <param name="length">The length.</param>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Utilities.StringReference.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Utilities.StringUtils.IsWhiteSpace(System.String)">
            <summary>
            Determines whether the string is all white space. Empty string will return false.
            </summary>
            <param name="s">The string to test whether it is all white space.</param>
            <returns>
            	<c>true</c> if the string is all white space; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CODE.Framework.Core.Newtonsoft.Utilities.StringUtils.NullEmptyString(System.String)">
            <summary>
            Nulls an empty string.
            </summary>
            <param name="s">The string.</param>
            <returns>Null if the string was null, otherwise the string unchanged.</returns>
        </member>
        <member name="T:CODE.Framework.Core.Newtonsoft.WriteState">
            <summary>
            Specifies the state of the <see cref="T:CODE.Framework.Core.Newtonsoft.JsonWriter"/>.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.WriteState.Error">
            <summary>
            An exception has been thrown, which has left the <see cref="T:CODE.Framework.Core.Newtonsoft.JsonWriter"/> in an invalid state.
            You may call the <see cref="M:CODE.Framework.Core.Newtonsoft.JsonWriter.Close"/> method to put the <see cref="T:CODE.Framework.Core.Newtonsoft.JsonWriter"/> in the <c>Closed</c> state.
            Any other <see cref="T:CODE.Framework.Core.Newtonsoft.JsonWriter"/> method calls results in an <see cref="T:System.InvalidOperationException"/> being thrown. 
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.WriteState.Closed">
            <summary>
            The <see cref="M:CODE.Framework.Core.Newtonsoft.JsonWriter.Close"/> method has been called. 
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.WriteState.Object">
            <summary>
            An object is being written. 
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.WriteState.Array">
            <summary>
            A array is being written.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.WriteState.Constructor">
            <summary>
            A constructor is being written.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.WriteState.Property">
            <summary>
            A property is being written.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Newtonsoft.WriteState.Start">
            <summary>
            A write method has not been called.
            </summary>
        </member>
        <member name="T:CODE.Framework.Core.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Properties.Resources.Collections">
            <summary>
              Looks up a localized string similar to  Collections.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Properties.Resources.ConfigurationSourceCollectionInvalid">
            <summary>
              Looks up a localized string similar to The ConfigurationSourceSettings collection can only be instantiated when a valid instance of a ConfigurationSource is passed to it..
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Properties.Resources.ConfigurationSourceCollectionInvalidDetails">
            <summary>
              Looks up a localized string similar to The configuration source collection is a member of the configuration source object. However, it appears to be called stand-alone, which is not possible. Do not instantiate this class directly..
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Properties.Resources.DefinedOn">
            <summary>
              Looks up a localized string similar to  [defined on .
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Properties.Resources.Empty">
            <summary>
              Looks up a localized string similar to  [empty].
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Properties.Resources.Entity">
            <summary>
              Looks up a localized string similar to Entity.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Properties.Resources.EntityHasBrokenRules">
            <summary>
              Looks up a localized string similar to Entity has broken rules!.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Properties.Resources.EnumerationValueInvalid">
            <summary>
              Looks up a localized string similar to Enumeration value is invalid..
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Properties.Resources.EnumSourceChanged">
            <summary>
              Looks up a localized string similar to Collection has changed during enumeration..
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Properties.Resources.ExceptionAttributes">
            <summary>
              Looks up a localized string similar to Exception Attributes:.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Properties.Resources.ExceptionDetail">
            <summary>
              Looks up a localized string similar to Detail.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Properties.Resources.ExceptionInformation">
            <summary>
              Looks up a localized string similar to Information.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Properties.Resources.Exceptions">
            <summary>
              Looks up a localized string similar to Exceptions.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Properties.Resources.ExceptionSeparator">
            <summary>
              Looks up a localized string similar to  - Exception: .
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Properties.Resources.ExceptionStack">
            <summary>
              Looks up a localized string similar to Exception Stack:.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Properties.Resources.ExceptionType">
            <summary>
              Looks up a localized string similar to Exception type:.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Properties.Resources.Fields">
            <summary>
              Looks up a localized string similar to Fields.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Properties.Resources.FileAlreadyExists">
            <summary>
              Looks up a localized string similar to The specified file already exists..
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Properties.Resources.IndexNotInSources">
            <summary>
              Looks up a localized string similar to Index cannot be found in the sources collection..
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Properties.Resources.IndexOutOfBounds">
            <summary>
              Looks up a localized string similar to Index out of bounds..
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Properties.Resources.IsDirty">
            <summary>
              Looks up a localized string similar to Is Dirty: .
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Properties.Resources.IsDirtyFalse">
            <summary>
              Looks up a localized string similar to Is Dirty: false.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Properties.Resources.LineNumber">
            <summary>
              Looks up a localized string similar to Line #.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Properties.Resources.LoadImageHint">
            <summary>
              Looks up a localized string similar to Hint: Right-click on this to load a new image.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Properties.Resources.Message">
            <summary>
              Looks up a localized string similar to Message:.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Properties.Resources.MetaInformation">
            <summary>
              Looks up a localized string similar to Meta Information.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Properties.Resources.Method">
            <summary>
              Looks up a localized string similar to Method.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Properties.Resources.NoBrokenRules">
            <summary>
              Looks up a localized string similar to No broken rules.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Properties.Resources.NoImage">
            <summary>
              Looks up a localized string similar to No image.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Properties.Resources.NotApplicable">
            <summary>
              Looks up a localized string similar to n.a..
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Properties.Resources.ParameterCanNotBeNull">
            <summary>
              Looks up a localized string similar to Parameter cannot be null..
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Properties.Resources.Properties">
            <summary>
              Looks up a localized string similar to  Properties.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Properties.Resources.Setting">
            <summary>
              Looks up a localized string similar to Setting .
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Properties.Resources.SettingNotSupported">
            <summary>
              Looks up a localized string similar to  not supported..
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Properties.Resources.Source">
            <summary>
              Looks up a localized string similar to Source:.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Properties.Resources.SourceFile">
            <summary>
              Looks up a localized string similar to Source File.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Properties.Resources.StackTrace">
            <summary>
              Looks up a localized string similar to Stack Trace:.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Properties.Resources.ThrownByClass">
            <summary>
              Looks up a localized string similar to Thrown by code in class:.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Properties.Resources.ThrownByMethod">
            <summary>
              Looks up a localized string similar to Thrown by code in method:.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Properties.Resources.UnableToLoadImage">
            <summary>
              Looks up a localized string similar to Unable to load image: .
            </summary>
        </member>
        <member name="T:CODE.Framework.Core.Utilities.EnumHelper">
            <summary>
            This class provides various helper functions for dealing with enums
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.EnumHelper.GetEnumInformation``1">
            <summary>Returns a list (enumerable) of information items for each value in the enum</summary>
            <typeparam name="T">Enum type</typeparam>
            <returns>Enumerable list of enum information items (wich can be very useful for binding for instance)</returns>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.EnumHelper._knownEnumInformation">
            <summary>Internal cache to avoid having to re-discover enums all the time</summary>
        </member>
        <member name="T:CODE.Framework.Core.Utilities.EnumInformation">
            <summary>This class represents meta information about an enum</summary>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.EnumInformation.#ctor(System.Int32,System.Object,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="value">Integer value</param>
            <param name="enumValue">Original enum value</param>
            <param name="name">Enum value name</param>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.EnumInformation.Value">
            <summary>Value as an integer</summary>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.EnumInformation.EnumValue">
            <summary>The selected enum value as an object</summary>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.EnumInformation.DisplayText">
            <summary>The enum name spelled out as separate words</summary>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.EnumInformation.Name">
            <summary>Enum value name</summary>
        </member>
        <member name="T:CODE.Framework.Core.Utilities.ExceptionHelper">
            <summary>
            Various helper methods related to exceptions
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ExceptionHelper.GetExceptionHtml(System.Exception)">
            <summary>
            Analyzes exception information and returns HTML with details about the exception.
            </summary>
            <param name="exception">Exception object</param>
            <returns>Exception HTML</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ExceptionHelper.GetExceptionText(System.Exception)">
            <summary>
            Analyzes exception information and returns it as a plain text string
            </summary>
            <param name="exception">Exception object</param>
            <returns>string</returns>
        </member>
        <member name="T:CODE.Framework.Core.Utilities.Extensions.StringExtensions">
            <summary>
            Various extension methods for string manipulation.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Extensions.StringExtensions.Lower(System.String)">
            <summary>Returns a culture-neutral to-lower operation on the string.</summary>
            <param name="originalString">Original string</param>
            <returns>Lower-case string</returns>
            <example>"Hello".Lower()</example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Extensions.StringExtensions.Upper(System.String)">
            <summary>Returns a culture-neutral to-upper operation on the string.</summary>
            <param name="originalString">Original string</param>
            <returns>Upper-case string</returns>
            <example>"Hello".Upper()</example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Extensions.StringExtensions.Compare(System.String,System.String)">
            <summary>Returns true if the two strings match.</summary>
            <param name="firstString">First string</param>
            <param name="secondString">Second string</param>
            <returns>True or False</returns>
            <remarks>The strings are trimmed and compared in a case-insensitive, culture neutral fashion./// </remarks>
            <example>if ("Hello".Compare("World")) { }</example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Extensions.StringExtensions.Compare(System.String,System.String,System.Boolean)">
            <summary>Returns true if the two strings match.</summary>
            <param name="firstString">First string</param>
            <param name="secondString">Second string</param>
            <param name="ignoreCase">Should case (upper/lower) be ignored?</param>
            <returns>True or False</returns>
            <remarks>
            The strings are trimmed and compared in a case-insensitive, culture neutral fashion.
            </remarks>
            <example>if ("Hello".Compare("HELLO", true)) {}</example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Extensions.StringExtensions.Proper(System.String)">
            <summary>Receives a string as a parameter and returns the string in Proper format (makes each letter after a space capital)</summary>
            <param name="originalString">String</param>
            <returns>Proper string</returns>
            <example>"hello".Proper()</example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Extensions.StringExtensions.SmartProper(System.String)">
            <summary>
            This method returns strings in proper case.
            However, contrary to regular Proper() methods, 
            this method can be used to format names.
            For instance, "MacLeod" will remain "MacLeod",
            "macLeod" will be "MacLeod", "MACLEOD" will be turned into
            "Macleod". "macleod" will also be turned into "Macleod".
            </summary>
            <param name="originalString">String that is to be formatted</param>
            <returns>Properly formatted string</returns>
            <example>"macLeod".SmartProper()</example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Extensions.StringExtensions.SpaceCamelCase(System.String)">
            <summary>
            This method takes a camel-case string (such as one defined by an enum)
            and returns is with a space before every upper-case letter.
            </summary>
            <param name="originalString">String</param>
            <returns>String with spaces</returns>
            <example>"CamelCaseWord".SpaceCamelCase()</example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Extensions.StringExtensions.ToFile(System.String,System.String)">
            <summary>Receives a string and a file name as parameters and writes the contents of the string to that file </summary>
            <param name="expression">String to be written</param>
            <param name="fileName">File name the string is to be written to.</param>
            <example>"This is the line we want to insert in our file".ToFile(@"c:\My Folders\MyFile.txt");</example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Extensions.StringExtensions.ToStringSafe(System.Object)">
            <summary>Returns a string representation of the provided value. Returns an empty string if the value is null</summary>
            <param name="value">Value to be turned into a string</param>
            <returns>String</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Extensions.StringExtensions.ToFile(System.String,System.String,System.Text.Encoding)">
            <summary>Receives a string and a file name as parameters and writes the contents of the string to that file</summary>
            <param name="expression">String to be written</param>
            <param name="fileName">File name the string is to be written to.</param>
            <param name="encoding">File encoding</param>
            <example>"This is the line we want to insert in our file".ToFile(@"c:\My Folders\MyFile.txt", Encoding.ASCII);</example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Extensions.StringExtensions.FromFile(System.String)">
            <summary>Loads a file from disk and returns it as a string</summary>
            <param name="fileName">File to be loaded</param>
            <returns>String containing the file contents</returns>
            <example>string text = @"c:\folder\myfile.txt".FromFile();</example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Extensions.StringExtensions.Base64Encode(System.String)">
            <summary>This method takes any regular string, and returns its base64 encoded representation</summary>
            <param name="original">Original String</param>
            <returns>Base64 encoded string</returns>
            <example>string encoded = "Encode this".Base64Encode();</example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Extensions.StringExtensions.Base64Decode(System.String)">
            <summary>Takes a base64 encoded string and converts it into a regular string</summary>
            <param name="encodedString">Base64 encoded string</param>
            <returns>Decoded string</returns>
            <example>string decoded = "jumbledText==".Base64Decode();</example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Extensions.StringExtensions.At(System.String,System.String)">
            <summary>Receives two strings as parameters and searches for one string within another. If found, returns the beginning numeric position otherwise returns 0</summary>
            <param name="searchIn">String to search in</param>
            <param name="searchFor">String to search for</param>
            <returns>Position</returns>
            <example>"Joe Doe".At("D")</example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Extensions.StringExtensions.At(System.String,System.String,System.Int32)">
            <summary>
            Receives two strings and an occurrence position (1st, 2nd etc) as parameters and 
            searches for one string within another for that position. 
            If found, returns the beginning numeric position otherwise returns 0
            </summary>
            <param name="searchIn">String to search in</param>
            <param name="searchFor">String to search for</param>
            <param name="occurrence">The occurrence of the string</param>
            <returns>Position</returns>
            <example>
            "Joe Doe".At("o", 1); //returns 2
            "Joe Doe".At("o", 2); //returns 6
            </example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Extensions.StringExtensions.Asc(System.Char)">
            <summary>Receives a character as a parameter and returns its ANSI code</summary>
            <example>'#'.Asc(); //returns 35</example>
            <param name="character">Character</param>
            <returns>ASCII value</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Extensions.StringExtensions.Chr(System.Int32)">
            <summary>Receives an integer ANSI code and returns a character associated with it</summary>
            <example>35.Chr(); returns '#'</example>
            <param name="ansiCode">Character Code</param>
            <returns>Char that corresponds with the ascii code</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Extensions.StringExtensions.GetWordCount(System.String)">
            <summary>Receives a string as a parameter and counts the number of words in that string</summary>
            <example>
            string text = "John Doe is a good man";
            text.GetWordCount(); //returns 6
            </example>
            <param name="sourceString">String</param>
            <returns>Word Count</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Extensions.StringExtensions.GetWordNumber(System.String,System.Int32)">
            <summary>
            Based on the position specified, returns a word from a string 
            Receives a string as a parameter and counts the number of words in that string
            </summary>
            <example>
            string text = "John Doe is a good man";
            text.GetWordNumber(5); //returns "good"
            </example>
            <param name="sourceString">String</param>
            <param name="wordPosition">Word Position</param>
            <returns>Word number</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Extensions.StringExtensions.IsAlpha(System.String)">
            <summary>Returns a bool indicating if the first character in a string is an alphabet or not</summary>
            <example>"Joe Doe".IsAlpha(); //returns true</example>
            <param name="expression">Expression</param>
            <returns>True or False depending on whether the string only had alphanumeric chars</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Extensions.StringExtensions.Occurs(System.String,System.Char)">
            <summary>Returns the number of occurrences of a character within a string</summary>
            <example>"Joe Doe".Occurs('o'); //returns 2</example>
            <param name="expression">Expression</param>
            <param name="character">Search Character</param>
            <returns>Number of occurrences</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Extensions.StringExtensions.Occurs(System.String,System.String)">
            <summary>Returns the number of occurrences of one string within another string</summary>
            <example>
            "Joe Doe".Occurs("oe"); //returns 2
            "Joe Doe".Occurs("Joe"); //returns 1
            </example>
            <param name="stringSearched">Expression</param>
            <param name="searchString">Search String</param>
            <returns>Number of occurrences</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Extensions.StringExtensions.Replicate(System.String,System.Int32)">
            <summary>
            Receives a string expression and a numeric value indicating number of time
            and replicates that string for the specified number of times.
            </summary>
            <example>"Joe".Replicate(5); //returns JoeJoeJoeJoeJoe</example>
            <param name="expression">Expression</param>
            <param name="times">Number of times the string is to be replicated</param>
            <returns>New string</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Extensions.StringExtensions.SubstringSafe(System.String,System.Int32,System.Int32)">
            <summary>Overloaded method for SubstringSafe() that receives starting position and length</summary>
            <param name="expression">String expression</param>
            <param name="startIndex">Start Position</param>
            <param name="length">Length</param>
            <returns>Substring</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Extensions.StringExtensions.SubStr(System.String,System.Int32,System.Int32)">
            <summary>Overloaded method for SubStr() that receives starting position and length</summary>
            <param name="expression">Expression</param>
            <param name="startPosition">Start Position</param>
            <param name="length">Length</param>
            <returns>Substring</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Extensions.StringExtensions.AtLine(System.String,System.String)">
            <summary>Receives a string and converts it to an integer</summary>
            <example>"Is Life Beautiful? \r\n It sure is".AtLine("Is"); //returns 1</example>
            <param name="searchExpression">Search Expression</param>
            <param name="expressionSearched">Expression Searched</param>
            <returns>Line number</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Extensions.StringExtensions.IsDigit(System.String)">
            <summary>Receives a string as a parameter and returns a bool indicating if the left most character in the string is a valid digit.</summary>
            <example>if("1Test".IsDigit()){...} //returns true</example>
            <param name="sourceString">Expression</param>
            <returns>True or False</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Extensions.StringExtensions.JustPath(System.String)">
            <summary>Takes a fully qualified file name, and returns just the path</summary>
            <param name="path">File name with path</param>
            <returns>Just the path as a string</returns>
            <example>@"c:\folder\file.txt".JustPath(); // returns @"c:\folder\"</example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Extensions.StringExtensions.JustFileName(System.String)">
            <summary>Returns just the file name part of a full path</summary>
            <param name="path">The full path to the file</param>
            <returns>File name</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Extensions.StringExtensions.AddBS(System.String)">
            <summary>Makes sure the secified path ends with a back-slash</summary>
            <param name="path">Path</param>
            <returns>Path with BS</returns>
            <example>
            @"c:\folder".AddBS(); // returns @"c:\folder\"
            @"c:\folder\".AddBS(); // returns @"c:\folder\"
            </example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Extensions.StringExtensions.ArrayContainsString(System.String,System.String[])">
            <summary>Returns true if the array contains the string we are looking for</summary>
            <param name="hostArray">The host array.</param>
            <param name="searchText">The search string.</param>
            <returns>True or false</returns>
            <example>
            string[] testArray = new string[] { "One", "Two", "Three" };
            bool result1 = "one".ArrayContainsString(testArray, true); // returns true
            bool result2 = "one".ArrayContainsString(testArray); // returns false
            bool result3 = "One".ArrayContainsString(testArray); // returns true
            bool result4 = "Four".ArrayContainsString(testArray); // returns false
            </example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Extensions.StringExtensions.ArrayContainsString(System.String,System.String[],System.Boolean)">
            <summary>Returns true if the array contains the string we are looking for</summary>
            <param name="hostArray">The host array.</param>
            <param name="searchText">The search string.</param>
            <param name="ignoreCase">if set to <c>true</c> [ignore case].</param>
            <returns>True or false</returns>
            <example>
            string[] testArray = new string[] { "One", "Two", "Three" };
            bool result1 = "one".ArrayContainsString(testArray, true); // returns true
            bool result2 = "one".ArrayContainsString(testArray); // returns false
            bool result3 = "One".ArrayContainsString(testArray); // returns true
            bool result4 = "Four".ArrayContainsString(testArray); // returns false
            </example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Extensions.StringExtensions.TryIntParse(System.String,System.Int32)">
            <summary>Tries to parse a string value as an integer. If the parse fails, the provided default value will be inserted</summary>
            <param name="value">The value.</param>
            <param name="failedDefault">The failed default.</param>
            <returns></returns>
            <example>int valueInt = "1".TryIntParse(-1);</example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Extensions.StringExtensions.TryGuidParse(System.String,System.Guid)">
            <summary>Tries to parse a string value as an Guid. If the parse fails, the provided default value will be inserted</summary>
            <param name="value">The value.</param>
            <param name="failedDefault">The failed default.</param>
            <returns></returns>
            <example>Guid valueGuid = "xxx".TryGuidParse(Guid.Empty);</example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Extensions.StringExtensions.TryGuidParse(System.String)">
            <summary>Tries to parse a string value as an Guid. If the parse fails, Guid.Empty will be returned</summary>
            <param name="value">The value.</param>
            <returns></returns>
            <example>Guid valueGuid = "xxx".TryGuidParse();</example>
        </member>
        <member name="T:CODE.Framework.Core.Utilities.HttpHelper">
            <summary>
            This class provides useful methods for dealing with HTTP
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.HttpHelper.UrlDecode(System.String)">
            <summary>
            Decodes a URL string/value into clear text
            </summary>
            <param name="encodedValue">The encoded value.</param>
            <returns>Clear text version of the string</returns>
            <remarks>This implementation is identical to the one provided by the .NET Framework in the WebUtility class, but it is provided here without dependencies on any server components.</remarks>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.HttpHelper.UrlEncode(System.String)">
            <summary>
            Encodes the string for use in a URL
            </summary>
            <param name="value">The clear-text encodedValue</param>
            <returns>URL encoded string</returns>
            <remarks>This implementation is identical to the one provided by the .NET Framework in the WebUtility class, but it is provided here without dependencies on any server components.</remarks>
        </member>
        <member name="T:CODE.Framework.Core.Utilities.If">
            <summary>
            Static class providing convenience methods for common tasks
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.If.Real``1(System.Object,System.Action{``0})">
            <summary>Checks if the provided type is the correct type and not null, and if so, runs the provided action</summary>
            <typeparam name="T">Type to check for</typeparam>
            <param name="instance">The object instance that is to be checked.</param>
            <param name="action">The code/action that is to be executed if the instance is of the right type and not null</param>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.If.Real``2(System.Object,System.Object,System.Action{``0,``1})">
            <summary>Checks if the provided types are the correct types and not null, and if so, runs the provided action</summary>
            <typeparam name="T1">The type of the first instance to check</typeparam>
            <typeparam name="T2">The type of the second instance to check</typeparam>
            <param name="instance">The object instance that is to be checked.</param>
            <param name="instance2">The second object instance that is to be checked.</param>
            <param name="action">The code/action that is to be executed if the instance2 are of the right type and not null</param>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.If.NotNull(System.Object,System.Action)">
            <summary>Executes the provided action if the provided instance is not null</summary>
            <param name="instance">Object instance to check</param>
            <param name="action">The action to execute if the instance is not null</param>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.If.NotNull(System.Object,System.Object,System.Action)">
            <summary>Executes the provided action if the provided instances are not null</summary>
            <param name="instance">Object instance to check</param>
            <param name="instance2">Object instance to check</param>
            <param name="action">The action to execute if the instances are not null</param>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.If.NotNull(System.Object,System.Object,System.Object,System.Action)">
            <summary>Executes the provided action if the provided instances are not null</summary>
            <param name="instance">Object instance to check</param>
            <param name="instance2">Object instance to check</param>
            <param name="instance3">Object instance to check</param>
            <param name="action">The action to execute if the instances are not null</param>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.If.NotNull(System.Object,System.Object,System.Object,System.Object,System.Action)">
            <summary>Executes the provided action if the provided instances are not null</summary>
            <param name="instance">Object instance to check</param>
            <param name="instance2">Object instance to check</param>
            <param name="instance3">Object instance to check</param>
            <param name="instance4">Object instance to check</param>
            <param name="action">The action to execute if the instances are not null</param>
        </member>
        <member name="T:CODE.Framework.Core.Utilities.JsonHelper">
            <summary>
            This class provides useful helper functionality to deal with JSON strings
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.JsonHelper.SerializeToRestJson(System.Object)">
            <summary>
            Serializes to REST JSON.
            </summary>
            <param name="objectToSerialize">The object to serialize.</param>
            <returns>JSON string</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.JsonHelper.DeserializeFromRestJson``1(System.String)">
            <summary>
            Deserializes from REST JSON.
            </summary>
            <typeparam name="T">Type to return</typeparam>
            <param name="json">The json.</param>
            <returns>Deserialized object</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.JsonHelper.DeserializeFromRestJson(System.String,System.Type)">
            <summary>
            Deserializes from REST JSON.
            </summary>
            <param name="json">The json.</param>
            <param name="returnType">Type of the return.</param>
            <returns>Deserialized object</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.JsonHelper.Format(System.String)">
            <summary>
            Formats the provided JSON string (adds line feeds, indents, ...)
            </summary>
            <param name="json">The original JSON string.</param>
            <returns>Formatted JSON string</returns>
        </member>
        <member name="T:CODE.Framework.Core.Utilities.Logger">
            <summary>
            Abstract logger class.
            </summary>
            
            <example>
            public class MyLogger : Logger
            {
            public override void Log(string logEvent, LogEventType type)
            {
            MessageBox.Show(logEvent);
            }
            }
            </example>
            <remarks>This class provides the basic implementation of a logger class.
            The only part that must be overriden is the Log() method with the string overload.</remarks>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Logger.Log(System.String,CODE.Framework.Core.Utilities.LogEventType)">
            <summary>
            Logs the specified event (text).
            </summary>
            <param name="logEvent">The event (text).</param>
            <param name="type">The event type.</param>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Logger.Log(System.Object,CODE.Framework.Core.Utilities.LogEventType)">
            <summary>
            Logs the specified event (object).
            </summary>
            <param name="logEvent">The event (object).</param>
            <param name="type">The event type.</param>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.Logger._typeFilter">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.Logger.TypeFilter">
            <summary>
            Gets or sets the type filter.
            </summary>
            <value>The type filter.</value>
            <remarks>
            Only events that match the type filter will be considered by this logger.
            </remarks>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Logger.Log(System.Exception,CODE.Framework.Core.Utilities.LogEventType)">
            <summary>
            Logs the specified event (text).
            </summary>
            <param name="exception">The exception that is to be logged.</param>
            <param name="type">The event type.</param>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Logger.Log(System.String,System.Exception,CODE.Framework.Core.Utilities.LogEventType)">
            <summary>
            Logs the specified event (text).
            </summary>
            <param name="leadingText">The leading text.</param>
            <param name="exception">The exception that is to be logged.</param>
            <param name="type">The event type.</param>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.Logger.GetSerializedExceptionText(System.Exception,CODE.Framework.Core.Utilities.LogEventType)">
            <summary>
            Serializes the exception and returns the serialzied text
            </summary>
            <param name="exception">The exception.</param>
            <param name="type">The log info type.</param>
            <returns>Serialized exception information</returns>
            <remarks>This method is designed to be overridden in subclasses</remarks>
        </member>
        <member name="T:CODE.Framework.Core.Utilities.ConsoleLogger">
            <summary>
            Console logger class
            </summary>
            <remarks>
            Performs the equivalent of a Console.WriteLine()
            </remarks>
            <example>
            EPS.Utilities.LoggingMediator.AddLogger(new EPS.Utilities.ConsoleLogger());
            
            EPS.Utilities.LoggingMediator.Log("Hello World!", EPS.Utilities.LogEventType.Information);
            EPS.Utilities.LoggingMediator.Log("A critical error occured!", EPS.Utilities.LogEventType.Critical | EPS.Utilities.LogEventType.Error);
            </example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ConsoleLogger.Log(System.String,CODE.Framework.Core.Utilities.LogEventType)">
            <summary>
            Logs the specified event (text).
            </summary>
            <param name="logEvent">The event (text).</param>
            <param name="type">The event type.</param>
        </member>
        <member name="T:CODE.Framework.Core.Utilities.OutputWindowLogger">
            <summary>
            Output Window logger class
            </summary>
            <remarks>
            Performs the equivalent of a System.Diagnostics.Debug.WriteLine()
            </remarks>
            <example>
            EPS.Utilities.LoggingMediator.AddLogger(new EPS.Utilities.OutputWindowLogger());
            
            EPS.Utilities.LoggingMediator.Log("Hello World!", EPS.Utilities.LogEventType.Information);
            EPS.Utilities.LoggingMediator.Log("A critical error occured!", EPS.Utilities.LogEventType.Critical | EPS.Utilities.LogEventType.Error);
            </example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.OutputWindowLogger.Log(System.String,CODE.Framework.Core.Utilities.LogEventType)">
            <summary>
            Logs the specified event (text).
            </summary>
            <param name="logEvent">The event (text).</param>
            <param name="type">The event type.</param>
        </member>
        <member name="T:CODE.Framework.Core.Utilities.TraceLogger">
            <summary>
            Trace logger class
            </summary>
            <remarks>
            Performs the equivalent of a System.Diagnostics.Trace.WriteLine()
            </remarks>
            <example>
            EPS.Utilities.LoggingMediator.AddLogger(new EPS.Utilities.TraceLogger());
            
            EPS.Utilities.LoggingMediator.Log("Hello World!", EPS.Utilities.LogEventType.Information);
            EPS.Utilities.LoggingMediator.Log("A critical error occured!", EPS.Utilities.LogEventType.Critical | EPS.Utilities.LogEventType.Error);
            </example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.TraceLogger.Log(System.String,CODE.Framework.Core.Utilities.LogEventType)">
            <summary>
            Logs the specified event (text).
            </summary>
            <param name="logEvent">The event (text).</param>
            <param name="type">The event type.</param>
        </member>
        <member name="T:CODE.Framework.Core.Utilities.MultiFileLogger">
            <summary>
            Multiple file logger class
            </summary>
            <remarks>
            Logs the provided information into multiple files.
            By default, the location of the files is the application data path.
            By default, the name of each file is a Guid. The extension is ".log".
            </remarks>
            <example>
            EPS.Utilities.MultiFileLogger logger = new EPS.Utilities.MultiFileLogger(@"c:\Logs\");
            logger.Extension = "event";  // Creates *.event files
            EPS.Utilities.LoggingMediator.AddLogger(logger);
            
            EPS.Utilities.LoggingMediator.Log("Hello World!", EPS.Utilities.LogEventType.Information);
            EPS.Utilities.LoggingMediator.Log("A critical error occured!", EPS.Utilities.LogEventType.Critical | EPS.Utilities.LogEventType.Error);
            </example>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.MultiFileLogger._extension">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.MultiFileLogger.Extension">
            <summary>
            Log file extension
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.MultiFileLogger.Folder">
            <summary>
            Gets or sets the folder the files are to be put into.
            </summary>
            <value>The folder.</value>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.MultiFileLogger.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Utilities.MultiFileLogger"/> class.
            </summary>
            <param name="folder">The folder the files are to be put into.</param>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.MultiFileLogger.#ctor(System.Environment.SpecialFolder)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Utilities.MultiFileLogger"/> class.
            </summary>
            <param name="folder">The folder the files are to be put into.</param>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.MultiFileLogger.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Utilities.MultiFileLogger"/> class.
            </summary>
            <remarks>By default, the application data files folder is used for the log files.</remarks>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.MultiFileLogger.Log(System.String,CODE.Framework.Core.Utilities.LogEventType)">
            <summary>
            Logs the specified event (text).
            </summary>
            <param name="logEvent">The event (text).</param>
            <param name="type">The event type.</param>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.MultiFileLogger.GetNextFileName">
            <summary>
            Gets the name of the next file.
            </summary>
            <returns>Next file name.</returns>
            <remarks>Override this method to create a different file name schema.</remarks>
        </member>
        <member name="T:CODE.Framework.Core.Utilities.MultiXmlFileLogger">
            <summary>
            Logs an event to an XML file.
            </summary>
            <remarks>
            Each event is stored into a separate XML file.
            
            Typically, the text passed to the logger is not in XML format. In that case, the
            logger automatically adds an XML declaration as well as a root tag and a tag for the event
            content. The name of the root tag is "log" by default, and the event tag is "event" by default.
            In addition, the event element has a "type" attribute that indicates the type of the logged event.
            There also is a "timeStamp" attribute that indicates the date and time of the event (GMT).
            However, all tag/attribute names can be modified by means of the XmlRootNode and XmlEventNode properties.
            
            If the provided text is well formed XML, no other tags are added and the value is used as is,
            except that the XML declaration may be added or modified. Also the format of the XML may be changed
            since this logger always creates line feeds and proper tag indentation. No type attribute will be added.
            </remarks>
            <example>
            EPS.Utilities.MultiXmlFileLogger logger = new EPS.Utilities.MultiXmlFileLogger(@"c:\Logs\");
            EPS.Utilities.LoggingMediator.AddLogger(logger); // Creates *.xml files
            
            EPS.Utilities.LoggingMediator.Log("Hello World!", EPS.Utilities.LogEventType.Information);
            EPS.Utilities.LoggingMediator.Log("A critical error occured!", EPS.Utilities.LogEventType.Critical | EPS.Utilities.LogEventType.Error);
            </example>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.MultiXmlFileLogger.XmlRootNode">
            <summary>
            Gets or sets the XML root node name.
            </summary>
            <value>The XML root node name.</value>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.MultiXmlFileLogger.XmlEventNode">
            <summary>
            Gets or sets the XML event node name.
            </summary>
            <value>The XML event node name.</value>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.MultiXmlFileLogger.XmlEventTypeAttribute">
            <summary>
            Gets or sets the XML event type attribute name.
            </summary>
            <value>The XML event type attribute.</value>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.MultiXmlFileLogger.XmlEventTimeStampAttribute">
            <summary>
            Gets or sets the XML event time stamp attribute name.
            </summary>
            <value>The XML event type attribute.</value>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.MultiXmlFileLogger.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Utilities.MultiFileLogger"/> class.
            </summary>
            <param name="folder">The folder the files are to be put into.</param>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.MultiXmlFileLogger.#ctor(System.Environment.SpecialFolder)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Utilities.MultiFileLogger"/> class.
            </summary>
            <param name="folder">The folder the files are to be put into.</param>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.MultiXmlFileLogger.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Utilities.MultiFileLogger"/> class.
            </summary>
            <remarks>By default, the application data files folder is used for the log files.</remarks>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.MultiXmlFileLogger.Log(System.String,CODE.Framework.Core.Utilities.LogEventType)">
            <summary>
            Logs the specified event (text) to an XML file in XML format.
            </summary>
            <param name="logEvent">The event (text).</param>
            <param name="type">The event type.</param>
        </member>
        <member name="T:CODE.Framework.Core.Utilities.SingleFileLogger">
            <summary>
            Single file logger class
            </summary>
            <remarks>
            Logs the provided information into a single file.
            By default, the name of the log file is "Log.log". It is probably smart to change the name of that file.
            </remarks>
            <example>
            EPS.Utilities.SingleFileLogger logger = new EPS.Utilities.SingleFileLogger(@"c:\Logs\", "MyLogFile.log");
            EPS.Utilities.LoggingMediator.AddLogger(logger);
            
            EPS.Utilities.LoggingMediator.Log("Hello World!", EPS.Utilities.LogEventType.Information);
            EPS.Utilities.LoggingMediator.Log("A critical error occured!", EPS.Utilities.LogEventType.Critical | EPS.Utilities.LogEventType.Error);
            </example>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.SingleFileLogger.FileName">
            <summary>
            Log file name
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.SingleFileLogger.Folder">
            <summary>
            Gets or sets the folder the files are to be put into.
            </summary>
            <value>The folder.</value>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.SingleFileLogger.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Utilities.SingleFileLogger"/> class.
            </summary>
            <param name="folder">The folder the files are to be put into.</param>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.SingleFileLogger.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Utilities.SingleFileLogger"/> class.
            </summary>
            <param name="folder">The folder the files are to be put into.</param>
            <param name="fileName">Name of the log file.</param>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.SingleFileLogger.#ctor(System.Environment.SpecialFolder)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Utilities.SingleFileLogger"/> class.
            </summary>
            <param name="folder">The folder the files are to be put into.</param>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.SingleFileLogger.#ctor(System.Environment.SpecialFolder,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Utilities.SingleFileLogger"/> class.
            </summary>
            <param name="folder">The folder the files are to be put into.</param>
            <param name="fileName">Name of the log file.</param>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.SingleFileLogger.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Utilities.SingleFileLogger"/> class.
            </summary>
            <remarks>By default, the application data files folder is used for the log files.</remarks>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.SingleFileLogger.Log(System.String,CODE.Framework.Core.Utilities.LogEventType)">
            <summary>
            Logs the specified event (text).
            </summary>
            <param name="logEvent">The event (text).</param>
            <param name="type">The event type.</param>
        </member>
        <member name="T:CODE.Framework.Core.Utilities.SingleXmlFileLogger">
            <summary>
            Single XML file logger class
            </summary>
            <remarks>
            All events are stored into a common XML file.
            
            Text passed to the logger is not XML formatted. Instead, the text gets logged into an XML file,
            using the XML file as a database. The text logged is made the content of each "record". If actual XML
            is passed to the logger, then that XML is simple treated as content that is stored in the log.
            
            The XML log file follows a specific format using a "log" tag as the root element, with "event" tags for
            each actual event that gets logged. That tag also has "type" and "timeStamp" attributes.
            All tag and attribute names can be modified through the properties on this object.
            
            The log can be limited to a maximum number of entries. If that number is exceeded, the oldest
            events get truncated from the log.
            
            The XML file structure has to be compatible with the one defined by this object's properties. If not,
            the existing XML file is overwritten with a brand new one. (Compatible in this sense means that the root
            element name has to match. Additional elements that aren't defined by this log object are allowed to
            exist. They are simply ignored by this logger).
            </remarks>
            <example>
            EPS.Utilities.SingleXmlFileLogger logger = new EPS.Utilities.SingleXmlFileLogger(@"c:\Logs\", "MyLog.xml");
            logger.MaximumEntries = 100;
            EPS.Utilities.LoggingMediator.AddLogger(logger); // Creates the MyLog.xml file
            
            EPS.Utilities.LoggingMediator.Log("Hello World!", EPS.Utilities.LogEventType.Information);
            EPS.Utilities.LoggingMediator.Log("A critical error occured!", EPS.Utilities.LogEventType.Critical | EPS.Utilities.LogEventType.Error);
            </example>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.SingleXmlFileLogger.XmlRootNode">
            <summary>
            Gets or sets the XML root node name.
            </summary>
            <value>The XML root node name.</value>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.SingleXmlFileLogger.XmlEventNode">
            <summary>
            Gets or sets the XML event node name.
            </summary>
            <value>The XML event node name.</value>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.SingleXmlFileLogger.XmlEventTypeAttribute">
            <summary>
            Gets or sets the XML event type attribute name.
            </summary>
            <value>The XML event type attribute.</value>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.SingleXmlFileLogger.XmlEventTimeStampAttribute">
            <summary>
            Gets or sets the XML event time stamp attribute name.
            </summary>
            <value>The XML event type attribute.</value>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.SingleXmlFileLogger.MaximumEntries">
            <summary>
            Defines the maximum number of entries in the log file.
            -1 = unlimited.
            </summary>
            <value>Maximum number of entries.</value>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.SingleXmlFileLogger.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Utilities.SingleXmlFileLogger"/> class.
            </summary>
            <param name="folder">The folder the files are to be put into.</param>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.SingleXmlFileLogger.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Utilities.SingleXmlFileLogger"/> class.
            </summary>
            <param name="folder">The folder the files are to be put into.</param>
            <param name="fileName">Name of the log file.</param>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.SingleXmlFileLogger.#ctor(System.Environment.SpecialFolder)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Utilities.SingleXmlFileLogger"/> class.
            </summary>
            <param name="folder">The folder the files are to be put into.</param>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.SingleXmlFileLogger.#ctor(System.Environment.SpecialFolder,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Utilities.SingleXmlFileLogger"/> class.
            </summary>
            <param name="folder">The folder the files are to be put into.</param>
            <param name="fileName">Name of the log file.</param>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.SingleXmlFileLogger.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Utilities.SingleXmlFileLogger"/> class.
            </summary>
            <remarks>By default, the application data files folder is used for the log files.</remarks>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.SingleXmlFileLogger.Log(System.String,CODE.Framework.Core.Utilities.LogEventType)">
            <summary>
            Logs the specified event (text).
            </summary>
            <param name="logEvent">The event (text).</param>
            <param name="type">The event type.</param>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.SingleXmlFileLogger.GetXmlDocument(System.String)">
            <summary>
            Loads or creates the specified XML document
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns>Event log XML document</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.SingleXmlFileLogger.CreateXmlDocument">
            <summary>
            Creates the XML document from scratch.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.SingleXmlFileLogger.TruncateLog(System.Xml.XmlDocument)">
            <summary>
            Truncates the log if need be.
            </summary>
            <param name="log">The log XML document.</param>
        </member>
        <member name="T:CODE.Framework.Core.Utilities.EventLogLogger">
            <summary>
            Event log logger class
            </summary>
            <remarks>
            This class logs events to the windows event log.
            
            If a log of the specified name does not exist on the specified machine (typically
            the local machine), then it is automatically created.
            </remarks>
            <example>
            EPS.Utilities.EventLogLogger logger = new EPS.Utilities.EventLogLogger("My Application Log");
            logger.Source = "My Application";
            EPS.Utilities.LoggingMediator.AddLogger(logger);
            
            EPS.Utilities.LoggingMediator.Log("Hello World!", EPS.Utilities.LogEventType.Information);
            EPS.Utilities.LoggingMediator.Log("A critical error occured!", EPS.Utilities.LogEventType.Critical | EPS.Utilities.LogEventType.Error);
            </example>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.EventLogLogger._eventLog">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.EventLogLogger.InternalEventLog">
            <summary>
            Internal reference to the actual event log object
            </summary>
            <value>The event log.</value>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.EventLogLogger.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Utilities.EventLogLogger"/> class.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.EventLogLogger.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Utilities.EventLogLogger"/> class.
            </summary>
            <param name="logName">Name of the log as it appears in the windows system log.</param>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.EventLogLogger.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Utilities.EventLogLogger"/> class.
            </summary>
            <param name="logName">Name of the log as it appears in the windows system log.</param>
            <param name="machineName">Name of the machine the log resides on. (Current/local machine = ".")</param>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.EventLogLogger.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Utilities.EventLogLogger"/> class.
            </summary>
            <param name="logName">Name of the log as it appears in the windows system log.</param>
            <param name="machineName">Name of the machine the log resides on. (Current/local machine = ".")</param>
            <param name="sourceName">Name of the source (typically the name of the current application).</param>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.EventLogLogger.Log(System.String,CODE.Framework.Core.Utilities.LogEventType)">
            <summary>
            Logs the specified event (text).
            </summary>
            <param name="logEvent">The event (text).</param>
            <param name="type">The event type.</param>
            <remarks>
            Milos log types are mapped to the following system event types (in this order):
            LogEventType.Critical   = EventLogEntryType.Error
            LogEventType.Error      = EventLogEntryType.FailureAudit
            LogEventType.Exception  = EventLogEntryType.FailureAudit
            LogEventType.Warning    = EventLogEntryType.Warning
            LogEventType.Success    = EventLogEntryType.SuccessAudit
               other:               = EventLogEntryType.Information
            </remarks>
        </member>
        <member name="T:CODE.Framework.Core.Utilities.LoggingMediator">
            <summary>
            Logging mediator class
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.LoggingMediator.Log(System.String,CODE.Framework.Core.Utilities.LogEventType)">
            <summary>
            Logs the specified text.
            </summary>
            <param name="logEvent">The event (text) to log.</param>
            <param name="type">Event type</param>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.LoggingMediator.Log(System.Object,CODE.Framework.Core.Utilities.LogEventType)">
            <summary>
            Logs the specified event.
            </summary>
            <param name="logEvent">The event (object) to log.</param>
            <param name="type">Event type</param>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.LoggingMediator.Log(System.Exception,CODE.Framework.Core.Utilities.LogEventType)">
            <summary>
            Logs the specified exception.
            </summary>
            <param name="exception">The exception.</param>
            <param name="type">Event type</param>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.LoggingMediator.Log(System.String,System.Exception,CODE.Framework.Core.Utilities.LogEventType)">
            <summary>
            Logs the specified exception.
            </summary>
            <param name="leadingText">The leading text (inserted before the actual exception detail).</param>
            <param name="exception">The exception.</param>
            <param name="type">Event type</param>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.LoggingMediator.AddLogger(CODE.Framework.Core.Utilities.ILogger)">
            <summary>
            Adds a new logger which wishes to be notified whenever something needs to be logged.
            </summary>
            <param name="logger">The logger object.</param>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.LoggingMediator.ClearLoggers">
            <summary>
            Removes all current loggers.
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.LoggingMediator.Loggers">
            <summary>
            Internal list of loggers
            </summary>
        </member>
        <member name="T:CODE.Framework.Core.Utilities.ILogger">
            <summary>
            Logger interface
            </summary>
            <remarks>
            Implement this interface for objects used for logging.
            </remarks>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ILogger.Log(System.String,CODE.Framework.Core.Utilities.LogEventType)">
            <summary>Logs the specified event (text).</summary>
            <param name="logEvent">The event (text).</param>
            <param name="type">The event type.</param>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ILogger.Log(System.Object,CODE.Framework.Core.Utilities.LogEventType)">
            <summary>Logs the specified event (object).</summary>
            <param name="logEvent">The event (object).</param>
            <param name="type">The event type.</param>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.ILogger.TypeFilter">
            <summary>
            Gets or sets the type filter.
            </summary>
            <value>The type filter.</value>
            <remarks>
            Only events that match the type filter will be considered by this logger.
            </remarks>
        </member>
        <member name="T:CODE.Framework.Core.Utilities.IExceptionLogger">
            <summary>
            Interface for loggers that are capable of logging exceptions directly
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.IExceptionLogger.Log(System.Exception,CODE.Framework.Core.Utilities.LogEventType)">
            <summary>
            Logs the specified event (text).
            </summary>
            <param name="exception">The exception that is to be logged.</param>
            <param name="type">The event type.</param>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.IExceptionLogger.Log(System.String,System.Exception,CODE.Framework.Core.Utilities.LogEventType)">
            <summary>
            Logs the specified event (text).
            </summary>
            <param name="leadingText">The leading text.</param>
            <param name="exception">The exception that is to be logged.</param>
            <param name="type">The event type.</param>
        </member>
        <member name="T:CODE.Framework.Core.Utilities.LogEventType">
            <summary>
            Log event type
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.LogEventType.Undefined">
            <summary>
            Undefined
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.LogEventType.Information">
            <summary>
            General information
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.LogEventType.Warning">
            <summary>
            Warning
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.LogEventType.Exception">
            <summary>
            Exception
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.LogEventType.Error">
            <summary>
            Error
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.LogEventType.Critical">
            <summary>
            Critical event
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.LogEventType.Success">
            <summary>
            Success
            </summary>
        </member>
        <member name="T:CODE.Framework.Core.Utilities.ObjectHelper">
            <summary>
            This object features a number of methods that are useful in dealing with objects
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ObjectHelper.CreateObject(System.String,System.String)">
            <summary>
            Loads a named object from an assembly
            </summary>
            <param name="className">Fully qualified name of the class</param>
            <param name="assemblyName">Assembly name (preferrably the fully or partially qualified name, or the file name)</param>
            <returns>Newly instantiated object</returns>
            <example>SqlDataService oService = (SqlDataService)ObjectHelper.CreateObject("EPS.Data.SqlClient","SqlDataService")</example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ObjectHelper.SerializeToBinaryStream(System.Object)">
            <summary>
            Serializes an object to its binary state
            </summary>
            <param name="objectToSerialize">The object to serialize.</param>
            <returns>Stream of binary information for the object</returns>
            <remarks>
            For this to work, the provided object must be serializable.
            
            This method can be used as an extension method.
            </remarks>
            <example>
            using EPS.Utilities;
            // More code...
            var stream = customer.SerializeToBinaryStream();
            
            // Or
            
            var stream = EPS.Utilities.ObjectHelper.SerializeToBinaryStream(customer);
            </example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ObjectHelper.DeserializeFromBinaryStream(System.IO.Stream)">
            <summary>
            Deserializes an object from its state stored in a binary stream.
            </summary>
            <param name="stateStream">The state stream.</param>
            <returns>Object instance.</returns>
            <remarks>For this to work, the stream must contain a serialized object</remarks>
            <example>
            Customer customer = (Customer)EPS.Utilities.ObjectHelper.DeserializeFromBinaryStream(stream);
            </example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ObjectHelper.DeserializeFromBinary(System.IO.Stream)">
            <summary>
            Deserializes the stream to an object
            </summary>
            <param name="stateStream">The state stream.</param>
            <returns>Object instance</returns>
            <remarks>
            For this to work, the stream must contain a serialized object
            This is an extension method.
            </remarks>
            <example>
            using EPS.Utilities;
            // more code
            Customer customer = (Customer)stream.DeserializeFromBinary();
            </example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ObjectHelper.SerializeToBinaryArray(System.Object)">
            <summary>
            Serializes an object to its binary state
            </summary>
            <param name="objectToSerialize">The object to serialize.</param>
            <returns>
            Byte array of binary information for the object
            </returns>
            <remarks>
            For this to work, the provided object must be serializable.
            This method can be used as an extension method.
            </remarks>
            <example>
            using EPS.Utilities;
            // more code...
            byte[] serialized = customer.SerializeToBinaryArray();
            // or
            byte[] serialized = EPS.Utilities.ObjectHelper.SerializeToBinaryArray(customer);
            </example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ObjectHelper.SerializeToXmlStream(System.Object)">
            <summary>
            Serializes an object to its XML state
            </summary>
            <param name="objectToSerialize">The object to serialize.</param>
            <returns>
            XML stream representing the object's state
            </returns>
            <remarks>
            For this to work, the provided object must be serializable.
            This method can be used as an extension method.
            </remarks>
            <example>
            using EPS.Utilities;
            // more code
            Stream xmlStream = customer.SerializeToXmlStream();
            // or
            Stream xmlStream = EPS.Utilities.ObjectHelper.SerializeToXmlStream(customer);
            </example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ObjectHelper.SerializeToXmlString(System.Object)">
            <summary>
            Serializes an object to its XML state
            </summary>
            <param name="objectToSerialize">The object to serialize.</param>
            <returns>
            XML string representing the object's state
            </returns>
            <remarks>
            For this to work, the provided object must be serializable.
            This method can be used as an extension method.
            </remarks>
            <example>
            using EPS.Utilities;
            // more code
            string xml = customer.SerializeToXmlString();
            // or
            string xml = EPS.Utilities.ObjectHelper.SerializeToXmlString(customer);
            </example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ObjectHelper.SerializeToXmlDocument(System.Object)">
            <summary>
            Serializes an object to its XML state
            </summary>
            <param name="objectToSerialize">The object to serialize.</param>
            <returns>
            XML document representing the object's state
            </returns>
            <remarks>
            For this to work, the provided object must be serializable.
            This method can be used as an extension method.
            </remarks>
            <example>
            using EPS.Utilities;
            // more code
            XmlDocument xml = customer.SerializeToXmlDocument();
            // or
            XmlDocument xml = EPS.Utilities.ObjectHelper.SerializeToXmlDocument(customer);
            </example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ObjectHelper.DeserializeFromXmlStream(System.IO.Stream,System.Type)">
            <summary>
            Deserializes an object from its state stored in an xml stream.
            </summary>
            <param name="stateStream">The state stream.</param>
            <param name="expectedType">The expected interfaceType (which will be the returned interfaceType).</param>
            <returns>Object instance.</returns>
            <remarks>
            For this to work, the XML Stream must contain a seralized object
            </remarks>
            <example>
            Customer customer = (Customer)EPS.Utilities.ObjectHelper.DeserializeFromXmlStream(stream, typeof(Customer));
            </example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ObjectHelper.DeserializeFromXml(System.IO.Stream,System.Type)">
            <summary>
            Deserializes an object from its state stored in an xml stream.
            </summary>
            <param name="stateStream">The state stream.</param>
            <param name="expectedType">The expected interfaceType.</param>
            <returns>Object instance</returns>
            <remarks>
            For this to work, the XML Stream must contain a seralized object
            </remarks>
            <example>
            using EPS.Utilities;
            // more code
            Customer customer = (Customer)stream.DeserializeFromXmlStream(typeof(Customer));
            </example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ObjectHelper.SerializeToSoapStream(System.Object)">
            <summary>
            Serializes an object to its SOAP representation
            </summary>
            <param name="objectToSerialize">The object to serialize.</param>
            <returns>
            XML stream representing the object's state
            </returns>
            <remarks>
            For this to work, the provided object must be serializable.
            This method can be used as an extension method.
            </remarks>
            <example>
            using EPS.Utilities;
            // more code
            Stream stream = customer.SerializeToSoapStream();
            // or
            Stream stream = EPS.Utilities.ObjectHelper.SerializeToSoapStream(customer);
            </example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ObjectHelper.SerializeToSoapString(System.Object)">
            <summary>
            Serializes an object to its SOAP state
            </summary>
            <param name="objectToSerialize">The object to serialize.</param>
            <returns>
            XML string representing the object's state
            </returns>
            <remarks>
            For this to work, the provided object must be serializable.
            This method can be used as an extension method.
            </remarks>
            <example>
            using EPS.Utilities;
            // more code
            string state = customer.SerializeToSoapString();
            // or
            string state = EPS.Utilities.ObjectHelper.SerializeToSoapString(customer);
            </example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ObjectHelper.SerializeToSoapDocument(System.Object)">
            <summary>
            Serializes an object to its SOAP state
            </summary>
            <param name="objectToSerialize">The object to serialize.</param>
            <returns>
            XML document representing the object's state
            </returns>
            <remarks>
            For this to work, the provided object must be serializable.
            This method can be used as an extension method.
            </remarks>
            <example>
            using EPS.Utilities;
            // more code
            XmlDocument xml = customer.SerializeToSoapDocument();
            // or
            XmlDocument xml = EPS.Utilities.ObjectHelper.SerializeToSoapDocument(customer);
            </example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ObjectHelper.ValuesDiffer(System.Object,System.Object)">
            <summary>
            Compares the values of two objects and returns true if the values are different
            </summary>
            <param name="value1">The first value.</param>
            <param name="value2">The second value.</param>
            <returns>True if values DIFFER</returns>
            <example>
            object o1 = "Hello";
            object o2 = "World";
            object o3 = 25;
            ObjectHelper.ValuesDiffer(o1, o2); // returns true;
            ObjectHelper.ValuesDiffer(o1, o3); // returns true;
            </example>
            <remarks>
            This method has been created to be easily able to compare objects of unknown types.
            In particular, this is useful when comparing two fields in a DataSet.
            This method can even handle byte arrays.
            </remarks>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ObjectHelper.GetPropertyValue``1(System.Object,System.String)">
            <summary>Dynamically retrieves a property value from the specified object</summary>
            <typeparam name="TResult">The interfaceType of the result.</typeparam>
            <param name="valueObject">The value object.</param>
            <param name="path">Name of the property.</param>
            <returns>Property value or default value</returns>
            <remarks>
            The property must be a readable instance property.
            This method can be called as an extension method.
            </remarks>
            <example>
            using EPS.Utilities;
            // more code
            var customer = this.GetCustomerObject();
            string name = customer.GetPropertyValue&lt;string&gt;("LastName");
            </example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ObjectHelper.GetPropertyByPath(System.Object,System.String,System.Object@)">
            <summary>
            Returns property information based on the provided path (path can be a simple property name or a more complex path)
            </summary>
            <param name="valueObject">The value object.</param>
            <param name="path">The path.</param>
            <param name="parentObject">The parent object.</param>
            <returns>PropertyInfo.</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ObjectHelper.SetPropertyValue``1(System.Object,System.String,``0)">
            <summary>
            Dynamically retrieves a property value from the specified object
            </summary>
            <typeparam name="TValue">The interfaceType of the value that is to be set.</typeparam>
            <param name="valueObject">The value object.</param>
            <param name="path">Name of the property.</param>
            <param name="value">The value that is to be set.</param>
            <returns>True if the value was set successfully</returns>
            <remarks>
            The property must be a writable instance property.
            This method can be called as an extension method.
            </remarks>
            <example>
            using EPS.Utilities;
            // more code
            var customer = this.GetCustomerObject();
            customer.SetPropertyValue("LastName", "Smith");
            </example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ObjectHelper.InvokeMethod``1(System.Object,System.String,System.Object[])">
            <summary>
            Dynamically invokes the specified method on the defined object
            </summary>
            <typeparam name="TResult">The expected return interfaceType for the method</typeparam>
            <param name="valueObject">The value object (object that contains the method).</param>
            <param name="methodName">Name of the method.</param>
            <param name="parameters">The parameters.</param>
            <returns>The method's return value</returns>
            <remarks>
            The method must be an instance method
            This method can be called as an extension method.
            </remarks>
            <example>
            using EPS.Utilities;
            // more code
            var customer = this.GetCustomerObject();
            object[] parameters = { "John", "M.", "Smith" };
            string fullName = customer.InvokeMethod&lt;string&gt;("GetFullName", parameters);
            </example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ObjectHelper.GetAllMethodsForInterface(System.Type)">
            <summary>
            Returns all methods defined on an interface or interfaces it inherits from.
            </summary>
            <param name="interfaceType">The interface type.</param>
            <returns>IEnumerable&lt;MethodInfo&gt;.</returns>
        </member>
        <member name="T:CODE.Framework.Core.Utilities.ObjectInstantiationException">
            <summary>
            Exception thrown whenever object instantiation fails.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ObjectInstantiationException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ObjectInstantiationException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">Exception message</param>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ObjectInstantiationException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">Exception message</param>
            <param name="innerException">Inner exception</param>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ObjectInstantiationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Streaming context</param>
        </member>
        <member name="T:CODE.Framework.Core.Utilities.SecurityHelper">
            <summary>
            A simple encryption class that can be used to two-encode/decode strings and byte buffers
            with single method calls.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.SecurityHelper.EncryptBytes(System.Byte[],System.Byte[])">
            <summary>
            Encodes a stream of bytes using DES encryption with a pass key. 
            Lowest level method that handles all work.
            </summary>
            <param name="inputString">Byte array that represents the input string</param>
            <param name="encryptionKey">Encryption key used for the encryption</param>
            <returns>Encrypted bytes</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.SecurityHelper.EncryptBytes(System.String,System.Byte[])">
            <summary>
            Encrypts a string into bytes using DES encryption with a Passkey. 
            </summary>
            <param name="inputString">Input String</param>
            <param name="encryptionKey">Encryption Key</param>
            <returns>Encrypted bytes</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.SecurityHelper.EncryptString(System.String,System.Byte[])">
            <summary>
            Encrypts a string using Triple DES encryption with a two way encryption key.
            String is returned as Base64 encoded value rather than binary.
            </summary>
            <param name="inputString">Input string</param>
            <param name="encryptionKey">Encryption Key</param>
            <returns>Base64 encoded encrypted string</returns>
            <remarks>
            The key is expected to have a length of 24 bytes.
            This method can be used with an arbitrary key, but make sure
            you use the same key for encryption and decryption.
            </remarks>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.SecurityHelper.DecryptBytes(System.Byte[],System.Byte[])">
            <summary>
            Decrypts a Byte array from DES with an Encryption Key.
            </summary>
            <param name="decryptBuffer">Bytes to decrypt</param>
            <param name="encryptionKey">Encryption Key</param>
            <returns>Decrypted bytes</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.SecurityHelper.DecryptBytes(System.String,System.Byte[])">
            <summary>
            Decrypts a string
            </summary>
            <param name="decryptString">String to decrypt</param>
            <param name="encryptionKey">Encryption Key</param>
            <returns>Decrypted bytes</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.SecurityHelper.DecryptString(System.String,System.Byte[])">
            <summary>
            Decrypts a Base64 encoded string using DES encryption and a pass key that was used for 
            encryption.
            </summary>
            <param name="stringToDecrypt">String to decrypt</param>
            <param name="encryptionKey">Key</param>
            <returns>Decrypted string</returns>
            <remarks>
            The key is expected to have a length of 24 bytes.
            This method can be used with an arbitrary key, but make sure
            you use the same key for encryption and decryption.
            </remarks>
        </member>
        <member name="T:CODE.Framework.Core.Utilities.StreamHelper">
            <summary>
            This class can be used to perform common stream operations, such as converting a stream to a string
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.StreamHelper.ToString(System.IO.Stream)">
            <summary>
            Turns a stream into a string
            </summary>
            <param name="streamToConvert">Input stream</param>
            <returns>Output String</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.StreamHelper.ToArray(System.IO.Stream)">
            <summary>
            Turns a stream into a byte array
            </summary>
            <param name="streamToConvert">Input stream</param>
            <returns>Output array</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.StreamHelper.FromString(System.String)">
            <summary>
            Turns a string into a stream
            </summary>
            <param name="stringToConvert">Input string</param>
            <returns>Output stream</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.StreamHelper.FromArray(System.Byte[])">
            <summary>
            Turns a byte array into a stream
            </summary>
            <param name="arrayToConvert">The array to convert.</param>
            <returns>Output stream</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.StreamHelper.ToFile(System.IO.Stream,System.String)">
            <summary>
            Writes a stream to file
            </summary>
            <param name="stream">The stream.</param>
            <param name="fileName">Name of the file.</param>
            <returns>True if successful</returns>
            <remarks>Existing files will be overwritten.</remarks>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.StreamHelper.ToFile(System.IO.Stream,System.String,System.Boolean)">
            <summary>
            Writes a stream to file
            </summary>
            <param name="stream">The stream.</param>
            <param name="fileName">Name of the file.</param>
            <param name="overrideExisting">If set to <c>true</c> override existing file.</param>
            <returns>True if successful</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.StreamHelper.ToFile(System.IO.Stream,System.String,System.Boolean,System.Text.Encoding)">
            <summary>
            Writes a stream to file
            </summary>
            <param name="stream">The stream.</param>
            <param name="fileName">Name of the file.</param>
            <param name="overrideExisting">If set to <c>true</c> override existing file.</param>
            <param name="encoding">The file encoding.</param>
            <returns>True if successful</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.StreamHelper.FromFile(System.String)">
            <summary>
            Loads a stream from a file
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns>Stream</returns>
            <remarks>
            The returned stream is a memory stream that is not connected to the file.
            In other words: After this method completes, the file is closed and can be
            accessed by other means.
            </remarks>
        </member>
        <member name="T:CODE.Framework.Core.Utilities.StringHelper">
            <summary>
            This class provides a number of (static) methods that are useful when working with strings.
            Some of these methods have been migrated from the VFPToolkit class written by Kamal Patel.
            Special thanks go to Kamal. (www.KamalPatel.com)
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.StringHelper.Lower(System.String)">
            <summary>Returns a culture-neutral to-lower operation on the string.</summary>
            <param name="originalString">Original string</param>
            <returns>Lower-case string</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.StringHelper.Upper(System.String)">
            <summary>Returns a culture-neutral to-upper operation on the string.</summary>
            <param name="originalString">Original string</param>
            <returns>Upper-case string</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.StringHelper.ToString(System.Object)">
            <summary>Returns the string in a culture-neutral fashion</summary>
            <param name="value">Value to be turned into a string</param>
            <returns>String</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.StringHelper.ToStringSafe(System.Object)">
            <summary>Returns a string representation of the provided value. Returns an empty string if the value is null</summary>
            <param name="value">Value to be turned into a string</param>
            <returns>String</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.StringHelper.Compare(System.String,System.String)">
            <summary>Returns true if the two strings match.</summary>
            <param name="firstString">First string</param>
            <param name="secondString">Second string</param>
            <returns>True or False</returns>
            <remarks>The strings are trimmed and compared in a case-insensitive, culture neutral fashion.</remarks>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.StringHelper.Compare(System.String,System.String,System.Boolean)">
            <summary>Returns true if the two strings match.</summary>
            <param name="firstString">First string</param>
            <param name="secondString">Second string</param>
            <param name="ignoreCase">Should case (upper/lower) be ignored?</param>
            <returns>True or False</returns>
            <remarks>The strings are trimmed and compared in a case-insensitive, culture neutral fashion.</remarks>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.StringHelper.Proper(System.String)">
            <summary>Receives a string as a parameter and returns the string in Proper format (makes each letter after a space capital)</summary>
            <example>StringHelper.Proper("joe doe is a good man");	//returns "Joe Doe Is A Good Man"</example>
            <param name="originalString">String</param>
            <returns>Proper string</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.StringHelper.SmartProper(System.String)">
            <summary>
            This method returns strings in proper case.
            However, contrary to regular Proper() methods, 
            this method can be used to format names.
            For instance, "MacLeod" will remain "MacLeod",
            "macLeod" will be "MacLeod", "MACLEOD" will be turned into
            "Macleod". "macleod" will also be turned into "Macleod".
            </summary>
            <param name="originalString">String that is to be formatted</param>
            <returns>Properly formatted string</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.StringHelper.SpaceCamelCase(System.String)">
            <summary>This method takes a camel-case string (such as one defined by an enum) and returns is with a space before every upper-case letter.</summary>
            <example>StringHelper.SpaceCamelCase("CamelCaseWord"); // returns"Camel Case Word"</example>
            <param name="originalString">String</param>
            <returns>String with spaces</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.StringHelper.ToFile(System.String,System.String)">
            <summary>Receives a string and a file name as parameters and writes the contents of the string to that file</summary>
            <example>
            string text = "This is the line we want to insert in our file.";
            StringHelper.ToFile(text, @"c:\My Folders\MyFile.txt");
            </example>:
            <param name="expression">String to be written</param>
            <param name="fileName">File name the string is to be written to.</param>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.StringHelper.ToFile(System.String,System.String,System.Text.Encoding)">
            <summary>Receives a string and a file name as parameters and writes the contents of the string to that file</summary>
            <example>
            string text = "This is the line we want to insert in our file.";
            StringHelper.ToFile(text, "c:\\My Folders\\MyFile.txt");
            </example>
            <param name="expression">String to be written</param>
            <param name="fileName">File name the string is to be written to.</param>
            <param name="encoding">File encoding</param>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.StringHelper.FromFile(System.String)">
            <summary>Loads a file from disk and returns it as a string</summary>
            <param name="fileName">File to be loaded</param>
            <returns>String containing the file contents</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.StringHelper.Base64Encode(System.String)">
            <summary>This method takes any regular string, and returns its base64 encoded representation</summary>
            <param name="original">Original String</param>
            <returns>Base64 encoded string</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.StringHelper.Base64Decode(System.String)">
            <summary>Takes a base64 encoded string and converts it into a regular string</summary>
            <param name="encodedString">Base64 encoded string</param>
            <returns>Decoded string</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.StringHelper.At(System.String,System.String)">
            <summary>Receives two strings as parameters and searches for one string within another. If found, returns the beginning numeric position otherwise returns 0</summary>
            <example>StringHelper.At("D", "Joe Doe");	//returns 5</example>
            <param name="searchFor">String to search for</param>
            <param name="searchIn">String to search in</param>
            <returns>Position</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.StringHelper.At(System.String,System.String,System.Int32)">
            <summary>
            Receives two strings and an occurrence position (1st, 2nd etc) as parameters and 
            searches for one string within another for that position. 
            If found, returns the beginning numeric position otherwise returns 0
            </summary>
            <example>
            StringHelper.At("o", "Joe Doe", 1);	//returns 2
            StringHelper.At("o", "Joe Doe", 2);	//returns 6
            </example>
            <param name="searchFor">String to search for</param>
            <param name="searchIn">String to search in</param>
            <param name="occurrence">The occurrence of the string</param>
            <returns>Position</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.StringHelper.Asc(System.Char)">
            <summary>Receives a character as a parameter and returns its ANSI code</summary>
            <example>Asc('#'); //returns 35</example>
            <param name="character">Character</param>
            <returns>ASCII value</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.StringHelper.Chr(System.Int32)">
            <summary>Receives an integer ANSI code and returns a character associated with it</summary>
            <example>StringHelper.Chr(35); //returns '#'</example>
            <param name="ansiCode">Character Code</param>
            <returns>Char that corresponds with the ascii code</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.StringHelper.GetWordCount(System.String)">
            <summary>Receives a string as a parameter and counts the number of words in that string</summary>
            <example>
            string lcString = "Joe Doe is a good man";
            StringHelper.GetWordCount(lcString); // returns 6
            </example>
            <param name="sourceString">String</param>
            <returns>Word Count</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.StringHelper.GetWordNumb(System.String,System.Int32)">
            <summary>Based on the position specified, returns a word from a string. Receives a string as a parameter and counts the number of words in that string.</summary>
            <example>
            string lcString = "Joe Doe is a good man";
            StringHelper.GetWordNumber(lcString, 5); // returns "good"
            </example>
            <param name="sourceString">String</param>
            <param name="wordPosition">Word Position</param>
            <returns>Word number</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.StringHelper.GetWordNumber(System.String,System.Int32)">
            <summary>Based on the position specified, returns a word from a string. Receives a string as a parameter and counts the number of words in that string.</summary>
            <example>
            string lcString = "Joe Doe is a good man";
            StringHelper.GetWordNumber(lcString, 5); // returns "good"
            </example>
            <param name="sourceString">String</param>
            <param name="wordPosition">Word Position</param>
            <returns>Word number</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.StringHelper.IsAlpha(System.String)">
            <summary>Returns a bool indicating if the first character in a string is an alphabet or not</summary>
            <example>StringHelper.IsAlpha("Joe Doe"); // returns true</example>
            <param name="expression">Expression</param>
            <returns>True or False depending on whether the string only had alphanumeric chars</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.StringHelper.Occurs(System.Char,System.String)">
            <summary>Returns the number of occurrences of a character within a string</summary>
            <example>StringHelper.Occurs('o', "Joe Doe"); // returns 2</example>
            <param name="character">Search Character</param>
            <param name="expression">Expression</param>
            <returns>Number of occurrences</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.StringHelper.Occurs(System.String,System.String)">
            <summary>Returns the number of occurrences of one string within another string</summary>
            <example>
            StringHelper.Occurs("oe", "Joe Doe"); //returns 2
            StringHelper.Occurs("Joe", "Joe Doe"); //returns 1
            </example>
            <param name="searchString">Search String</param>
            <param name="stringSearched">Expression</param>
            <returns>Number of occurrences</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.StringHelper.Replicate(System.String,System.Int32)">
            <summary>Receives a string expression and a numeric value indicating number of time and replicates that string for the specified number of times.</summary>
            <example>StringHelper.Replicate("Joe", 5); // returns JoeJoeJoeJoeJoe</example>
            <param name="expression">Expression</param>
            <param name="times">Number of times the string is to be replicated</param>
            <returns>New string</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.StringHelper.SubstringSafe(System.String,System.Int32,System.Int32)">
            <summary>Overloaded method for SubStr() that receives starting position and length</summary>
            <param name="expression">String expression</param>
            <param name="startIndex">Start Index</param>
            <param name="length">Length</param>
            <returns>Substring</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.StringHelper.SubStr(System.String,System.Int32,System.Int32)">
            <summary>Overloaded method for SubStr() that receives starting position and length</summary>
            <param name="expression">Expression</param>
            <param name="startPosition">Start Position</param>
            <param name="length">Length</param>
            <returns>Substring</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.StringHelper.AtLine(System.String,System.String)">
            <summary>Receives a string and converts it to an integer</summary>
            <example>StringHelper.AtLine("Is", "Is Life Beautiful? \r\n It sure is"); // returns 1</example>
            <param name="searchExpression">Search Expression</param>
            <param name="expressionSearched">Expression Searched</param>
            <returns>Line number</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.StringHelper.IsDigit(System.String)">
            <summary>Receives a string as a parameter and returns a bool indicating if the left most character in the string is a valid digit.</summary>
            <example>if(StringHelper.IsDigit("1Kamal")){...}	//returns true</example>
            <param name="sourceString">Expression</param>
            <returns>True or False</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.StringHelper.JustPath(System.String)">
            <summary>Takes a fully qualified file name, and returns just the path</summary>
            <param name="path">File name with path</param>
            <returns>Just the path as a string</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.StringHelper.JustFileName(System.String)">
            <summary>Returns just the file name part of a full path</summary>
            <param name="path">The full path to the file</param>
            <returns>File name</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.StringHelper.AddBS(System.String)">
            <summary>Makes sure the secified path ends with a back-slash</summary>
            <param name="path">Path</param>
            <returns>Path with BS</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.StringHelper.ArrayContainsString(System.String[],System.String)">
            <summary>Returns true if the array contains the string we are looking for</summary>
            <param name="hostArray">The host array.</param>
            <param name="searchText">The search string.</param>
            <returns>True or false</returns>
            <example>
            string[] testArray = new string[] { "One", "Two", "Three" };
            bool result1 = StringHelper.ArrayContainsString(testArray, "one", true); // returns true
            bool result2 = StringHelper.ArrayContainsString(testArray, "one"); // returns false
            bool result3 = StringHelper.ArrayContainsString(testArray, "One"); // returns true
            bool result4 = StringHelper.ArrayContainsString(testArray, "Four"); // returns false
            </example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.StringHelper.ArrayContainsString(System.String[],System.String,System.Boolean)">
            <summary>Returns true if the array contains the string we are looking for</summary>
            <param name="hostArray">The host array.</param>
            <param name="searchText">The search string.</param>
            <param name="ignoreCase">if set to <c>true</c> [ignore case].</param>
            <returns>True or false</returns>
            <example>
            string[] testArray = new string[] { "One", "Two", "Three" };
            bool result1 = StringHelper.ArrayContainsString(testArray, "one", true); // returns true
            bool result2 = StringHelper.ArrayContainsString(testArray, "one"); // returns false
            bool result3 = StringHelper.ArrayContainsString(testArray, "One"); // returns true
            bool result4 = StringHelper.ArrayContainsString(testArray, "Four"); // returns false
            </example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.StringHelper.TryIntParse(System.String,System.Int32)">
            <summary>Tries to parse a string value as an integer. If the parse fails, the provided default value will be inserted</summary>
            <param name="value">The value.</param>
            <param name="failedDefault">The failed default.</param>
            <returns></returns>
            <example>
            string value = "1";
            int valueInt = StringHelper.TryIntParse(value, -1);
            </example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.StringHelper.TryGuidParse(System.String,System.Guid)">
            <summary>Tries to parse a string value as an Guid. If the parse fails, the provided default value will be inserted</summary>
            <param name="value">The value.</param>
            <param name="failedDefault">The failed default.</param>
            <returns></returns>
            <example>
            string value = "xxx";
            Guid valueGuid = StringHelper.TryGuidParse(value, Guid.Empty);
            </example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.StringHelper.TryGuidParse(System.String)">
            <summary>Tries to parse a string value as an Guid. If the parse fails, Guid.Empty will be returned</summary>
            <param name="value">The value.</param>
            <returns></returns>
            <example>
            string value = "xxx";
            Guid valueGuid = StringHelper.TryGuidParse(value);
            </example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.StringHelper.TryBoolParse(System.String,System.Boolean)">
            <summary>Tries to parse a string value as a boolean.</summary>
            <param name="value">The value.</param>
            <param name="failedDefault">Value returned if the string cannot be converted to a boolean.</param>
            <returns></returns>
            <example>
            string value = "xxx";
            bool valueBool = StringHelper.TryBoolParse(value);
            </example>
        </member>
        <member name="T:CODE.Framework.Core.Utilities.TransparentProxyGenerator">
            <summary>
            Class TransparentProxyGenerator.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.TransparentProxyGenerator.GetProxy``1(CODE.Framework.Core.Utilities.IProxyHandler)">
            <summary>
            Returns a proxy for the provided interface
            </summary>
            <typeparam name="TProxy">Type to be proxied</typeparam>
            <param name="handler">The actual handler object that handles all the calls to the proxy.</param>
            <returns>Proxy object</returns>
            <exception cref="T:System.ArgumentException">T needs to be an interface</exception>
        </member>
        <member name="T:CODE.Framework.Core.Utilities.IProxyHandler">
            <summary>
            Interface for handler objects that can be used to provide transparent proxy functionality
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.IProxyHandler.OnMethod(System.Reflection.MethodInfo,System.Object[])">
            <summary>
            This method is called when any method on a proxied object is invoked.
            </summary>
            <param name="method">Information about the method being called.</param>
            <param name="args">The arguments passed to the method.</param>
            <returns>Result value from the proxy call</returns>
        </member>
        <member name="T:CODE.Framework.Core.Utilities.XmlHelper">
            <summary>
            Provides useful XML helper functionality
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.XmlHelper.Format(System.String)">
            <summary>
            Returns a formatted version of the XML string (line breaks, indentations, ...)
            </summary>
            <param name="xml">The raw XML.</param>
            <returns>Formatted XML string</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.XmlHelper.Format(System.Xml.XmlDocument)">
            <summary>
            Returns a formatted version of the XML string (line breaks, indentations, ...)
            </summary>
            <param name="xml">The original XML Document.</param>
            <returns>Formatted XML string</returns>
        </member>
        <member name="T:CODE.Framework.Core.Utilities.ZipFile">
            <summary>
            ZIP File handling class
            </summary>
            <example>
            // Open existing ZIP file
            var zip = ZipFile.Read(@"c:\test.zip");
            zip.ExtractAll(@"c:\ExtractFolder");
            
            // Create new ZIP file
            var zip = new ZipFile("MyFile.zip");
            zip.AddFile(@"c:\Markus.jpg");
            zip.AddBytes("This is a test file".ToByteArraySafe(), "ReadMe.txt");
            zip.Save();
            </example>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.ZipFile.Name">
            <summary>
            Name of the ZIP File
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.ZipFile.TrimVolumeFromFullyQualifiedPaths">
            <summary>Indicates whether the volume should be trimmed from fully qualified paths</summary>
            <value><c>true</c> if [trim volume from fully qualified paths]; otherwise, <c>false</c>.</value>
            <remarks>
            when this is set, we trim the volume (eg C:) off any fully-qualified pathname, 
            before writing the ZipEntry into the ZipFile. 
            We default this to true.  This allows Windows Explorer to read the zip archives properly. 
            </remarks>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.ZipFile.ReadStream">
            <summary>
            Read stream used internally by this class
            </summary>
            <value>The read stream.</value>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.ZipFile._readStream">
            <summary>
            Internal field for the read stream
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.ZipFile.WriteStream">
            <summary>
            Write stream used internally by this class
            </summary>
            <value>The write stream.</value>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.ZipFile._writeStream">
            <summary>
            Internal field for the write stream
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ZipFile.InitializeDefaultValues">
            <summary>
            Initializes the default values of properties inside this class
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ZipFile.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Utilities.ZipFile"/> class.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ZipFile.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Utilities.ZipFile"/> class.
            </summary>
            <param name="newZipFileName">Name of the new ZIP file.</param>
            <example>
            var newZip = new ZipFile("MyNewZipFile.zip");
            </example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ZipFile.AddItem(System.String)">
            <summary>
            Adds a file or folder to the ZIP archive
            </summary>
            <param name="fileOrDirectoryName">Name of the file or directory.</param>
            <example>
            var newZip = new ZipFile("MyNewZipFile.zip");
            newZip.AddItem("C:\DirectoryToZip");
            newZip.AddItem("C:\Folder\Test.exe");
            </example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ZipFile.AddBytes(System.Byte[],System.String,System.DateTime)">
            <summary>
            Adds raw data to the ZIP archive as a file.
            </summary>
            <param name="bytesToCompress">Data/ file bytes</param>
            <param name="fileName">Name of the file.</param>
            <param name="fileWriteTime">The file write time.</param>
            <returns>ZIP Entry</returns>
            <example>
            var newZip = new ZipFile("MyNewZipFile.zip");
            newZip.AddBytes("Hello World".ToByteArraySafe(), "Test.txt", DateTime.Now);
            </example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ZipFile.AddBytes(System.Byte[],System.String)">
            <summary>
            Adds raw data to the ZIP archive as a file.
            </summary>
            <param name="bytesToCompress">Data/ file bytes</param>
            <param name="fileName">Name of the file.</param>
            <returns>ZIP Entry</returns>
            <example>
            var newZip = new ZipFile("MyNewZipFile.zip");
            newZip.AddBytes("Hello World".ToByteArraySafe(), "Test.txt");
            </example>
            <remarks>Current date time is assumed as the file date.</remarks>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ZipFile.AddFile(System.String)">
            <summary>
            Adds the file to the ZIP archive.
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns></returns>
            <example>
            var newZip = new ZipFile("MyNewZipFile.zip");
            newZip.AddFile("C:\Folder\Test.exe");
            </example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ZipFile.AddDirectory(System.String)">
            <summary>
            Adds a whole Directory/Folder to the ZIP archive
            </summary>
            <param name="directory">The directory.</param>
            <example>
            var newZip = new ZipFile("MyNewZipFile.zip");
            newZip.AddDirectory("C:\Folder");
            </example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ZipFile.SaveToStream">
            <summary>
            Saves the ZIP archive to a stream
            </summary>
            <returns>Stream</returns>
            <example>
            var newZip = new ZipFile("MyNewZipFile.zip");
            newZip.AddDirectory("C:\Folder");
            Stream result = newZip.SaveToStream();
            </example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ZipFile.Save">
            <summary>
            Saves the ZIP file
            </summary>
            <example>
            var newZip = new ZipFile("MyNewZipFile.zip");
            newZip.AddDirectory("C:\Folder");
            newZip.Save();
            </example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ZipFile.WriteCentralDirectoryStructure">
            <summary>
            Writes the central directory structure.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ZipFile.WriteCentralDirectoryFooter(System.Int64,System.Int64)">
            <summary>
            Writes the central directory footer.
            </summary>
            <param name="startOfCentralDirectory">The start of central directory.</param>
            <param name="endOfCentralDirectory">The end of central directory.</param>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ZipFile.Read(System.String)">
            <summary>
            This will throw if the zipfile does not exist.
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns>ZIP File</returns>
            <example>
            var archive = ZipFile.Read("c:\Downloads\Test.zip");
            </example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ZipFile.Read(System.Byte[],System.String)">
            <summary>
            Reads a ZIP File from in-memory bytes
            </summary>
            <param name="zipBytes">The zip bytes.</param>
            <param name="fileName">Name of the file.</param>
            <returns></returns>
            <example>
            var zipFile = ZipFile.Read(data, "Test.zip");
            </example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ZipFile.Read(System.Byte[])">
            <summary>
            Reads a ZIP File from in-memory bytes
            </summary>
            <param name="zipBytes">The zip bytes.</param>
            <returns></returns>
            <example>
            var zipFile = ZipFile.Read(data);
            </example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ZipFile.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ZipFile.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ZipFile.ExtractAll(System.String)">
            <summary>
            Extracts all contents of the ZIP File to the specified path
            </summary>
            <param name="path">The path.</param>
            <example>
            var archive = ZipFile.Read("c:\Downloads\Test.zip");
            archive.ExtractAll("c:\Downloads\Extract");
            </example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ZipFile.Extract(System.String)">
            <summary>
            Extracts the specified file from the ZIP archive
            </summary>
            <param name="fileName">Name of the file within the archive.</param>
            <example>
            var zipFile = ZipFile.Read("Photos.zip");
            zipFile.Extract("Markus.jpg");
            </example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ZipFile.Extract(System.String,System.IO.Stream)">
            <summary>
            Extracts the specified file name into the extract stream.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="extractStream">The extract stream.</param>
            var zipFile = ZipFile.Read("Photos.zip");
            var stream = new MemoryStream();
            zipFile.Extract("Markus.jpg", stream);
        </member>
        <member name="P:CODE.Framework.Core.Utilities.ZipFile.Item(System.String)">
            <summary>
            Gets the ZIP file corresponding with the provided file name
            </summary>
            <value></value>
            <example>
            var zipFile = ZipFile.Read("Photos.zip");
            var photo = zipFile["Markus.jpg"];
            </example>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ZipFile.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="T:CODE.Framework.Core.Utilities.ZipFile"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ZipFile.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ZipFile.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposeManagedResources"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.ZipFile._disposed">
            <summary>
            Indicator whether or not the dispose ran (used internally)
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.ZipFile._entries">
            <summary>
            List of ZIP entries (used internally)
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.ZipFile._directoryEntries">
            <summary>
            List of Directory entries (used internally)
            </summary>
        </member>
        <member name="T:CODE.Framework.Core.Utilities.ZipEntry">
            <summary>
            Represents a single entry (file) within a ZIP archive
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.ZipEntry.ZipEntrySignature">
            <summary>
            ZIP Entry Signature
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.ZipEntry.ZipEntryDataDescriptorSignature">
            <summary>
            ZIP Entry Data Descriptor Signature
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.ZipEntry.LastModified">
            <summary>
            Gets or sets the last modified date.
            </summary>
            <value>The last modified.</value>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.ZipEntry.FileName">
            <summary>
            Gets or sets the name of the file.
            </summary>
            <value>The name of the file.</value>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.ZipEntry.BytesToCompres">
            <summary>
            Gets or sets the bytes to compres.
            </summary>
            <value>The bytes to compres.</value>
            <remarks>
            If this is set, this array is used, rather than a file that needs to be opened
            </remarks>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.ZipEntry.DirectoryNameOverride">
            <summary>
            Gets or sets the directory name override.
            </summary>
            <value>The directory name override.</value>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.ZipEntry.CompressedFileName">
            <summary>
            Gets the name of the compressed file.
            </summary>
            <value>The name of the compressed file.</value>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.ZipEntry.VersionNeeded">
            <summary>
            Gets or sets the version needed.
            </summary>
            <value>The version needed.</value>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.ZipEntry.BitField">
            <summary>
            Gets or sets the bit field.
            </summary>
            <value>The bit field.</value>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.ZipEntry.CompressionMethod">
            <summary>
            Gets or sets the compression method.
            </summary>
            <value>The compression method.</value>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.ZipEntry.CompressedSize">
            <summary>
            Gets or sets the size of the compressed.
            </summary>
            <value>The size of the compressed.</value>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.ZipEntry.UncompressedSize">
            <summary>
            Gets or sets the size of the uncompressed.
            </summary>
            <value>The size of the uncompressed.</value>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.ZipEntry.CompressionRatio">
            <summary>
            Gets the compression ratio.
            </summary>
            <value>The compression ratio.</value>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ZipEntry.SignatureIsNotValid(System.Int32)">
            <summary>
            Returns false if the signature is not a valid ZIP entry signature
            </summary>
            <param name="signature">The signature.</param>
            <returns></returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ZipEntry.Read(System.IO.Stream)">
            <summary>
            Reads the entry from the stream
            </summary>
            <param name="stream">The stream.</param>
            <returns></returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ZipEntry.Create(System.String)">
            <summary>
            Creates a ZIP entry for the specified file name
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns></returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ZipEntry.Create(System.Byte[],System.String,System.DateTime)">
            <summary>
            Creates the specified bytes to compress.
            </summary>
            <param name="bytesToCompress">The bytes to compress.</param>
            <param name="fileName">Name of the file.</param>
            <param name="fileDate">The file date.</param>
            <returns></returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ZipEntry.Extract">
            <summary>
            Extracts the current ZIP file entry
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ZipEntry.Extract(System.IO.Stream)">
            <summary>
            Extracts the current ZIP file entry to the provided stream
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ZipEntry.Extract(System.String)">
            <summary>
            Extracts to the specified base directory.
            </summary>
            <param name="baseDirectory">The base directory.</param>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ZipEntry.Extract(System.String,System.IO.Stream)">
            <summary>
            Extracts to the specified base directory or stream.
            </summary>
            <param name="baseDirectory">The base directory.</param>
            <param name="stream">The stream.</param>
            <remarks>
            pass in either baseDirectory or stream, but not both. 
            In other words, you can extract to a stream or to a directory, but not both!
            </remarks>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ZipEntry.WriteCentralDirectoryEntry(System.IO.Stream)">
            <summary>
            Writes the central directory entry to the provided stream.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ZipEntry.WriteHeader(System.IO.Stream,System.Byte[])">
            <summary>
            Writes the header to the provided stream
            </summary>
            <param name="stream">The stream.</param>
            <param name="bytes">The bytes.</param>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ZipEntry.Write(System.IO.Stream)">
            <summary>
            Writes the specified out stream.
            </summary>
            <param name="outStream">The out stream.</param>
        </member>
        <member name="T:CODE.Framework.Core.Utilities.ZipDirEntry">
            <summary>
            ZIP directory entry
            </summary>
        </member>
        <member name="F:CODE.Framework.Core.Utilities.ZipDirEntry.ZipDirectoryEntrySignature">
            <summary>
            ZIP directory entry signature
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ZipDirEntry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Utilities.ZipDirEntry"/> class.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.ZipDirEntry.LastModified">
            <summary>
            Gets or sets the last modified date.
            </summary>
            <value>The last modified.</value>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.ZipDirEntry.FileName">
            <summary>
            Gets or sets the name of the file.
            </summary>
            <value>The name of the file.</value>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.ZipDirEntry.Comment">
            <summary>
            Gets or sets the comment.
            </summary>
            <value>The comment.</value>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.ZipDirEntry.VersionMadeBy">
            <summary>
            Gets or sets the version made by.
            </summary>
            <value>The version made by.</value>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.ZipDirEntry.VersionNeeded">
            <summary>
            Gets or sets the version needed.
            </summary>
            <value>The version needed.</value>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.ZipDirEntry.CompressionMethod">
            <summary>
            Gets or sets the compression method.
            </summary>
            <value>The compression method.</value>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.ZipDirEntry.CompressedSize">
            <summary>
            Gets or sets the size of the compressed.
            </summary>
            <value>The size of the compressed.</value>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.ZipDirEntry.UncompressedSize">
            <summary>
            Gets or sets the size of the uncompressed.
            </summary>
            <value>The size of the uncompressed.</value>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.ZipDirEntry.CompressionRatio">
            <summary>
            Gets the compression ratio.
            </summary>
            <value>The compression ratio.</value>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ZipDirEntry.#ctor(CODE.Framework.Core.Utilities.ZipEntry)">
            <summary>
            Initializes a new instance of the <see cref="T:CODE.Framework.Core.Utilities.ZipDirEntry"/> class.
            </summary>
            <param name="zipEntry">The zip entry.</param>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ZipDirEntry.Read(System.IO.Stream)">
            <summary>
            Reads the specified entry stream.
            </summary>
            <param name="entryStream">The entry stream.</param>
            <returns></returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.ZipDirEntry.SignatureIsNotValid(System.Int32)">
            <summary>
            Returns false if the directory signature is not a valid ZIP directory signature
            </summary>
            <param name="signature">The signature.</param>
            <returns></returns>
        </member>
        <member name="T:CODE.Framework.Core.Utilities.SharedZipFunctionality">
            <summary>
            Shared functionality
            </summary>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.SharedZipFunctionality.StringFromBuffer(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Returns a string of specified location and length from the buffer.
            </summary>
            <param name="buf">The buf.</param>
            <param name="start">The start.</param>
            <param name="maxLength">Length of the max.</param>
            <returns></returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.SharedZipFunctionality.ReadSignature(System.IO.Stream)">
            <summary>
            Reads the signature from the provided stream.
            </summary>
            <param name="signatureStream">The signature stream.</param>
            <returns></returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.SharedZipFunctionality.FindSignature(System.IO.Stream,System.Int32)">
            <summary>
            Finds the signature in the provided stream.
            </summary>
            <param name="signatureStream">The signature stream.</param>
            <param name="signatureToFind">The signature to find.</param>
            <returns></returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.SharedZipFunctionality.PackedToDateTime(System.Int32)">
            <summary>
            Turns a packed date time into a .NET date time
            </summary>
            <param name="packedDateTime">The packed date time.</param>
            <returns></returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.SharedZipFunctionality.DateTimeToPacked(System.DateTime)">
            <summary>
            Turns a .NET date time into a packed date time
            </summary>
            <param name="time">The time.</param>
            <returns></returns>
        </member>
        <member name="T:CODE.Framework.Core.Utilities.CRC32">
            <summary>
            Calculates a 32bit Cyclic Redundancy Checksum (CRC) using the
            same polynomial used by Zip.
            </summary>
        </member>
        <member name="P:CODE.Framework.Core.Utilities.CRC32.TotalBytesRead">
            <summary>
            Gets the total bytes read.
            </summary>
            <value>The total bytes read.</value>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.CRC32.GetCrc32(System.IO.Stream)">
            <summary>
            Returns the CRC32 for the specified stream.
            </summary>
            <param name="input">The stream over which to calculate the CRC32</param>
            <returns>the CRC32 calculation</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.CRC32.GetCrc32AndCopy(System.IO.Stream,System.IO.Stream)">
            <summary>
            Returns the CRC32 for the specified stream, and writes the input into the output stream.
            </summary>
            <param name="input">The stream over which to calculate the CRC32</param>
            <param name="output">The stream into which to deflate the input</param>
            <returns>the CRC32 calculation</returns>
        </member>
        <member name="M:CODE.Framework.Core.Utilities.CRC32.#ctor">
            <summary>
            Construct an instance of the CRC32 class, pre-initialising the table
            for speed of lookup.
            </summary>
        </member>
    </members>
</doc>
