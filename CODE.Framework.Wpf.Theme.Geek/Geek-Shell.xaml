<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:mvvm="clr-namespace:CODE.Framework.Wpf.Mvvm;assembly=CODE.Framework.Wpf.Mvvm"
                    xmlns:controls="clr-namespace:CODE.Framework.Wpf.Controls;assembly=CODE.Framework.Wpf"
                    xmlns:controls1="clr-namespace:CODE.Framework.Wpf.Theme.Geek.Controls">

    <Style TargetType="Window" x:Key="CODE.Framework.Wpf.Mvvm.Shell-TopLevelWindowStyle">
        <Setter Property="Background" Value="{DynamicResource CODE.Framework-Application-BackgroundBrush2}" />
        <Setter Property="ShowInTaskbar" Value="True" />
        <Setter Property="SizeToContent"  Value="WidthAndHeight" />
        <Setter Property="ResizeMode"  Value="NoResize" />
        <Setter Property="mvvm:Closable.RaiseClosingEvents" Value="True" />
        <Setter Property="controls:WindowEx.WindowStartupLocationStylable" Value="CenterScreen"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Window">
                    <Grid Background="{TemplateBinding Background}" Margin="-5">
                        <Grid Margin="0" controls:GridEx.RowHeights="Auto,Auto">
                            <Border Background="{DynamicResource CODE.Framework-Application-BackgroundBrush1}">
                                <ContentPresenter Margin="20,20,20,15" />
                            </Border>
                            <mvvm:ActionGrid Grid.Row="1" Model="{Binding}" Margin="15">
                                <ItemsControl ItemsSource="{Binding Actions}" HorizontalAlignment="Right">
                                    <ItemsControl.ItemTemplate>
                                        <DataTemplate>
                                            <Button FontSize="{DynamicResource FontSize-Normal}" 
                                                    Content="{Binding Caption}" Command="{Binding}" 
                                                    IsDefault="{Binding IsDefault, Mode=OneWay}" IsCancel="{Binding IsCancel, Mode=OneWay}"
                                                    Margin="5,0,0,0" Padding="7,3" />
                                        </DataTemplate>
                                    </ItemsControl.ItemTemplate>
                                    <ItemsControl.ItemsPanel>
                                        <ItemsPanelTemplate>
                                            <StackPanel Orientation="Horizontal" />
                                        </ItemsPanelTemplate>
                                    </ItemsControl.ItemsPanel>
                                </ItemsControl>
                            </mvvm:ActionGrid>
                        </Grid>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="Window" x:Key="CODE.Framework.Wpf.Mvvm.Shell-TopLevelMessageBoxWindowStyle">
        <Setter Property="Background" Value="{DynamicResource CODE.Framework-Application-BackgroundBrush1}" />
        <Setter Property="ShowInTaskbar" Value="True" />
        <Setter Property="SizeToContent"  Value="WidthAndHeight" />
        <Setter Property="ResizeMode" Value="NoResize" />
        <Setter Property="controls:WindowEx.WindowStartupLocationStylable" Value="CenterOwner"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Window">
                    <Grid Background="{TemplateBinding Background}" Margin="-5" MaxWidth="1000" MaxHeight="700">
                        <Grid Margin="0" controls:GridEx.RowHeights="Auto,Auto">
                            <Border Background="{DynamicResource CODE.Framework-Application-BackgroundBrush1}">
                                <ContentPresenter Margin="20,20,20,15" />
                            </Border>
                            <mvvm:ActionGrid Grid.Row="1" Model="{Binding}" Margin="15">
                                <ItemsControl ItemsSource="{Binding Actions}" HorizontalAlignment="Right" Focusable="False">
                                    <ItemsControl.ItemTemplate>
                                        <DataTemplate>
                                            <Button FontSize="{DynamicResource FontSize-Normal}" 
                                                    Content="{Binding Caption}" Command="{Binding}" 
                                                    IsDefault="{Binding IsDefault, Mode=OneWay}" IsCancel="{Binding IsCancel, Mode=OneWay}"
                                                    Margin="5,0,0,0" Padding="7,3" MinWidth="75" />
                                        </DataTemplate>
                                    </ItemsControl.ItemTemplate>
                                    <ItemsControl.ItemsPanel>
                                        <ItemsPanelTemplate>
                                            <StackPanel Orientation="Horizontal" />
                                        </ItemsPanelTemplate>
                                    </ItemsControl.ItemsPanel>
                                </ItemsControl>
                            </mvvm:ActionGrid>
                        </Grid>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="mvvm:Shell" x:Key="CODE.Framework.Wpf.Mvvm.Shell-Style">
        <Setter Property="Background" Value="{DynamicResource CODE.Framework-Application-BackgroundBrush2}" />
        <Setter Property="controls:WindowEx.IsBorderless" Value="True" />
        <Setter Property="controls:WindowEx.DynamicIcon" Value="/Images/Application.png" />
        <Setter Property="controls:WindowEx.HeaderHeight" Value="26" />
        <Setter Property="controls:WindowEx.AutoWindowDragEnabled" Value="True" />
        <Setter Property="controls:WindowEx.AutoWindowMaximizeEnabled" Value="True" />
        <Setter Property="controls:WindowEx.AutoWindowResizingEnabled" Value="True"/>
        <Setter Property="MaximumNotificationCount" Value="250"/>
        <Setter Property="NotificationTimeout" Value="24:0:0"/>
        <Setter Property="NotificationSort" Value="OldestFirst"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="mvvm:Shell">
                    <Grid Background="{TemplateBinding Background}" controls:GridEx.RowHeights="30,Auto,Auto,*,Auto,23">
                        <Border BorderBrush="{DynamicResource CODE.Framework-Application-ThemeBrush2}" BorderThickness="1" Grid.RowSpan="6" Panel.ZIndex="10001" />
                        <Border Background="{DynamicResource CODE.Framework-Application-BackgroundBrush3}" Grid.Row="3" Grid.RowSpan="3" />
                        <Grid controls:GridEx.ColumnWidths="Auto,*,Auto" HorizontalAlignment="Stretch">
                            <Image Source="{TemplateBinding Icon}" Stretch="Uniform" Height="24" Width="24" Margin="8,4,4,4"/>
                            <TextBlock VerticalAlignment="Center" HorizontalAlignment="Left" TextAlignment="Left" 
                                       x:Name="windowTitle" Text="{TemplateBinding Title}" Grid.Column="1" Margin="5"
                                       FontFamily="{DynamicResource DefaultFont}" FontSize="{DynamicResource FontSize-Large}"
                                       Foreground="{DynamicResource CODE.Framework-Application-ForegroundBrush1}"/>
                            <StackPanel Orientation="Horizontal" HorizontalAlignment="Right" VerticalAlignment="Top" Height="22" Margin="0,3,1,0" Grid.Column="2">
                                <controls:MinimizeButton/>
                                <controls:ToggleMaximizeButton/>
                                <controls:CloseButton/>
                            </StackPanel>
                        </Grid>
                        <mvvm:ViewActionMenu Model="{Binding}" SelectedView="{Binding Path=SelectedItem, ElementName=OpenViews, Mode=OneWay}" Grid.Row="1" ForceTopLevelMenuItemsUpperCase="False" />
                        <mvvm:ViewActionToolbar Model="{Binding}" SelectedView="{Binding Path=SelectedItem, ElementName=OpenViews, Mode=OneWay}" Grid.Row="2" x:Name="toolbar" Margin="7,2,2,2" />
                        <mvvm:ViewHostTabControl x:Name="OpenViews" Grid.Row="3" Margin="2,4,2,2"
                                                 ItemsSource="{TemplateBinding NormalViews}"
                                                 SelectedIndex="{Binding SelectedNormalView, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"
                                                 Style="{DynamicResource CODE.Framework.Wpf.Mvvm.Shell-NormalViewsHost}"/>
                        <Grid VerticalAlignment="Stretch" HorizontalAlignment="Stretch" Margin="4" x:Name="notifications" Grid.Row="4" Height="155" controls:GridEx.RowHeights="Auto,*" >
                            <Grid Background="{DynamicResource CODE.Framework-Application-ThemeBrush3}" controls:GridEx.ColumnWidths="*,Auto">
                                <TextBlock Margin="2,1,2,2" Foreground="{DynamicResource CODE.Framework-Application-ForegroundBrush3}" 
                                           FontFamily="{DynamicResource DefaultFont}" 
                                           FontSize="{DynamicResource FontSize-Smaller}">Notifications</TextBlock>
                                <controls1:CloseNotificationsButton Grid.Column="1" />
                            </Grid>
                            <TabControl TabStripPlacement="Bottom" Grid.Row="1">
                                <TabItem Header="Notifications">
                                    <ListBox VerticalAlignment="Stretch" HorizontalAlignment="Stretch" 
                                             ItemsSource="{TemplateBinding CurrentNotifications}" 
                                             FontSize="{DynamicResource FontSize-Smaller}" Margin="-2" BorderBrush="{x:Null}" 
                                             Background="{DynamicResource CODE.Framework-Application-BackgroundBrush1}">
                                        <ListBox.ItemTemplate>
                                            <DataTemplate>
                                                <ContentControl Content="{Binding View}" Margin="1" />
                                            </DataTemplate>
                                        </ListBox.ItemTemplate>
                                        <controls:ListEx.Columns>
                                            <controls:ListColumnsCollection>
                                                <controls:ListColumn Width="150" IsResizable="True" BindingPath="Text1" Header="Title" />
                                                <controls:ListColumn Width="500" IsResizable="True" BindingPath="Text2" Header="Description" />
                                            </controls:ListColumnsCollection>
                                        </controls:ListEx.Columns>
                                    </ListBox>
                                </TabItem>
                            </TabControl>
                        </Grid>
                        <Grid VerticalAlignment="Stretch" HorizontalAlignment="Stretch" Grid.Row="5" x:Name="statusGrid"
                              Background="{DynamicResource CODE.Framework-Workplace-StatusReadyBackgroundBrush}" controls:GridEx.ColumnWidths="*,Auto,Auto" >
                            <ContentControl Content="{TemplateBinding CurrentStatusView}" x:Name="statusContent"
                                            FontFamily="{DynamicResource DefaultFont}" FontSize="{DynamicResource FontSize-Normal}"
                                            VerticalAlignment="Stretch" HorizontalAlignment="Stretch"
                                            VerticalContentAlignment="Center" Margin="8,2,200,0"
                                            Foreground="{DynamicResource CODE.Framework-Workplace-StatusReadyForegroundBrush}"/>
                            <mvvm:ModelStatusGrid Model="{Binding SelectedNormalViewResult.Model, RelativeSource={RelativeSource FindAncestor, AncestorType=mvvm:Shell}}" VerticalAlignment="Center" HorizontalAlignment="Stretch" Grid.Column="1" x:Name="modelStatus">
                                <mvvm:ModelStatusGrid.Resources>
                                    <mvvm:ModelStatusToVisibleConverter x:Key="ModelStatusToVisibleConverter" />
                                </mvvm:ModelStatusGrid.Resources>
                                <ProgressBar Visibility="{Binding Path=ModelStatus, ElementName=modelStatus, Converter={StaticResource ModelStatusToVisibleConverter}}" IsIndeterminate="True" Height="16" Width="100" Margin="0,0,5,0"/>
                            </mvvm:ModelStatusGrid>
                            <controls1:GeekShellZoomSlider Foreground="{DynamicResource CODE.Framework-Workplace-StatusReadyForegroundBrush}" 
                                                           Width="125" MinimumZoom=".5" MaximumZoom="2.5"
                                                           Margin="10,0" VerticalAlignment="Stretch" Grid.Column="2" />
                        </Grid>
                    </Grid>
                    <ControlTemplate.Resources>
                        <Storyboard x:Key="ShowFileMenuOverlay">
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="fileButtonOverlay">
                                <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}"/>
                            </ObjectAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)" Storyboard.TargetName="fileOverlayMenu">
                                <EasingDoubleKeyFrame KeyTime="0" Value="-75"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.15" Value="0">
                                    <EasingDoubleKeyFrame.EasingFunction>
                                        <CubicEase EasingMode="EaseOut"/>
                                    </EasingDoubleKeyFrame.EasingFunction>
                                </EasingDoubleKeyFrame>
                            </DoubleAnimationUsingKeyFrames>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="fileOverlayUI">
                                <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}"/>
                            </ObjectAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="fileOverlayUI">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.25" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="topLevelViews">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.25" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Key="HideFileMenuOverlay">
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="fileButtonOverlay">
                                <DiscreteObjectKeyFrame KeyTime="0:0:0.1" Value="{x:Static Visibility.Collapsed}"/>
                            </ObjectAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)" Storyboard.TargetName="fileOverlayMenu">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.07" Value="-75"/>
                            </DoubleAnimationUsingKeyFrames>
                            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Visibility)" Storyboard.TargetName="fileOverlayUI">
                                <DiscreteObjectKeyFrame KeyTime="0:0:0.15" Value="{x:Static Visibility.Hidden}"/>
                            </ObjectAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="fileOverlayUI">
                                <EasingDoubleKeyFrame KeyTime="0" Value="1"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.15" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="topLevelViews">
                                <EasingDoubleKeyFrame KeyTime="0" Value="1"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.15" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </ControlTemplate.Resources>
                    <ControlTemplate.Triggers>
                        <Trigger Property="CurrentNotificationsCount" Value="0">
                            <Setter Property="Visibility" TargetName="notifications" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="IsActive" Value="False">
                            <Setter Property="Opacity" TargetName="windowTitle" Value=".66" />
                        </Trigger>
                        <Trigger Property="CurrentApplicationStatus" Value="Processing">
                            <Setter Property="Background" TargetName="statusGrid" Value="{DynamicResource CODE.Framework-Workplace-StatusProcessingBackgroundBrush}"/>
                            <Setter Property="Foreground" TargetName="statusContent" Value="{DynamicResource CODE.Framework-Workplace-StatusProcessingForegroundBrush}"/>
                        </Trigger>
                        <Trigger Property="CurrentApplicationStatus" Value="Warning">
                            <Setter Property="Background" TargetName="statusGrid" Value="{DynamicResource CODE.Framework-Workplace-StatusWarningBackgroundBrush}"/>
                            <Setter Property="Foreground" TargetName="statusContent" Value="{DynamicResource CODE.Framework-Workplace-StatusWarningForegroundBrush}"/>
                        </Trigger>
                        <Trigger Property="CurrentApplicationStatus" Value="Error">
                            <Setter Property="Background" TargetName="statusGrid" Value="{DynamicResource CODE.Framework-Workplace-StatusErrorBackgroundBrush}"/>
                            <Setter Property="Foreground" TargetName="statusContent" Value="{DynamicResource CODE.Framework-Workplace-StatusErrorForegroundBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="TabControl" x:Key="CODE.Framework.Wpf.Mvvm.Shell-NormalViewsHost" >
        <Setter Property="Background" Value="{x:Null}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabControl}">
                    <Grid ClipToBounds="true" SnapsToDevicePixels="true" KeyboardNavigation.TabNavigation="Local" controls:GridEx.RowHeights="Auto,*">
                        <TabPanel IsItemsHost="true" Margin="15,0,2,0" KeyboardNavigation.TabIndex="1" Panel.ZIndex="1"/>
                        <ContentPresenter x:Name="PART_SelectedContentHost" ContentSource="SelectedContent" Margin="0" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Grid.Row="1" KeyboardNavigation.TabIndex="2" KeyboardNavigation.TabNavigation="Local"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Grid controls:GridEx.RowHeights="4,*">
                        <Border Background="{DynamicResource CODE.Framework-Application-ToolbarButtonHighlightBrush1}" BorderThickness="0,0,0,1" BorderBrush="Gray"/>
                        <AdornerDecorator Grid.Row="1">
                            <ContentControl Content="{Binding View}">
                                <ContentControl.LayoutTransform>
                                    <ScaleTransform ScaleX="{Binding Path=DesiredContentZoomFactor, Source={x:Static mvvm:Shell.Current}}" 
                                                    ScaleY="{Binding Path=DesiredContentZoomFactor, Source={x:Static mvvm:Shell.Current}}" />
                                </ContentControl.LayoutTransform>
                            </ContentControl>
                        </AdornerDecorator>
                    </Grid>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemContainerStyle" Value="{DynamicResource CODE.Framework.Wpf.Mvvm.Shell-ViewHost}"/>
    </Style>

    <Style TargetType="TabItem" x:Key="CODE.Framework.Wpf.Mvvm.Shell-ViewHost">
        <Setter Property="Header" Value="{Binding ViewTitle}" />
        <Setter Property="Padding" Value="8,1,15,0" />
        <Setter Property="FontFamily" Value="{DynamicResource DefaultFont}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSize-Normal}" />
        <Setter Property="Background" Value="{DynamicResource CODE.Framework-Application-ToolbarButtonHighlightBrush1}" />
        <Setter Property="Foreground" Value="{DynamicResource CODE.Framework-Application-ForegroundBrush3}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TabItem">
                    <Grid SnapsToDevicePixels="true">
                        <Border x:Name="Bd" Background="{x:Null}" Padding="{TemplateBinding Padding}">
                            <ContentPresenter x:Name="Content" ContentSource="Header" HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="true">
                            <Setter Property="Panel.ZIndex" Value="1"/>
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource CODE.Framework-Application-ToolbarButtonHighlightBrush1}"/>
                            <Setter Property="Margin" Value="-2,-2,-2,-1"/>
                            <Setter Property="Margin" TargetName="Content" Value="0,0,0,1"/>
                            <Setter Property="Foreground" Value="{DynamicResource CODE.Framework-Application-ForegroundBrush1}"/>
                            <Setter Property="FontWeight" Value="Bold" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="TextBlock" x:Key="CODE.Framework.Wpf.Mvvm.Shell-MessageBox-Text">
        <Setter Property="Foreground" Value="{DynamicResource CODE.Framework-Application-ForegroundBrush1}" />
        <Setter Property="FontFamily" Value="{DynamicResource DefaultFont}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSize-Normal}" />
        <Setter Property="Margin" Value="15,10,20,10" />
        <Setter Property="MinWidth" Value="200" />
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>

    <Style TargetType="Rectangle" x:Key="CODE.Framework.Wpf.Mvvm.Shell-MessageBox-Image">
        <Setter Property="Margin" Value="20,15,10,10" />
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="Height" Value="48" />
        <Setter Property="Width" Value="48" />
    </Style>

    <DataTemplate x:Key="NotificationItemTemplate">
        <ContentControl Content="{Binding View}" Foreground="{DynamicResource CODE.Framework-Metro-NotificationForegroundBrush}"
                        Margin="5,10" VerticalAlignment="Top" HorizontalAlignment="Stretch"/>
    </DataTemplate>

    <Style TargetType="mvvm:ViewActionToolbar">
        <Setter Property="Margin" Value="5,2,5,4" />
    </Style>

    <Style TargetType="mvvm:ViewActionToolbarButton">
        <Setter Property="MinHeight" Value="22" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="mvvm:ViewActionToolbarButton">
                    <Grid controls:GridEx.ColumnWidths="Auto,Auto">
                        <Border x:Name="highlight" Background="{DynamicResource CODE.Framework-Application-ToolbarButtonHighlightBrush1}" BorderBrush="{DynamicResource CODE.Framework-Application-ToolbarButtonHighlightBrush2}" BorderThickness="1" Visibility="Hidden" Grid.ColumnSpan="2" />
                        <Border x:Name="checked" Background="{DynamicResource CODE.Framework-Application-ToolbarButtonHighlightBrush2}" BorderBrush="{DynamicResource CODE.Framework-Application-ToolbarButtonHighlightBrush1}" BorderThickness="1" Visibility="Hidden" Opacity=".5" Grid.ColumnSpan="2" />
                        <mvvm:ThemeIcon IconResourceKey="{Binding Action.BrushResourceKey, RelativeSource={RelativeSource TemplatedParent}}" Height="14" Width="14" x:Name="icon" Margin="4" />
                        <TextBlock Text="{TemplateBinding Title}" FontFamily="{DynamicResource DefaultFont}" FontSize="{DynamicResource FontSize-Normal}" Grid.Column="1" VerticalAlignment="Center" Margin="4,2" x:Name="title" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasIcon" Value="False">
                            <Setter TargetName="icon" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="title" Property="Margin" Value="6,2" />
                        </Trigger>
                        <Trigger Property="HasTitle" Value="False">
                            <Setter TargetName="title" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="highlight" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="checked" Property="Visibility" Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="mvvm:ViewActionToolbarSeparator">
        <Setter Property="Width" Value="7" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Separator">
                    <Border Width="2" BorderBrush="Black" Opacity=".25" BorderThickness="1,0,0,0" Margin="2,2,3,2" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="controls:CloseButton">
        <Setter Property="Width" Value="28"/>
        <Setter Property="Height" Value="22"/>
        <Setter Property="Margin" Value="1,0,0,0"/>
        <Setter Property="Cursor" Value="Arrow"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="controls:CloseButton">
                    <Grid>
                        <Rectangle x:Name="bg" Fill="Transparent" IsHitTestVisible="True" Stroke="Transparent" StrokeThickness="1" />
                        <Border Width="12" Height="2" BorderThickness="1" RenderTransformOrigin=".5,.5"
                                                        VerticalAlignment="Center" HorizontalAlignment="Center"
                                                        BorderBrush="{DynamicResource CODE.Framework-Application-ForegroundBrush1}">
                            <Border.RenderTransform>
                                <RotateTransform Angle="45" />
                            </Border.RenderTransform>
                        </Border>
                        <Border Width="12" Height="2" BorderThickness="1" RenderTransformOrigin=".5,.5"
                                                        VerticalAlignment="Center" HorizontalAlignment="Center"
                                                        BorderBrush="{DynamicResource CODE.Framework-Application-ForegroundBrush1}">
                            <Border.RenderTransform>
                                <RotateTransform Angle="-45" />
                            </Border.RenderTransform>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Fill" Value="{DynamicResource CODE.Framework-Application-ToolbarButtonHighlightBrush1}" TargetName="bg" />
                            <Setter Property="Stroke" Value="{DynamicResource CODE.Framework-Application-ToolbarButtonHighlightBrush2}" TargetName="bg" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="controls:ToggleMaximizeButton">
        <Setter Property="Width" Value="28"/>
        <Setter Property="Height" Value="22"/>
        <Setter Property="Margin" Value="1,0,0,0"/>
        <Setter Property="Cursor" Value="Arrow"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="controls:ToggleMaximizeButton">
                    <Grid>
                        <Rectangle x:Name="bg" Fill="Transparent" Stroke="Transparent" StrokeThickness="1" IsHitTestVisible="True" />
                        <Border Width="10" Height="10" BorderThickness="1,3,1,1" x:Name="norm"
                                VerticalAlignment="Center" HorizontalAlignment="Center" 
                                BorderBrush="{DynamicResource CODE.Framework-Application-ForegroundBrush1}" />
                        <Border Width="8" Height="8" BorderThickness="1,2,1,1" Margin="4,0,0,4" x:Name="max2"
                                VerticalAlignment="Center" HorizontalAlignment="Center" Visibility="Collapsed"
                                BorderBrush="{DynamicResource CODE.Framework-Application-ForegroundBrush1}" />
                        <Border Width="8" Height="8" BorderThickness="1,2,1,1" Margin="0,2,2,0" x:Name="max1"
                                VerticalAlignment="Center" HorizontalAlignment="Center" Visibility="Collapsed"
                                BorderBrush="{DynamicResource CODE.Framework-Application-ForegroundBrush1}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Fill" Value="{DynamicResource CODE.Framework-Application-ToolbarButtonHighlightBrush1}" TargetName="bg" />
                            <Setter Property="Stroke" Value="{DynamicResource CODE.Framework-Application-ToolbarButtonHighlightBrush2}" TargetName="bg" />
                        </Trigger>
                        <Trigger Property="IsMaximized" Value="True">
                            <Setter Property="Visibility" Value="Collapsed" TargetName="norm"/>
                            <Setter Property="Visibility" Value="Visible" TargetName="max1"/>
                            <Setter Property="Visibility" Value="Visible" TargetName="max2"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="controls:MinimizeButton">
        <Setter Property="Width" Value="28"/>
        <Setter Property="Height" Value="22"/>
        <Setter Property="Margin" Value="1,0,0,0"/>
        <Setter Property="Cursor" Value="Arrow"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="controls:MinimizeButton">
                    <Grid>
                        <Rectangle x:Name="bg" Fill="Transparent" StrokeThickness="1" Stroke="Transparent" IsHitTestVisible="True" />
                        <Border Width="10" Height="8" BorderThickness="0,0,0,2"
                                VerticalAlignment="Center" HorizontalAlignment="Center"
                                BorderBrush="{DynamicResource CODE.Framework-Application-ForegroundBrush1}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Fill" Value="{DynamicResource CODE.Framework-Application-ToolbarButtonHighlightBrush1}" TargetName="bg" />
                            <Setter Property="Stroke" Value="{DynamicResource CODE.Framework-Application-ToolbarButtonHighlightBrush2}" TargetName="bg" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="controls1:CloseNotificationsButton">
        <Setter Property="Width" Value="15"/>
        <Setter Property="Height" Value="15"/>
        <Setter Property="Margin" Value="1"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="Cursor" Value="Arrow"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="controls1:CloseNotificationsButton">
                    <Grid>
                        <Rectangle x:Name="bg" Fill="Transparent" IsHitTestVisible="True" Stroke="Transparent" StrokeThickness="1" />
                        <Border Width="10" Height="2" BorderThickness="1" RenderTransformOrigin=".5,.5"
                                VerticalAlignment="Center" HorizontalAlignment="Center" x:Name="l1"
                                BorderBrush="{DynamicResource CODE.Framework-Application-ForegroundBrush3}">
                            <Border.RenderTransform>
                                <RotateTransform Angle="45" />
                            </Border.RenderTransform>
                        </Border>
                        <Border Width="10" Height="2" BorderThickness="1" RenderTransformOrigin=".5,.5"
                                VerticalAlignment="Center" HorizontalAlignment="Center" x:Name="l2"
                                BorderBrush="{DynamicResource CODE.Framework-Application-ForegroundBrush3}">
                            <Border.RenderTransform>
                                <RotateTransform Angle="-45" />
                            </Border.RenderTransform>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Fill" Value="{DynamicResource CODE.Framework-Application-ToolbarButtonHighlightBrush1}" TargetName="bg" />
                            <Setter Property="Stroke" Value="{DynamicResource CODE.Framework-Application-ToolbarButtonHighlightBrush2}" TargetName="bg" />
                            <Setter Property="BorderBrush" Value="{DynamicResource CODE.Framework-Application-ForegroundBrush1}" TargetName="l1" />
                            <Setter Property="BorderBrush" Value="{DynamicResource CODE.Framework-Application-ForegroundBrush1}" TargetName="l2" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>